CREATE TABLE [dbo].[TComponentTopic] (
    [CComponentNo] BIGINT NOT NULL,
    [CTopicNo]     INT    NOT NULL,
    PRIMARY KEY CLUSTERED ([CComponentNo] ASC, [CTopicNo] ASC),
    CONSTRAINT [FK9155FFA644F3BF8] FOREIGN KEY ([CComponentNo]) REFERENCES [dbo].[TComponent] ([CComponentNo]),
    CONSTRAINT [FK9155FFA64D909E5C] FOREIGN KEY ([CTopicNo]) REFERENCES [dbo].[TTopic] ([CTopicNo])
);


GO

CREATE TABLE [dbo].[TSingleSignOnKey2] (
    [CTempKey]     NVARCHAR (100) NOT NULL,
    [CStaffId]     NVARCHAR (30)  NOT NULL,
    [CStaffNo]     NVARCHAR (30)  NULL,
    [CStaffName]   NVARCHAR (50)  NULL,
    [CRegDateTime] DATETIME       NOT NULL,
    [CVolatility]  BIT            NULL,
    [CTemp1]       NVARCHAR (255) NULL,
    [CTemp2]       NVARCHAR (255) NULL,
    [CTemp3]       NVARCHAR (255) NULL,
    [CTemp4]       NVARCHAR (255) NULL,
    [CTemp5]       NVARCHAR (255) NULL,
    [CText1]       NTEXT          NULL,
    [CText2]       NTEXT          NULL,
    [CText3]       NTEXT          NULL,
    [CText4]       NTEXT          NULL,
    [CText5]       NTEXT          NULL,
    [CCopyTime]    DATETIME       NOT NULL,
    PRIMARY KEY CLUSTERED ([CTempKey] ASC)
);


GO

CREATE TABLE [dbo].[TStudentCounsel_20150422] (
    [CScDepartCode]      NVARCHAR (20)  NOT NULL,
    [CScDepartStartDate] DATETIME       NOT NULL,
    [CScCode]            NVARCHAR (50)  NOT NULL,
    [CNo]                INT            NOT NULL,
    [CRegistType]        NVARCHAR (50)  NULL,
    [CAttendType]        NVARCHAR (50)  NULL,
    [CMonday]            BIT            NULL,
    [CTuesday]           BIT            NULL,
    [CWednesday]         BIT            NULL,
    [CThursday]          BIT            NULL,
    [CFriday]            BIT            NULL,
    [CSaturday]          BIT            NULL,
    [CSunday]            BIT            NULL,
    [CManager]           NVARCHAR (30)  NULL,
    [CDeaultStartDate]   DATETIME       NULL,
    [CDeaultEndDate]     DATETIME       NULL,
    [CStartDate]         DATETIME       NULL,
    [CEndDate]           DATETIME       NULL,
    [CManageDays]        INT            NULL,
    [CFreeDays]          INT            NULL,
    [CFreeComment]       NVARCHAR (255) NULL,
    [CPayDays]           INT            NULL,
    [CChangeDateReason]  NVARCHAR (255) NULL,
    [CBillPrice]         INT            NULL,
    [CTestDCPrice]       INT            NULL,
    [CPayPrice]          INT            NULL,
    [CTotalPrice]        INT            NULL,
    [CChangePriceReason] NVARCHAR (255) NULL,
    [CPayDate]           DATETIME       NULL,
    [CRoyaltyRate]       INT            NULL,
    [CRoyalty]           INT            NULL,
    [CRoyaltyPayDate]    DATETIME       NULL,
    [CChk]               NVARCHAR (255) NULL
);


GO

CREATE TABLE [dbo].[TTestStar] (
    [CGrade]        NVARCHAR (50)  NOT NULL,
    [CNo]           INT            NOT NULL,
    [CName]         NVARCHAR (100) NOT NULL,
    [CAverage]      FLOAT (53)     NOT NULL,
    [CStdDeviation] FLOAT (53)     NOT NULL,
    CONSTRAINT [PK_TTestStar] PRIMARY KEY CLUSTERED ([CGrade] ASC, [CNo] ASC)
);


GO

CREATE TABLE [dbo].[TReportStudent] (
    [CCode]              NVARCHAR (50) NOT NULL,
    [CStDepartCode]      NVARCHAR (20) NULL,
    [CStDepartStartDate] DATETIME      NULL,
    [CStCode]            NVARCHAR (50) NULL,
    [CReportPattern]     NVARCHAR (50) NULL,
    [CStartDate]         DATETIME      NULL,
    [CEndDate]           DATETIME      NULL,
    [CSendTime]          DATETIME      NULL,
    [CRegTime]           DATETIME      NOT NULL,
    [CEditTime]          DATETIME      NOT NULL,
    [CRegStaffId]        NVARCHAR (30) NULL,
    [CEditStaffId]       NVARCHAR (30) NULL,
    [CApprovalStatus]    NVARCHAR (15) NULL,
    [CToDoId]            BIGINT        NULL,
    PRIMARY KEY CLUSTERED ([CCode] ASC),
    CONSTRAINT [FK_9y1k52k95m2232dvy59kn9cm3] FOREIGN KEY ([CToDoId]) REFERENCES [dbo].[TToDo] ([CId]),
    CONSTRAINT [FKA7739A7319E633C8] FOREIGN KEY ([CRegStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FKA7739A731D7B183] FOREIGN KEY ([CReportPattern]) REFERENCES [dbo].[TReportPattern] ([CCode]),
    CONSTRAINT [FKA7739A736F88FD24] FOREIGN KEY ([CStDepartCode], [CStDepartStartDate], [CStCode]) REFERENCES [dbo].[TStudent] ([CBranchCode], [CBranchStartDate], [CCode]),
    CONSTRAINT [FKA7739A7378DF60AC] FOREIGN KEY ([CEditStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[tbl_TutorDcHistory] (
    [idSeq]         INT            IDENTITY (1, 1) NOT NULL,
    [dcDate]        DATETIME       DEFAULT (NULL) NULL,
    [branchCode]    NVARCHAR (20)  DEFAULT (NULL) NULL,
    [tutorCode]     INT            DEFAULT (NULL) NULL,
    [dcCount]       INT            DEFAULT ((0)) NULL,
    [nightPayCount] INT            DEFAULT ((0)) NULL,
    [dcMemo]        NVARCHAR (255) DEFAULT (NULL) NULL
);


GO

CREATE TABLE [dbo].[TComplaintContent] (
    [CId]                 BIGINT         IDENTITY (1, 1) NOT NULL,
    [CRegTime]            DATETIME       NULL,
    [CRegSystemTime]      DATETIME       NULL,
    [CNo]                 NVARCHAR (50)  NULL,
    [CReceiveMethod]      NVARCHAR (255) NULL,
    [CRegisterType]       NVARCHAR (255) NULL,
    [CRegStaffId]         NVARCHAR (30)  NULL,
    [CRegIp]              NVARCHAR (50)  NULL,
    [CUpdTime]            DATETIME       NULL,
    [CResponserName]      NVARCHAR (255) NULL,
    [CEarlyLeadMin]       INT            NULL,
    [CTransfer]           BIT            NULL,
    [COfficeEndTime]      DATETIME       NULL,
    [COfficeTransferTime] DATETIME       NULL,
    [CRegOfficeId]        BIGINT         NULL,
    [CRegDepartName]      NVARCHAR (100) NULL,
    [COfficeMasterId]     NVARCHAR (30)  NULL,
    [COfficeConfirmTime]  DATETIME       NULL,
    [CPetitionerId]       BIGINT         NULL,
    [CName]               NVARCHAR (50)  NOT NULL,
    [CMobileNo]           NVARCHAR (50)  NOT NULL,
    [CEmail]              NVARCHAR (100) NULL,
    [CPostNo]             NVARCHAR (10)  NULL,
    [CAddress1]           NVARCHAR (200) NULL,
    [CAddress2]           NVARCHAR (200) NULL,
    [CAllowPrivate]       NVARCHAR (20)  NULL,
    [CTitle]              NVARCHAR (255) NULL,
    [CBody]               NTEXT          NULL,
    [CTreatType]          NVARCHAR (20)  NULL,
    [CMoniterStaff]       NVARCHAR (255) NULL,
    [CMoniteredTime]      DATETIME       NULL,
    [CSurveyType1]        BIGINT         NULL,
    [CAnswerNo1]          INT            NULL,
    [CAnswerStr1]         NVARCHAR (255) NULL,
    [CSurveyType2]        BIGINT         NULL,
    [CAnswerNo2]          INT            NULL,
    [CAnswerStr2]         NVARCHAR (255) NULL,
    [CSurveyType3]        BIGINT         NULL,
    [CAnswerNo3]          INT            NULL,
    [CAnswerStr3]         NVARCHAR (255) NULL,
    [CTotalState]         NVARCHAR (20)  NULL,
    [CTotalEnded]         BIT            NULL,
    [CTotalEndTime]       DATETIME       NULL,
    [CTotalLeadMin]       INT            NULL,
    [CTotalResult]        NTEXT          NULL,
    [CTotalEndReason]     NTEXT          NULL,
    [CNoticeTransferTime] DATETIME       NULL,
    [CNoticeEndTime]      DATETIME       NULL,
    PRIMARY KEY CLUSTERED ([CId] ASC),
    CONSTRAINT [FK_4xopwjnda8jvpkk7k1kqiexsv] FOREIGN KEY ([CSurveyType3]) REFERENCES [dbo].[TComplaintSurveyType] ([CId]),
    CONSTRAINT [FK_5thb5kq6gjf43f8jcbeqd5c3i] FOREIGN KEY ([CPetitionerId]) REFERENCES [dbo].[TComplaintPetitioner] ([CId]),
    CONSTRAINT [FK_9sf754p85bm5wdtg6jj33xpdm] FOREIGN KEY ([CSurveyType1]) REFERENCES [dbo].[TComplaintSurveyType] ([CId]),
    CONSTRAINT [FK_fy2jrfsjchb9gekr9f09xjg46] FOREIGN KEY ([CRegStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_gwk7dtx6nyilhfn6xakyfg706] FOREIGN KEY ([COfficeMasterId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_h72rlhny6hflff1uhu20d9njd] FOREIGN KEY ([CSurveyType2]) REFERENCES [dbo].[TComplaintSurveyType] ([CId]),
    CONSTRAINT [FK_o681c7lauksrul7dha0srtddd] FOREIGN KEY ([CRegOfficeId]) REFERENCES [dbo].[TComplaintOffice] ([CId])
);


GO

CREATE TABLE [dbo].[TAccountingExpense] (
    [CBrDepartCode]      NVARCHAR (20)  NOT NULL,
    [CBrDepartStartDate] DATETIME       NOT NULL,
    [CNo]                INT            NOT NULL,
    [CAccountingDate]    DATETIME       NULL,
    [CSubject]           NVARCHAR (255) NULL,
    [CCash]              BIGINT         NULL,
    [CCard]              BIGINT         NULL,
    [CBaDepartCode]      NVARCHAR (20)  NULL,
    [CBaDepartStartDate] DATETIME       NULL,
    [CBrCode]            NVARCHAR (50)  NULL,
    [CCcDepartCode]      NVARCHAR (20)  NULL,
    [CCcDepartStartDate] DATETIME       NULL,
    [CCcCode]            NVARCHAR (50)  NULL,
    [CAccCode]           NVARCHAR (15)  NULL,
    [CTag]               NVARCHAR (255) NULL,
    [CAutoStatement]     BIT            NULL,
    [CStatementCode]     NVARCHAR (255) NULL,
    [CStatementComment]  NVARCHAR (255) NULL,
    [CRegTime]           DATETIME       NULL,
    [CStaffId]           NVARCHAR (30)  NULL,
    PRIMARY KEY CLUSTERED ([CBrDepartCode] ASC, [CBrDepartStartDate] ASC, [CNo] ASC),
    CONSTRAINT [FK75926E0F2D35EBE2] FOREIGN KEY ([CBrDepartCode], [CBrDepartStartDate]) REFERENCES [dbo].[TFacility] ([CDepartCode], [CDepartStartDate]),
    CONSTRAINT [FK75926E0F683DA160] FOREIGN KEY ([CAccCode]) REFERENCES [dbo].[TAccountCode] ([CCode]),
    CONSTRAINT [FK75926E0F9E3C3476] FOREIGN KEY ([CStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK75926E0FA4FFB5C3] FOREIGN KEY ([CBaDepartCode], [CBaDepartStartDate], [CBrCode]) REFERENCES [dbo].[TBankAccount] ([CBrDepartCode], [CBrDepartStartDate], [CCode]),
    CONSTRAINT [FK75926E0FFBF7A481] FOREIGN KEY ([CCcDepartCode], [CCcDepartStartDate], [CCcCode]) REFERENCES [dbo].[TCreditCard] ([CBrDepartCode], [CBrDepartStartDate], [CCode])
);


GO

CREATE TABLE [dbo].[THpMemberMap] (
    [CHpMemberId]  BIGINT        NOT NULL,
    [CStaffId]     NVARCHAR (30) NOT NULL,
    [CGwStaffId]   NVARCHAR (30) NOT NULL,
    [CGwStaffName] NVARCHAR (50) NULL,
    [CApplyOrder]  INT           NOT NULL,
    PRIMARY KEY CLUSTERED ([CHpMemberId] ASC, [CStaffId] ASC, [CGwStaffId] ASC),
    CONSTRAINT [FK_es6qf7f7hmdgg5ogc9q1ervim] FOREIGN KEY ([CStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_o70qqn9wiug5u4520esj2dumw] FOREIGN KEY ([CHpMemberId]) REFERENCES [dbo].[THpMember] ([CMemberId])
);


GO

CREATE TABLE [dbo].[TSalaryTax] (
    [CTaxYear]       INT            NOT NULL,
    [CSalaryMin]     INT            NOT NULL,
    [CSalaryMax]     INT            NOT NULL,
    [CCalculation]   BIT            NULL,
    [CCalcFunction]  NVARCHAR (255) NULL,
    [CFamilyCount1]  INT            NULL,
    [CFamilyCount2]  INT            NULL,
    [CFamilyCount3]  INT            NULL,
    [CFamilyCount4]  INT            NULL,
    [CFamilyCount5]  INT            NULL,
    [CFamilyCount6]  INT            NULL,
    [CFamilyCount7]  INT            NULL,
    [CFamilyCount8]  INT            NULL,
    [CFamilyCount9]  INT            NULL,
    [CFamilyCount10] INT            NULL,
    [CFamilyCount11] INT            NULL,
    PRIMARY KEY CLUSTERED ([CTaxYear] ASC, [CSalaryMin] ASC, [CSalaryMax] ASC)
);


GO

CREATE TABLE [dbo].[TVltType] (
    [CTypeNo]   INT            NOT NULL,
    [CTypeName] NVARCHAR (255) NULL,
    CONSTRAINT [PK__TVltType__E83DBA56270FB757] PRIMARY KEY CLUSTERED ([CTypeNo] ASC)
);


GO

CREATE TABLE [dbo].[TApprFolder] (
    [CFolderId]      INT           IDENTITY (1, 1) NOT NULL,
    [CName0]         NVARCHAR (50) NOT NULL,
    [CName1]         NVARCHAR (50) NULL,
    [CName2]         NVARCHAR (50) NULL,
    [CName3]         NVARCHAR (50) NULL,
    [CName4]         NVARCHAR (50) NULL,
    [CDepth]         INT           NOT NULL,
    [CDisplayIndex]  INT           NULL,
    [CAccessLevelId] INT           NULL,
    [CAllowInherit]  BIT           NULL,
    [CRemark]        NTEXT         NULL,
    [CParentId]      INT           NULL,
    PRIMARY KEY CLUSTERED ([CFolderId] ASC),
    CONSTRAINT [FK3E6CFDB354BAC96D] FOREIGN KEY ([CAccessLevelId]) REFERENCES [dbo].[TApprSecurityLevel] ([CLevelId]),
    CONSTRAINT [FK3E6CFDB36E47325] FOREIGN KEY ([CParentId]) REFERENCES [dbo].[TApprFolder] ([CFolderId])
);


GO

CREATE TABLE [dbo].[TLocker] (
    [CLockerSeq] INT            IDENTITY (1, 1) NOT NULL,
    [CNo]        INT            NOT NULL,
    [CSex]       NVARCHAR (255) NOT NULL,
    [CLocation]  NVARCHAR (255) NULL,
    [CTrouble]   BIT            NULL,
    PRIMARY KEY CLUSTERED ([CLockerSeq] ASC)
);


GO

CREATE TABLE [dbo].[TStudentWeekPlan] (
    [CStudentBranchCode]      NVARCHAR (20)  NOT NULL,
    [CStudentBranchStartDate] DATETIME       NOT NULL,
    [CStudentCode]            NVARCHAR (50)  NOT NULL,
    [CWeekFirst]              DATETIME       NOT NULL,
    [CWeekLast]               DATETIME       NULL,
    [CMonday]                 BIT            NULL,
    [CTuesday]                BIT            NULL,
    [CWednesday]              BIT            NULL,
    [CThursday]               BIT            NULL,
    [CFriday]                 BIT            NULL,
    [CSaturday]               BIT            NULL,
    [CSunday]                 BIT            NULL,
    [CAttendType]             NVARCHAR (255) NULL,
    CONSTRAINT [PK_TStudentWeekPlan] PRIMARY KEY CLUSTERED ([CStudentBranchCode] ASC, [CStudentBranchStartDate] ASC, [CStudentCode] ASC, [CWeekFirst] ASC),
    CONSTRAINT [FK_TStudent_TStudentWeekPlan] FOREIGN KEY ([CStudentBranchCode], [CStudentBranchStartDate], [CStudentCode]) REFERENCES [dbo].[TStudent] ([CBranchCode], [CBranchStartDate], [CCode])
);


GO

CREATE TABLE [dbo].[Users] (
    [username]           NVARCHAR (64)  NOT NULL,
    [pwdHash]            NVARCHAR (50)  NULL,
    [pwdAlgorithm]       NVARCHAR (20)  NULL,
    [useForwarding]      INT            NULL,
    [forwardDestination] NVARCHAR (255) NULL,
    [useAlias]           INT            NULL,
    [alias]              NVARCHAR (255) NULL,
    PRIMARY KEY CLUSTERED ([username] ASC)
);


GO

CREATE TABLE [dbo].[TBizWeekly4DptFile] (
    [CBizDate]      DATETIME      NOT NULL,
    [CGroupId]      NVARCHAR (20) NOT NULL,
    [CBizGroupCode] NVARCHAR (50) NOT NULL,
    [CBizCodeCode]  NVARCHAR (50) NOT NULL,
    [CAttachId]     BIGINT        NOT NULL,
    [CSeq]          INT           NULL,
    PRIMARY KEY CLUSTERED ([CBizDate] ASC, [CGroupId] ASC, [CBizGroupCode] ASC, [CBizCodeCode] ASC, [CAttachId] ASC),
    CONSTRAINT [FK_9naly0ciff22t2chps5th11sk] FOREIGN KEY ([CAttachId]) REFERENCES [dbo].[TFile] ([CFileId]),
    CONSTRAINT [FK_fjkb9s9ke3pgm5v4v7fkbkchw] FOREIGN KEY ([CBizDate], [CGroupId], [CBizGroupCode], [CBizCodeCode]) REFERENCES [dbo].[TBizWeekly4Dpt] ([CBizDate], [CGroupId], [CBizCodeGroup], [CBizCodeCode])
);


GO

CREATE TABLE [dbo].[__Tmp] (
    [col01] VARCHAR (50) NULL,
    [col02] VARCHAR (50) NULL,
    [col03] VARCHAR (50) NULL,
    [col04] VARCHAR (50) NULL,
    [col05] VARCHAR (50) NULL,
    [col06] VARCHAR (50) NULL,
    [col07] VARCHAR (50) NULL,
    [col08] VARCHAR (50) NULL,
    [col09] VARCHAR (50) NULL,
    [col10] VARCHAR (50) NULL,
    [col11] VARCHAR (50) NULL,
    [col12] VARCHAR (50) NULL,
    [col13] VARCHAR (50) NULL
);


GO

CREATE TABLE [dbo].[TAcademicSeasonSchool] (
    [CAsCode]            NVARCHAR (50) NOT NULL,
    [CAsDepartCode]      NVARCHAR (20) NOT NULL,
    [CAsDepartStartDate] DATETIME      NOT NULL,
    [CSchoolCode]        NVARCHAR (50) NOT NULL,
    [CStartDate]         DATETIME      NULL,
    [CEndDate]           DATETIME      NULL,
    [CRegDate]           DATETIME      NULL,
    [CRegStaffId]        NVARCHAR (30) NULL,
    PRIMARY KEY CLUSTERED ([CAsCode] ASC, [CAsDepartCode] ASC, [CAsDepartStartDate] ASC, [CSchoolCode] ASC),
    CONSTRAINT [FK5AA43D5219E633C8] FOREIGN KEY ([CRegStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK5AA43D52AB0B0D62] FOREIGN KEY ([CAsCode], [CAsDepartCode], [CAsDepartStartDate]) REFERENCES [dbo].[TAcademicSeason] ([CCode], [CDepartCode], [CDepartStartDate]),
    CONSTRAINT [FK5AA43D52FC56AF1D] FOREIGN KEY ([CSchoolCode]) REFERENCES [dbo].[TSchool] ([CCode])
);


GO

CREATE TABLE [dbo].[TFacilityStudentCount] (
    [CMonth]       NVARCHAR (7)   NOT NULL,
    [CFacility]    NVARCHAR (20)  NOT NULL,
    [CStudentCode] NVARCHAR (50)  NOT NULL,
    [CType]        NVARCHAR (10)  NOT NULL,
    [CFlag]        NVARCHAR (10)  NOT NULL,
    [CStartDate]   DATETIME       NULL,
    [CEndDate]     DATETIME       NULL,
    [CGrade]       NVARCHAR (255) NULL,
    CONSTRAINT [PK_TFacilityStudentCount] PRIMARY KEY CLUSTERED ([CMonth] ASC, [CFacility] ASC, [CStudentCode] ASC, [CType] ASC, [CFlag] ASC)
);


GO

CREATE TABLE [dbo].[tb_QnaAccessUser] (
    [it_QnaAccessUserIdx] INT           IDENTITY (1, 1) NOT NULL,
    [st_CFacilityCode]    NVARCHAR (20) NULL,
    [st_CStaffId]         NVARCHAR (30) NULL,
    [st_CStaffIdMake]     NVARCHAR (30) NULL,
    [dt_CStaffIdMake]     DATETIME      NULL,
    [dt_CStaffIdDelete]   DATETIME      NULL,
    CONSTRAINT [PK_tb_QnaAccessUser] PRIMARY KEY CLUSTERED ([it_QnaAccessUserIdx] ASC)
);


GO

CREATE TABLE [dbo].[TApprFormWriterGroup] (
    [CFormId]        NVARCHAR (15) NOT NULL,
    [CWriterGroupId] NVARCHAR (20) NOT NULL,
    [COrder]         INT           NULL,
    PRIMARY KEY CLUSTERED ([CFormId] ASC, [CWriterGroupId] ASC),
    CONSTRAINT [FK_al1myev0y3atrsnvmv6v9l2kh] FOREIGN KEY ([CFormId]) REFERENCES [dbo].[TApprForm] ([CFormId]),
    CONSTRAINT [FK_owtxsqpvt81r8dy4j8cvqcii] FOREIGN KEY ([CWriterGroupId]) REFERENCES [dbo].[TStaffGroup] ([CGroupId])
);


GO

CREATE TABLE [dbo].[TReportStudentSendHistory] (
    [CReportCode]  NVARCHAR (50)  NOT NULL,
    [CSendTime]    DATETIME       NOT NULL,
    [CPhoneFather] NVARCHAR (255) NULL,
    [CPhoneMother] NVARCHAR (255) NULL,
    [CStaffId]     NVARCHAR (30)  NULL,
    PRIMARY KEY CLUSTERED ([CReportCode] ASC, [CSendTime] ASC),
    CONSTRAINT [FK1FEABB79371EA599] FOREIGN KEY ([CReportCode]) REFERENCES [dbo].[TReportStudent] ([CCode]),
    CONSTRAINT [FK1FEABB799E3C3476] FOREIGN KEY ([CStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[TVltTypeSeasonSort] (
    [CVltTypeNo] INT NOT NULL,
    [CSeason]    INT NOT NULL,
    [CSort]      INT NULL,
    PRIMARY KEY CLUSTERED ([CVltTypeNo] ASC, [CSeason] ASC),
    CONSTRAINT [FK4B92825693A000E] FOREIGN KEY ([CVltTypeNo]) REFERENCES [dbo].[TVltType] ([CTypeNo]),
    CONSTRAINT [FK4B9282583D60C29] FOREIGN KEY ([CSeason]) REFERENCES [dbo].[TSeason] ([CSeasonNo])
);


GO

CREATE TABLE [dbo].[TStaffEvaluate] (
    [CStaffId]        NVARCHAR (30) NOT NULL,
    [CNo]             INT           NOT NULL,
    [CYear]           NVARCHAR (10) NULL,
    [CTermCodeGroup]  NVARCHAR (50) NULL,
    [CTermCommonCode] NVARCHAR (50) NULL,
    [CNameCodeGroup]  NVARCHAR (50) NULL,
    [CNameCommonCode] NVARCHAR (50) NULL,
    [CGrade]          NVARCHAR (50) NULL,
    [CValuer1]        NVARCHAR (50) NULL,
    [CValuer2]        NVARCHAR (50) NULL,
    [CValuer3]        NVARCHAR (50) NULL,
    [CValuer4]        NVARCHAR (50) NULL,
    [CValuer5]        NVARCHAR (50) NULL,
    PRIMARY KEY CLUSTERED ([CStaffId] ASC, [CNo] ASC),
    CONSTRAINT [FKCE6E4BA59E3C3476] FOREIGN KEY ([CStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FKCE6E4BA5BA46CB60] FOREIGN KEY ([CNameCodeGroup], [CNameCommonCode]) REFERENCES [dbo].[TCommonCode] ([CCodeGroup], [CCode]),
    CONSTRAINT [FKCE6E4BA5CDBF3340] FOREIGN KEY ([CTermCodeGroup], [CTermCommonCode]) REFERENCES [dbo].[TCommonCode] ([CCodeGroup], [CCode])
);


GO

CREATE TABLE [dbo].[TSystemDisplayGnb] (
    [CStaff]       NVARCHAR (30)  NOT NULL,
    [CComTypeId]   NVARCHAR (20)  NOT NULL,
    [CNo]          INT            NOT NULL,
    [CTypeId]      NVARCHAR (50)  NOT NULL,
    [CMenuId]      NVARCHAR (50)  NOT NULL,
    [CMenuName]    NVARCHAR (255) NULL,
    [CIsNecessary] BIT            NULL,
    [CCols]        NVARCHAR (50)  NULL,
    PRIMARY KEY CLUSTERED ([CStaff] ASC, [CComTypeId] ASC, [CNo] ASC),
    CONSTRAINT [FK_knna2kgtwmulgkn3dtyw21v88] FOREIGN KEY ([CStaff]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[TKnowReMapData] (
    [CMapId]          INT            NOT NULL,
    [CCurriculumType] NVARCHAR (255) NULL,
    [CIsDrill]        BIT            NULL,
    [CCurriculumId]   INT            NULL,
    PRIMARY KEY CLUSTERED ([CMapId] ASC)
);


GO

CREATE TABLE [dbo].[tbl_customer_mkt_raw] (
    [customer_mkt_raw_idx] INT             IDENTITY (1, 1) NOT NULL,
    [head_customer_idx]    INT             NULL,
    [source_id]            NVARCHAR (20)   NULL,
    [db_date]              DATETIME        NOT NULL,
    [db_source]            NVARCHAR (50)   NOT NULL,
    [site]                 NVARCHAR (50)   NULL,
    [url]                  NVARCHAR (1000) NULL,
    [keywoard]             NVARCHAR (255)  NULL,
    [keyword_before]       NVARCHAR (255)  NULL,
    [keyword_final]        NVARCHAR (255)  NULL,
    [landing_page]         NVARCHAR (255)  NULL,
    [nac_md]               NVARCHAR (50)   NULL,
    [nac_sm]               NVARCHAR (50)   NULL,
    [banner]               NVARCHAR (50)   NULL,
    [campaignno]           NVARCHAR (50)   NULL,
    [landing]              NVARCHAR (50)   NULL,
    [epxech]               NVARCHAR (50)   NULL,
    [channel]              NVARCHAR (50)   NULL,
    [adkind]               NVARCHAR (50)   NULL,
    [text]                 NVARCHAR (50)   NULL,
    [video]                NVARCHAR (50)   NULL,
    [pcmobile]             NVARCHAR (50)   NULL,
    [visit_datetime]       DATETIME        NULL,
    [leave_datetime]       DATETIME        NULL,
    [is_duplicated]        CHAR (1)        NULL,
    [staying_time]         NVARCHAR (20)   NULL,
    [student_name]         NVARCHAR (50)   NULL,
    [phone]                NVARCHAR (50)   NULL,
    [school_name]          NVARCHAR (50)   NULL,
    [grade]                NVARCHAR (50)   NULL,
    [vlt_type]             NVARCHAR (10)   NULL,
    [grade_level]          NVARCHAR (50)   NULL,
    [formular_level]       NVARCHAR (10)   NULL,
    [ins_date]             DATETIME        NULL,
    [mod_date]             DATETIME        NULL,
    [memo]                 NVARCHAR (1500) NULL,
    [valid_status]         INT             CONSTRAINT [DF_tbl_customer_mkt_raw_valid_status] DEFAULT ((0)) NULL,
    [del_yn]               CHAR (1)        NULL,
    [marketing_member_idx] INT             NULL,
    [extra_info]           NVARCHAR (500)  NULL,
    [survey_type2]         NVARCHAR (50)   NULL,
    [branch_name]          NVARCHAR (50)   NULL,
    [branch_code]          NVARCHAR (50)   NULL,
    [secret_cat]           NVARCHAR (50)   NULL,
    [address_for_ip]       NVARCHAR (255)  NULL,
    [gcl_id]               NVARCHAR (500)  NULL,
    CONSTRAINT [PK_tbl_mkt_customers] PRIMARY KEY CLUSTERED ([customer_mkt_raw_idx] ASC),
    CONSTRAINT [FK_tbl_customer_mkt_raw_tbl_head_customers] FOREIGN KEY ([head_customer_idx]) REFERENCES [dbo].[tbl_head_customers] ([head_customer_idx])
);


GO

CREATE TABLE [dbo].[TBizWeekly4Staff] (
    [CBizDate]         DATETIME      NOT NULL,
    [CGroupId]         NVARCHAR (20) NOT NULL,
    [CWriterId]        NVARCHAR (30) NOT NULL,
    [CWriterLevelType] NVARCHAR (10) NULL,
    [CWriterLevelCode] NVARCHAR (10) NULL,
    [CWriterLevelSeq]  INT           NULL,
    [CRegTime]         DATETIME      NULL,
    [CLastTime]        DATETIME      NULL,
    [CWork]            NTEXT         NULL,
    [CPlan]            NTEXT         NULL,
    [CApprDocId]       BIGINT        NULL,
    PRIMARY KEY CLUSTERED ([CBizDate] ASC, [CGroupId] ASC, [CWriterId] ASC),
    CONSTRAINT [FK_61d5ltci4766ac1td0cyrqu8w] FOREIGN KEY ([CWriterLevelType], [CWriterLevelCode], [CWriterLevelSeq]) REFERENCES [dbo].[TStaffLevel] ([CLevelType], [CLevelCode], [CLevelSeq]),
    CONSTRAINT [FK_bpk9porssx39e6t9tnuxfsaio] FOREIGN KEY ([CGroupId]) REFERENCES [dbo].[TDepartGroup] ([CGroupId]),
    CONSTRAINT [FK_m7w8hoxkmbvvpa7i8rfwaqdq7] FOREIGN KEY ([CWriterId]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[TQuestionSeasonSetup] (
    [CSeasonSetupSeq]      INT            IDENTITY (1, 1) NOT NULL,
    [CQuestionSeason]      INT            NULL,
    [CCognitiveType]       NVARCHAR (255) NOT NULL,
    [CCognitivePath]       NVARCHAR (255) NULL,
    [CStringOne]           NVARCHAR (255) NULL,
    [CStringTwo]           NVARCHAR (255) NULL,
    [CStringImageType]     NVARCHAR (255) NOT NULL,
    [CStringthree]         NVARCHAR (255) NULL,
    [CAttach]              BIGINT         NULL,
    [CReafletQty]          INT            NULL,
    [CReafletQtyEnable]    BIT            NULL,
    [CReafletAmount]       INT            NULL,
    [CReafletAmountEnable] BIT            NULL,
    [COtherRemark]         NVARCHAR (255) NULL,
    [COtherRemarkEnable]   BIT            NULL,
    [CInquiryQty]          INT            NULL,
    [CInquiryQtyEnable]    BIT            NULL,
    [CCounselQty]          INT            NULL,
    [CCounselQtyEnable]    BIT            NULL,
    [CRegisterQty]         INT            NULL,
    [CRegisterQtyEnable]   BIT            NULL,
    [CWaitQty]             INT            NULL,
    [CRemark]              NVARCHAR (255) NULL,
    PRIMARY KEY CLUSTERED ([CSeasonSetupSeq] ASC),
    CONSTRAINT [FK_6cdtc4womuukal52vyehw9iuy] FOREIGN KEY ([CCognitivePath]) REFERENCES [dbo].[TCognitivePath] ([CCode]),
    CONSTRAINT [FK_sfrd6xup3im1u4iqdp35cdtl9] FOREIGN KEY ([CAttach]) REFERENCES [dbo].[TFile] ([CFileId]),
    CONSTRAINT [FK_syiki3yo7hdjvkogpmherqi8q] FOREIGN KEY ([CQuestionSeason]) REFERENCES [dbo].[TQuestionSeason] ([CSeasonSeq])
);


GO

CREATE TABLE [dbo].[TApprDocFile] (
    [CDocId]        BIGINT   NOT NULL,
    [CFileId]       BIGINT   NOT NULL,
    [COld]          BIT      NOT NULL,
    [CHidden]       BIT      NOT NULL,
    [CModifiedTime] DATETIME NOT NULL,
    [COrder]        INT      NOT NULL,
    PRIMARY KEY CLUSTERED ([CDocId] ASC, [CFileId] ASC),
    CONSTRAINT [FK24D9DA2F55D74554] FOREIGN KEY ([CFileId]) REFERENCES [dbo].[TFile] ([CFileId]),
    CONSTRAINT [FK24D9DA2FF064EB59] FOREIGN KEY ([CDocId]) REFERENCES [dbo].[TApprDoc] ([CDocId])
);


GO

CREATE TABLE [dbo].[TBoardStaffKind] (
    [CBoardId]      NVARCHAR (20) NOT NULL,
    [CKindId]       NVARCHAR (20) NOT NULL,
    [CStaffType]    NVARCHAR (20) NULL,
    [COrder]        INT           NULL,
    [CEnabled]      BIT           NULL,
    [CName0]        NVARCHAR (50) NOT NULL,
    [CName1]        NVARCHAR (50) NULL,
    [CName2]        NVARCHAR (50) NULL,
    [CName3]        NVARCHAR (50) NULL,
    [CName4]        NVARCHAR (50) NULL,
    [CNoticeModify] BIT           NULL,
    [CNoticeReply]  BIT           NULL,
    [CNoticeDelete] BIT           NULL,
    [CSkipSms]      BIT           NULL,
    [CNoticeNew]    BIT           NULL,
    PRIMARY KEY CLUSTERED ([CBoardId] ASC, [CKindId] ASC),
    CONSTRAINT [FKAA183FC235D89A81] FOREIGN KEY ([CBoardId]) REFERENCES [dbo].[TBoard] ([CBoardId])
);


GO

CREATE TABLE [dbo].[TABLEAU_FACILITY] (
    [CFacility]        NVARCHAR (20) NOT NULL,
    [CMonth]           DATETIME      NOT NULL,
    [CName]            NVARCHAR (50) NOT NULL,
    [CType]            NVARCHAR (50) NULL,
    [CArea]            NVARCHAR (50) NULL,
    [CScope]           NVARCHAR (50) NULL,
    [CCounsel]         MONEY         NULL,
    [CTutoring]        MONEY         NULL,
    [CTotalSales]      MONEY         NULL,
    [CRoyaltyCounsel]  MONEY         NULL,
    [CRoyaltyTutoring] MONEY         NULL,
    [CRoyaltyTotal]    MONEY         NULL,
    [CKnowre]          MONEY         NULL,
    [CSoobakc]         MONEY         NULL,
    CONSTRAINT [PK_TABLEAU_FACILITY] PRIMARY KEY CLUSTERED ([CFacility] ASC, [CMonth] ASC)
);


GO

CREATE TABLE [dbo].[TPromoteChannel] (
    [CCode]           NVARCHAR (255) NOT NULL,
    [CStartDate]      DATETIME       NULL,
    [CEndDate]        DATETIME       NULL,
    [CChannel]        NVARCHAR (255) NULL,
    [CAttach]         BIGINT         NULL,
    [CApprovalStatus] NVARCHAR (15)  NULL,
    PRIMARY KEY CLUSTERED ([CCode] ASC),
    CONSTRAINT [FKA902B6974DEDA002] FOREIGN KEY ([CAttach]) REFERENCES [dbo].[TFile] ([CFileId])
);


GO

CREATE TABLE [dbo].[TBizDaily4StaffFile] (
    [CBizDate]  DATETIME      NOT NULL,
    [CGroupId]  NVARCHAR (20) NOT NULL,
    [CWriterId] NVARCHAR (30) NOT NULL,
    [CAttachId] BIGINT        NOT NULL,
    [CSeq]      INT           NULL,
    PRIMARY KEY CLUSTERED ([CBizDate] ASC, [CGroupId] ASC, [CWriterId] ASC, [CAttachId] ASC),
    CONSTRAINT [FK_dx8mjtpcjl4eik7oaj4bsp9il] FOREIGN KEY ([CAttachId]) REFERENCES [dbo].[TFile] ([CFileId]),
    CONSTRAINT [FK_ftp9oa62qad2gqi315iqu7j3l] FOREIGN KEY ([CBizDate], [CGroupId], [CWriterId]) REFERENCES [dbo].[TBizDaily4Staff] ([CBizDate], [CGroupId], [CWriterId])
);


GO

CREATE TABLE [dbo].[TRelativeFile] (
    [CFile]         BIGINT        NOT NULL,
    [CRelativeFile] BIGINT        NOT NULL,
    [CType]         NVARCHAR (30) NULL,
    PRIMARY KEY CLUSTERED ([CFile] ASC, [CRelativeFile] ASC),
    CONSTRAINT [FK488C94DC3268D3F9] FOREIGN KEY ([CFile]) REFERENCES [dbo].[TFile] ([CFileId]),
    CONSTRAINT [FK488C94DC6542F5C5] FOREIGN KEY ([CRelativeFile]) REFERENCES [dbo].[TFile] ([CFileId])
);


GO

CREATE TABLE [dbo].[TProduct] (
    [CProductCode]        NVARCHAR (50)  NOT NULL,
    [CProductName]        NVARCHAR (255) NULL,
    [CBookingEditCount]   INT            NULL,
    [CContinueCheckCount] INT            NULL,
    [CBookingMinDay]      INT            NULL,
    [CBookingMinTime]     INT            NULL,
    [CStartDate]          DATETIME       NOT NULL,
    [CEndDate]            DATETIME       NOT NULL,
    PRIMARY KEY CLUSTERED ([CProductCode] ASC)
);


GO

CREATE TABLE [dbo].[TTutoringUploadHistory] (
    [CSeq]               INT            IDENTITY (1, 1) NOT NULL,
    [CBaseDate]          DATETIME       NULL,
    [CFacilityCode]      NVARCHAR (20)  NULL,
    [CFacilityStartDate] DATETIME       NULL,
    [CStaffId]           NVARCHAR (30)  NULL,
    [CInDt]              DATETIME       NULL,
    [CType]              NVARCHAR (255) NULL,
    PRIMARY KEY CLUSTERED ([CSeq] ASC),
    CONSTRAINT [FK_c02squk8efdw5j3qsvj3ror8v] FOREIGN KEY ([CStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_hdswsgdkt9uyyqgie8nik0i91] FOREIGN KEY ([CFacilityCode], [CFacilityStartDate]) REFERENCES [dbo].[TFacility] ([CDepartCode], [CDepartStartDate])
);


GO

CREATE TABLE [dbo].[TRFIDAttend] (
    [CBranchCode]      NVARCHAR (20) NOT NULL,
    [CBranchStartDate] DATETIME      NOT NULL,
    [CCardNumber]      NVARCHAR (50) NOT NULL,
    [CChkAttend]       BIT           NULL,
    [CSmsEnable]       BIT           NULL,
    [CStaffReception]  NVARCHAR (30) NULL,
    PRIMARY KEY CLUSTERED ([CBranchCode] ASC, [CBranchStartDate] ASC, [CCardNumber] ASC),
    CONSTRAINT [FK_flnuii4cvw0eospisgbvx7rfj] FOREIGN KEY ([CStaffReception]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_TRFID_TRFIDAttend] FOREIGN KEY ([CBranchCode], [CBranchStartDate], [CCardNumber]) REFERENCES [dbo].[TRFID] ([CBranchCode], [CBranchStartDate], [CCardNumber])
);


GO

CREATE TABLE [dbo].[THpDemo] (
    [CDemoId]         BIGINT        IDENTITY (1, 1) NOT NULL,
    [CMemberId]       BIGINT        NULL,
    [CProductId]      NVARCHAR (30) NULL,
    [CProductVer]     NVARCHAR (30) NULL,
    [CBeginDateTime]  DATETIME      NOT NULL,
    [CExpireDateTime] DATETIME      NOT NULL,
    [CRemark]         NTEXT         NULL,
    PRIMARY KEY CLUSTERED ([CDemoId] ASC),
    CONSTRAINT [FK_lnsrxgglklq3r4ug03d9ovg9r] FOREIGN KEY ([CMemberId]) REFERENCES [dbo].[THpMember] ([CMemberId]),
    CONSTRAINT [FK_nnrq9ryg5nwtqw03c21f3j8c5] FOREIGN KEY ([CProductId], [CProductVer]) REFERENCES [dbo].[THpProductVer] ([CProductId], [CProductVer])
);


GO

CREATE TABLE [dbo].[TSalesRequestAttach] (
    [CRequestDetailSalesRequestNo] INT    NOT NULL,
    [CRequestDetailDetailNo]       INT    NOT NULL,
    [CAttach]                      BIGINT NOT NULL,
    [CFileNo]                      INT    NULL,
    [CNo]                          INT    NULL,
    [CDetailNo]                    INT    NULL,
    PRIMARY KEY CLUSTERED ([CRequestDetailSalesRequestNo] ASC, [CRequestDetailDetailNo] ASC, [CAttach] ASC),
    CONSTRAINT [FK_b60honyeqtpc36vg59qdshkdg] FOREIGN KEY ([CAttach]) REFERENCES [dbo].[TFile] ([CFileId]),
    CONSTRAINT [FK_elrtkpxsg5iufq6mqu6dmd83x] FOREIGN KEY ([CRequestDetailSalesRequestNo], [CRequestDetailDetailNo]) REFERENCES [dbo].[TSalesRequestDetail] ([CSalesRequest], [CDetailNo]),
    CONSTRAINT [FK_ks34erepcc0pudkeetyh9d4fx] FOREIGN KEY ([CNo], [CDetailNo]) REFERENCES [dbo].[TSalesRequestDetail] ([CSalesRequest], [CDetailNo])
);


GO

CREATE TABLE [dbo].[TPollExample] (
    [CPollId]       BIGINT        NOT NULL,
    [CNo]           INT           NOT NULL,
    [CType]         NVARCHAR (10) NULL,
    [CExample]      NTEXT         NULL,
    [CAttachFileId] BIGINT        NULL,
    PRIMARY KEY CLUSTERED ([CPollId] ASC, [CNo] ASC),
    CONSTRAINT [FK6DD597B783C4599] FOREIGN KEY ([CAttachFileId]) REFERENCES [dbo].[TFile] ([CFileId]),
    CONSTRAINT [FK6DD597B79B3E67BC] FOREIGN KEY ([CPollId]) REFERENCES [dbo].[TPollQuestion] ([CId])
);


GO

CREATE TABLE [dbo].[tbl_TutorOtherPayHistory] (
    [idSeq]       INT            IDENTITY (1, 1) NOT NULL,
    [occurDate]   DATETIME       DEFAULT (NULL) NULL,
    [branchCode]  NVARCHAR (20)  DEFAULT (NULL) NULL,
    [tutorCode]   INT            DEFAULT (NULL) NULL,
    [paymentName] NVARCHAR (255) DEFAULT (NULL) NULL,
    [amount]      INT            DEFAULT (NULL) NULL,
    [memo]        NVARCHAR (255) DEFAULT (NULL) NULL,
    [code_idx]    INT            DEFAULT (NULL) NULL
);


GO

CREATE TABLE [dbo].[TStaffSalaryRetirement] (
    [CStaffId]          NVARCHAR (30) NOT NULL,
    [CStartDate]        DATETIME      NOT NULL,
    [CPayType]          NVARCHAR (50) NULL,
    [CEndDate]          DATETIME      NULL,
    [CPayDate]          DATETIME      NULL,
    [CExceptBefore2012] INT           NULL,
    [CExceptAfter2013]  INT           NULL,
    [CAddBefore2012]    INT           NULL,
    [CAddAfter2013]     INT           NULL,
    [CSalary3Month]     BIGINT        NULL,
    [CWorkday3Month]    INT           NULL,
    [CSalaryPerDay]     FLOAT (53)    NULL,
    [CWorkYears]        FLOAT (53)    NULL,
    [CSalaryTotal]      INT           NULL,
    [CNoTax]            INT           NULL,
    [CPayTax]           INT           NULL,
    [CTax1]             BIGINT        NULL,
    [CTax2]             BIGINT        NULL,
    [CSalaryBalance]    BIGINT        NULL,
    PRIMARY KEY CLUSTERED ([CStaffId] ASC, [CStartDate] ASC),
    CONSTRAINT [FK824BE46F9E3C3476] FOREIGN KEY ([CStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[TContentStaff] (
    [CContentId]     BIGINT        NOT NULL,
    [CBoardId]       NVARCHAR (20) NOT NULL,
    [CKindId]        NVARCHAR (20) NOT NULL,
    [CStaffId]       NVARCHAR (30) NOT NULL,
    [CIndex]         INT           NULL,
    [CAnswerBoardId] NVARCHAR (20) NULL,
    [CAnswerCode]    NVARCHAR (10) NULL,
    [CActionTime]    DATETIME      NULL,
    [CRemark]        NTEXT         NULL,
    [CSumPoint]      INT           DEFAULT ((0)) NOT NULL,
    [CAveragePoint]  FLOAT (53)    DEFAULT ((0)) NOT NULL,
    PRIMARY KEY CLUSTERED ([CContentId] ASC, [CBoardId] ASC, [CKindId] ASC, [CStaffId] ASC),
    CONSTRAINT [FK7DB4F85B9B535AA1] FOREIGN KEY ([CBoardId], [CKindId]) REFERENCES [dbo].[TBoardStaffKind] ([CBoardId], [CKindId]),
    CONSTRAINT [FK7DB4F85B9E3C3476] FOREIGN KEY ([CStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK7DB4F85B9F2A2E67] FOREIGN KEY ([CContentId]) REFERENCES [dbo].[TContent] ([CContentId]),
    CONSTRAINT [FK7DB4F85BB9FFF42F] FOREIGN KEY ([CAnswerBoardId], [CAnswerCode]) REFERENCES [dbo].[TBoardAnswer] ([CBoardId], [CAnswerCode])
);


GO

CREATE TABLE [dbo].[TMaxCode] (
    [CPrefix]    NVARCHAR (30) NOT NULL,
    [CDelimiter] NVARCHAR (10) NOT NULL,
    [CLength]    INT           NOT NULL,
    [CNowValue]  NVARCHAR (50) NULL,
    [CNowSeqNo]  BIGINT        NULL,
    CONSTRAINT [PK_TMaxCode] PRIMARY KEY CLUSTERED ([CPrefix] ASC, [CDelimiter] ASC)
);


GO

CREATE TABLE [dbo].[TPushHistory] (
    [CNo]           INT            IDENTITY (1, 1) NOT NULL,
    [CPushType]     NVARCHAR (255) NOT NULL,
    [CReceiverId]   NVARCHAR (40)  NOT NULL,
    [CReceiverName] NVARCHAR (40)  NOT NULL,
    [CMessage]      NVARCHAR (200) NOT NULL,
    [CRegDate]      DATETIME       NOT NULL,
    PRIMARY KEY CLUSTERED ([CNo] ASC)
);


GO

CREATE TABLE [dbo].[TFacilityDailyCount] (
    [CDay]             DATETIME      NOT NULL,
    [CDepartCode]      NVARCHAR (20) NOT NULL,
    [CDepartStartDate] DATETIME      NOT NULL,
    [CStudentCode]     NVARCHAR (50) NOT NULL,
    [CType]            NVARCHAR (20) NOT NULL,
    [CFlag]            NVARCHAR (20) NOT NULL,
    [CStartDate]       DATETIME      NOT NULL,
    [CEndDate]         DATETIME      NULL,
    [CComer]           INT           CONSTRAINT [DF_TFacilityDailyCount_CComer] DEFAULT ((0)) NULL,
    [CGrade]           NVARCHAR (10) NULL,
    [CTotalSale]       NUMERIC (18)  CONSTRAINT [DF_TFacilityDailyCount_CTotalSale] DEFAULT ((0)) NULL,
    [CCounselSale]     NUMERIC (18)  CONSTRAINT [DF_TFacilityDailyCount_CCounselSale] DEFAULT ((0)) NULL,
    [CTutoringSale]    NUMERIC (18)  CONSTRAINT [DF_TFacilityDailyCount_CTutoringSale] DEFAULT ((0)) NULL,
    [CInDt]            DATETIME      CONSTRAINT [DF_TFacilityDailyCount_CInDt] DEFAULT (getdate()) NULL,
    CONSTRAINT [PK_TFacilityDailyCount] PRIMARY KEY CLUSTERED ([CDay] ASC, [CDepartCode] ASC, [CDepartStartDate] ASC, [CStudentCode] ASC, [CType] ASC, [CFlag] ASC, [CStartDate] ASC)
);


GO

CREATE TABLE [dbo].[TTestCouponGroup] (
    [CBranchCode]      NVARCHAR (20)  NOT NULL,
    [CBranchStartDate] DATETIME       NOT NULL,
    [CIssueDate]       DATETIME       NOT NULL,
    [CNo]              INT            NOT NULL,
    [CName]            NVARCHAR (255) NULL,
    [CGroupStatus]     NVARCHAR (15)  NULL,
    [CStartDate]       DATETIME       NULL,
    [CEndDate]         DATETIME       NULL,
    [CType]            NVARCHAR (15)  NULL,
    [CSaleAmount]      INT            NULL,
    [CIssueCount]      INT            NULL,
    PRIMARY KEY CLUSTERED ([CBranchCode] ASC, [CBranchStartDate] ASC, [CIssueDate] ASC, [CNo] ASC),
    CONSTRAINT [FK6DB0F1348562EA2] FOREIGN KEY ([CBranchCode], [CBranchStartDate]) REFERENCES [dbo].[TFacility] ([CDepartCode], [CDepartStartDate])
);


GO

CREATE TABLE [dbo].[TScheduleDepart] (
    [CScheduleId]      BIGINT        NOT NULL,
    [CDepartCode]      NVARCHAR (20) NOT NULL,
    [CDepartStartDate] DATETIME      NOT NULL,
    PRIMARY KEY CLUSTERED ([CScheduleId] ASC, [CDepartCode] ASC, [CDepartStartDate] ASC),
    CONSTRAINT [FK2D90E2DF48D9611] FOREIGN KEY ([CDepartCode], [CDepartStartDate]) REFERENCES [dbo].[TDepartment] ([CDepartCode], [CDepartStartDate]),
    CONSTRAINT [FK2D90E2DF5930B7E5] FOREIGN KEY ([CScheduleId]) REFERENCES [dbo].[TSchedule] ([CId])
);


GO

CREATE TABLE [dbo].[TBoardContentKind] (
    [CKindId]        NVARCHAR (50)  NOT NULL,
    [CBoardId]       NVARCHAR (20)  NOT NULL,
    [COrder]         INT            NULL,
    [CEnabled]       BIT            NULL,
    [CName0]         NVARCHAR (50)  NOT NULL,
    [CName1]         NVARCHAR (50)  NULL,
    [CName2]         NVARCHAR (50)  NULL,
    [CName3]         NVARCHAR (50)  NULL,
    [CName4]         NVARCHAR (50)  NULL,
    [CStyle]         NVARCHAR (255) NULL,
    [COnlyMgr]       BIT            NULL,
    [CSelectGroupId] NVARCHAR (20)  NULL,
    [CManageGroupId] NVARCHAR (20)  NULL,
    PRIMARY KEY CLUSTERED ([CKindId] ASC),
    CONSTRAINT [FK_5ytdjxy3mc8im7dx2q9svfmkl] FOREIGN KEY ([CSelectGroupId]) REFERENCES [dbo].[TStaffGroup] ([CGroupId]),
    CONSTRAINT [FK_enptpe4gdyf2ufws90i1e5idt] FOREIGN KEY ([CManageGroupId]) REFERENCES [dbo].[TStaffGroup] ([CGroupId]),
    CONSTRAINT [FKAE75A95B35D89A81] FOREIGN KEY ([CBoardId]) REFERENCES [dbo].[TBoard] ([CBoardId])
);


GO

CREATE TABLE [dbo].[THpRequestFile] (
    [CRequestId] BIGINT NOT NULL,
    [CSubSeq]    INT    NOT NULL,
    [CFileId]    BIGINT NOT NULL,
    PRIMARY KEY CLUSTERED ([CRequestId] ASC, [CSubSeq] ASC, [CFileId] ASC),
    CONSTRAINT [FK_1py85x2paym7nbomvbsjen74g] FOREIGN KEY ([CFileId]) REFERENCES [dbo].[TFile] ([CFileId]),
    CONSTRAINT [FK_nl7opwnvcdjdnfn347w1pgcff] FOREIGN KEY ([CRequestId], [CSubSeq]) REFERENCES [dbo].[THpRequest] ([CRequestId], [CSubSeq])
);


GO

CREATE TABLE [dbo].[TBranchBelongRate] (
    [CBranchCode]         NVARCHAR (20)  NOT NULL,
    [CBranchStartDate]    DATETIME       NOT NULL,
    [CBelongCounsel]      INT            NOT NULL,
    [CBelongInstitute]    INT            NOT NULL,
    [CCounselCode]        NVARCHAR (255) NULL,
    [CInstituteCode]      NVARCHAR (255) NULL,
    [CSmsBelongCounsel]   INT            NULL,
    [CSmsBelongInstitute] INT            NULL,
    PRIMARY KEY CLUSTERED ([CBranchCode] ASC, [CBranchStartDate] ASC),
    CONSTRAINT [FK_6rw4vns6n40kgjmw0saaid30f] FOREIGN KEY ([CBranchCode], [CBranchStartDate]) REFERENCES [dbo].[TFacility] ([CDepartCode], [CDepartStartDate])
);


GO

CREATE TABLE [dbo].[TBizMonthly4DptFileC] (
    [CBizDate]  DATETIME      NOT NULL,
    [CGroupId]  NVARCHAR (20) NOT NULL,
    [CAttachId] BIGINT        NOT NULL,
    [CSeq]      INT           NULL,
    PRIMARY KEY CLUSTERED ([CBizDate] ASC, [CGroupId] ASC, [CAttachId] ASC),
    CONSTRAINT [FK_56sduflau1ppgrcrqqeou3vd9] FOREIGN KEY ([CAttachId]) REFERENCES [dbo].[TFile] ([CFileId]),
    CONSTRAINT [FK_rqk318beel58nkobl4fyej1c9] FOREIGN KEY ([CBizDate], [CGroupId]) REFERENCES [dbo].[TBizMonthly4DptC] ([CBizDate], [CGroupId])
);


GO

CREATE TABLE [dbo].[TApprDisburseDetail] (
    [CDocId]               BIGINT         NOT NULL,
    [CSeq]                 INT            NOT NULL,
    [CDealType]            NVARCHAR (40)  NULL,
    [CPayType]             NVARCHAR (40)  NULL,
    [CBudgetDepart]        NVARCHAR (40)  NULL,
    [CBudgetItem]          NVARCHAR (40)  NULL,
    [CRemark]              NVARCHAR (50)  NULL,
    [CCompanyCard]         NVARCHAR (40)  NULL,
    [CCustomer]            NVARCHAR (40)  NULL,
    [CEvidenceDate]        DATETIME       NOT NULL,
    [CSupplyPrice]         BIGINT         NOT NULL,
    [CAddTax]              BIGINT         NOT NULL,
    [CSumPrice]            BIGINT         NOT NULL,
    [CDefiniteSupplyPrice] BIGINT         NOT NULL,
    [CDefiniteAddTax]      BIGINT         NOT NULL,
    [CDefiniteSumPrice]    BIGINT         NOT NULL,
    [CAttchId]             BIGINT         NULL,
    [CTemp1]               NVARCHAR (40)  NULL,
    [CTemp2]               NVARCHAR (40)  NULL,
    [CTemp3]               NVARCHAR (40)  NULL,
    [CTemp4]               NVARCHAR (40)  NULL,
    [CTemp5]               NVARCHAR (40)  NULL,
    [CTemp6]               NVARCHAR (40)  NULL,
    [CTemp7]               NVARCHAR (40)  NULL,
    [CTemp8]               NVARCHAR (40)  NULL,
    [CTemp9]               NVARCHAR (40)  NULL,
    [CErrLog]              NTEXT          NULL,
    [CRequestDate]         DATETIME       NULL,
    [CTemp10]              NVARCHAR (40)  NULL,
    [CTemp11]              NVARCHAR (40)  NULL,
    [CTemp12]              NVARCHAR (40)  NULL,
    [CTemp13]              NVARCHAR (40)  NULL,
    [CTemp14]              NVARCHAR (40)  NULL,
    [CTemp15]              NVARCHAR (40)  NULL,
    [CDate1]               DATETIME       NULL,
    [CDate2]               DATETIME       NULL,
    [CDate3]               DATETIME       NULL,
    [CDate4]               DATETIME       NULL,
    [CDate5]               DATETIME       NULL,
    [CStaffId1]            NVARCHAR (30)  NULL,
    [CStaffId2]            NVARCHAR (30)  NULL,
    [CStaffId3]            NVARCHAR (30)  NULL,
    [CStaffId4]            NVARCHAR (30)  NULL,
    [CStaffId5]            NVARCHAR (30)  NULL,
    [CBool1]               BIT            NULL,
    [CBool2]               BIT            NULL,
    [CBool3]               BIT            NULL,
    [CBool4]               BIT            NULL,
    [CBool5]               BIT            NULL,
    [CTemp16]              NVARCHAR (100) NULL,
    [CTemp17]              NVARCHAR (100) NULL,
    [CTemp18]              NVARCHAR (100) NULL,
    [CTemp19]              NVARCHAR (100) NULL,
    [CTemp20]              NVARCHAR (100) NULL,
    PRIMARY KEY CLUSTERED ([CDocId] ASC, [CSeq] ASC),
    CONSTRAINT [FK_3ufuk1xkk0lon12l2i2xq85fl] FOREIGN KEY ([CStaffId4]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_5jsl7pf51r46dtji5tyqlq3h1] FOREIGN KEY ([CStaffId1]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_bfiigkle0m3gyf7rc435pm942] FOREIGN KEY ([CStaffId5]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_eyl5w35wvujoc0mhy29ns0q7j] FOREIGN KEY ([CStaffId3]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_gy4d4yftpmsec2du5529b363x] FOREIGN KEY ([CStaffId2]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK58A09FB93099F838] FOREIGN KEY ([CAttchId]) REFERENCES [dbo].[TFile] ([CFileId]),
    CONSTRAINT [FK58A09FB9F064EB59] FOREIGN KEY ([CDocId]) REFERENCES [dbo].[TApprDoc] ([CDocId])
);


GO

CREATE TABLE [dbo].[TAssetRepayHistory] (
    [CBranchCode]      NVARCHAR (20)  NOT NULL,
    [CBranchStartDate] DATETIME       NOT NULL,
    [CCodeGroup]       NVARCHAR (50)  NOT NULL,
    [CCommonCode]      NVARCHAR (50)  NOT NULL,
    [CItemCode]        NVARCHAR (255) NOT NULL,
    [CRepayMonth]      DATETIME       NOT NULL,
    [CBaseCount]       FLOAT (53)     NULL,
    [CBasePrice]       FLOAT (53)     NULL,
    [CBaseValue]       FLOAT (53)     NULL,
    [CRepayPrice]      FLOAT (53)     NULL,
    [CRepayValue]      FLOAT (53)     NULL,
    [CPrice]           FLOAT (53)     NULL,
    [CValue]           FLOAT (53)     NULL,
    PRIMARY KEY CLUSTERED ([CBranchCode] ASC, [CBranchStartDate] ASC, [CCodeGroup] ASC, [CCommonCode] ASC, [CItemCode] ASC, [CRepayMonth] ASC),
    CONSTRAINT [FKD40E325BE984325B] FOREIGN KEY ([CBranchCode], [CBranchStartDate], [CCodeGroup], [CCommonCode], [CItemCode]) REFERENCES [dbo].[TAssetItem] ([CBranchCode], [CBranchStartDate], [CCodeGroup], [CCommonCode], [CCode])
);


GO

CREATE TABLE [dbo].[TReportPattern] (
    [CCode]            NVARCHAR (50)  NOT NULL,
    [CDepartCode]      NVARCHAR (20)  NULL,
    [CDepartStartDate] DATETIME       NULL,
    [CName]            NVARCHAR (255) NULL,
    [CComment]         NTEXT          NULL,
    [CRegTime]         DATETIME       NOT NULL,
    [CEditTime]        DATETIME       NOT NULL,
    [CRegStaffId]      NVARCHAR (30)  NULL,
    [CEditStaffId]     NVARCHAR (30)  NULL,
    PRIMARY KEY CLUSTERED ([CCode] ASC),
    CONSTRAINT [FKE84E03C819E633C8] FOREIGN KEY ([CRegStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FKE84E03C8282531E2] FOREIGN KEY ([CDepartCode], [CDepartStartDate]) REFERENCES [dbo].[TFacility] ([CDepartCode], [CDepartStartDate]),
    CONSTRAINT [FKE84E03C878DF60AC] FOREIGN KEY ([CEditStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[tb_QnaManageLog] (
    [it_QnaManageLog]     INT           IDENTITY (1, 1) NOT NULL,
    [it_QnaIdx]           INT           NOT NULL,
    [st_CStaffIdBefore]   NVARCHAR (30) NOT NULL,
    [st_CStaffIdAfter]    NVARCHAR (30) NOT NULL,
    [st_CStaffIdMake]     NVARCHAR (30) NOT NULL,
    [dt_QnaManageLogMake] DATETIME      NOT NULL,
    CONSTRAINT [PK_tb_QnaManageLog] PRIMARY KEY CLUSTERED ([it_QnaManageLog] ASC),
    CONSTRAINT [FK_tb_QnaManageLog_tb_Qna] FOREIGN KEY ([it_QnaIdx]) REFERENCES [dbo].[tb_Qna] ([it_QnaIdx])
);


GO

CREATE TABLE [dbo].[TManagementComponentForce] (
    [CForceCode]      NVARCHAR (50) NOT NULL,
    [CStartDate]      DATETIME      NULL,
    [CEndDate]        DATETIME      NULL,
    [CWeekName]       INT           NULL,
    [CComponentNo]    BIGINT        NULL,
    [CRegDate]        DATETIME      NULL,
    [CRegStaffId]     NVARCHAR (30) NULL,
    [CApprovalStatus] NVARCHAR (15) NULL,
    CONSTRAINT [PK__TManagem__408962FB46FD63FC] PRIMARY KEY CLUSTERED ([CForceCode] ASC),
    CONSTRAINT [FK70AA8F8519E633C8] FOREIGN KEY ([CRegStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK70AA8F8544F3BF8] FOREIGN KEY ([CComponentNo]) REFERENCES [dbo].[TComponent] ([CComponentNo])
);


GO

CREATE TABLE [dbo].[TManagementComponent] (
    [CStDepartCode]      NVARCHAR (20)  NOT NULL,
    [CStDepartStartDate] DATETIME       NOT NULL,
    [CStCode]            NVARCHAR (50)  NOT NULL,
    [CNo]                INT            NOT NULL,
    [CWeekName]          INT            NULL,
    [CComponentForce]    NVARCHAR (50)  NULL,
    [CStartDate]         DATETIME       NULL,
    [CEndDate]           DATETIME       NULL,
    [CEnabled]           BIT            NULL,
    [CTopic]             NVARCHAR (255) NULL,
    [CTopicType]         NVARCHAR (15)  NULL,
    [CComponentName]     NVARCHAR (255) NULL,
    [CComponentNo]       BIGINT         NULL,
    [CComment]           NVARCHAR (255) NULL,
    [CRegDate]           DATETIME       NULL,
    [CRegStaffId]        NVARCHAR (30)  NULL,
    [CApprovalStatus]    NVARCHAR (15)  NULL,
    CONSTRAINT [PK__TManagem__D7CD88F03A6282ED] PRIMARY KEY CLUSTERED ([CStDepartCode] ASC, [CStDepartStartDate] ASC, [CStCode] ASC, [CNo] ASC),
    CONSTRAINT [FK24187F0619E633C8] FOREIGN KEY ([CRegStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK24187F0644F3BF8] FOREIGN KEY ([CComponentNo]) REFERENCES [dbo].[TComponent] ([CComponentNo]),
    CONSTRAINT [FK24187F066F88FD24] FOREIGN KEY ([CStDepartCode], [CStDepartStartDate], [CStCode]) REFERENCES [dbo].[TStudent] ([CBranchCode], [CBranchStartDate], [CCode]),
    CONSTRAINT [FK24187F06E44E9FBB] FOREIGN KEY ([CComponentForce]) REFERENCES [dbo].[TManagementComponentForce] ([CForceCode])
);


GO

CREATE TABLE [dbo].[TMemberCard] (
    [CBarcodeInfo]     INT            NOT NULL,
    [CBarcodeNumber]   NVARCHAR (255) NOT NULL,
    [CDepartCode]      NVARCHAR (20)  NULL,
    [CDepartStartDate] DATETIME       NULL,
    [CMemberCode]      NVARCHAR (50)  NULL,
    [CUseType]         NVARCHAR (255) NULL,
    PRIMARY KEY CLUSTERED ([CBarcodeInfo] ASC, [CBarcodeNumber] ASC),
    CONSTRAINT [FK_1y7m6q4mokxgnfk31cn8qlk1v] FOREIGN KEY ([CBarcodeInfo]) REFERENCES [dbo].[TBarcodeInfo] ([CBarcodeSeq]),
    CONSTRAINT [FK_43yui1vbnb9mk22qxikreou4i] FOREIGN KEY ([CDepartCode], [CDepartStartDate], [CMemberCode]) REFERENCES [dbo].[TMember] ([CDepartCode], [CDepartStartDate], [CMemberCode])
);


GO

CREATE TABLE [dbo].[tbl_BusinessIncome] (
    [income_seq]  INT        IDENTITY (1, 1) NOT NULL,
    [branch_code] NCHAR (10) NOT NULL,
    [pay_date]    DATETIME   NOT NULL,
    [start_date]  DATETIME   NULL,
    [end_date]    DATETIME   NULL,
    [ins_date]    DATETIME   NULL,
    [upd_date]    DATETIME   NULL,
    [fixed_date]  DATETIME   NULL,
    [fixed_yn]    CHAR (1)   NULL,
    [del_yn]      CHAR (1)   CONSTRAINT [DF_tbl_BusinessIncome_del_yn] DEFAULT ('N') NULL,
    CONSTRAINT [PK_tbl_BusinessIncome] PRIMARY KEY CLUSTERED ([income_seq] ASC)
);


GO

CREATE TABLE [dbo].[tbl_hrm_subjective] (
    [hrm_subjective_idx] INT            IDENTITY (1, 1) NOT NULL,
    [hrm_staff_idx]      INT            NOT NULL,
    [subjective_type]    CHAR (1)       NOT NULL,
    [q1_page]            NVARCHAR (MAX) NULL,
    [q1_everage]         DECIMAL (5, 1) NULL,
    [q2_page]            NVARCHAR (MAX) NULL,
    [q2_everage]         DECIMAL (5, 1) NULL,
    [q3_page]            NVARCHAR (MAX) NULL,
    [q3_everage]         DECIMAL (5, 1) NULL,
    [q4_page]            NVARCHAR (MAX) NULL,
    [q4_everage]         DECIMAL (5, 1) NULL,
    [q5_page]            NVARCHAR (MAX) NULL,
    [q5_everage]         DECIMAL (5, 1) NULL,
    [q6_page]            NVARCHAR (MAX) NULL,
    [q6_total_everage]   DECIMAL (5, 1) NULL,
    [q7_page]            NVARCHAR (MAX) NULL,
    [grade]              NCHAR (10)     NULL,
    CONSTRAINT [PK_tbl_hrm_subjective] PRIMARY KEY CLUSTERED ([hrm_subjective_idx] ASC),
    CONSTRAINT [FK_tbl_hrm_subjective_tbl_hrm_staff] FOREIGN KEY ([hrm_staff_idx]) REFERENCES [dbo].[tbl_hrm_staff] ([hrm_staff_idx])
);


GO

CREATE TABLE [dbo].[otbl_Lecture_class] (
    [class_idx]           INT            IDENTITY (1, 1) NOT NULL,
    [lecture_id]          INT            NULL,
    [class_startdatetime] DATETIME       NULL,
    [class_duration]      INT            NULL,
    [memo]                NVARCHAR (100) NULL,
    [reg_date]            DATETIME       NULL,
    [mod_date]            DATETIME       NULL,
    [del_yn]              CHAR (1)       CONSTRAINT [DF_otbl_Lecture_class_del_yn] DEFAULT ('N') NULL,
    [profile_id]          INT            DEFAULT ((-1)) NULL,
    CONSTRAINT [PK_otbl_Lecture_class] PRIMARY KEY CLUSTERED ([class_idx] ASC),
    CONSTRAINT [FK_Lecture_class_otbl_Lecture] FOREIGN KEY ([lecture_id]) REFERENCES [dbo].[otbl_Lecture] ([lecture_idx])
);


GO

CREATE TABLE [dbo].[TStudentSaleHistoryHead] (
    [CDepartCode]      NVARCHAR (20) NOT NULL,
    [CDepartStartDate] DATETIME      NOT NULL,
    [CCode]            NVARCHAR (50) NOT NULL,
    [CRegType]         NVARCHAR (50) NOT NULL,
    [CNo]              INT           NOT NULL,
    [CPayMonthCount]   INT           NULL,
    [CPayPrice]        INT           NULL,
    [CRtnPrice]        INT           NULL,
    [CStartDate]       DATETIME      NULL,
    [CEndDate]         DATETIME      NULL,
    [CPayCommas]       INT           NULL,
    [CInsDate]         DATETIME      NULL,
    PRIMARY KEY CLUSTERED ([CDepartCode] ASC, [CDepartStartDate] ASC, [CCode] ASC, [CRegType] ASC, [CNo] ASC),
    CONSTRAINT [FK_texpd24pckgocvutv6lu4aq5x] FOREIGN KEY ([CDepartCode], [CDepartStartDate], [CCode]) REFERENCES [dbo].[TStudent] ([CBranchCode], [CBranchStartDate], [CCode])
);


GO

CREATE TABLE [dbo].[TCTQuestion] (
    [CNo]         INT            IDENTITY (1, 1) NOT NULL,
    [CCtGrade]    NVARCHAR (15)  NULL,
    [CCtPeriod]   NVARCHAR (15)  NULL,
    [CQuestionNo] INT            NULL,
    [CQuestion]   NVARCHAR (255) NULL,
    [CComment]    NVARCHAR (255) NULL,
    [CCorrect]    INT            NULL,
    [CDevision]   INT            NULL,
    [CValueC]     INT            NULL,
    [CValueH]     INT            NULL,
    [CValueA]     INT            NULL,
    [CValueM]     INT            NULL,
    [CValueP]     INT            NULL,
    [CSumNo]      INT            NULL,
    [CSubNo]      INT            NULL,
    [CCHAMPNo]    INT            NULL,
    [CCtRevision] NVARCHAR (15)  NULL,
    CONSTRAINT [PK__TCTQuest__C1FF675B13C7D8B9] PRIMARY KEY CLUSTERED ([CNo] ASC)
);


GO

CREATE TABLE [dbo].[TContentAttach] (
    [CContentId]    BIGINT        NOT NULL,
    [CAttachFileId] BIGINT        NOT NULL,
    [CType]         NVARCHAR (15) NULL,
    [CFileIndex]    INT           NULL,
    [CIsHidden]     BIT           NULL,
    PRIMARY KEY CLUSTERED ([CContentId] ASC, [CAttachFileId] ASC),
    CONSTRAINT [FK1A3B682A83C4599] FOREIGN KEY ([CAttachFileId]) REFERENCES [dbo].[TFile] ([CFileId]),
    CONSTRAINT [FK1A3B682A9F2A2E67] FOREIGN KEY ([CContentId]) REFERENCES [dbo].[TContent] ([CContentId])
);


GO

CREATE TABLE [dbo].[TGlobalAddNaviKorea] (
    [CBuildingMngNo]       NVARCHAR (25)  NOT NULL,
    [CDongCode]            NVARCHAR (10)  NULL,
    [CSiDoName]            NVARCHAR (40)  NULL,
    [CSiGunGuName]         NVARCHAR (40)  NULL,
    [CEupMyunDongName]     NVARCHAR (40)  NULL,
    [CRoadCode]            NVARCHAR (12)  NULL,
    [CRoadName]            NVARCHAR (80)  NULL,
    [CBasement]            NVARCHAR (1)   NULL,
    [CBuildingNoMain]      INT            NULL,
    [CBuildingNoSub]       INT            NULL,
    [CPostNo]              NVARCHAR (5)   NULL,
    [CSiGunGuBuildingName] NVARCHAR (40)  NULL,
    [CUseClass]            NVARCHAR (100) NULL,
    [CHjDongCode]          NVARCHAR (10)  NULL,
    [CHjDongName]          NVARCHAR (40)  NULL,
    [CGroundFloor]         INT            NULL,
    [CBasementFloor]       INT            NULL,
    [CSharedHouse]         NVARCHAR (1)   NULL,
    [CBuildingCount]       INT            NULL,
    [CDetailBuildingName]  NVARCHAR (100) NULL,
    [CNameHistories]       NTEXT          NULL,
    [CDetailNameHistories] NTEXT          NULL,
    [CLiving]              NVARCHAR (1)   NULL,
    [CPosCenterX]          NVARCHAR (30)  NULL,
    [CPosCenterY]          NVARCHAR (30)  NULL,
    [CPosEntryX]           NVARCHAR (30)  NULL,
    [CPosEntryY]           NVARCHAR (30)  NULL,
    [CEnSiDoName]          NVARCHAR (40)  NULL,
    [CEnSiGunGuName]       NVARCHAR (40)  NULL,
    [CEnEupMyunDongName]   NVARCHAR (40)  NULL,
    [CEnRoadName]          NVARCHAR (80)  NULL,
    [CEupMyunDongClass]    NVARCHAR (1)   NULL,
    [CMovedReasonCode]     NVARCHAR (15)  NULL,
    PRIMARY KEY CLUSTERED ([CBuildingMngNo] ASC)
);


GO

CREATE TABLE [dbo].[TStudentCounselLeave] (
    [CStdBrcDptCode]      NVARCHAR (20)  NOT NULL,
    [CStdBrcDptStartDate] DATETIME       NOT NULL,
    [CStdCode]            NVARCHAR (50)  NOT NULL,
    [CNo]                 INT            NOT NULL,
    [CEndDatePayment]     DATETIME       NULL,
    [CEndDateLeave]       DATETIME       NULL,
    [CRemainDays]         INT            NULL,
    [CLeaveDate]          DATETIME       NULL,
    [CLeaveStatus]        NVARCHAR (50)  NULL,
    [CLeaveStartDate]     DATETIME       NULL,
    [CLeaveEndDate]       DATETIME       NULL,
    [CComment]            NVARCHAR (255) NULL,
    PRIMARY KEY CLUSTERED ([CStdBrcDptCode] ASC, [CStdBrcDptStartDate] ASC, [CStdCode] ASC, [CNo] ASC),
    CONSTRAINT [FK83929A693B557785] FOREIGN KEY ([CStdBrcDptCode], [CStdBrcDptStartDate], [CStdCode], [CNo]) REFERENCES [dbo].[TStudentCounsel] ([CScDepartCode], [CScDepartStartDate], [CScCode], [CNo])
);


GO

CREATE TABLE [dbo].[TTestInfo] (
    [CStdBranchCode]               NVARCHAR (20)  NOT NULL,
    [CStdBranchStartDate]          DATETIME       NOT NULL,
    [CCode]                        NVARCHAR (50)  NOT NULL,
    [CNo]                          INT            NOT NULL,
    [CRegistDate]                  DATETIME       NULL,
    [CBranchCode]                  NVARCHAR (20)  NULL,
    [CBranchStartDate]             DATETIME       NULL,
    [CTestType]                    NVARCHAR (15)  NULL,
    [CStudentAge]                  INT            NULL,
    [CStudentGrade]                NVARCHAR (15)  NULL,
    [CLoignID]                     NVARCHAR (255) NULL,
    [CLoginPW]                     NVARCHAR (255) NULL,
    [CCpnBranchCode]               NVARCHAR (20)  NULL,
    [CCpnBranchStartDate]          DATETIME       NULL,
    [CCpnIssueDate]                DATETIME       NULL,
    [CCpnGroupNo]                  INT            NULL,
    [CCpnCode]                     NVARCHAR (255) NULL,
    [CPayMoney]                    INT            NULL,
    [CResultType]                  INT            NULL,
    [CModifyType]                  INT            NULL,
    [CMbtiType]                    NVARCHAR (15)  NULL,
    [CMbtiStatus]                  NVARCHAR (15)  NULL,
    [CSurveyStatus]                NVARCHAR (15)  CONSTRAINT [DF_TTestInfo_CSurveyStatus] DEFAULT (N'Ready') NULL,
    [CCtStatus]                    NVARCHAR (15)  NULL,
    [CCtGrade]                     NVARCHAR (15)  NULL,
    [CCtPeriod]                    NVARCHAR (15)  NULL,
    [CPrinted]                     BIT            NULL,
    [CPrintDate]                   DATETIME       NULL,
    [CIsRefund]                    BIT            NULL,
    [CRefundMoney]                 INT            NULL,
    [CRefundDate]                  DATETIME       NULL,
    [CRefundComment]               NVARCHAR (255) NULL,
    [CCTPercent1]                  FLOAT (53)     NULL,
    [CCTPercent2]                  FLOAT (53)     NULL,
    [CCTPercent3]                  FLOAT (53)     NULL,
    [CCTPercent4]                  FLOAT (53)     NULL,
    [CCtRevision]                  NVARCHAR (15)  NULL,
    [CTestVersion]                 NVARCHAR (20)  DEFAULT ('Sigma') NOT NULL,
    [CRoyalty]                     INT            NULL,
    [CFixRoyalty]                  INT            NULL,
    [CSaleProof]                   BIGINT         NULL,
    [CRefundRoyalty]               INT            NULL,
    [CRefundFixRoyalty]            INT            NULL,
    [CRefundProofSeq]              BIGINT         NULL,
    [CIntroduceStdBranchCode]      NVARCHAR (20)  NULL,
    [CIntroduceStdBranchStartDate] DATETIME       NULL,
    [CIntroduceStdCode]            NVARCHAR (50)  NULL,
    [CIntroduceStudentPhoneNo]     NVARCHAR (255) NULL,
    [CLowGradeYn]                  BIT            NULL,
    [CLaterPhoneNo]                NVARCHAR (255) NULL,
    PRIMARY KEY CLUSTERED ([CStdBranchCode] ASC, [CStdBranchStartDate] ASC, [CCode] ASC, [CNo] ASC),
    CONSTRAINT [FK_6h1os19grne4ff2mx7deintyq] FOREIGN KEY ([CSaleProof]) REFERENCES [dbo].[TSaleProof] ([CProofSeq]),
    CONSTRAINT [FK_ld1j9oy6nfctb4gatp5m7t3mj] FOREIGN KEY ([CIntroduceStdBranchCode], [CIntroduceStdBranchStartDate], [CIntroduceStdCode]) REFERENCES [dbo].[TStudent] ([CBranchCode], [CBranchStartDate], [CCode]),
    CONSTRAINT [FK_lewhu8fltcvrmansjpbcceagc] FOREIGN KEY ([CRefundProofSeq]) REFERENCES [dbo].[TSaleProof] ([CProofSeq]),
    CONSTRAINT [FK65EF54D448562EA2] FOREIGN KEY ([CBranchCode], [CBranchStartDate]) REFERENCES [dbo].[TFacility] ([CDepartCode], [CDepartStartDate]),
    CONSTRAINT [FK65EF54D4596DFA43] FOREIGN KEY ([CStdBranchCode], [CStdBranchStartDate], [CCode]) REFERENCES [dbo].[TStudent] ([CBranchCode], [CBranchStartDate], [CCode]),
    CONSTRAINT [FK65EF54D4FCBEC0B3] FOREIGN KEY ([CCpnBranchCode], [CCpnBranchStartDate], [CCpnIssueDate], [CCpnGroupNo], [CCpnCode]) REFERENCES [dbo].[TTestCoupon] ([CBranchCode], [CBranchStartDate], [CCouponIssueDate], [CCouponNo], [CCode])
);


GO

CREATE TABLE [dbo].[TToDoRefMail] (
    [CToDoId]   BIGINT NOT NULL,
    [CMailId]   BIGINT NOT NULL,
    [CAddedSeq] INT    NOT NULL,
    PRIMARY KEY CLUSTERED ([CToDoId] ASC, [CMailId] ASC),
    CONSTRAINT [FK5DD730B036C2262B] FOREIGN KEY ([CToDoId]) REFERENCES [dbo].[TToDo] ([CId]),
    CONSTRAINT [FK5DD730B0B2D8C89E] FOREIGN KEY ([CMailId]) REFERENCES [dbo].[TMail] ([CMailId])
);


GO

CREATE TABLE [dbo].[TApprAddedSigner] (
    [CFormId]            NVARCHAR (15) NOT NULL,
    [CSeq]               INT           NOT NULL,
    [CStaffId]           NVARCHAR (30) NOT NULL,
    [CDepartCode]        NVARCHAR (20) NULL,
    [CDepartStartDate]   DATETIME      NULL,
    [CLevelType]         NVARCHAR (10) NULL,
    [CLevelCode]         NVARCHAR (10) NULL,
    [CLevelSeq]          INT           NULL,
    [COrder]             INT           NULL,
    [CArbitraryDecision] BIT           NOT NULL,
    PRIMARY KEY CLUSTERED ([CFormId] ASC, [CSeq] ASC, [CStaffId] ASC),
    CONSTRAINT [FKCAE69E2543360C3] FOREIGN KEY ([CFormId], [CSeq]) REFERENCES [dbo].[TApprAddedLine] ([CFormId], [CSeq]),
    CONSTRAINT [FKCAE69E2548D9611] FOREIGN KEY ([CDepartCode], [CDepartStartDate]) REFERENCES [dbo].[TDepartment] ([CDepartCode], [CDepartStartDate]),
    CONSTRAINT [FKCAE69E259E3C3476] FOREIGN KEY ([CStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FKCAE69E25E6DE7DCD] FOREIGN KEY ([CLevelType], [CLevelCode], [CLevelSeq]) REFERENCES [dbo].[TStaffLevel] ([CLevelType], [CLevelCode], [CLevelSeq])
);


GO

CREATE TABLE [dbo].[TBizDaily4Staff] (
    [CBizDate]         DATETIME       NOT NULL,
    [CGroupId]         NVARCHAR (20)  NOT NULL,
    [CWriterId]        NVARCHAR (30)  NOT NULL,
    [CRegTime]         DATETIME       NULL,
    [CLastTime]        DATETIME       NULL,
    [CWork]            NVARCHAR (255) NULL,
    [CApprDocId]       BIGINT         NULL,
    [CWriterLevelType] NVARCHAR (10)  NULL,
    [CWriterLevelCode] NVARCHAR (10)  NULL,
    [CWriterLevelSeq]  INT            NULL,
    [CPlan]            NTEXT          NULL,
    PRIMARY KEY CLUSTERED ([CBizDate] ASC, [CGroupId] ASC, [CWriterId] ASC),
    CONSTRAINT [FK_9whjvh04wlk53yhqsenags8sh] FOREIGN KEY ([CWriterLevelType], [CWriterLevelCode], [CWriterLevelSeq]) REFERENCES [dbo].[TStaffLevel] ([CLevelType], [CLevelCode], [CLevelSeq]),
    CONSTRAINT [FK_lh9kkdlkrlshq3eub7td8ft8m] FOREIGN KEY ([CWriterId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_sfuknvheay4mmo9ytygv1bvr7] FOREIGN KEY ([CGroupId]) REFERENCES [dbo].[TDepartGroup] ([CGroupId])
);


GO

CREATE TABLE [dbo].[otbl_Lecture_file] (
    [file_idx]   INT            IDENTITY (1, 1) NOT NULL,
    [lecture_id] INT            NULL,
    [file_ext]   NVARCHAR (20)  NULL,
    [filename_o] NVARCHAR (100) NULL,
    [filename_s] NVARCHAR (100) NULL,
    [filepath]   NVARCHAR (200) NULL,
    [del_yn]     CHAR (1)       NULL,
    CONSTRAINT [PK_otbl_Lecture_file] PRIMARY KEY CLUSTERED ([file_idx] ASC),
    CONSTRAINT [FK_otbl_Lecture_file_otbl_Lecture] FOREIGN KEY ([lecture_id]) REFERENCES [dbo].[otbl_Lecture] ([lecture_idx])
);


GO

CREATE TABLE [dbo].[TSalaryDeduct] (
    [CBrDepartCode]      NVARCHAR (20)  NOT NULL,
    [CBrDepartStartDate] DATETIME       NOT NULL,
    [CDeductMonth]       DATETIME       NOT NULL,
    [CNo]                INT            NOT NULL,
    [CApply]             BIT            NULL,
    [CType]              NVARCHAR (50)  NULL,
    [CName]              NVARCHAR (255) NULL,
    [CApplyType]         NVARCHAR (50)  NULL,
    [CApplyCode]         NVARCHAR (255) NULL,
    [CCalcType]          NVARCHAR (50)  NULL,
    [CCalcAmount]        BIGINT         NULL,
    [CRepeatType]        NVARCHAR (50)  NULL,
    [CRepeatEndMonth]    DATETIME       NULL,
    PRIMARY KEY CLUSTERED ([CBrDepartCode] ASC, [CBrDepartStartDate] ASC, [CDeductMonth] ASC, [CNo] ASC),
    CONSTRAINT [FK260849A12D35EBE2] FOREIGN KEY ([CBrDepartCode], [CBrDepartStartDate]) REFERENCES [dbo].[TFacility] ([CDepartCode], [CDepartStartDate])
);


GO

CREATE TABLE [dbo].[TEducationCourse] (
    [CNo]             INT            IDENTITY (1, 1) NOT NULL,
    [CName]           NVARCHAR (255) NOT NULL,
    [CStartDate]      DATETIME       NULL,
    [CEndDate]        DATETIME       NULL,
    [CStatus]         NVARCHAR (15)  NULL,
    [CApprovalStatus] NVARCHAR (15)  NULL,
    PRIMARY KEY CLUSTERED ([CNo] ASC)
);


GO

CREATE TABLE [dbo].[TTutoringTimeSetup] (
    [CDepartCode]              NVARCHAR (20)  NOT NULL,
    [CDepartStartDate]         DATETIME       NOT NULL,
    [CNo]                      INT            NOT NULL,
    [CStudentTutoringTimeType] NVARCHAR (255) NULL,
    [CStartTime]               NVARCHAR (255) NULL,
    [CEndTime]                 NVARCHAR (255) NULL,
    [CTimeInfoCodeGroupCode]   NVARCHAR (50)  NULL,
    [CTimeInfoCode]            NVARCHAR (50)  NULL,
    PRIMARY KEY CLUSTERED ([CDepartCode] ASC, [CDepartStartDate] ASC, [CNo] ASC),
    CONSTRAINT [FK_5qg053rx49aul4sa7lhlsp70r] FOREIGN KEY ([CTimeInfoCodeGroupCode], [CTimeInfoCode]) REFERENCES [dbo].[TCommonCode] ([CCodeGroup], [CCode]),
    CONSTRAINT [FK_69ns3mv2749p3297q2cqhli6e] FOREIGN KEY ([CDepartCode], [CDepartStartDate]) REFERENCES [dbo].[TFacility] ([CDepartCode], [CDepartStartDate])
);


GO

CREATE TABLE [dbo].[TMessageParticipant] (
    [CParticipantId]   NVARCHAR (30)  NOT NULL,
    [CStaffId]         NVARCHAR (30)  NOT NULL,
    [CCreateTime]      DATETIME       NOT NULL,
    [CInTime]          DATETIME       NOT NULL,
    [COutTime]         DATETIME       NULL,
    [CConnOutTime]     DATETIME       NULL,
    [CIsLock]          BIT            NULL,
    [CIsLast]          BIT            NULL,
    [CDeletedTime]     DATETIME       NULL,
    [CLastSenderId]    NVARCHAR (30)  NULL,
    [CLastTime]        DATETIME       NOT NULL,
    [CLastMessage]     NTEXT          NULL,
    [CPushRemainCount] INT            DEFAULT ('0') NOT NULL,
    [CIsFavorite]      BIT            DEFAULT ((0)) NOT NULL,
    [CFavoriteName]    NVARCHAR (255) NULL,
    PRIMARY KEY CLUSTERED ([CParticipantId] ASC, [CStaffId] ASC, [CCreateTime] ASC, [CInTime] ASC),
    CONSTRAINT [FK46E3EC20336574C2] FOREIGN KEY ([CStaffId], [CCreateTime]) REFERENCES [dbo].[TMessageRoom] ([CCreaterId], [CCreateTime]),
    CONSTRAINT [FK46E3EC20F2063649] FOREIGN KEY ([CParticipantId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK46E3EC20FFE9D0C7] FOREIGN KEY ([CLastSenderId]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[TGlobalAddressKoreaAddress] (
    [CManageNo]          NVARCHAR (25) NOT NULL,
    [CRoadCode]          NVARCHAR (12) NULL,
    [CRoadDongSeq]       NVARCHAR (2)  NULL,
    [CBasement]          NVARCHAR (1)  NULL,
    [CBuildingMainNo]    INT           NULL,
    [CBuildingSubNo]     INT           NULL,
    [CBasicAreaNo]       NVARCHAR (5)  NULL,
    [CChangeReasonCode]  NVARCHAR (2)  NULL,
    [CNotifiDate]        NVARCHAR (8)  NULL,
    [CBeforeAddressCode] NVARCHAR (25) NULL,
    [CDetailAddress]     NVARCHAR (1)  NULL,
    PRIMARY KEY CLUSTERED ([CManageNo] ASC),
    CONSTRAINT [FK56F3AB67D864231F] FOREIGN KEY ([CRoadCode], [CRoadDongSeq]) REFERENCES [dbo].[TGlobalAddressKoreaRoad] ([CCode], [CDongSeq])
);


GO

CREATE TABLE [dbo].[otbl_Accrued_credit] (
    [staff_id]     NVARCHAR (30)  NOT NULL,
    [manage_off]   FLOAT (53)     NULL,
    [manage_on]    FLOAT (53)     NULL,
    [teaching_off] FLOAT (53)     NULL,
    [teaching_on]  FLOAT (53)     NULL,
    [entrance_off] FLOAT (53)     NULL,
    [entrance_on]  FLOAT (53)     NULL,
    [learning_off] FLOAT (53)     NULL,
    [learning_on]  FLOAT (53)     NULL,
    [club_off]     FLOAT (53)     NULL,
    [club_on]      FLOAT (53)     NULL,
    [memo]         NVARCHAR (100) NULL,
    CONSTRAINT [PK_otbl_Accrued_credit] PRIMARY KEY CLUSTERED ([staff_id] ASC)
);


GO

CREATE TABLE [dbo].[TStaffUsage] (
    [CStaffId]    NVARCHAR (30)  NOT NULL,
    [COptionCode] NVARCHAR (255) NOT NULL,
    [CNow]        BIGINT         NOT NULL,
    [CMax]        BIGINT         NOT NULL,
    [CLastUpdate] DATETIME       NULL,
    PRIMARY KEY CLUSTERED ([CStaffId] ASC, [COptionCode] ASC),
    CONSTRAINT [FK60DC1A159E3C3476] FOREIGN KEY ([CStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[TReportStudentItemDetail] (
    [CReportStudentCode]     NVARCHAR (50)  NOT NULL,
    [CReportPatternCode]     NVARCHAR (50)  NOT NULL,
    [CReportPatternItemType] NVARCHAR (50)  NOT NULL,
    [CSeq]                   INT            NOT NULL,
    [CDate1]                 DATETIME       NULL,
    [CDate2]                 DATETIME       NULL,
    [CDate3]                 DATETIME       NULL,
    [CDate4]                 DATETIME       NULL,
    [CDate5]                 DATETIME       NULL,
    [CField1]                NVARCHAR (255) NULL,
    [CField2]                NVARCHAR (255) NULL,
    [CField3]                NVARCHAR (255) NULL,
    [CField4]                NVARCHAR (255) NULL,
    [CField5]                NVARCHAR (255) NULL,
    [CContent1]              NTEXT          NULL,
    [CContent2]              NTEXT          NULL,
    [CContent3]              NTEXT          NULL,
    [CContent4]              NTEXT          NULL,
    [CContent5]              NTEXT          NULL,
    PRIMARY KEY CLUSTERED ([CReportStudentCode] ASC, [CReportPatternCode] ASC, [CReportPatternItemType] ASC, [CSeq] ASC),
    CONSTRAINT [FK7D97E817B49D3965] FOREIGN KEY ([CReportStudentCode], [CReportPatternCode], [CReportPatternItemType]) REFERENCES [dbo].[TReportStudentItem] ([CReportStudentCode], [CReportPatternCode], [CReportPatternItemType])
);


GO

CREATE TABLE [dbo].[TBizWeekly4StaffFile] (
    [CBizDate]  DATETIME      NOT NULL,
    [CGroupId]  NVARCHAR (20) NOT NULL,
    [CWriterId] NVARCHAR (30) NOT NULL,
    [CAttachId] BIGINT        NOT NULL,
    [CSeq]      INT           NULL,
    PRIMARY KEY CLUSTERED ([CBizDate] ASC, [CGroupId] ASC, [CWriterId] ASC, [CAttachId] ASC),
    CONSTRAINT [FK_35aamdi43ambb0jry2csviqsn] FOREIGN KEY ([CBizDate], [CGroupId], [CWriterId]) REFERENCES [dbo].[TBizWeekly4Staff] ([CBizDate], [CGroupId], [CWriterId]),
    CONSTRAINT [FK_pkfhevle23dwbxy3pcmpy4mqp] FOREIGN KEY ([CAttachId]) REFERENCES [dbo].[TFile] ([CFileId])
);


GO

CREATE TABLE [dbo].[TComplaintContentSubAtt] (
    [CId]      BIGINT NOT NULL,
    [CSeq]     INT    NOT NULL,
    [CFileSeq] INT    NOT NULL,
    [CFileId]  BIGINT NULL,
    PRIMARY KEY CLUSTERED ([CId] ASC, [CSeq] ASC, [CFileSeq] ASC),
    CONSTRAINT [FK_7rd4megn5n5w77iack8lm2lpy] FOREIGN KEY ([CId], [CSeq]) REFERENCES [dbo].[TComplaintContentSub] ([CId], [CSeq]),
    CONSTRAINT [FK_i0sw6puttlet8b4nf784nckws] FOREIGN KEY ([CFileId]) REFERENCES [dbo].[TFile] ([CFileId])
);


GO

CREATE TABLE [dbo].[tbl_etongTutorPaymentPolicy] (
    [idx]             INT           IDENTITY (1, 1) NOT NULL,
    [branchCode]      NVARCHAR (20) CONSTRAINT [DF__tbl_etong__branc__0D3C19BD] DEFAULT (NULL) NULL,
    [tableCategory]   INT           CONSTRAINT [DF__tbl_etong__table__0E303DF6] DEFAULT (NULL) NULL,
    [tutorLevel]      INT           CONSTRAINT [DF__tbl_etong__tutor__0F24622F] DEFAULT (NULL) NULL,
    [minValue]        INT           CONSTRAINT [DF__tbl_etong__minVa__10188668] DEFAULT (NULL) NULL,
    [maxValue]        INT           CONSTRAINT [DF__tbl_etong__maxVa__110CAAA1] DEFAULT (NULL) NULL,
    [incentiveAmount] INT           CONSTRAINT [DF__tbl_etong__incen__1200CEDA] DEFAULT (NULL) NULL,
    [basicAmount]     INT           CONSTRAINT [DF__tbl_etong__basic__12F4F313] DEFAULT (NULL) NULL,
    [insertDate]      DATETIME      CONSTRAINT [DF__tbl_etong__inser__13E9174C] DEFAULT (NULL) NULL,
    [updateDate]      DATETIME      CONSTRAINT [DF__tbl_etong__updat__14DD3B85] DEFAULT (NULL) NULL
);


GO

CREATE TABLE [dbo].[TApprStaffFolder] (
    [CFolderId]     INT           IDENTITY (1, 1) NOT NULL,
    [COwnerId]      NVARCHAR (30) NOT NULL,
    [CName]         NVARCHAR (50) NOT NULL,
    [CDepth]        INT           NULL,
    [CDisplayIndex] INT           NULL,
    [CRemark]       NTEXT         NULL,
    [CParentId]     INT           NULL,
    PRIMARY KEY CLUSTERED ([CFolderId] ASC),
    CONSTRAINT [FK_3k8d585m6440pow6bsksuc04c] FOREIGN KEY ([COwnerId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_63xg7sxbtq0vmfm4w1v0dsxa5] FOREIGN KEY ([CParentId]) REFERENCES [dbo].[TApprStaffFolder] ([CFolderId])
);


GO

CREATE TABLE [dbo].[TSaleHistory] (
    [CSaleItemCode]    NVARCHAR (255) NOT NULL,
    [CNo]              INT            NOT NULL,
    [CBranchCode]      NVARCHAR (20)  NULL,
    [CBranchStartDate] DATETIME       NULL,
    [COrderDate]       DATETIME       NOT NULL,
    [COrderPrice]      FLOAT (53)     NULL,
    [COrderCount]      FLOAT (53)     NULL,
    [COrderValue]      FLOAT (53)     NULL,
    [CParcel]          NVARCHAR (255) NULL,
    [CTrackNumber]     NVARCHAR (255) NULL,
    [CStatus]          NVARCHAR (15)  NULL,
    [CParcelGroupCode] NVARCHAR (50)  NULL,
    [CParcelCode]      NVARCHAR (50)  NULL,
    [CParcelService]   FLOAT (53)     NULL,
    PRIMARY KEY CLUSTERED ([CSaleItemCode] ASC, [CNo] ASC),
    CONSTRAINT [FK7F72195948562EA2] FOREIGN KEY ([CBranchCode], [CBranchStartDate]) REFERENCES [dbo].[TFacility] ([CDepartCode], [CDepartStartDate]),
    CONSTRAINT [FK7F72195959EE0656] FOREIGN KEY ([CSaleItemCode]) REFERENCES [dbo].[TSaleItem] ([CCode]),
    CONSTRAINT [FK7F721959D09C586F] FOREIGN KEY ([CParcelGroupCode], [CParcelCode]) REFERENCES [dbo].[TCommonCode] ([CCodeGroup], [CCode])
);


GO

CREATE TABLE [dbo].[tb_MktRegStudent] (
    [it_MktRegStudentIdx]  INT           IDENTITY (1, 1) NOT NULL,
    [first_db_date]        DATETIME      NULL,
    [customer_mkt_raw_idx] INT           NULL,
    [db_date]              DATETIME      NULL,
    [allDiFc]              NVARCHAR (50) NULL,
    [mediaName]            NVARCHAR (50) NULL,
    [tutoringStartDate]    DATE          NULL,
    [counselStartDate]     DATE          NULL,
    [firstStartDate]       DATE          NULL,
    [tutoringPayDate]      DATE          NULL,
    [counselPayDate]       DATE          NULL,
    [firstPayDate]         DATE          NULL,
    [firstVltDate]         DATE          NULL,
    [branchCode]           NVARCHAR (50) NULL,
    [branchName]           NVARCHAR (50) NULL,
    [branchType]           NVARCHAR (30) NULL,
    [studentCode]          NVARCHAR (50) NULL,
    [studentName]          NVARCHAR (50) NULL,
    [grade]                NVARCHAR (30) NULL,
    [phoneStudent]         NVARCHAR (50) NULL,
    [phoneFather]          NVARCHAR (50) NULL,
    [phoneMother]          NVARCHAR (50) NULL,
    [InfoChecked]          BIT           CONSTRAINT [DF_tb_MktRegStudent_InfoChecked] DEFAULT ((0)) NULL,
    CONSTRAINT [PK_tb_MktRegStudent] PRIMARY KEY CLUSTERED ([it_MktRegStudentIdx] ASC)
);


GO

CREATE TABLE [dbo].[TApprDocStaff] (
    [CDocId]             BIGINT         NOT NULL,
    [CType]              NVARCHAR (15)  NOT NULL,
    [CSeq]               INT            NOT NULL,
    [CStaffId]           NVARCHAR (30)  NULL,
    [CStaffLevelType]    NVARCHAR (10)  NULL,
    [CStaffLevelCode]    NVARCHAR (10)  NULL,
    [CStaffLevelSeq]     INT            NULL,
    [CDepartCode]        NVARCHAR (20)  NULL,
    [CDepartStartDate]   DATETIME       NULL,
    [CFacilityCode]      NVARCHAR (20)  NULL,
    [CFacilityStartDate] DATETIME       NULL,
    [CHeaderStaffId]     NVARCHAR (30)  NULL,
    [CRemark1]           NVARCHAR (255) NULL,
    [CRemark2]           NVARCHAR (255) NULL,
    [CRemark3]           NVARCHAR (255) NULL,
    [CDate1]             DATETIME       NULL,
    [CDate2]             DATETIME       NULL,
    [CDate3]             DATETIME       NULL,
    [CLong1]             BIGINT         NULL,
    [CLong2]             BIGINT         NULL,
    [CLong3]             BIGINT         NULL,
    PRIMARY KEY CLUSTERED ([CDocId] ASC, [CType] ASC, [CSeq] ASC),
    CONSTRAINT [FK_7y9jpqvlhmq2q2ngek4jldggq] FOREIGN KEY ([CStaffLevelType], [CStaffLevelCode], [CStaffLevelSeq]) REFERENCES [dbo].[TStaffLevel] ([CLevelType], [CLevelCode], [CLevelSeq]),
    CONSTRAINT [FK_cpq8dqosfvwbp2mo6f4s78go4] FOREIGN KEY ([CFacilityCode], [CFacilityStartDate]) REFERENCES [dbo].[TFacility] ([CDepartCode], [CDepartStartDate]),
    CONSTRAINT [FK_f0q9mgo0sk9ld5c2i50i5gd5d] FOREIGN KEY ([CStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_f6uk3fsyam6fre07q966qrhes] FOREIGN KEY ([CDocId]) REFERENCES [dbo].[TApprDoc] ([CDocId]),
    CONSTRAINT [FK_npyb0jdtktb2ct1q52tb7irva] FOREIGN KEY ([CHeaderStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_p3whuxx4aj4vu4gbt80hrts0c] FOREIGN KEY ([CDepartCode], [CDepartStartDate]) REFERENCES [dbo].[TDepartment] ([CDepartCode], [CDepartStartDate])
);


GO

CREATE TABLE [dbo].[TTutorWorkTime] (
    [CTsbDepartCode]      NVARCHAR (20)  NOT NULL,
    [CTsbDepartStartDate] DATETIME       NOT NULL,
    [CTsbStaffId]         NVARCHAR (30)  NOT NULL,
    [CTsbBillBegin]       DATETIME       NOT NULL,
    [CTsbBillEnd]         DATETIME       NOT NULL,
    [CWorkBegin]          DATETIME       NOT NULL,
    [CWorkEnd]            DATETIME       NOT NULL,
    [CWorkHours]          FLOAT (53)     NULL,
    [CWorkType]           NVARCHAR (15)  NULL,
    [CIsBilled]           BIT            NULL,
    [CTimeTypeSting]      NVARCHAR (255) NULL,
    [CSalaryPay]          BIGINT         NULL,
    [CSalaryTmpPay]       BIGINT         NULL,
    PRIMARY KEY CLUSTERED ([CTsbDepartCode] ASC, [CTsbDepartStartDate] ASC, [CTsbStaffId] ASC, [CTsbBillBegin] ASC, [CTsbBillEnd] ASC, [CWorkBegin] ASC, [CWorkEnd] ASC),
    CONSTRAINT [FK53D55AE0D2FB999C] FOREIGN KEY ([CTsbDepartCode], [CTsbDepartStartDate], [CTsbStaffId], [CTsbBillBegin], [CTsbBillEnd]) REFERENCES [dbo].[TTutorSalaryBill] ([CDepartCode], [CDepartStartDate], [CStaffId], [CBillBegin], [CBillEnd])
);


GO

CREATE TABLE [dbo].[TMailFilterKeyword] (
    [CStaffId]    NVARCHAR (30) NOT NULL,
    [CFilterSeq]  INT           NOT NULL,
    [CTargetType] NVARCHAR (10) NOT NULL,
    [CKeywordSeq] INT           NOT NULL,
    [CKeyword]    NVARCHAR (50) NULL,
    PRIMARY KEY CLUSTERED ([CStaffId] ASC, [CFilterSeq] ASC, [CTargetType] ASC, [CKeywordSeq] ASC),
    CONSTRAINT [FK353170E6F2D9CB3C] FOREIGN KEY ([CStaffId], [CFilterSeq], [CTargetType]) REFERENCES [dbo].[TMailFilterTarget] ([CStaffId], [CFilterSeq], [CTargetType])
);


GO

CREATE TABLE [dbo].[TPartnerServer] (
    [CServerId]     BIGINT         IDENTITY (1, 1) NOT NULL,
    [CCompany]      BIGINT         NULL,
    [CServerName]   NVARCHAR (50)  NULL,
    [CServerIp]     NVARCHAR (50)  NULL,
    [CServerHost]   NVARCHAR (100) NULL,
    [CServerOs]     NVARCHAR (10)  NULL,
    [CType]         NVARCHAR (10)  NULL,
    [CServerPortNo] INT            NULL,
    [CDbPortNo]     INT            NULL,
    [CDbSid]        NVARCHAR (50)  NULL,
    [CRemark]       NTEXT          NULL,
    [CRegStaffId]   NVARCHAR (30)  NULL,
    [CRegTime]      DATETIME       NOT NULL,
    [CUpdStaffId]   NVARCHAR (30)  NULL,
    [CUpdTime]      DATETIME       NULL,
    [COwnerId]      NVARCHAR (30)  NULL,
    PRIMARY KEY CLUSTERED ([CServerId] ASC),
    CONSTRAINT [FK_ed9888fshexmqkngtju7pdvcq] FOREIGN KEY ([CCompany]) REFERENCES [dbo].[TPartner] ([CId]),
    CONSTRAINT [FK_ip23icq1r2yix93f5yhcb1qrd] FOREIGN KEY ([CRegStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_k57nu0reeokae1yxe5ngklc0l] FOREIGN KEY ([COwnerId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_t82ei73mvqwfwnia1ossyic3g] FOREIGN KEY ([CUpdStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[TCourseRegisterMonth] (
    [CCourseRegister]     INT      NOT NULL,
    [CNo]                 INT      NOT NULL,
    [CStartDate]          DATETIME NULL,
    [CEndDate]            DATETIME NULL,
    [CChangeBookingCount] INT      NULL,
    [CContinueCount]      INT      NULL,
    [CContinueCheck]      BIT      NULL,
    PRIMARY KEY CLUSTERED ([CCourseRegister] ASC, [CNo] ASC),
    CONSTRAINT [FK_kgjpg8dn5u7c0nil9wrgyht6p] FOREIGN KEY ([CCourseRegister]) REFERENCES [dbo].[TCourseRegister] ([CCourseSeq])
);


GO

CREATE TABLE [dbo].[TApprFormStaff] (
    [CFormId]            NVARCHAR (15) NOT NULL,
    [COptionKey]         NVARCHAR (30) NOT NULL,
    [COrder]             INT           NOT NULL,
    [CStaffId]           NVARCHAR (30) NULL,
    [CDepartCode]        NVARCHAR (20) NULL,
    [CDepartStartDate]   DATETIME      NULL,
    [CLevelType]         NVARCHAR (10) NULL,
    [CLevelCode]         NVARCHAR (10) NULL,
    [CLevelSeq]          INT           NULL,
    [CFacilityCode]      NVARCHAR (20) NULL,
    [CFacilityStartDate] DATETIME      NULL,
    PRIMARY KEY CLUSTERED ([CFormId] ASC, [COptionKey] ASC, [COrder] ASC),
    CONSTRAINT [FK_ljmy4oegsjed8vbgvy0wu6o9x] FOREIGN KEY ([CFacilityCode], [CFacilityStartDate]) REFERENCES [dbo].[TFacility] ([CDepartCode], [CDepartStartDate]),
    CONSTRAINT [FKD92CFD171FA9FD95] FOREIGN KEY ([CFormId]) REFERENCES [dbo].[TApprForm] ([CFormId]),
    CONSTRAINT [FKD92CFD1748D9611] FOREIGN KEY ([CDepartCode], [CDepartStartDate]) REFERENCES [dbo].[TDepartment] ([CDepartCode], [CDepartStartDate]),
    CONSTRAINT [FKD92CFD179E3C3476] FOREIGN KEY ([CStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FKD92CFD17E6DE7DCD] FOREIGN KEY ([CLevelType], [CLevelCode], [CLevelSeq]) REFERENCES [dbo].[TStaffLevel] ([CLevelType], [CLevelCode], [CLevelSeq])
);


GO

CREATE TABLE [dbo].[tb_QnaCatWatchStaff] (
    [it_QnaCatWatchStaffIdx]    INT           IDENTITY (1, 1) NOT NULL,
    [it_QnaCatIdx]              INT           NULL,
    [st_CStaffId]               NVARCHAR (30) NOT NULL,
    [st_CStaffIdMake]           NVARCHAR (30) NOT NULL,
    [dt_QnaCatWatchStaffMake]   DATETIME      NOT NULL,
    [dt_QnaCatWatchStaffDelete] DATETIME      NULL,
    CONSTRAINT [PK_tb_QnaCatWatchStaff] PRIMARY KEY CLUSTERED ([it_QnaCatWatchStaffIdx] ASC),
    CONSTRAINT [FK_tb_QnaCatWatchStaff_tb_QnaCat] FOREIGN KEY ([it_QnaCatIdx]) REFERENCES [dbo].[tb_QnaCat] ([it_QnaCatIdx])
);


GO

CREATE TABLE [dbo].[TAcademicSeason] (
    [CCode]            NVARCHAR (50)  NOT NULL,
    [CDepartCode]      NVARCHAR (20)  NOT NULL,
    [CDepartStartDate] DATETIME       NOT NULL,
    [CName]            NVARCHAR (255) NULL,
    [CStartDate]       DATETIME       NULL,
    [CEndDate]         DATETIME       NULL,
    [CComment]         NTEXT          NULL,
    [CRegDate]         DATETIME       NULL,
    [CRegStaffId]      NVARCHAR (30)  NULL,
    [CApprovalStatus]  NVARCHAR (15)  NULL,
    PRIMARY KEY CLUSTERED ([CCode] ASC, [CDepartCode] ASC, [CDepartStartDate] ASC),
    CONSTRAINT [FK4B809C3E19E633C8] FOREIGN KEY ([CRegStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK4B809C3E282531E2] FOREIGN KEY ([CDepartCode], [CDepartStartDate]) REFERENCES [dbo].[TFacility] ([CDepartCode], [CDepartStartDate])
);


GO

CREATE TABLE [dbo].[TMyContentFolder] (
    [CFolderId]       BIGINT         IDENTITY (1, 1) NOT NULL,
    [CBoard]          NVARCHAR (20)  NULL,
    [COwnerStaffId]   NVARCHAR (255) NULL,
    [CDepth]          INT            NOT NULL,
    [CName0]          NVARCHAR (50)  NOT NULL,
    [CName1]          NVARCHAR (50)  NULL,
    [CName2]          NVARCHAR (50)  NULL,
    [CName3]          NVARCHAR (50)  NULL,
    [CName4]          NVARCHAR (50)  NULL,
    [CDisplayIndex]   INT            NULL,
    [CRemark]         NVARCHAR (255) NULL,
    [CTempInt0]       INT            NULL,
    [CTempInt1]       INT            NULL,
    [CTempInt2]       INT            NULL,
    [CTempStr0]       NVARCHAR (255) NULL,
    [CTempStr1]       NVARCHAR (255) NULL,
    [CTempStr2]       NVARCHAR (255) NULL,
    [CParentFolder]   BIGINT         NULL,
    [CParentFolderId] BIGINT         NULL,
    [CBoardId]        NVARCHAR (20)  NULL,
    [CAutoRcv]        BIT            NULL,
    [CAutoSnd]        BIT            NULL,
    PRIMARY KEY CLUSTERED ([CFolderId] ASC),
    CONSTRAINT [FK_6vnj6pdaq7a32rybusk6xdh5c] FOREIGN KEY ([CBoardId]) REFERENCES [dbo].[TBoard] ([CBoardId]),
    CONSTRAINT [FK_dkygvmtalmfeu6u5tussvpjfg] FOREIGN KEY ([CBoard]) REFERENCES [dbo].[TBoard] ([CBoardId]),
    CONSTRAINT [FK_lktq42ehmwpyp4kxjmbi6k7ph] FOREIGN KEY ([CParentFolder]) REFERENCES [dbo].[TMyContentFolder] ([CFolderId]),
    CONSTRAINT [FK_p5whmagnu1rn33hw4vxw7u555] FOREIGN KEY ([CParentFolderId]) REFERENCES [dbo].[TMyContentFolder] ([CFolderId])
);


GO

CREATE TABLE [dbo].[TResource] (
    [CResourceId]   INT           IDENTITY (1, 1) NOT NULL,
    [CName0]        NVARCHAR (50) NOT NULL,
    [CName1]        NVARCHAR (50) NULL,
    [CName2]        NVARCHAR (50) NULL,
    [CName3]        NVARCHAR (50) NULL,
    [CName4]        NVARCHAR (50) NULL,
    [CShortName0]   NVARCHAR (10) NOT NULL,
    [CShortName1]   NVARCHAR (10) NULL,
    [CShortName2]   NVARCHAR (10) NULL,
    [CShortName3]   NVARCHAR (10) NULL,
    [CShortName4]   NVARCHAR (10) NULL,
    [CColor]        NVARCHAR (15) NULL,
    [CAllowDupl]    BIT           NOT NULL,
    [CEnabled]      BIT           NULL,
    [CRemark]       NTEXT         NULL,
    [CFacilityCode] NVARCHAR (20) NULL,
    PRIMARY KEY CLUSTERED ([CResourceId] ASC)
);


GO

CREATE TABLE [dbo].[TApprFormDuty] (
    [CFormId]    NVARCHAR (15) NOT NULL,
    [COptionKey] NVARCHAR (30) NOT NULL,
    [COrder]     INT           NOT NULL,
    [CLevelType] NVARCHAR (10) NULL,
    [CLevelCode] NVARCHAR (10) NULL,
    [CLevelSeq]  INT           NULL,
    PRIMARY KEY CLUSTERED ([CFormId] ASC, [COptionKey] ASC, [COrder] ASC),
    CONSTRAINT [FK61D15DBF1FA9FD95] FOREIGN KEY ([CFormId]) REFERENCES [dbo].[TApprForm] ([CFormId]),
    CONSTRAINT [FK61D15DBFE6DE7DCD] FOREIGN KEY ([CLevelType], [CLevelCode], [CLevelSeq]) REFERENCES [dbo].[TStaffLevel] ([CLevelType], [CLevelCode], [CLevelSeq])
);


GO

CREATE TABLE [dbo].[TTestYoinCdYuk] (
    [CKind]        VARCHAR (20)  NULL,
    [CNum]         INT           NULL,
    [CValue]       VARCHAR (10)  NULL,
    [CTestVersion] NVARCHAR (20) DEFAULT ('Sigma') NOT NULL
);


GO

CREATE TABLE [dbo].[TSalaryPlanYear] (
    [CStaffId]     NVARCHAR (30) NOT NULL,
    [CYear]        INT           NOT NULL,
    [CSalaryType]  NVARCHAR (50) NULL,
    [CSalaryYear]  BIGINT        NULL,
    [CSalaryMonth] BIGINT        NULL,
    [CSalaryHour]  BIGINT        NULL,
    [CInsurance]   BIT           NULL,
    PRIMARY KEY CLUSTERED ([CStaffId] ASC, [CYear] ASC),
    CONSTRAINT [FK107038649E3C3476] FOREIGN KEY ([CStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[TSchool] (
    [CCode]               NVARCHAR (50)  NOT NULL,
    [CName]               NVARCHAR (255) NULL,
    [CPhone]              NVARCHAR (255) NULL,
    [CFax]                NVARCHAR (255) NULL,
    [CHomepage]           NVARCHAR (255) NULL,
    [CEmail]              NVARCHAR (255) NULL,
    [CZip]                NVARCHAR (255) NULL,
    [CAddress1]           NVARCHAR (255) NULL,
    [CAddress2]           NVARCHAR (255) NULL,
    [CAreaGroupCode]      NVARCHAR (50)  NULL,
    [CAreaCommonCode]     NVARCHAR (50)  NULL,
    [CDevisionGroupCode]  NVARCHAR (50)  NULL,
    [CDevisionCommonCode] NVARCHAR (50)  NULL,
    [CTypeGroupCode]      NVARCHAR (50)  NULL,
    [CTypeCommonCode]     NVARCHAR (50)  NULL,
    [CRegTime]            DATETIME       NULL,
    [CStaffId]            NVARCHAR (30)  NULL,
    [CAddresss1]          NVARCHAR (255) NULL,
    CONSTRAINT [PK__TSchool__66C1C0830777106D] PRIMARY KEY CLUSTERED ([CCode] ASC),
    CONSTRAINT [FK_TSchool_TCommonCode] FOREIGN KEY ([CAreaGroupCode], [CAreaCommonCode]) REFERENCES [dbo].[TCommonCode] ([CCodeGroup], [CCode]),
    CONSTRAINT [FKEED1B8E88B28E1D] FOREIGN KEY ([CDevisionGroupCode], [CDevisionCommonCode]) REFERENCES [dbo].[TCommonCode] ([CCodeGroup], [CCode]),
    CONSTRAINT [FKEED1B8E891684FFD] FOREIGN KEY ([CTypeGroupCode], [CTypeCommonCode]) REFERENCES [dbo].[TCommonCode] ([CCodeGroup], [CCode]),
    CONSTRAINT [FKEED1B8E89E3C3476] FOREIGN KEY ([CStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[TTutorSalaryBill] (
    [CDepartCode]         NVARCHAR (20)  NOT NULL,
    [CDepartStartDate]    DATETIME       NOT NULL,
    [CStaffId]            NVARCHAR (30)  NOT NULL,
    [CBillBegin]          DATETIME       NOT NULL,
    [CBillEnd]            DATETIME       NOT NULL,
    [CBillDate]           DATETIME       NULL,
    [CManagerId]          NVARCHAR (30)  NULL,
    [CCommonGroupCode]    NVARCHAR (50)  NULL,
    [CCommonCode]         NVARCHAR (50)  NULL,
    [CSalaryHourly]       BIGINT         NULL,
    [CSalaryTutoring]     BIGINT         NULL,
    [CSalaryPrepare]      BIGINT         NULL,
    [CSalaryDailyCheck]   BIGINT         NULL,
    [CWorkTimeNormal]     FLOAT (53)     NULL,
    [CWorkCountTutoring]  FLOAT (53)     NULL,
    [CWorkCountPrepare]   FLOAT (53)     NULL,
    [CWorkTimeDailyCheck] FLOAT (53)     NULL,
    [CSalaryTotal]        BIGINT         NULL,
    [CSalaryTax1]         BIGINT         NULL,
    [CSalaryTax2]         BIGINT         NULL,
    [CSalaryPay]          BIGINT         NULL,
    [CBillStatus]         NVARCHAR (255) NULL,
    [CPayDate]            DATETIME       NULL,
    [CApprovalStatus]     NVARCHAR (15)  NULL,
    [CRegStaffId]         NVARCHAR (30)  NULL,
    PRIMARY KEY CLUSTERED ([CDepartCode] ASC, [CDepartStartDate] ASC, [CStaffId] ASC, [CBillBegin] ASC, [CBillEnd] ASC),
    CONSTRAINT [FK7AC059D319E633C8] FOREIGN KEY ([CRegStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK7AC059D3282531E2] FOREIGN KEY ([CDepartCode], [CDepartStartDate]) REFERENCES [dbo].[TFacility] ([CDepartCode], [CDepartStartDate]),
    CONSTRAINT [FK7AC059D33F6CE6C3] FOREIGN KEY ([CManagerId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK7AC059D39E3C3476] FOREIGN KEY ([CStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK7AC059D3C74495AF] FOREIGN KEY ([CCommonGroupCode], [CCommonCode]) REFERENCES [dbo].[TCommonCode] ([CCodeGroup], [CCode])
);


GO

CREATE TABLE [dbo].[TEisEtc] (
    [CMenuId]     NVARCHAR (50)  NOT NULL,
    [CYyyymm]     NVARCHAR (255) NOT NULL,
    [CColId]      NVARCHAR (255) NOT NULL,
    [CEtc]        NVARCHAR (255) NULL,
    [CTmpString1] NVARCHAR (255) NULL,
    [CTmpString2] NVARCHAR (255) NULL,
    [CTmpInt1]    INT            NULL,
    [CTmpInt2]    INT            NULL,
    PRIMARY KEY CLUSTERED ([CMenuId] ASC, [CYyyymm] ASC, [CColId] ASC)
);


GO

CREATE TABLE [dbo].[TExecAttend] (
    [CCourseNo]      INT            NOT NULL,
    [CEduNo]         INT            NOT NULL,
    [CApplyNo]       INT            NOT NULL,
    [CCurriCourseNo] INT            NOT NULL,
    [CCurriEduNo]    INT            NOT NULL,
    [CCurriNo]       INT            NOT NULL,
    [CType]          NVARCHAR (15)  NULL,
    [CComment]       NVARCHAR (255) NULL,
    PRIMARY KEY CLUSTERED ([CCourseNo] ASC, [CEduNo] ASC, [CApplyNo] ASC, [CCurriCourseNo] ASC, [CCurriEduNo] ASC, [CCurriNo] ASC),
    CONSTRAINT [FK194DB5FF340CF26F] FOREIGN KEY ([CCourseNo], [CEduNo], [CApplyNo]) REFERENCES [dbo].[TEducationApply] ([CCourseNo], [CEduNo], [CNo]),
    CONSTRAINT [FK194DB5FF61656F6D] FOREIGN KEY ([CCurriCourseNo], [CCurriEduNo], [CCurriNo]) REFERENCES [dbo].[TCurriculum] ([CCourseNo], [CEduNo], [CNo])
);


GO

CREATE TABLE [dbo].[TPollPartiExamResult] (
    [CExamplePollId]     BIGINT        NOT NULL,
    [CExampleNo]         INT           NOT NULL,
    [CParticipantPollId] BIGINT        NOT NULL,
    [CParticipantId]     NVARCHAR (30) NOT NULL,
    [CJoinTime]          DATETIME      NOT NULL,
    [CTextAnswer]        NTEXT         NULL,
    PRIMARY KEY CLUSTERED ([CExamplePollId] ASC, [CExampleNo] ASC, [CParticipantPollId] ASC, [CParticipantId] ASC, [CJoinTime] ASC),
    CONSTRAINT [FKECF865DF2D7738DA] FOREIGN KEY ([CExamplePollId], [CExampleNo]) REFERENCES [dbo].[TPollExample] ([CPollId], [CNo]),
    CONSTRAINT [FKECF865DFE6DC800F] FOREIGN KEY ([CParticipantPollId], [CParticipantId]) REFERENCES [dbo].[TPollParticipant] ([CPollId], [CParticipantId])
);


GO

CREATE TABLE [dbo].[TStaffOption] (
    [CStaffId]       NVARCHAR (30)  NOT NULL,
    [COptionCode]    NVARCHAR (255) NOT NULL,
    [CDepth]         INT            NOT NULL,
    [CStringValue1]  NVARCHAR (255) NULL,
    [CStringValue2]  NVARCHAR (255) NULL,
    [CStringValue3]  NVARCHAR (255) NULL,
    [CStringValue4]  NVARCHAR (255) NULL,
    [CStringValue5]  NVARCHAR (255) NULL,
    [CStringValue6]  NVARCHAR (255) NULL,
    [CStringValue7]  NVARCHAR (255) NULL,
    [CStringValue8]  NVARCHAR (255) NULL,
    [CStringValue9]  NVARCHAR (255) NULL,
    [CStringValue10] NVARCHAR (255) NULL,
    [CLongValue1]    BIGINT         NULL,
    [CLongValue2]    BIGINT         NULL,
    [CLongValue3]    BIGINT         NULL,
    [CLongValue4]    BIGINT         NULL,
    [CLongValue5]    BIGINT         NULL,
    [CLongValue6]    BIGINT         NULL,
    [CLongValue7]    BIGINT         NULL,
    [CLongValue8]    BIGINT         NULL,
    [CLongValue9]    BIGINT         NULL,
    [CLongValue10]   BIGINT         NULL,
    [CTextValue1]    NTEXT          NULL,
    [CTextValue2]    NTEXT          NULL,
    PRIMARY KEY CLUSTERED ([CStaffId] ASC, [COptionCode] ASC),
    CONSTRAINT [FKB0487A819E3C3476] FOREIGN KEY ([CStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[TCommunity] (
    [CId]                INT            IDENTITY (1, 1) NOT NULL,
    [CName]              NVARCHAR (255) NULL,
    [CType]              NVARCHAR (50)  NULL,
    [CSysopId]           NVARCHAR (30)  NULL,
    [CRequestDate]       DATETIME       NULL,
    [CApproveDate]       DATETIME       NULL,
    [CCloseDate]         DATETIME       NULL,
    [CCloseReason]       NVARCHAR (255) NULL,
    [CMainImage]         BIGINT         NULL,
    [CApproveType]       INT            NULL,
    [CExplain]           NVARCHAR (255) NULL,
    [CStatus]            NVARCHAR (255) NULL,
    [CFacilityCode]      NVARCHAR (20)  NULL,
    [CFacilityStartDate] DATETIME       NULL,
    [CIsAll]             BIT            NULL,
    PRIMARY KEY CLUSTERED ([CId] ASC),
    CONSTRAINT [FK_743713yvqhbc38gc0hk0652wl] FOREIGN KEY ([CFacilityCode], [CFacilityStartDate]) REFERENCES [dbo].[TFacility] ([CDepartCode], [CDepartStartDate]),
    CONSTRAINT [FK47506DF596BFD5D9] FOREIGN KEY ([CMainImage]) REFERENCES [dbo].[TFile] ([CFileId]),
    CONSTRAINT [FK47506DF5A7C65384] FOREIGN KEY ([CSysopId]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[TStaffWeekPlan] (
    [CStaffId]         NVARCHAR (30) NOT NULL,
    [CWeekFirst]       DATETIME      NOT NULL,
    [CBranchCode]      NVARCHAR (20) NOT NULL,
    [CBranchStartDate] DATETIME      NOT NULL,
    [CWeekLast]        DATETIME      NOT NULL,
    [CMonday]          BIT           NULL,
    [CTuesday]         BIT           NULL,
    [CWednesday]       BIT           NULL,
    [CThursday]        BIT           NULL,
    [CFriday]          BIT           NULL,
    [CSaturday]        BIT           NULL,
    [CSunday]          BIT           NULL,
    [CAttendStatus]    NVARCHAR (15) NULL,
    CONSTRAINT [PK_TStaffWeekPlan] PRIMARY KEY CLUSTERED ([CStaffId] ASC, [CWeekFirst] ASC),
    CONSTRAINT [FK9FAE244948562EA2] FOREIGN KEY ([CBranchCode], [CBranchStartDate]) REFERENCES [dbo].[TFacility] ([CDepartCode], [CDepartStartDate]),
    CONSTRAINT [FK9FAE24499E3C3476] FOREIGN KEY ([CStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[TMenuPermDepartGroup] (
    [CMenuId]        NVARCHAR (50) NOT NULL,
    [CDepartGroupId] NVARCHAR (20) NOT NULL,
    [CAccessAll]     BIT           NULL,
    [CAccessMine]    BIT           NULL,
    [CCreateAll]     BIT           NULL,
    [CCreateMine]    BIT           NULL,
    [CModifyAll]     BIT           NULL,
    [CModifyMine]    BIT           NULL,
    [CDeleteAll]     BIT           NULL,
    [CDeleteMine]    BIT           NULL,
    [CApplyOrder]    INT           NULL,
    PRIMARY KEY CLUSTERED ([CMenuId] ASC, [CDepartGroupId] ASC),
    CONSTRAINT [FK5A300D889DD26866] FOREIGN KEY ([CDepartGroupId]) REFERENCES [dbo].[TDepartGroup] ([CGroupId]),
    CONSTRAINT [FK5A300D88E3BB6C4A] FOREIGN KEY ([CMenuId]) REFERENCES [dbo].[TMenu] ([CMenuId])
);


GO

CREATE TABLE [dbo].[TStaffAddress] (
    [CStaffId]          NVARCHAR (30)  NOT NULL,
    [CCompanyPostNo]    NVARCHAR (10)  NULL,
    [CCompanyAddress]   NVARCHAR (255) NULL,
    [CTelephone]        NVARCHAR (100) NULL,
    [CInnerNo]          NVARCHAR (100) NULL,
    [CFaxNo]            NVARCHAR (100) NULL,
    [CEmailAddress]     NVARCHAR (255) NULL,
    [CHomePostNo]       NVARCHAR (10)  NULL,
    [CHomeAddress]      NVARCHAR (255) NULL,
    [CMobileCompany]    NVARCHAR (100) NULL,
    [CMobileNo]         NVARCHAR (100) NULL,
    [CModDateTime]      DATETIME       NULL,
    [CRemark]           NVARCHAR (255) NULL,
    [CBirthday]         NVARCHAR (10)  NULL,
    [CBirthdayDateType] NVARCHAR (2)   NULL,
    [CHiddenMobile]     BIT            NULL,
    [CHiddenHomeAdd]    BIT            NULL,
    [CMainNoType]       NVARCHAR (255) DEFAULT ('C') NULL,
    [CApprovalEmail]    NVARCHAR (200) NULL,
    [CApprovalHpUrl]    NVARCHAR (200) NULL,
    PRIMARY KEY CLUSTERED ([CStaffId] ASC),
    CONSTRAINT [FK5ED7EB689E3C3476] FOREIGN KEY ([CStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[TStudentLevelHistory] (
    [CDepartCode]      NVARCHAR (20)  NOT NULL,
    [CDepartStartDate] DATETIME       NOT NULL,
    [CCode]            NVARCHAR (50)  NOT NULL,
    [CRegDate]         DATETIME       NOT NULL,
    [CCommonGroupCode] NVARCHAR (50)  NULL,
    [CCommonCode]      NVARCHAR (50)  NULL,
    [CRegStaff]        NVARCHAR (30)  NULL,
    [CCommnet]         NVARCHAR (255) NULL,
    PRIMARY KEY CLUSTERED ([CDepartCode] ASC, [CDepartStartDate] ASC, [CCode] ASC, [CRegDate] ASC),
    CONSTRAINT [FKDD9519571122766D] FOREIGN KEY ([CRegStaff]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FKDD95195765419F63] FOREIGN KEY ([CDepartCode], [CDepartStartDate], [CCode]) REFERENCES [dbo].[TStudent] ([CBranchCode], [CBranchStartDate], [CCode]),
    CONSTRAINT [FKDD951957C74495AF] FOREIGN KEY ([CCommonGroupCode], [CCommonCode]) REFERENCES [dbo].[TCommonCode] ([CCodeGroup], [CCode])
);


GO

CREATE TABLE [dbo].[TApprFolderDoc] (
    [CFolderId]        INT            NOT NULL,
    [CDocId]           BIGINT         NOT NULL,
    [CBaseTime]        DATETIME       NOT NULL,
    [CSecurityLevelId] INT            NULL,
    [CStatus]          NVARCHAR (15)  NOT NULL,
    [CRegStaffId]      NVARCHAR (30)  NULL,
    [CRegTime]         DATETIME       NOT NULL,
    [CHidden]          BIT            NOT NULL,
    [CTitle]           NVARCHAR (255) NOT NULL,
    [CDocNo]           NVARCHAR (200) NULL,
    [CWriterId]        NVARCHAR (30)  NULL,
    [CImplState]       NVARCHAR (255) NULL,
    [CByReference]     BIT            DEFAULT ((0)) NULL,
    [CProjectId]       NVARCHAR (40)  NULL,
    [CTemp1]           NVARCHAR (40)  NULL,
    [CTemp2]           NVARCHAR (40)  NULL,
    [CTemp3]           NVARCHAR (40)  NULL,
    [CTemp4]           NVARCHAR (40)  NULL,
    [CTemp5]           NVARCHAR (40)  NULL,
    [CTemp6]           NVARCHAR (40)  NULL,
    [CTemp7]           NVARCHAR (40)  NULL,
    [CTemp8]           NVARCHAR (40)  NULL,
    [CTemp9]           NVARCHAR (40)  NULL,
    [CTemp10]          NVARCHAR (40)  NULL,
    PRIMARY KEY CLUSTERED ([CFolderId] ASC, [CDocId] ASC),
    CONSTRAINT [FK8D684E8519E633C8] FOREIGN KEY ([CRegStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK8D684E85A4924F54] FOREIGN KEY ([CProjectId]) REFERENCES [dbo].[TProject] ([CProjectId]),
    CONSTRAINT [FK8D684E85A70B4CD1] FOREIGN KEY ([CSecurityLevelId]) REFERENCES [dbo].[TApprSecurityLevel] ([CLevelId]),
    CONSTRAINT [FK8D684E85CBAA906F] FOREIGN KEY ([CWriterId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK8D684E85D260A5E9] FOREIGN KEY ([CFolderId]) REFERENCES [dbo].[TApprFolder] ([CFolderId]),
    CONSTRAINT [FK8D684E85F064EB59] FOREIGN KEY ([CDocId]) REFERENCES [dbo].[TApprDoc] ([CDocId])
);


GO

CREATE TABLE [dbo].[TContentLastNo] (
    [CFormat] NVARCHAR (100) NOT NULL,
    [CLastNo] NVARCHAR (100) NOT NULL,
    PRIMARY KEY CLUSTERED ([CFormat] ASC, [CLastNo] ASC)
);


GO

CREATE TABLE [dbo].[TApprDocSigner] (
    [CDocId]              BIGINT         NOT NULL,
    [CSeq]                INT            NOT NULL,
    [CInstead]            BIT            NOT NULL,
    [CSignOrder]          INT            NULL,
    [CGroupNo]            INT            NULL,
    [CHidden]             BIT            NULL,
    [CSignerId]           NVARCHAR (30)  NULL,
    [CLevelType]          NVARCHAR (10)  NULL,
    [CLevelCode]          NVARCHAR (10)  NULL,
    [CLevelSeq]           INT            NULL,
    [CDepartCode]         NVARCHAR (20)  NULL,
    [CDepartStartDate]    DATETIME       NULL,
    [CSignerType]         NVARCHAR (15)  NOT NULL,
    [CWait]               BIT            NOT NULL,
    [CDeferred]           BIT            NOT NULL,
    [CBaseTime]           DATETIME       NOT NULL,
    [CReadyTime]          DATETIME       NOT NULL,
    [CReadyReadTime]      DATETIME       NOT NULL,
    [CProcessTime]        DATETIME       NOT NULL,
    [CAfterReadTime]      DATETIME       NOT NULL,
    [CPassedTime]         DATETIME       NOT NULL,
    [CPassByStaffId]      NVARCHAR (30)  NULL,
    [CSignType]           NVARCHAR (255) NOT NULL,
    [CApplySignFileIndex] INT            NULL,
    [CImplType]           NVARCHAR (15)  NULL,
    [CImplTime]           DATETIME       NOT NULL,
    [CReceptState]        NVARCHAR (10)  NULL,
    [CSecondDocId]        BIGINT         NULL,
    [CFixed]              BIT            NULL,
    [CPosition]           INT            NULL,
    [CTmpString1]         NVARCHAR (255) NULL,
    [CPassRsGroup]        NVARCHAR (50)  NULL,
    [CPassRsCode]         NVARCHAR (50)  NULL,
    PRIMARY KEY CLUSTERED ([CDocId] ASC, [CSeq] ASC, [CInstead] ASC),
    CONSTRAINT [FK_m55kfad7uj5wgpnf3bc9vauyb] FOREIGN KEY ([CPassRsGroup], [CPassRsCode]) REFERENCES [dbo].[TCommonCode] ([CCodeGroup], [CCode]),
    CONSTRAINT [FK6BF8F31D48D9611] FOREIGN KEY ([CDepartCode], [CDepartStartDate]) REFERENCES [dbo].[TDepartment] ([CDepartCode], [CDepartStartDate]),
    CONSTRAINT [FK6BF8F31D4B897DA5] FOREIGN KEY ([CSecondDocId]) REFERENCES [dbo].[TApprDoc] ([CDocId]),
    CONSTRAINT [FK6BF8F31D4C4F8966] FOREIGN KEY ([CSignerId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK6BF8F31D89EA258E] FOREIGN KEY ([CPassByStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK6BF8F31DE6DE7DCD] FOREIGN KEY ([CLevelType], [CLevelCode], [CLevelSeq]) REFERENCES [dbo].[TStaffLevel] ([CLevelType], [CLevelCode], [CLevelSeq]),
    CONSTRAINT [FK6BF8F31DF064EB59] FOREIGN KEY ([CDocId]) REFERENCES [dbo].[TApprDoc] ([CDocId])
);


GO

CREATE TABLE [dbo].[TApprSecuDepartGroup] (
    [CLevelId]       INT           NOT NULL,
    [CDepartGroupId] NVARCHAR (20) NOT NULL,
    [COrder]         INT           NOT NULL,
    PRIMARY KEY CLUSTERED ([CLevelId] ASC, [CDepartGroupId] ASC),
    CONSTRAINT [FK76885A629461F911] FOREIGN KEY ([CLevelId]) REFERENCES [dbo].[TApprSecurityLevel] ([CLevelId]),
    CONSTRAINT [FK76885A629DD26866] FOREIGN KEY ([CDepartGroupId]) REFERENCES [dbo].[TDepartGroup] ([CGroupId])
);


GO

CREATE TABLE [dbo].[TPartnerMobileEnv] (
    [CId]          INT            IDENTITY (1, 1) NOT NULL,
    [CPartner]     BIGINT         NULL,
    [CServiceName] NVARCHAR (20)  NOT NULL,
    [CEnable]      BIT            NOT NULL,
    [CLoginUrl]    NVARCHAR (255) NULL,
    [CInfoUrl]     NVARCHAR (255) NULL,
    [CRegStaffId]  NVARCHAR (30)  NULL,
    [CRegTime]     DATETIME       NULL,
    [CUpdStaffId]  NVARCHAR (30)  NULL,
    [CUpdTime]     DATETIME       NULL,
    [CRemark]      NTEXT          NULL,
    PRIMARY KEY CLUSTERED ([CId] ASC),
    CONSTRAINT [FK_7h58ivr0w4byonhbaawxhnoru] FOREIGN KEY ([CPartner]) REFERENCES [dbo].[TPartner] ([CId]),
    CONSTRAINT [FK_id4abhn9itvo3ool5039f4p5a] FOREIGN KEY ([CUpdStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_iwqwda38crmj9sbx3kmt8kfhr] FOREIGN KEY ([CRegStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[THpFile] (
    [CFileId]             BIGINT         IDENTITY (1, 1) NOT NULL,
    [CFileName]           NVARCHAR (255) NULL,
    [CExtName]            NVARCHAR (255) NULL,
    [CRelativeTable]      NVARCHAR (255) NULL,
    [CRelativeCodes]      NVARCHAR (255) NULL,
    [COwnerMemberId]      BIGINT         NULL,
    [CSize]               BIGINT         NULL,
    [CContentID]          NVARCHAR (255) NULL,
    [CUploadedDate]       DATETIME       NULL,
    [CDeletedDate]        DATETIME       NULL,
    [CDeleterMemberId]    BIGINT         NULL,
    [CFileStorageCode]    NVARCHAR (30)  NULL,
    [CFileStorageSubCode] NVARCHAR (30)  NULL,
    [CSubstitued]         BIT            NULL,
    PRIMARY KEY CLUSTERED ([CFileId] ASC),
    CONSTRAINT [FK_3ijlpmbea9qqaafyytpulintg] FOREIGN KEY ([COwnerMemberId]) REFERENCES [dbo].[THpMember] ([CMemberId]),
    CONSTRAINT [FK_mat1kwdov08ranhy6etkh526f] FOREIGN KEY ([CDeleterMemberId]) REFERENCES [dbo].[THpMember] ([CMemberId])
);


GO

CREATE TABLE [dbo].[TCourseGraduate] (
    [CCourseNo]       INT           NOT NULL,
    [CStaffId]        NVARCHAR (30) NOT NULL,
    [CStatus]         NVARCHAR (15) NULL,
    [CGraduateDate]   DATETIME      NULL,
    [CApprovalStatus] NVARCHAR (15) NULL,
    PRIMARY KEY CLUSTERED ([CCourseNo] ASC, [CStaffId] ASC),
    CONSTRAINT [FK1B17FFFA9E3C3476] FOREIGN KEY ([CStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK1B17FFFAFDC523B8] FOREIGN KEY ([CCourseNo]) REFERENCES [dbo].[TEducationCourse] ([CNo])
);


GO

CREATE TABLE [dbo].[otbl_Lecture_attend_teacher] (
    [lecture_teacher_idx] INT      IDENTITY (1, 1) NOT NULL,
    [lecture_id]          INT      NULL,
    [teacher_id]          INT      NULL,
    [del_yn]              CHAR (1) CONSTRAINT [DF_otbl_Lecture_attend_teacher_del_yn] DEFAULT ('N') NULL,
    CONSTRAINT [PK_otbl_Lecture_attend_teacher] PRIMARY KEY CLUSTERED ([lecture_teacher_idx] ASC),
    CONSTRAINT [FK_otbl_Lecture_attend_teacher_otbl_Lecture] FOREIGN KEY ([lecture_id]) REFERENCES [dbo].[otbl_Lecture] ([lecture_idx]),
    CONSTRAINT [FK_otbl_Lecture_attend_teacher_otbl_Member_profile] FOREIGN KEY ([teacher_id]) REFERENCES [dbo].[otbl_Member_profile] ([profile_idx])
);


GO

CREATE TABLE [dbo].[TContentBizDiaryDate] (
    [CDate]    DATETIME NOT NULL,
    [CYear]    INT      NOT NULL,
    [CWeekSeq] INT      NOT NULL,
    PRIMARY KEY CLUSTERED ([CDate] ASC)
);


GO

CREATE TABLE [dbo].[TContentDepartGroup] (
    [CContentId] BIGINT         NOT NULL,
    [CType]      NVARCHAR (255) NOT NULL,
    [CGroupId]   NVARCHAR (20)  NOT NULL,
    [CSeq]       INT            NULL,
    PRIMARY KEY CLUSTERED ([CContentId] ASC, [CType] ASC, [CGroupId] ASC),
    CONSTRAINT [FK21B5842670792C9A] FOREIGN KEY ([CGroupId]) REFERENCES [dbo].[TDepartGroup] ([CGroupId]),
    CONSTRAINT [FK21B584269F2A2E67] FOREIGN KEY ([CContentId]) REFERENCES [dbo].[TContent] ([CContentId])
);


GO

CREATE TABLE [dbo].[DL_GMS_MSG] (
    [TR_NUM]          INT            IDENTITY (1, 1) NOT NULL,
    [TR_SENDDATE]     DATETIME       DEFAULT (getdate()) NOT NULL,
    [TR_SERIALNUM]    INT            NULL,
    [TR_ID]           VARCHAR (16)   NULL,
    [TR_SENDSTAT]     VARCHAR (1)    DEFAULT ('0') NOT NULL,
    [TR_RSLTSTAT]     VARCHAR (10)   DEFAULT ('00') NULL,
    [TR_MSGTYPE]      VARCHAR (1)    DEFAULT ('0') NOT NULL,
    [TR_PHONE]        VARCHAR (20)   NOT NULL,
    [TR_CALLBACK]     VARCHAR (20)   DEFAULT ('') NOT NULL,
    [TR_ORG_CALLBACK] VARCHAR (20)   DEFAULT ('') NULL,
    [TR_BILL_ID]      VARCHAR (20)   DEFAULT ('') NULL,
    [TR_RSLTDATE]     DATETIME       NULL,
    [TR_MODIFIED]     DATETIME       NULL,
    [TR_MSG]          VARCHAR (2000) NULL,
    [TR_NET]          VARCHAR (4)    NULL,
    [TR_ETC1]         VARCHAR (34)   NULL,
    [TR_ETC2]         VARCHAR (34)   NULL,
    [TR_ETC3]         VARCHAR (34)   NULL,
    [TR_ETC4]         VARCHAR (34)   NULL,
    [TR_ETC5]         VARCHAR (34)   NULL,
    [TR_ETC6]         VARCHAR (34)   NULL,
    [TR_ETC7]         VARCHAR (34)   NULL,
    [TR_ETC8]         VARCHAR (34)   NULL,
    [TR_ETC9]         VARCHAR (34)   NULL,
    [TR_ETC10]        VARCHAR (34)   NULL,
    [TR_REALSENDDATE] DATETIME       NULL,
    [TR_SERVERKEY]    VARCHAR (30)   NULL,
    CONSTRAINT [PK_DL_GMS_MSG_TR_NUM] PRIMARY KEY CLUSTERED ([TR_NUM] ASC)
);


GO

CREATE TABLE [dbo].[TSms] (
    [CId]                BIGINT         IDENTITY (1, 1) NOT NULL,
    [CSenderId]          NVARCHAR (30)  NULL,
    [CRegTime]           DATETIME       NULL,
    [CBookedTime]        DATETIME       NOT NULL,
    [CSentCount]         INT            NOT NULL,
    [CErrCount]          INT            NOT NULL,
    [CBookedCount]       INT            NOT NULL,
    [CTotalCount]        INT            NOT NULL,
    [CMessage]           NTEXT          NOT NULL,
    [CReplyNumber]       NVARCHAR (50)  NOT NULL,
    [CFacilityCode]      NVARCHAR (20)  NULL,
    [CFacilityStartDate] DATETIME       NULL,
    [CSendTypeGroup]     NVARCHAR (50)  NULL,
    [CSendTypeCode]      NVARCHAR (50)  NULL,
    [CTempInt1]          BIGINT         NULL,
    [CTempInt2]          BIGINT         NULL,
    [CTempInt3]          BIGINT         NULL,
    [CTemp1]             NVARCHAR (255) NULL,
    [CTemp2]             NVARCHAR (255) NULL,
    [CTemp3]             NVARCHAR (255) NULL,
    [CSendType]          NVARCHAR (1)   NULL,
    [CSubject]           NVARCHAR (80)  NULL,
    [CsenderGroupId]     NVARCHAR (20)  NULL,
    [CMessage2]          NTEXT          NULL,
    [CTemplateCode]      NVARCHAR (10)  NULL,
    [CKakaoBtnName]      NVARCHAR (255) NULL,
    [CKakaoBtnUrl]       NVARCHAR (255) NULL,
    CONSTRAINT [PK__TSms__C1F8DC394DE98D56] PRIMARY KEY CLUSTERED ([CId] ASC),
    CONSTRAINT [FK_3yxleshca58d0a7c8xrfuvaw3] FOREIGN KEY ([CSendTypeGroup], [CSendTypeCode]) REFERENCES [dbo].[TCommonCode] ([CCodeGroup], [CCode]),
    CONSTRAINT [FK277465841B9DB1] FOREIGN KEY ([CSenderId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK277465B93F5F42] FOREIGN KEY ([CFacilityCode], [CFacilityStartDate]) REFERENCES [dbo].[TFacility] ([CDepartCode], [CDepartStartDate])
);


GO

CREATE TABLE [dbo].[TMenuPermStaffGroup] (
    [CMenuId]       NVARCHAR (50) NOT NULL,
    [CStaffGroupId] NVARCHAR (20) NOT NULL,
    [CAccessAll]    BIT           NULL,
    [CAccessMine]   BIT           NULL,
    [CCreateAll]    BIT           NULL,
    [CCreateMine]   BIT           NULL,
    [CModifyAll]    BIT           NULL,
    [CModifyMine]   BIT           NULL,
    [CDeleteAll]    BIT           NULL,
    [CDeleteMine]   BIT           NULL,
    [CApplyOrder]   INT           NULL,
    PRIMARY KEY CLUSTERED ([CMenuId] ASC, [CStaffGroupId] ASC),
    CONSTRAINT [FK734AD1422F4C85C4] FOREIGN KEY ([CStaffGroupId]) REFERENCES [dbo].[TStaffGroup] ([CGroupId]),
    CONSTRAINT [FK734AD142E3BB6C4A] FOREIGN KEY ([CMenuId]) REFERENCES [dbo].[TMenu] ([CMenuId])
);


GO

CREATE TABLE [dbo].[TExecAssignment] (
    [CCourseNo]      INT            NOT NULL,
    [CEduNo]         INT            NOT NULL,
    [CAssignNo]      INT            NOT NULL,
    [CApplyCourseNo] INT            NOT NULL,
    [CApplyEduNo]    INT            NOT NULL,
    [CApplyNo]       INT            NOT NULL,
    [CFileId]        BIGINT         NULL,
    [CStatus]        NVARCHAR (15)  NULL,
    [CScore]         NVARCHAR (255) NULL,
    [CComment]       NVARCHAR (255) NULL,
    PRIMARY KEY CLUSTERED ([CCourseNo] ASC, [CEduNo] ASC, [CAssignNo] ASC, [CApplyCourseNo] ASC, [CApplyEduNo] ASC, [CApplyNo] ASC),
    CONSTRAINT [FK7BB603B2267FFF6F] FOREIGN KEY ([CApplyCourseNo], [CApplyEduNo], [CApplyNo]) REFERENCES [dbo].[TEducationApply] ([CCourseNo], [CEduNo], [CNo]),
    CONSTRAINT [FK7BB603B2557B7DFD] FOREIGN KEY ([CCourseNo], [CEduNo], [CAssignNo]) REFERENCES [dbo].[TAssignment] ([CCourseNo], [CEduNo], [CNo]),
    CONSTRAINT [FK7BB603B255D74554] FOREIGN KEY ([CFileId]) REFERENCES [dbo].[TFile] ([CFileId])
);


GO

CREATE TABLE [dbo].[TProject] (
    [CProjectId]       NVARCHAR (40)  NOT NULL,
    [CAliasId]         NVARCHAR (50)  NULL,
    [CName0]           NVARCHAR (100) NULL,
    [CName1]           NVARCHAR (100) NULL,
    [CName2]           NVARCHAR (100) NULL,
    [CName3]           NVARCHAR (100) NULL,
    [CName4]           NVARCHAR (100) NULL,
    [CShortName0]      NVARCHAR (100) NULL,
    [CShortName1]      NVARCHAR (100) NULL,
    [CShortName2]      NVARCHAR (100) NULL,
    [CShortName3]      NVARCHAR (100) NULL,
    [CShortName4]      NVARCHAR (100) NULL,
    [CDepth]           INT            NOT NULL,
    [CDisplayIndex]    INT            NOT NULL,
    [CHasSon]          BIT            NOT NULL,
    [CEnabled]         BIT            NOT NULL,
    [CRemark]          NTEXT          NULL,
    [CParentProjectId] NVARCHAR (40)  NULL,
    [CType]            NVARCHAR (255) NULL,
    [CEndUserId]       BIGINT         NULL,
    [CPlanStartDate]   DATETIME       NOT NULL,
    [CPlanEndDate]     DATETIME       NOT NULL,
    [CRealStartDate]   DATETIME       NULL,
    [CRealEndDate]     DATETIME       NULL,
    [CRegStaffId]      NVARCHAR (30)  NULL,
    [CRegTime]         DATETIME       NULL,
    [CUpdStaffId]      NVARCHAR (30)  NULL,
    [CUpdTime]         DATETIME       NOT NULL,
    [CForcastId]       BIGINT         NULL,
    [CContractId]      BIGINT         NULL,
    [COpened]          BIT            NULL,
    PRIMARY KEY CLUSTERED ([CProjectId] ASC),
    CONSTRAINT [FK_9v9op7ng21o2r03o4g1l58uv1] FOREIGN KEY ([CForcastId]) REFERENCES [dbo].[TSalesForcast] ([CId]),
    CONSTRAINT [FK_a6ik9kwf6tt5x32pwks75g5v6] FOREIGN KEY ([CContractId]) REFERENCES [dbo].[TSalesContract] ([CId]),
    CONSTRAINT [FK_bii8ddncfiph3x9m77h5o8xa2] FOREIGN KEY ([CRegStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_ojmhxdn5w3kwoosl6bcrvwek8] FOREIGN KEY ([CUpdStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_qbiiin26ly9p1qe1pn8wb4nkc] FOREIGN KEY ([CEndUserId]) REFERENCES [dbo].[TPartener] ([CId]),
    CONSTRAINT [FK66AB9C253797742A] FOREIGN KEY ([CParentProjectId]) REFERENCES [dbo].[TProject] ([CProjectId])
);


GO

CREATE TABLE [dbo].[TCurriculumList] (
    [CCurriculumId]   INT            NOT NULL,
    [CCurriculumType] NVARCHAR (255) NULL,
    [CDescription]    NVARCHAR (255) NULL,
    [CMapId]          INT            NULL,
    PRIMARY KEY CLUSTERED ([CCurriculumId] ASC)
);


GO

CREATE TABLE [dbo].[TToDoRefApprDoc] (
    [CToDoId]    BIGINT NOT NULL,
    [CApprDocId] BIGINT NOT NULL,
    [CAddedSeq]  INT    NOT NULL,
    PRIMARY KEY CLUSTERED ([CToDoId] ASC, [CApprDocId] ASC),
    CONSTRAINT [FKF41F276E36C2262B] FOREIGN KEY ([CToDoId]) REFERENCES [dbo].[TToDo] ([CId]),
    CONSTRAINT [FKF41F276E478FF908] FOREIGN KEY ([CApprDocId]) REFERENCES [dbo].[TApprDoc] ([CDocId])
);


GO

CREATE TABLE [dbo].[THpMenuPerm] (
    [CMenuId]     NVARCHAR (50) NOT NULL,
    [CMemberType] NVARCHAR (20) NOT NULL,
    [CAccessType] NVARCHAR (20) NOT NULL,
    [CAllow]      BIT           NULL,
    PRIMARY KEY CLUSTERED ([CMenuId] ASC, [CMemberType] ASC, [CAccessType] ASC),
    CONSTRAINT [FK_61dhmhkm239w8j7c9s6he1k8o] FOREIGN KEY ([CMenuId]) REFERENCES [dbo].[THpMenu] ([CMenuId])
);


GO

CREATE TABLE [dbo].[TExpertLog] (
    [CStaffId]        NVARCHAR (30)  NOT NULL,
    [CAreaNo]         INT            NOT NULL,
    [CNo]             INT            NOT NULL,
    [CRegDate]        DATETIME       NULL,
    [CComment]        NVARCHAR (255) NULL,
    [CPoint]          INT            NULL,
    [CApprovalStatus] NVARCHAR (15)  NULL,
    PRIMARY KEY CLUSTERED ([CStaffId] ASC, [CAreaNo] ASC, [CNo] ASC),
    CONSTRAINT [FKA7A7D2C69DCE1348] FOREIGN KEY ([CAreaNo]) REFERENCES [dbo].[TExpertArea] ([CAreaNo]),
    CONSTRAINT [FKA7A7D2C6E8FB2CA2] FOREIGN KEY ([CStaffId]) REFERENCES [dbo].[TExpert] ([CStaffId])
);


GO

CREATE TABLE [dbo].[TTutoringSetup] (
    [CDepartCode]      NVARCHAR (20)  NOT NULL,
    [CDepartStartDate] DATETIME       NOT NULL,
    [CSeatCount]       INT            NOT NULL,
    [CTimeCount]       INT            NOT NULL,
    [CTimeName]        NVARCHAR (255) NULL,
    PRIMARY KEY CLUSTERED ([CDepartCode] ASC, [CDepartStartDate] ASC),
    CONSTRAINT [FK_8xlnnjkhqih1tw9mqu2qs7a6j] FOREIGN KEY ([CDepartCode], [CDepartStartDate]) REFERENCES [dbo].[TFacility] ([CDepartCode], [CDepartStartDate])
);


GO

CREATE TABLE [dbo].[TAnniversaryReminder] (
    [CId]              BIGINT NOT NULL,
    [CReminderMinutes] INT    NOT NULL,
    PRIMARY KEY CLUSTERED ([CId] ASC, [CReminderMinutes] ASC),
    CONSTRAINT [FK3D4D232E2C909AF5] FOREIGN KEY ([CId]) REFERENCES [dbo].[TAnniversary] ([CId])
);


GO

CREATE TABLE [dbo].[SC_LOG] (
    [TR_NUM]          BIGINT         NOT NULL,
    [TR_SENDDATE]     DATETIME       NULL,
    [TR_ID]           VARCHAR (16)   NULL,
    [TR_SENDSTAT]     VARCHAR (1)    CONSTRAINT [DF__SC_LOG__TR_SENDS__4B598EE6] DEFAULT ('0') NOT NULL,
    [TR_RSLTSTAT]     VARCHAR (2)    CONSTRAINT [DF__SC_LOG__TR_RSLTS__4C4DB31F] DEFAULT ('00') NULL,
    [TR_MSGTYPE]      VARCHAR (1)    CONSTRAINT [DF__SC_LOG__TR_MSGTY__4D41D758] DEFAULT ('0') NOT NULL,
    [TR_PHONE]        VARCHAR (20)   CONSTRAINT [DF__SC_LOG__TR_PHONE__4E35FB91] DEFAULT ('') NOT NULL,
    [TR_CALLBACK]     VARCHAR (20)   NULL,
    [TR_RSLTDATE]     DATETIME       NULL,
    [TR_MODIFIED]     DATETIME       NULL,
    [TR_MSG]          VARCHAR (1000) NULL,
    [TR_NET]          VARCHAR (4)    NULL,
    [TR_ETC1]         VARCHAR (160)  NULL,
    [TR_ETC2]         VARCHAR (160)  NULL,
    [TR_ETC3]         VARCHAR (160)  NULL,
    [TR_ETC4]         VARCHAR (160)  NULL,
    [TR_ETC5]         VARCHAR (160)  NULL,
    [TR_ETC6]         VARCHAR (160)  NULL,
    [TR_ROUTEID]      VARCHAR (20)   NULL,
    [TR_REALSENDDATE] DATETIME       NULL,
    CONSTRAINT [PK_SC_LOG] PRIMARY KEY NONCLUSTERED ([TR_NUM] ASC)
);


GO

CREATE TABLE [dbo].[TTutoringPlanRev] (
    [CStdDepartCode]      NVARCHAR (20) NOT NULL,
    [CStdDepartStartDate] DATETIME      NOT NULL,
    [CStdCode]            NVARCHAR (50) NOT NULL,
    [CStartDate]          DATETIME      NOT NULL,
    [CComma]              INT           NOT NULL
);


GO

CREATE TABLE [dbo].[TToDoProcess] (
    [CProcessId] NVARCHAR (255) NOT NULL,
    [CName]      NVARCHAR (100) NOT NULL,
    [CBeanId]    NVARCHAR (100) NULL,
    [CEnabled]   BIT            NOT NULL,
    PRIMARY KEY CLUSTERED ([CProcessId] ASC)
);


GO

CREATE TABLE [dbo].[TQuestionDetail] (
    [CDetailSeq]           BIGINT         IDENTITY (1, 1) NOT NULL,
    [CQuestionMaster]      INT            NULL,
    [CQuestionSeasonSetup] INT            NULL,
    [CTempString1]         NVARCHAR (255) NULL,
    [CTempString2]         NVARCHAR (255) NULL,
    [CTempString3]         NVARCHAR (255) NULL,
    [CTempString4]         INT            NULL,
    [CTempString5]         INT            NULL,
    [CTempString6]         NVARCHAR (255) NULL,
    [CTempString7]         INT            NULL,
    [CTempString8]         INT            NULL,
    [CTempString9]         INT            NULL,
    [CTempString10]        INT            NULL,
    PRIMARY KEY CLUSTERED ([CDetailSeq] ASC),
    CONSTRAINT [FK_g9lly7mabj5ertc1s0m987f4m] FOREIGN KEY ([CQuestionMaster]) REFERENCES [dbo].[TQuestionMaster] ([CQuestionSeq]),
    CONSTRAINT [FK_mhu2spuo99uyxvgsi7i83kidm] FOREIGN KEY ([CQuestionSeasonSetup]) REFERENCES [dbo].[TQuestionSeasonSetup] ([CSeasonSetupSeq])
);


GO

CREATE TABLE [dbo].[TTradePayHistory] (
    [CBranchCode]      NVARCHAR (20) NOT NULL,
    [CBranchStartDate] DATETIME      NOT NULL,
    [CPayNo]           INT           NOT NULL,
    [CPaymentStatus]   NVARCHAR (15) NULL,
    [CPayDate]         DATETIME      NULL,
    [CPayStaffId]      NVARCHAR (30) NULL,
    [CDefaultPrice]    INT           NULL,
    [CPayApplyPrice]   INT           NULL,
    [CPayComment]      NTEXT         NULL,
    [CDetailCount]     INT           NULL,
    PRIMARY KEY CLUSTERED ([CBranchCode] ASC, [CBranchStartDate] ASC, [CPayNo] ASC),
    CONSTRAINT [FK6CAC245C2E16BD34] FOREIGN KEY ([CPayStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK6CAC245C48562EA2] FOREIGN KEY ([CBranchCode], [CBranchStartDate]) REFERENCES [dbo].[TFacility] ([CDepartCode], [CDepartStartDate])
);


GO

CREATE TABLE [dbo].[TBarcodeInfo] (
    [CBarcodeSeq]      INT            IDENTITY (1, 1) NOT NULL,
    [CDepartCode]      NVARCHAR (20)  NULL,
    [CDepartStartDate] DATETIME       NULL,
    [CManufacturer]    NVARCHAR (255) NULL,
    [CBarcodeType]     NVARCHAR (50)  NULL,
    PRIMARY KEY CLUSTERED ([CBarcodeSeq] ASC),
    CONSTRAINT [FK_cxdv01j9i6xgh7s71voydilk] FOREIGN KEY ([CDepartCode], [CDepartStartDate]) REFERENCES [dbo].[TFacility] ([CDepartCode], [CDepartStartDate]),
    CONSTRAINT [FK_o44ofvc3qg6p6gpvav0d82y9p] FOREIGN KEY ([CBarcodeType]) REFERENCES [dbo].[TBarcodeType] ([CBarcodeType])
);


GO

CREATE TABLE [dbo].[TStaffStatus] (
    [CStaffId]        NVARCHAR (30) NOT NULL,
    [CSeq]            INT           NOT NULL,
    [CType]           NVARCHAR (20) NULL,
    [CEnabled]        BIT           NULL,
    [CStartDate]      DATETIME      NOT NULL,
    [CEndDate]        DATETIME      NOT NULL,
    [CRegStaffId]     NVARCHAR (30) NULL,
    [CLastModStaffId] NVARCHAR (30) NULL,
    [CRegDate]        DATETIME      NULL,
    [CLastModDate]    DATETIME      NULL,
    [CTypeGroup]      NVARCHAR (50) NULL,
    [CTypeCode]       NVARCHAR (50) NULL,
    PRIMARY KEY CLUSTERED ([CStaffId] ASC, [CSeq] ASC),
    CONSTRAINT [FK_gsd82k0nd7yklt0k0w6bpl1o0] FOREIGN KEY ([CTypeGroup], [CTypeCode]) REFERENCES [dbo].[TCommonCode] ([CCodeGroup], [CCode]),
    CONSTRAINT [FK_jcmfw636s79m9gx11ks5wk6j5] FOREIGN KEY ([CLastModStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_lnhvl6l55uecrmbfckxan0ean] FOREIGN KEY ([CStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_p2rjlfrybcfd8l00kfctktoja] FOREIGN KEY ([CRegStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[TMBTIQuestion] (
    [CType]       NVARCHAR (15)  NOT NULL,
    [CNo]         INT            IDENTITY (1, 1) NOT NULL,
    [CQuestionNo] INT            NULL,
    [CQuestion]   NVARCHAR (255) NULL,
    [CComment]    NVARCHAR (255) NULL,
    CONSTRAINT [PK__TMBTIQue__C1FF675B1798699D] PRIMARY KEY CLUSTERED ([CType] ASC, [CNo] ASC)
);


GO

CREATE TABLE [dbo].[TPollParticipant] (
    [CPollId]        BIGINT        NOT NULL,
    [CParticipantId] NVARCHAR (30) NOT NULL,
    [CFirstJoinTime] DATETIME      NULL,
    [CLastJoinTime]  DATETIME      NULL,
    [CJoinCount]     INT           NULL,
    PRIMARY KEY CLUSTERED ([CPollId] ASC, [CParticipantId] ASC),
    CONSTRAINT [FK76F887009B3E67BC] FOREIGN KEY ([CPollId]) REFERENCES [dbo].[TPollQuestion] ([CId]),
    CONSTRAINT [FK76F88700F2063649] FOREIGN KEY ([CParticipantId]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[TKnowreAccount] (
    [CLoginId]                NVARCHAR (50)  NOT NULL,
    [CLoginPassword]          NVARCHAR (50)  NOT NULL,
    [CDepartCode]             NVARCHAR (20)  NULL,
    [CDepartStartDate]        DATETIME       NULL,
    [CStudentDepartCode]      NVARCHAR (20)  NULL,
    [CStudentDepartStartDate] DATETIME       NULL,
    [CStudentCode]            NVARCHAR (50)  NULL,
    [CName]                   NVARCHAR (50)  NOT NULL,
    [CSchoolName]             NVARCHAR (50)  NULL,
    [CCurriculumGrade]        NVARCHAR (255) NOT NULL,
    [CCurriculumType]         NVARCHAR (255) NOT NULL,
    [CStatus]                 NVARCHAR (255) NOT NULL,
    [CManager]                NVARCHAR (30)  NULL,
    [CAccountCreateDate]      DATETIME       NOT NULL,
    [CAccountEndDate]         DATETIME       NOT NULL,
    [CUserId]                 INT            NOT NULL,
    [CPassword]               NVARCHAR (100) NULL,
    [CDifficulty]             INT            NULL,
    [CIsAuto]                 BIT            NULL,
    PRIMARY KEY CLUSTERED ([CLoginId] ASC),
    CONSTRAINT [FK_15n35gln829lj0ytpjhtu9dlg] FOREIGN KEY ([CStudentDepartCode], [CStudentDepartStartDate], [CStudentCode]) REFERENCES [dbo].[TStudent] ([CBranchCode], [CBranchStartDate], [CCode]),
    CONSTRAINT [FK_5ip7ygtwk0ln7odkx2faqa5md] FOREIGN KEY ([CDepartCode], [CDepartStartDate]) REFERENCES [dbo].[TFacility] ([CDepartCode], [CDepartStartDate]),
    CONSTRAINT [FK_e7qiqrvwc5dxj5c1ib4frt4y8] FOREIGN KEY ([CManager]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[TBizMonthly4StaffFile] (
    [CBizDate]  DATETIME      NOT NULL,
    [CGroupId]  NVARCHAR (20) NOT NULL,
    [CWriterId] NVARCHAR (30) NOT NULL,
    [CAttachId] BIGINT        NOT NULL,
    [CSeq]      INT           NULL,
    PRIMARY KEY CLUSTERED ([CBizDate] ASC, [CGroupId] ASC, [CWriterId] ASC, [CAttachId] ASC),
    CONSTRAINT [FK_bkafnbaplhv8ho95n67rkt15d] FOREIGN KEY ([CAttachId]) REFERENCES [dbo].[TFile] ([CFileId]),
    CONSTRAINT [FK_op2dhwnh8sc4flv1xcx7hxsvx] FOREIGN KEY ([CBizDate], [CGroupId], [CWriterId]) REFERENCES [dbo].[TBizMonthly4Staff] ([CBizDate], [CGroupId], [CWriterId])
);


GO

CREATE TABLE [dbo].[TCourseBooking] (
    [CCourseRegister]     INT            NOT NULL,
    [CPartyTable]         INT            NOT NULL,
    [CBeginner]           BIT            NULL,
    [CBookingType]        NVARCHAR (255) NULL,
    [CAttendanceDateTime] DATETIME       NULL,
    [CAttendance]         BIT            NULL,
    [CRepeatReserved]     BIT            NULL,
    [CReservedNumber]     INT            NULL,
    [CWaitNumber]         INT            NULL,
    [CReservedWait]       BIT            NULL,
    [CRemarks]            NVARCHAR (255) NULL,
    [CAddReward]          INT            NULL,
    [CAddPenalty]         FLOAT (53)     NULL,
    PRIMARY KEY CLUSTERED ([CCourseRegister] ASC, [CPartyTable] ASC),
    CONSTRAINT [FK_8jbdrk2x4ujv7s1avh2yeerds] FOREIGN KEY ([CCourseRegister]) REFERENCES [dbo].[TCourseRegister] ([CCourseSeq]),
    CONSTRAINT [FK_pf8y28yhqhfxhtjnrao1lxoh5] FOREIGN KEY ([CPartyTable]) REFERENCES [dbo].[TPartyTable] ([CPartyTabIeSeq])
);


GO

CREATE TABLE [dbo].[TCourseBookingHistory] (
    [CHistoryDateTime]    DATETIME       NOT NULL,
    [CDepartCode]         NVARCHAR (20)  NOT NULL,
    [CDepartStartDate]    DATETIME       NOT NULL,
    [CMemberCode]         NVARCHAR (50)  NOT NULL,
    [CBeforParty]         INT            NULL,
    [CAfterParty]         INT            NULL,
    [CBeforeReservedDate] DATETIME       NULL,
    [CAfterReservedDate]  DATETIME       NULL,
    [CBeforeStartTime]    DATETIME       NULL,
    [CAfterStartTime]     DATETIME       NULL,
    [CBeforeTrainer]      NVARCHAR (30)  NULL,
    [CAfterTrainer]       NVARCHAR (30)  NULL,
    [CBookingType]        NVARCHAR (255) NULL,
    [CStaff]              NVARCHAR (30)  NULL,
    [CReward]             INT            NULL,
    [CPenalty]            FLOAT (53)     NULL,
    PRIMARY KEY CLUSTERED ([CHistoryDateTime] ASC, [CDepartCode] ASC, [CDepartStartDate] ASC, [CMemberCode] ASC),
    CONSTRAINT [FK_16wuhi3t6nu9sobb3wyv8xljh] FOREIGN KEY ([CBeforeTrainer]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_26fy2klyysx5drf2ord73i3of] FOREIGN KEY ([CDepartCode], [CDepartStartDate], [CMemberCode]) REFERENCES [dbo].[TMember] ([CDepartCode], [CDepartStartDate], [CMemberCode]),
    CONSTRAINT [FK_cq8u0oqm61qpug6yop8abcwp] FOREIGN KEY ([CAfterParty]) REFERENCES [dbo].[TParty] ([CPartySeq]),
    CONSTRAINT [FK_h5lntfgpsa21karci5kqsx255] FOREIGN KEY ([CStaff]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_h8dcg9irbyx1j67nn0kq80uge] FOREIGN KEY ([CAfterTrainer]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_pqf6kfrryymf08l7tgchfatuk] FOREIGN KEY ([CBeforParty]) REFERENCES [dbo].[TParty] ([CPartySeq])
);


GO

CREATE TABLE [dbo].[TMailSyncAccount] (
    [COnwer]            NVARCHAR (30)  NOT NULL,
    [CEmailAddress]     NVARCHAR (255) NOT NULL,
    [CServerType]       NVARCHAR (20)  NOT NULL,
    [CServerHost]       NVARCHAR (255) NULL,
    [CServerPort]       INT            NULL,
    [CUseSsl]           BIT            NOT NULL,
    [CLoginId]          NVARCHAR (255) NOT NULL,
    [CLoginPw]          NVARCHAR (255) NOT NULL,
    [CIsWorking]        BIT            NULL,
    [CIsLastError]      BIT            NOT NULL,
    [CLastUpdateTime]   DATETIME       NULL,
    [CLastSyncOkTime]   DATETIME       NULL,
    [CLastSyncFailTime] DATETIME       NULL,
    [CLastSyncMailId]   NVARCHAR (255) NULL,
    [CLastErrMessage]   NTEXT          NULL,
    PRIMARY KEY CLUSTERED ([COnwer] ASC, [CEmailAddress] ASC),
    CONSTRAINT [FK_4cmi3rkaef75pq3lpkcxgovu2] FOREIGN KEY ([COnwer]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[TTopic] (
    [CTopicNo]   INT            IDENTITY (1, 1) NOT NULL,
    [CTopicType] NVARCHAR (255) NULL,
    [CTopicName] NVARCHAR (255) NULL,
    [CSoul]      BIT            NULL,
    [CLearning]  BIT            NULL,
    [CAction]    BIT            NULL,
    [CCareer]    BIT            NULL,
    PRIMARY KEY CLUSTERED ([CTopicNo] ASC)
);


GO

CREATE TABLE [dbo].[tbl_hrm_student] (
    [hrm_student_idx]       INT             IDENTITY (1, 1) NOT NULL,
    [hrm_staff_idx]         INT             NULL,
    [student_id]            NVARCHAR (30)   NULL,
    [reg_reason]            INT             NULL,
    [end_reason]            INT             NULL,
    [cur_status]            INT             NULL,
    [is_deffered_yn]        CHAR (1)        NULL,
    [pre_staff_id]          NVARCHAR (30)   NULL,
    [cur_staff_id]          NVARCHAR (30)   NULL,
    [pre_period]            INT             NULL,
    [maintain_period]       INT             NULL,
    [reg_type]              CHAR (1)        NULL,
    [c_month1]              INT             NULL,
    [c_month2]              INT             NULL,
    [c_month3]              INT             NULL,
    [c_month4]              INT             NULL,
    [c_month5]              INT             NULL,
    [c_month6]              INT             NULL,
    [t_month1]              INT             NULL,
    [t_month2]              INT             NULL,
    [t_month3]              INT             NULL,
    [t_month4]              INT             NULL,
    [t_month5]              INT             NULL,
    [t_month6]              INT             NULL,
    [revise_reason]         INT             NULL,
    [memo]                  NVARCHAR (200)  NULL,
    [result_tutoring_total] INT             DEFAULT ((0)) NULL,
    [result_side_total]     INT             DEFAULT ((0)) NULL,
    [result_multi_total]    INT             DEFAULT ((0)) NULL,
    [result_leave]          DECIMAL (18, 2) DEFAULT ((0)) NULL,
    [result_sales_score]    DECIMAL (18, 2) DEFAULT ((0)) NULL,
    [result_leave_score]    DECIMAL (18, 2) DEFAULT ((0)) NULL,
    CONSTRAINT [PK_tbl_hrm_student] PRIMARY KEY CLUSTERED ([hrm_student_idx] ASC),
    CONSTRAINT [FK_tbl_hrm_student_tbl_hrm_staff] FOREIGN KEY ([hrm_staff_idx]) REFERENCES [dbo].[tbl_hrm_staff] ([hrm_staff_idx])
);


GO

CREATE TABLE [dbo].[TBizValue] (
    [CYear]           INT           NOT NULL,
    [CDailyGoalCount] INT           NOT NULL,
    [CDailyGoalToll]  BIGINT        NOT NULL,
    [CRemark]         VARCHAR (400) NULL,
    PRIMARY KEY CLUSTERED ([CYear] ASC)
);


GO

CREATE TABLE [dbo].[TMailLastSentEmail] (
    [CStaffId]  NVARCHAR (30)  NOT NULL,
    [CEmail]    NVARCHAR (100) NOT NULL,
    [CName]     NVARCHAR (100) NULL,
    [CSentDate] DATETIME       NULL,
    PRIMARY KEY CLUSTERED ([CStaffId] ASC, [CEmail] ASC)
);


GO

CREATE TABLE [dbo].[TGlobalAddressKoreaLotNo] (
    [CManageNo]    NVARCHAR (25) NOT NULL,
    [CSeq]         INT           NOT NULL,
    [CDongCode]    NVARCHAR (10) NULL,
    [CSidoName]    NVARCHAR (20) NULL,
    [CSiGunGuName] NVARCHAR (20) NULL,
    [CDongName]    NVARCHAR (20) NULL,
    [CRiName]      NVARCHAR (20) NULL,
    [CSan]         NVARCHAR (1)  NULL,
    [CLotNoMain]   INT           NULL,
    [CLotNoSub]    INT           NULL,
    [CMaster]      NVARCHAR (1)  NULL,
    PRIMARY KEY CLUSTERED ([CManageNo] ASC, [CSeq] ASC),
    CONSTRAINT [FK60156D258CB2546] FOREIGN KEY ([CManageNo]) REFERENCES [dbo].[TGlobalAddressKoreaAddress] ([CManageNo])
);


GO

CREATE TABLE [dbo].[TStudentHistory] (
    [CStdBranchCode]      NVARCHAR (20) NOT NULL,
    [CStdBranchStartDate] DATETIME      NOT NULL,
    [CStdCode]            NVARCHAR (50) NOT NULL,
    [CRegistType]         NVARCHAR (50) NOT NULL,
    [CStudentCounselType] NVARCHAR (50) NOT NULL,
    [CHistoryDate]        DATETIME      NOT NULL,
    PRIMARY KEY CLUSTERED ([CStdBranchCode] ASC, [CStdBranchStartDate] ASC, [CStdCode] ASC, [CRegistType] ASC, [CStudentCounselType] ASC, [CHistoryDate] ASC),
    CONSTRAINT [FK_TStudent_TStudentHistory] FOREIGN KEY ([CStdBranchCode], [CStdBranchStartDate], [CStdCode]) REFERENCES [dbo].[TStudent] ([CBranchCode], [CBranchStartDate], [CCode])
);


GO

CREATE TABLE [dbo].[TManagementExamRecord] (
    [CStDepartCode]          NVARCHAR (20)  NOT NULL,
    [CStDepartStartDate]     DATETIME       NOT NULL,
    [CStCode]                NVARCHAR (50)  NOT NULL,
    [CNo]                    INT            NOT NULL,
    [CStartDate]             DATETIME       NULL,
    [CEndDate]               DATETIME       NULL,
    [CExamTypeCodeGroupCode] NVARCHAR (50)  NULL,
    [CExamTypeCode]          NVARCHAR (50)  NULL,
    [CExamName]              NVARCHAR (255) NULL,
    [CExamResult]            NVARCHAR (15)  NULL,
    [CExemInning]            INT            NULL,
    [CRegDate]               DATETIME       NULL,
    [CRegStaffId]            NVARCHAR (30)  NULL,
    PRIMARY KEY CLUSTERED ([CStDepartCode] ASC, [CStDepartStartDate] ASC, [CStCode] ASC, [CNo] ASC),
    CONSTRAINT [FKCEB51C6719E633C8] FOREIGN KEY ([CRegStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FKCEB51C672647AD22] FOREIGN KEY ([CExamTypeCodeGroupCode], [CExamTypeCode]) REFERENCES [dbo].[TCommonCode] ([CCodeGroup], [CCode]),
    CONSTRAINT [FKCEB51C676F88FD24] FOREIGN KEY ([CStDepartCode], [CStDepartStartDate], [CStCode]) REFERENCES [dbo].[TStudent] ([CBranchCode], [CBranchStartDate], [CCode])
);


GO

CREATE TABLE [dbo].[TPromoteBranch] (
    [CIdDepartCode]      NVARCHAR (20) NOT NULL,
    [CIdDepartStartDate] DATETIME      NOT NULL,
    [CExposure1]         BIT           NULL,
    [CExposure2]         BIT           NULL,
    [CPurchase1]         BIT           NULL,
    [CPurchase2]         BIT           NULL,
    [CInflowMemeber]     BIT           NULL,
    [CRegistSchool]      BIT           NULL,
    [CRegistService]     BIT           NULL,
    [CPayCommas]         BIT           NULL,
    [CPromoteCost]       BIT           NULL,
    PRIMARY KEY CLUSTERED ([CIdDepartCode] ASC, [CIdDepartStartDate] ASC),
    CONSTRAINT [FK_kvs5sw742xr19rxqx3iopw2lr] FOREIGN KEY ([CIdDepartCode], [CIdDepartStartDate]) REFERENCES [dbo].[TFacility] ([CDepartCode], [CDepartStartDate])
);


GO

CREATE TABLE [dbo].[TComplaintComment] (
    [CId]         BIGINT        IDENTITY (1, 1) NOT NULL,
    [CContentId]  BIGINT        NULL,
    [CContentSeq] INT           NULL,
    [CRegStaffId] NVARCHAR (30) NULL,
    [CRegTime]    DATETIME      NULL,
    [CComment]    NTEXT         NULL,
    PRIMARY KEY CLUSTERED ([CId] ASC),
    CONSTRAINT [FK_689a5vunnfkr8wb8ocuknkdl4] FOREIGN KEY ([CContentId], [CContentSeq]) REFERENCES [dbo].[TComplaintContentSub] ([CId], [CSeq]),
    CONSTRAINT [FK_h273gdscj0pralg2c1qhfuj8m] FOREIGN KEY ([CRegStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[MMS_LOG] (
    [MSGKEY]         BIGINT         NOT NULL,
    [SUBJECT]        VARCHAR (120)  NULL,
    [PHONE]          VARCHAR (15)   NOT NULL,
    [CALLBACK]       VARCHAR (15)   NOT NULL,
    [STATUS]         VARCHAR (2)    DEFAULT ('0') NOT NULL,
    [REQDATE]        DATETIME       NOT NULL,
    [MSG]            VARCHAR (4000) NULL,
    [FILE_CNT]       INT            DEFAULT ((0)) NOT NULL,
    [FILE_CNT_REAL]  INT            NULL,
    [FILE_PATH1]     VARCHAR (512)  NULL,
    [FILE_PATH1_SIZ] INT            NULL,
    [FILE_PATH2]     VARCHAR (512)  NULL,
    [FILE_PATH2_SIZ] INT            NULL,
    [FILE_PATH3]     VARCHAR (512)  NULL,
    [FILE_PATH3_SIZ] INT            NULL,
    [FILE_PATH4]     VARCHAR (512)  NULL,
    [FILE_PATH4_SIZ] INT            NULL,
    [FILE_PATH5]     VARCHAR (512)  NULL,
    [FILE_PATH5_SIZ] INT            NULL,
    [EXPIRETIME]     VARCHAR (10)   DEFAULT ('43200') NOT NULL,
    [SENTDATE]       DATETIME       NULL,
    [RSLTDATE]       DATETIME       NULL,
    [REPORTDATE]     DATETIME       NULL,
    [TERMINATEDDATE] DATETIME       NULL,
    [RSLT]           VARCHAR (4)    NULL,
    [TYPE]           VARCHAR (2)    DEFAULT ('0') NOT NULL,
    [TELCOINFO]      VARCHAR (10)   NULL,
    [ROUTE_ID]       VARCHAR (20)   NULL,
    [ID]             VARCHAR (20)   NULL,
    [POST]           VARCHAR (20)   NULL,
    [ETC1]           VARCHAR (64)   NULL,
    [ETC2]           VARCHAR (32)   NULL,
    [ETC3]           VARCHAR (32)   NULL,
    [ETC4]           INT            NULL,
    CONSTRAINT [PK_MMS_LOG] PRIMARY KEY CLUSTERED ([MSGKEY] ASC)
);


GO

CREATE TABLE [dbo].[TSmsFavorites] (
    [CId]                      BIGINT         IDENTITY (1, 1) NOT NULL,
    [CType]                    NVARCHAR (255) NOT NULL,
    [CBranchIdDepartCode]      NVARCHAR (20)  NULL,
    [CBranchIdDepartStartDate] DATETIME       NULL,
    [CStaffId]                 NVARCHAR (30)  NULL,
    [CContent]                 NVARCHAR (255) NULL,
    [CRegDate]                 DATETIME       NULL,
    PRIMARY KEY CLUSTERED ([CId] ASC),
    CONSTRAINT [FK_1bspm6naud0sfw74276st1f4e] FOREIGN KEY ([CBranchIdDepartCode], [CBranchIdDepartStartDate]) REFERENCES [dbo].[TFacility] ([CDepartCode], [CDepartStartDate]),
    CONSTRAINT [FK_nu2cvhv4dg028xguoy5hsw223] FOREIGN KEY ([CStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[TFileDownloader] (
    [CFileId]        BIGINT         NOT NULL,
    [CDownloaderId]  NVARCHAR (30)  NOT NULL,
    [CFirstReadTime] DATETIME       NULL,
    [CFirstReadIp]   NVARCHAR (255) NULL,
    [CLastReadTime]  DATETIME       NULL,
    [CLastReadIp]    NVARCHAR (255) NULL,
    [CCount]         INT            NULL,
    PRIMARY KEY CLUSTERED ([CFileId] ASC, [CDownloaderId] ASC),
    CONSTRAINT [FK_93j1r75l2vs4cjlno1effnj3c] FOREIGN KEY ([CDownloaderId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_awjd9ir99mydfmr6xoemstyyc] FOREIGN KEY ([CFileId]) REFERENCES [dbo].[TFile] ([CFileId])
);


GO

CREATE TABLE [dbo].[TTermScheduleTaskRepeat] (
    [CTstDepartCode]      NVARCHAR (20) NOT NULL,
    [CTstDepartStartDate] DATETIME      NOT NULL,
    [CTstStudentCode]     NVARCHAR (50) NOT NULL,
    [CTstCode]            NVARCHAR (50) NOT NULL,
    [CStsTaskNo]          INT           NOT NULL,
    [CRepeatType]         NVARCHAR (15) NOT NULL,
    [CStartDate]          DATETIME      NULL,
    [CEndDate]            DATETIME      NULL,
    [CDayCount]           INT           NULL,
    [CMonday]             BIT           NULL,
    [CTuesday]            BIT           NULL,
    [CWednesday]          BIT           NULL,
    [CThursday]           BIT           NULL,
    [CFriday]             BIT           NULL,
    [CSaturday]           BIT           NULL,
    [CSunday]             BIT           NULL,
    [CTaskAmountPerDay]   INT           NULL,
    [CTaskAmount]         INT           NULL,
    PRIMARY KEY CLUSTERED ([CTstDepartCode] ASC, [CTstDepartStartDate] ASC, [CTstStudentCode] ASC, [CTstCode] ASC, [CStsTaskNo] ASC, [CRepeatType] ASC),
    CONSTRAINT [FK17B8E877988C5088] FOREIGN KEY ([CTstDepartCode], [CTstDepartStartDate], [CTstStudentCode], [CTstCode], [CStsTaskNo]) REFERENCES [dbo].[TTermScheduleTask] ([CTsDepartCode], [CTsDepartStartDate], [CTsStudentCode], [CTsCode], [CTaskNo])
);


GO

CREATE TABLE [dbo].[TPromoEvent] (
    [CPromoDepartCode]      NVARCHAR (20)  NOT NULL,
    [CPromoDepartStartDate] DATETIME       NOT NULL,
    [CNo]                   INT            NOT NULL,
    [CStartDate]            DATETIME       NULL,
    [CEndDate]              DATETIME       NULL,
    [CPromoteChannel]       NVARCHAR (255) NULL,
    [CPromoteName]          NVARCHAR (255) NULL,
    [CMakeCount]            NVARCHAR (255) NULL,
    [CMakeCost]             INT            NULL,
    [CDistributeArea]       NVARCHAR (255) NULL,
    [CDistributeCount]      NVARCHAR (255) NULL,
    [CDistributeCost]       INT            NULL,
    [CAttendManCount]       NVARCHAR (255) NULL,
    PRIMARY KEY CLUSTERED ([CPromoDepartCode] ASC, [CPromoDepartStartDate] ASC, [CNo] ASC),
    CONSTRAINT [FK8A8E8E3F58A7B546] FOREIGN KEY ([CPromoteChannel]) REFERENCES [dbo].[TPromoteChannel] ([CCode]),
    CONSTRAINT [FK8A8E8E3FE6BB1B82] FOREIGN KEY ([CPromoDepartCode], [CPromoDepartStartDate]) REFERENCES [dbo].[TFacility] ([CDepartCode], [CDepartStartDate])
);


GO

CREATE TABLE [dbo].[tb_RootNotice] (
    [it_RootNoticeIdx]          INT            IDENTITY (1, 1) NOT NULL,
    [st_RootNoticeTitle]        NVARCHAR (500) NULL,
    [st_RootNoticeContents]     TEXT           NULL,
    [st_RootNoticeContentsText] TEXT           NULL,
    [it_RootNoticeViewCount]    INT            NOT NULL,
    [st_StaffCodeFirst]         NVARCHAR (50)  NOT NULL,
    [st_StaffCodeLast]          NVARCHAR (50)  NOT NULL,
    [dt_RootNoticeMake]         DATETIME       NOT NULL,
    [dt_RootNoticeUpdate]       DATETIME       NOT NULL,
    [dt_RootNoticeDelete]       DATETIME       NULL,
    CONSTRAINT [PK_tb_RootNotice] PRIMARY KEY CLUSTERED ([it_RootNoticeIdx] ASC)
);


GO

CREATE TABLE [dbo].[TMailSentence] (
    [CId]         BIGINT         IDENTITY (1, 1) NOT NULL,
    [CTitle]      NVARCHAR (200) NOT NULL,
    [CBody]       NTEXT          NULL,
    [CRegStaffId] NVARCHAR (30)  NULL,
    [CRegTime]    DATETIME       NULL,
    [CUpdStaffId] NVARCHAR (30)  NULL,
    [CUpdTime]    DATETIME       NULL,
    PRIMARY KEY CLUSTERED ([CId] ASC),
    CONSTRAINT [FK_h9lcwtia8k4fkkr1ruwq18cmf] FOREIGN KEY ([CUpdStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_s26dbrqhmsybskl0py3uvgr9w] FOREIGN KEY ([CRegStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[TAssetItem] (
    [CBranchCode]      NVARCHAR (20)  NOT NULL,
    [CBranchStartDate] DATETIME       NOT NULL,
    [CCodeGroup]       NVARCHAR (50)  NOT NULL,
    [CCommonCode]      NVARCHAR (50)  NOT NULL,
    [CCode]            NVARCHAR (255) NOT NULL,
    [CName]            NVARCHAR (255) NULL,
    [CStatus]          NVARCHAR (15)  NULL,
    [CTakeDate]        DATETIME       NULL,
    [CMaker]           NVARCHAR (255) NULL,
    [CTakeCount]       FLOAT (53)     NULL,
    [CTakePrice]       FLOAT (53)     NULL,
    [CTakeValue]       FLOAT (53)     NULL,
    [CRepayment]       BIT            NULL,
    [CUseByDate]       FLOAT (53)     NULL,
    [CCount]           FLOAT (53)     NULL,
    [CPrice]           FLOAT (53)     NULL,
    [CValue]           FLOAT (53)     NULL,
    [CRegistStaff]     NVARCHAR (255) NULL,
    [CRegistDate]      DATETIME       NULL,
    [CLocation]        NVARCHAR (255) NULL,
    [CManagerId]       NVARCHAR (30)  NULL,
    [CSellDate]        DATETIME       NULL,
    [CSellValue]       FLOAT (53)     NULL,
    PRIMARY KEY CLUSTERED ([CBranchCode] ASC, [CBranchStartDate] ASC, [CCodeGroup] ASC, [CCommonCode] ASC, [CCode] ASC),
    CONSTRAINT [FKEDEC202F3F6CE6C3] FOREIGN KEY ([CManagerId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FKEDEC202F48562EA2] FOREIGN KEY ([CBranchCode], [CBranchStartDate]) REFERENCES [dbo].[TFacility] ([CDepartCode], [CDepartStartDate]),
    CONSTRAINT [FKEDEC202FFB960C0] FOREIGN KEY ([CCodeGroup], [CCommonCode]) REFERENCES [dbo].[TCommonCode] ([CCodeGroup], [CCode])
);


GO

CREATE TABLE [dbo].[TManagementMemo] (
    [CBranchCode]      NVARCHAR (20) NOT NULL,
    [CBranchStartDate] DATETIME      NOT NULL,
    [CCode]            NVARCHAR (50) NOT NULL,
    [CNo]              INT           NOT NULL,
    [CComment]         NTEXT         NULL,
    [CRegDate]         DATETIME      NULL,
    [CRegStaff]        NVARCHAR (30) NULL,
    PRIMARY KEY CLUSTERED ([CBranchCode] ASC, [CBranchStartDate] ASC, [CCode] ASC, [CNo] ASC),
    CONSTRAINT [FK_rvvmig6tmh6alxiec95qo9kx2] FOREIGN KEY ([CRegStaff]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_TStudent_TManagementMemo] FOREIGN KEY ([CBranchCode], [CBranchStartDate], [CCode]) REFERENCES [dbo].[TStudent] ([CBranchCode], [CBranchStartDate], [CCode])
);


GO

CREATE TABLE [dbo].[tb_RootClassRecord] (
    [it_RootClassRecordIdx] INT           IDENTITY (1, 1) NOT NULL,
    [it_RootClassIdx]       INT           NOT NULL,
    [st_StaffCode]          NVARCHAR (50) NOT NULL,
    [it_LectureFinished]    INT           NULL,
    [it_CornellSubmitted]   INT           CONSTRAINT [DF_tb_RootClassMember_it_CornellSubmitted] DEFAULT ((0)) NULL,
    [it_HomeworkSubmitted]  INT           CONSTRAINT [DF_tb_RootClassMember_it_HomeworkSubmitted] DEFAULT ((0)) NULL,
    [it_FeedbackSubmitted]  INT           NULL,
    CONSTRAINT [PK_tb_RootClassMember] PRIMARY KEY CLUSTERED ([it_RootClassRecordIdx] ASC),
    CONSTRAINT [FK_tb_RootClassMember_tb_RootClass] FOREIGN KEY ([it_RootClassIdx]) REFERENCES [dbo].[tb_RootClass] ([it_RootClassIdx])
);


GO

CREATE TABLE [dbo].[TApprFolderFilter] (
    [CFolder]          INT           NOT NULL,
    [CForm]            NVARCHAR (15) NOT NULL,
    [CType]            NVARCHAR (20) DEFAULT ('Writer') NOT NULL,
    [CDepartCode]      NVARCHAR (20) NOT NULL,
    [CDepartStartDate] DATETIME      NOT NULL,
    [COrder]           INT           NOT NULL,
    PRIMARY KEY CLUSTERED ([CFolder] ASC, [CForm] ASC, [CType] ASC, [CDepartCode] ASC, [CDepartStartDate] ASC),
    CONSTRAINT [FKC064630B48D9611] FOREIGN KEY ([CDepartCode], [CDepartStartDate]) REFERENCES [dbo].[TDepartment] ([CDepartCode], [CDepartStartDate]),
    CONSTRAINT [FKC064630B93C7F90E] FOREIGN KEY ([CFolder]) REFERENCES [dbo].[TApprFolder] ([CFolderId]),
    CONSTRAINT [FKC064630BFBE43E3A] FOREIGN KEY ([CForm]) REFERENCES [dbo].[TApprForm] ([CFormId])
);


GO

CREATE TABLE [dbo].[TBranchHoliday] (
    [CDepartCode]      NVARCHAR (20)  NOT NULL,
    [CDepartStartDate] DATETIME       NOT NULL,
    [CType]            NVARCHAR (15)  NOT NULL,
    [CDayofWeek]       NVARCHAR (15)  NOT NULL,
    [CDate]            DATETIME       NOT NULL,
    [CName]            NVARCHAR (255) NULL,
    PRIMARY KEY CLUSTERED ([CDepartCode] ASC, [CDepartStartDate] ASC, [CType] ASC, [CDayofWeek] ASC, [CDate] ASC),
    CONSTRAINT [FK981EB862282531E2] FOREIGN KEY ([CDepartCode], [CDepartStartDate]) REFERENCES [dbo].[TFacility] ([CDepartCode], [CDepartStartDate])
);


GO

CREATE TABLE [dbo].[TTradePayDetail] (
    [CThDepartCode]      NVARCHAR (20) NOT NULL,
    [CThDepartStartDate] DATETIME      NOT NULL,
    [CPayNo]             INT           NOT NULL,
    [CTdRequireDate]     DATETIME      NOT NULL,
    [CTdDepartCode]      NVARCHAR (20) NOT NULL,
    [CTdDepartStartDate] DATETIME      NOT NULL,
    [CTdTradeNo]         INT           NOT NULL,
    [CTdBranchCode]      NVARCHAR (20) NOT NULL,
    [CTdBranchStartDate] DATETIME      NOT NULL,
    [CDetailNo]          INT           NOT NULL,
    [CPayApplyPrice]     INT           NULL,
    PRIMARY KEY CLUSTERED ([CThDepartCode] ASC, [CThDepartStartDate] ASC, [CPayNo] ASC, [CTdRequireDate] ASC, [CTdDepartCode] ASC, [CTdDepartStartDate] ASC, [CTdTradeNo] ASC, [CTdBranchCode] ASC, [CTdBranchStartDate] ASC, [CDetailNo] ASC),
    CONSTRAINT [FK7012BF89313D52F0] FOREIGN KEY ([CTdRequireDate], [CTdDepartCode], [CTdDepartStartDate], [CTdTradeNo], [CTdBranchCode], [CTdBranchStartDate], [CDetailNo]) REFERENCES [dbo].[TTradeDetail] ([CRequireDate], [CTiDepartCode], [CTiDepartStartDate], [CTradeNo], [CBranchCode], [CBranchStartDate], [CDetailNo]),
    CONSTRAINT [FK7012BF89A3E1FE2D] FOREIGN KEY ([CThDepartCode], [CThDepartStartDate], [CPayNo]) REFERENCES [dbo].[TTradePayHistory] ([CBranchCode], [CBranchStartDate], [CPayNo])
);


GO

CREATE TABLE [dbo].[TStaffPwHistory] (
    [CStaffId]    NVARCHAR (30)  NOT NULL,
    [CUpdateDate] DATETIME       NOT NULL,
    [CPassword]   NVARCHAR (255) NOT NULL,
    [CRegIp]      NVARCHAR (255) NULL,
    PRIMARY KEY CLUSTERED ([CStaffId] ASC, [CUpdateDate] ASC),
    CONSTRAINT [FK_nc2nf9bv0t7rddyolb5d7fpcv] FOREIGN KEY ([CStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[TSaleProof] (
    [CProofSeq]          BIGINT          IDENTITY (1, 1) NOT NULL,
    [CProposalDate]      DATETIME        NOT NULL,
    [CRoyaltyLinkType]   NVARCHAR (255)  NOT NULL,
    [CSaleProofStatus]   NVARCHAR (255)  NOT NULL,
    [CProofMemo]         NVARCHAR (2000) NULL,
    [CRegStaff]          NVARCHAR (30)   NULL,
    [CRegDate]           DATETIME        NULL,
    [CEditStaff]         NVARCHAR (30)   NULL,
    [CEditDate]          DATETIME        NULL,
    [CHeadOfficeMemo]    NVARCHAR (255)  NULL,
    [CFixRoyalty]        INT             NULL,
    [CPayPrice]          INT             NULL,
    [CHeadOfficeStaff]   NVARCHAR (30)   NULL,
    [CHeadOfficeRegDate] DATETIME        NULL,
    CONSTRAINT [PK__TSalePro__13D7C282DABC3486] PRIMARY KEY CLUSTERED ([CProofSeq] ASC),
    CONSTRAINT [FK_4xf6sjop8i9el0ox3pqsgeifr] FOREIGN KEY ([CHeadOfficeStaff]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_jyh4x17qq3jyvp0r5voavw1j0] FOREIGN KEY ([CRegStaff]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_msqdep5q0ufo80kv2c4puk7ev] FOREIGN KEY ([CEditStaff]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[TStaffLdap] (
    [CStaffId]     NVARCHAR (30)  NOT NULL,
    [CLoginId]     NVARCHAR (30)  NOT NULL,
    [CLoginPw]     NVARCHAR (100) NOT NULL,
    [CUpdatedTime] DATETIME       NOT NULL,
    PRIMARY KEY CLUSTERED ([CStaffId] ASC)
);


GO

CREATE TABLE [dbo].[TStaffPrize] (
    [CStaffId]        NVARCHAR (30) NOT NULL,
    [CNo]             INT           NOT NULL,
    [CDate]           DATETIME      NULL,
    [CDateCodeGroup]  NVARCHAR (50) NULL,
    [CDateCommonCode] NVARCHAR (50) NULL,
    [CName]           NVARCHAR (50) NULL,
    [CReward]         NVARCHAR (50) NULL,
    [CUrl]            NTEXT         NULL,
    PRIMARY KEY CLUSTERED ([CStaffId] ASC, [CNo] ASC),
    CONSTRAINT [FK609550869E3C3476] FOREIGN KEY ([CStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK60955086DE9B1300] FOREIGN KEY ([CDateCodeGroup], [CDateCommonCode]) REFERENCES [dbo].[TCommonCode] ([CCodeGroup], [CCode])
);


GO

CREATE TABLE [dbo].[TProductMapping] (
    [CDepartCode]      NVARCHAR (20) NOT NULL,
    [CDepartStartDate] DATETIME      NOT NULL,
    [CProduct]         NVARCHAR (50) NOT NULL,
    PRIMARY KEY CLUSTERED ([CDepartCode] ASC, [CDepartStartDate] ASC, [CProduct] ASC),
    CONSTRAINT [FK_63waj8sihdjlog6t3is56u4yu] FOREIGN KEY ([CProduct]) REFERENCES [dbo].[TProduct] ([CProductCode]),
    CONSTRAINT [FK_l2ad7h3rx1eoi72bnsld7nrky] FOREIGN KEY ([CDepartCode], [CDepartStartDate]) REFERENCES [dbo].[TFacility] ([CDepartCode], [CDepartStartDate])
);


GO

CREATE TABLE [dbo].[TAgreementHistory] (
    [CAgreement]               INT           NOT NULL,
    [CBranchIdDepartCode]      NVARCHAR (20) NOT NULL,
    [CBranchIdDepartStartDate] DATETIME      NOT NULL,
    [CAgreementState]          BIT           NULL,
    [CAgreementDate]           DATETIME      NULL,
    [CAgreementManager]        NVARCHAR (30) NULL,
    [CAgreementCode]           INT           NULL,
    PRIMARY KEY CLUSTERED ([CAgreement] ASC, [CBranchIdDepartCode] ASC, [CBranchIdDepartStartDate] ASC),
    CONSTRAINT [FK_2jiqvs7j1ik4e74rl475s4iap] FOREIGN KEY ([CAgreement]) REFERENCES [dbo].[TAgreement] ([CAgreementCode]),
    CONSTRAINT [FK_84d44f38421mo8cwi7esaa4lh] FOREIGN KEY ([CAgreementCode]) REFERENCES [dbo].[TAgreement] ([CAgreementCode]),
    CONSTRAINT [FK_9dgjknqup806lr7fnis4jjxbe] FOREIGN KEY ([CAgreementManager]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_a52kxqelqg5c3jji5mu2apihw] FOREIGN KEY ([CBranchIdDepartCode], [CBranchIdDepartStartDate]) REFERENCES [dbo].[TFacility] ([CDepartCode], [CDepartStartDate])
);


GO

CREATE TABLE [dbo].[20160831Trans] (
    [사번]    VARCHAR (50)   NULL,
    [Staff] VARCHAR (50)   NULL,
    [지역]    NVARCHAR (255) NULL,
    [이름]    NVARCHAR (255) NULL,
    [직무]    NVARCHAR (255) NULL,
    [직책]    NVARCHAR (255) NULL,
    [소속]    NVARCHAR (255) NULL,
    [지점코드]  NVARCHAR (255) NULL,
    [기수]    FLOAT (53)     NULL,
    [05년 하] NVARCHAR (255) NULL,
    [06년 상] NVARCHAR (255) NULL,
    [06년 하] NVARCHAR (255) NULL,
    [07년 상] NVARCHAR (255) NULL,
    [07년 하] NVARCHAR (255) NULL,
    [08년 상] NVARCHAR (255) NULL,
    [08년 하] NVARCHAR (255) NULL,
    [09년 상] NVARCHAR (255) NULL,
    [09년 하] NVARCHAR (255) NULL,
    [10년 상] NVARCHAR (255) NULL,
    [10년 하] NVARCHAR (255) NULL,
    [11년 상] NVARCHAR (255) NULL,
    [11년 하] NVARCHAR (255) NULL,
    [12년 상] NVARCHAR (255) NULL,
    [12년 하] NVARCHAR (255) NULL,
    [13년 상] NVARCHAR (255) NULL,
    [13년 하] NVARCHAR (255) NULL,
    [14년 상] NVARCHAR (255) NULL,
    [14년 하] NVARCHAR (255) NULL,
    [15년 상] NVARCHAR (255) NULL,
    [15년 하] NVARCHAR (255) NULL,
    [16년 상] NVARCHAR (255) NULL
);


GO

CREATE TABLE [dbo].[TDepartOldMapping] (
    [CDepartCode]         NVARCHAR (20) NOT NULL,
    [CDepartStartDate]    DATETIME      NOT NULL,
    [COldDepartCode]      NVARCHAR (20) NOT NULL,
    [COldDepartStartDate] DATETIME      NOT NULL,
    [CRegTime]            DATETIME      NULL,
    [CRegStaffId]         NVARCHAR (30) NULL,
    PRIMARY KEY CLUSTERED ([CDepartCode] ASC, [CDepartStartDate] ASC, [COldDepartCode] ASC, [COldDepartStartDate] ASC),
    CONSTRAINT [FK_7g7racfejr3d3ftis1kbobttd] FOREIGN KEY ([COldDepartCode], [COldDepartStartDate]) REFERENCES [dbo].[TDepartment] ([CDepartCode], [CDepartStartDate]),
    CONSTRAINT [FK_9yynms1njyklgin8w6168c0vx] FOREIGN KEY ([CDepartCode], [CDepartStartDate]) REFERENCES [dbo].[TDepartment] ([CDepartCode], [CDepartStartDate]),
    CONSTRAINT [FK_hjrds00euia9r7sf38hl70rou] FOREIGN KEY ([CRegStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[TApprAnnotation] (
    [CDocId]            BIGINT         NOT NULL,
    [CAnnotationId]     NVARCHAR (255) NOT NULL,
    [CCommenterId]      NVARCHAR (30)  NOT NULL,
    [CRegTime]          DATETIME       NOT NULL,
    [CDepartCode]       NVARCHAR (20)  NULL,
    [CDepartStartDate]  DATETIME       NULL,
    [CLevelType]        NVARCHAR (10)  NULL,
    [CLevelCode]        NVARCHAR (10)  NULL,
    [CLevelSeq]         INT            NULL,
    [CText]             NVARCHAR (200) NULL,
    [CQuote]            NTEXT          NULL,
    [CStartRange]       NVARCHAR (100) NULL,
    [CEndRange]         NVARCHAR (100) NULL,
    [CStartOffset]      INT            NULL,
    [CEndOffset]        INT            NULL,
    [CAnnotatorVersion] NVARCHAR (100) NULL,
    PRIMARY KEY CLUSTERED ([CDocId] ASC, [CAnnotationId] ASC, [CCommenterId] ASC),
    CONSTRAINT [FKF453A1F448D9611] FOREIGN KEY ([CDepartCode], [CDepartStartDate]) REFERENCES [dbo].[TDepartment] ([CDepartCode], [CDepartStartDate]),
    CONSTRAINT [FKF453A1F45A5E7F62] FOREIGN KEY ([CCommenterId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FKF453A1F4E6DE7DCD] FOREIGN KEY ([CLevelType], [CLevelCode], [CLevelSeq]) REFERENCES [dbo].[TStaffLevel] ([CLevelType], [CLevelCode], [CLevelSeq]),
    CONSTRAINT [FKF453A1F4F064EB59] FOREIGN KEY ([CDocId]) REFERENCES [dbo].[TApprDoc] ([CDocId])
);


GO

CREATE TABLE [dbo].[TGlobalDbOption] (
    [CCodeId]        NVARCHAR (255) NOT NULL,
    [CCodeName]      NVARCHAR (100) NOT NULL,
    [CDepth]         INT            NULL,
    [CStringValue1]  NVARCHAR (255) NULL,
    [CStringValue2]  NVARCHAR (255) NULL,
    [CStringValue3]  NVARCHAR (255) NULL,
    [CStringValue4]  NVARCHAR (255) NULL,
    [CStringValue5]  NVARCHAR (255) NULL,
    [CStringValue6]  NVARCHAR (255) NULL,
    [CStringValue7]  NVARCHAR (255) NULL,
    [CStringValue8]  NVARCHAR (255) NULL,
    [CStringValue9]  NVARCHAR (255) NULL,
    [CStringValue10] NVARCHAR (255) NULL,
    [CLongValue1]    BIGINT         NULL,
    [CLongValue2]    BIGINT         NULL,
    [CLongValue3]    BIGINT         NULL,
    [CLongValue4]    BIGINT         NULL,
    [CLongValue5]    BIGINT         NULL,
    [CLongValue6]    BIGINT         NULL,
    [CLongValue7]    BIGINT         NULL,
    [CLongValue8]    BIGINT         NULL,
    [CLongValue9]    BIGINT         NULL,
    [CLongValue10]   BIGINT         NULL,
    [CTextValue1]    NTEXT          NULL,
    [CTextValue2]    NTEXT          NULL,
    [CTextValue3]    NTEXT          NULL,
    [CRemark]        NTEXT          NULL,
    [CValueTitle]    NTEXT          NULL,
    PRIMARY KEY CLUSTERED ([CCodeId] ASC)
);


GO

CREATE TABLE [dbo].[TAccountingIncomeInputs] (
    [CAiDepartCode]      NVARCHAR (20)  NOT NULL,
    [CAiDepartStartDate] DATETIME       NOT NULL,
    [CNo]                INT            NOT NULL,
    [CAccountCode]       NVARCHAR (15)  NOT NULL,
    [CCommonGroupCode]   NVARCHAR (50)  NOT NULL,
    [CCommonCode]        NVARCHAR (50)  NOT NULL,
    [CInputValue]        NVARCHAR (255) NULL,
    [CInputComment]      NVARCHAR (255) NULL,
    [CInputEssential]    BIT            NULL,
    [CCodeValue]         NVARCHAR (255) NULL,
    PRIMARY KEY CLUSTERED ([CAiDepartCode] ASC, [CAiDepartStartDate] ASC, [CNo] ASC, [CAccountCode] ASC, [CCommonGroupCode] ASC, [CCommonCode] ASC),
    CONSTRAINT [FK3F26E19B5883CC21] FOREIGN KEY ([CAccountCode], [CCommonGroupCode], [CCommonCode]) REFERENCES [dbo].[TAccountInputs] ([CAccountCode], [CCommonGroupCode], [CCommonCode]),
    CONSTRAINT [FK3F26E19B94AAB12A] FOREIGN KEY ([CAiDepartCode], [CAiDepartStartDate], [CNo]) REFERENCES [dbo].[TAccountingIncome] ([CBrDepartCode], [CBrDepartStartDate], [CNo])
);


GO

CREATE TABLE [dbo].[TRegistCounsel] (
    [CStdDepartCode]      NVARCHAR (20)  NOT NULL,
    [CStdDepartStartDate] DATETIME       NOT NULL,
    [CStdCode]            NVARCHAR (50)  NOT NULL,
    [CNo]                 INT            NOT NULL,
    [CCounselType]        NVARCHAR (50)  NOT NULL,
    [CInquireChannel]     NVARCHAR (50)  NULL,
    [CVisitChannel]       NVARCHAR (50)  NULL,
    [CCallDate]           DATETIME       NULL,
    [CVisitDate]          DATETIME       NULL,
    [CRegTime]            DATETIME       NULL,
    [CEditTime]           DATETIME       NULL,
    [CStatus]             NVARCHAR (50)  NULL,
    [CReservTime]         DATETIME       NULL,
    [CEnterSchoolType]    NVARCHAR (50)  NULL,
    [CParentPhone]        NVARCHAR (255) NULL,
    [CComment]            NVARCHAR (255) NULL,
    CONSTRAINT [PK_TRegistCounsel] PRIMARY KEY CLUSTERED ([CStdDepartCode] ASC, [CStdDepartStartDate] ASC, [CStdCode] ASC, [CNo] ASC),
    CONSTRAINT [FK_TStudent_TRegistCounsel] FOREIGN KEY ([CStdDepartCode], [CStdDepartStartDate], [CStdCode]) REFERENCES [dbo].[TStudent] ([CBranchCode], [CBranchStartDate], [CCode])
);


GO

CREATE TABLE [dbo].[TBoardEvaluationItem] (
    [CItemId]  NVARCHAR (50) NOT NULL,
    [CBoardId] NVARCHAR (20) NULL,
    [COrder]   INT           NULL,
    [CEnabled] BIT           NULL,
    [CName0]   NVARCHAR (50) NOT NULL,
    [CName1]   NVARCHAR (50) NULL,
    [CName2]   NVARCHAR (50) NULL,
    [CName3]   NVARCHAR (50) NULL,
    [CName4]   NVARCHAR (50) NULL,
    PRIMARY KEY CLUSTERED ([CItemId] ASC),
    CONSTRAINT [FK46D7C80135D89A81] FOREIGN KEY ([CBoardId]) REFERENCES [dbo].[TBoard] ([CBoardId])
);


GO

CREATE TABLE [dbo].[TStudentCounselRefund] (
    [CStdBrcDptCode]      NVARCHAR (20)  NOT NULL,
    [CStdBrcDptStartDate] DATETIME       NOT NULL,
    [CStdCode]            NVARCHAR (50)  NOT NULL,
    [CNo]                 INT            NOT NULL,
    [CEndDatePayment]     DATETIME       NULL,
    [CEndDateRefund]      DATETIME       NULL,
    [CRefundDays]         INT            NULL,
    [CRefundCalcPrice]    INT            NULL,
    [CRefundPrice]        INT            NULL,
    [CRefundComment]      NVARCHAR (255) NULL,
    [CRefundDate]         DATETIME       NULL,
    [CRefundStatus]       NVARCHAR (50)  NULL,
    [CRefundRoyalty]      INT            NULL,
    [CRefundFixRoyalty]   INT            NULL,
    [CRefundProofSeq]     BIGINT         NULL,
    [CUpDate]             DATETIME       CONSTRAINT [DF_TStudentCounselRefund_CUpDate] DEFAULT (getdate()) NULL,
    PRIMARY KEY CLUSTERED ([CStdBrcDptCode] ASC, [CStdBrcDptStartDate] ASC, [CStdCode] ASC, [CNo] ASC),
    CONSTRAINT [FK_oumcmfjcajuj171f11r1gpdt7] FOREIGN KEY ([CRefundProofSeq]) REFERENCES [dbo].[TSaleProof] ([CProofSeq]),
    CONSTRAINT [FKF9000A063B557785] FOREIGN KEY ([CStdBrcDptCode], [CStdBrcDptStartDate], [CStdCode], [CNo]) REFERENCES [dbo].[TStudentCounsel] ([CScDepartCode], [CScDepartStartDate], [CScCode], [CNo])
);


GO

CREATE TABLE [dbo].[tbl_hrm_instants] (
    [tbl_hrm_instants_idx] INT            IDENTITY (1, 1) NOT NULL,
    [year]                 INT            NULL,
    [half_year]            CHAR (1)       NULL,
    [manage_inst]          NVARCHAR (MAX) NULL,
    [comma_inst]           NVARCHAR (MAX) NULL,
    [maintain_inst]        NVARCHAR (MAX) NULL,
    [revise_inst]          NVARCHAR (MAX) NULL,
    [end_reason_inst]      NVARCHAR (MAX) NULL,
    [reg_reason_inst]      NVARCHAR (MAX) NULL,
    [coaching_inst]        NVARCHAR (MAX) NULL,
    [tutoring_inst]        NVARCHAR (MAX) NULL,
    CONSTRAINT [PK_tbl_hrm_instants] PRIMARY KEY CLUSTERED ([tbl_hrm_instants_idx] ASC)
);


GO

CREATE TABLE [dbo].[TTradeCloseDetail] (
    [CThDepartCode]      NVARCHAR (20) NOT NULL,
    [CThDepartStartDate] DATETIME      NOT NULL,
    [CCloseNo]           INT           NOT NULL,
    [CRequireDate]       DATETIME      NOT NULL,
    [CTdDepartCode]      NVARCHAR (20) NOT NULL,
    [CTdDepartStartDate] DATETIME      NOT NULL,
    [CTradeNo]           INT           NOT NULL,
    [CTdBranchCode]      NVARCHAR (20) NOT NULL,
    [CTdBranchStartDate] DATETIME      NOT NULL,
    [CDetailNo]          INT           NOT NULL,
    PRIMARY KEY CLUSTERED ([CThDepartCode] ASC, [CThDepartStartDate] ASC, [CCloseNo] ASC, [CRequireDate] ASC, [CTdDepartCode] ASC, [CTdDepartStartDate] ASC, [CTradeNo] ASC, [CTdBranchCode] ASC, [CTdBranchStartDate] ASC, [CDetailNo] ASC),
    CONSTRAINT [FK9BEB54D9AE1D8A50] FOREIGN KEY ([CRequireDate], [CTdDepartCode], [CTdDepartStartDate], [CTradeNo], [CTdBranchCode], [CTdBranchStartDate], [CDetailNo]) REFERENCES [dbo].[TTradeDetail] ([CRequireDate], [CTiDepartCode], [CTiDepartStartDate], [CTradeNo], [CBranchCode], [CBranchStartDate], [CDetailNo]),
    CONSTRAINT [FK9BEB54D9DC44F56D] FOREIGN KEY ([CThDepartCode], [CThDepartStartDate], [CCloseNo]) REFERENCES [dbo].[TTradeCloseHistory] ([CBranchCode], [CBranchStartDate], [CCloseNo])
);


GO

CREATE TABLE [dbo].[TTimeScheduleDay] (
    [CId]                BIGINT        IDENTITY (1, 1) NOT NULL,
    [CFacilityCode]      NVARCHAR (20) NULL,
    [CFacilityStartDate] DATETIME      NULL,
    [CStudyDate]         DATETIME      NOT NULL,
    [CStartTime]         NVARCHAR (5)  NULL,
    [CTimeRow]           INT           NULL,
    [CTimeColumn]        INT           NULL,
    [CReadyMin]          INT           NULL,
    [CTimeMin]           INT           NULL,
    [CUpdTime]           DATETIME      NULL,
    [CUpdStaffId]        NVARCHAR (30) NULL,
    PRIMARY KEY CLUSTERED ([CId] ASC),
    CONSTRAINT [FK_585q3heh2ro4d03bm37yomflt] FOREIGN KEY ([CUpdStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_ownk2eq93o2vkmv0xoyxsu06k] FOREIGN KEY ([CFacilityCode], [CFacilityStartDate]) REFERENCES [dbo].[TFacility] ([CDepartCode], [CDepartStartDate])
);


GO

CREATE TABLE [dbo].[TExpertArea] (
    [CAreaNo]   INT            IDENTITY (1, 1) NOT NULL,
    [CAreaName] NVARCHAR (255) NULL,
    PRIMARY KEY CLUSTERED ([CAreaNo] ASC)
);


GO

CREATE TABLE [dbo].[TB_ATT_TEMP] (
    [CLASS_CODE]  NVARCHAR (20) NULL,
    [USER_GUBN]   NVARCHAR (1)  NULL,
    [USER_SEQ]    NVARCHAR (20) NULL,
    [USER_CARDNO] NVARCHAR (50) NULL,
    [ATT_STATE]   NVARCHAR (2)  NULL,
    [ATT_FLAG]    NVARCHAR (1)  NULL,
    [ATT_DATE]    DATETIME      NULL
);


GO

CREATE TABLE [dbo].[TStudentLeave] (
    [CDepartCode]      NVARCHAR (20) NOT NULL,
    [CDepartStartDate] DATETIME      NOT NULL,
    [CStudentCode]     NVARCHAR (50) NOT NULL,
    [CLeaveStartDate]  DATETIME      NOT NULL,
    [CLeaveEndDate]    DATETIME      NULL,
    [CLeaveDate]       DATETIME      NULL,
    [CLeaveDays]       INT           NULL,
    [CComment]         NVARCHAR (50) NULL,
    [CCounsel]         BIT           NULL,
    [CTutoring]        BIT           NULL,
    [CLeaveStatus]     NVARCHAR (50) NULL,
    PRIMARY KEY CLUSTERED ([CDepartCode] ASC, [CDepartStartDate] ASC, [CStudentCode] ASC, [CLeaveStartDate] ASC),
    CONSTRAINT [FK_l13irr3yerg7rgyxydt4mdvcx] FOREIGN KEY ([CDepartCode], [CDepartStartDate], [CStudentCode]) REFERENCES [dbo].[TStudent] ([CBranchCode], [CBranchStartDate], [CCode])
);


GO

CREATE TABLE [dbo].[tb_RootClass] (
    [it_RootClassIdx]      INT      IDENTITY (1, 1) NOT NULL,
    [it_RootCourseIdx]     INT      NULL,
    [it_RootLectureIdx]    INT      NULL,
    [it_RootClassSort]     INT      NULL,
    [it_RootHomeworkIdx]   INT      NULL,
    [dt_HomeworkLimitDate] DATETIME NULL,
    [it_RootHomeworkSort]  INT      NULL,
    CONSTRAINT [PK_tb_RootClass] PRIMARY KEY CLUSTERED ([it_RootClassIdx] ASC),
    CONSTRAINT [FK_tb_RootClass_tb_RootCourse] FOREIGN KEY ([it_RootCourseIdx]) REFERENCES [dbo].[tb_RootCourse] ([it_RootCourseIdx]),
    CONSTRAINT [FK_tb_RootClass_tb_RootHomework] FOREIGN KEY ([it_RootHomeworkIdx]) REFERENCES [dbo].[tb_RootHomework] ([it_RootHomeworkIdx]),
    CONSTRAINT [FK_tb_RootClass_tb_RootLecture] FOREIGN KEY ([it_RootLectureIdx]) REFERENCES [dbo].[tb_RootLecture] ([it_RootLectureIdx])
);


GO

CREATE TABLE [dbo].[TStaffSalaryMonth] (
    [CSalaryMonth]    DATETIME      NOT NULL,
    [CStaffId]        NVARCHAR (30) NOT NULL,
    [CSalaryType]     NVARCHAR (50) NULL,
    [CSalaryMain]     BIGINT        NULL,
    [CSalaryBonus]    BIGINT        NULL,
    [CSalaryExtra]    BIGINT        NULL,
    [CSalaryHourly]   BIGINT        NULL,
    [CSalarySum]      BIGINT        NULL,
    [CRetirementFund] BIGINT        NULL,
    [CSalaryDeduct]   BIGINT        NULL,
    [CSalaryPay]      BIGINT        NULL,
    [CSalaryDate]     DATETIME      NULL,
    PRIMARY KEY CLUSTERED ([CSalaryMonth] ASC, [CStaffId] ASC),
    CONSTRAINT [FK20166C4A9E3C3476] FOREIGN KEY ([CStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[TStaffLicense] (
    [CStaffId]     NVARCHAR (30)  NOT NULL,
    [CNo]          INT            NOT NULL,
    [CCodeGroup]   NVARCHAR (50)  NULL,
    [CCommonCode]  NVARCHAR (50)  NULL,
    [CName]        NVARCHAR (255) NULL,
    [CSerial]      NVARCHAR (50)  NULL,
    [CLevel]       NVARCHAR (50)  NULL,
    [CGetDate]     DATETIME       NULL,
    [CIssueOrgan]  NVARCHAR (50)  NULL,
    [CAvailPeriod] NVARCHAR (50)  NULL,
    [CChk]         NVARCHAR (10)  NULL,
    PRIMARY KEY CLUSTERED ([CStaffId] ASC, [CNo] ASC),
    CONSTRAINT [FKAD30D3B59E3C3476] FOREIGN KEY ([CStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FKAD30D3B5FB960C0] FOREIGN KEY ([CCodeGroup], [CCommonCode]) REFERENCES [dbo].[TCommonCode] ([CCodeGroup], [CCode])
);


GO

CREATE TABLE [dbo].[TStaffGroupDepartFilter] (
    [CGroupId]         NVARCHAR (20) NOT NULL,
    [CDepartCode]      NVARCHAR (20) NOT NULL,
    [CDepartStartDate] DATETIME      NOT NULL,
    [CIncludeSub]      BIT           NULL,
    [CDisplayIndex]    INT           NULL,
    PRIMARY KEY CLUSTERED ([CGroupId] ASC, [CDepartCode] ASC, [CDepartStartDate] ASC),
    CONSTRAINT [FK_be9mkwhtxsp1ql1rqj2xdkvr5] FOREIGN KEY ([CGroupId]) REFERENCES [dbo].[TStaffGroup] ([CGroupId]),
    CONSTRAINT [FK_mjxl12hyvov7jah00kfy9fvwu] FOREIGN KEY ([CDepartCode], [CDepartStartDate]) REFERENCES [dbo].[TDepartment] ([CDepartCode], [CDepartStartDate])
);


GO

CREATE TABLE [dbo].[TStaffGroupLevelFilter] (
    [CGroupId]      NVARCHAR (20) NOT NULL,
    [CLevelType]    NVARCHAR (10) NOT NULL,
    [CLevelCode]    NVARCHAR (10) NOT NULL,
    [CLevelSeq]     INT           NOT NULL,
    [CDisplayIndex] INT           NULL,
    PRIMARY KEY CLUSTERED ([CGroupId] ASC, [CLevelType] ASC, [CLevelCode] ASC, [CLevelSeq] ASC),
    CONSTRAINT [FK_10i2xm416bc9eqatn5tpub7li] FOREIGN KEY ([CGroupId]) REFERENCES [dbo].[TStaffGroup] ([CGroupId]),
    CONSTRAINT [FK_amml2esowihnws1sxocwc5n47] FOREIGN KEY ([CLevelType], [CLevelCode], [CLevelSeq]) REFERENCES [dbo].[TStaffLevel] ([CLevelType], [CLevelCode], [CLevelSeq])
);


GO

CREATE TABLE [dbo].[THpCompany] (
    [CCompanyId]          BIGINT         IDENTITY (1, 1) NOT NULL,
    [CName0]              NVARCHAR (50)  NOT NULL,
    [CName1]              NVARCHAR (50)  NULL,
    [CName2]              NVARCHAR (50)  NULL,
    [CName3]              NVARCHAR (50)  NULL,
    [CName4]              NVARCHAR (50)  NULL,
    [CRegNo]              NVARCHAR (100) NULL,
    [CMasterName]         NVARCHAR (100) NULL,
    [CCompanyPostNo]      NVARCHAR (20)  NULL,
    [CCompanyAddress]     NVARCHAR (255) NULL,
    [CCompanyHomepage]    NVARCHAR (50)  NULL,
    [CCompanyLogoId]      BIGINT         NULL,
    [CCompanyImageId]     BIGINT         NULL,
    [CMemberRemark]       NTEXT          NULL,
    [CIsPartener]         BIT            NOT NULL,
    [CIsCustomer]         BIT            NOT NULL,
    [CHomepyDisplayIndex] INT            NOT NULL,
    [CManagerRemark]      NTEXT          NULL,
    PRIMARY KEY CLUSTERED ([CCompanyId] ASC),
    CONSTRAINT [FK_flvml4oaite5f1mqwyrwqdqpn] FOREIGN KEY ([CCompanyLogoId]) REFERENCES [dbo].[THpFile] ([CFileId]),
    CONSTRAINT [FK_n9d68r06w3mrx7dad7968wcvu] FOREIGN KEY ([CCompanyImageId]) REFERENCES [dbo].[THpFile] ([CFileId])
);


GO

CREATE TABLE [dbo].[TBizDaily4DepartFile] (
    [CBizDate]  DATETIME      NOT NULL,
    [CGroupId]  NVARCHAR (20) NOT NULL,
    [CAttachId] BIGINT        NOT NULL,
    [CSeq]      INT           NULL,
    [CWriterId] NVARCHAR (30) NULL,
    PRIMARY KEY CLUSTERED ([CBizDate] ASC, [CGroupId] ASC, [CAttachId] ASC),
    CONSTRAINT [FK_9wjhgam0gxcu2of4emd5isnwo] FOREIGN KEY ([CBizDate], [CGroupId]) REFERENCES [dbo].[TBizDaily4Depart] ([CBizDate], [CGroupId]),
    CONSTRAINT [FK_bbww09vlsn2o0wsj1fiq845o4] FOREIGN KEY ([CAttachId]) REFERENCES [dbo].[TFile] ([CFileId]),
    CONSTRAINT [FK_qkcv6eir78v3t7oylykg1wlds] FOREIGN KEY ([CBizDate], [CGroupId], [CWriterId]) REFERENCES [dbo].[TBizDaily4Staff] ([CBizDate], [CGroupId], [CWriterId])
);


GO

CREATE TABLE [dbo].[TApprForm] (
    [CFormId]                   NVARCHAR (15)  NOT NULL,
    [CFormType]                 NVARCHAR (15)  NULL,
    [CFormGroupId]              NVARCHAR (255) NULL,
    [CAppprovedTime]            NVARCHAR (255) NOT NULL,
    [CNoFormat]                 NVARCHAR (255) NOT NULL,
    [CUseMenuAtStartUp]         BIT            NOT NULL,
    [CEnabled]                  BIT            NOT NULL,
    [COrder]                    INT            NOT NULL,
    [CName0]                    NVARCHAR (50)  NOT NULL,
    [CName1]                    NVARCHAR (50)  NULL,
    [CName2]                    NVARCHAR (50)  NULL,
    [CName3]                    NVARCHAR (50)  NULL,
    [CName4]                    NVARCHAR (50)  NULL,
    [CShortName0]               NVARCHAR (10)  NOT NULL,
    [CShortName1]               NVARCHAR (10)  NULL,
    [CShortName2]               NVARCHAR (10)  NULL,
    [CShortName3]               NVARCHAR (10)  NULL,
    [CShortName4]               NVARCHAR (10)  NULL,
    [CDefaultSecuLevel]         INT            NULL,
    [CMaxSigner]                INT            DEFAULT ((5)) NOT NULL,
    [CMaxConsult]               INT            DEFAULT ((5)) NOT NULL,
    [CDefaultTermYear]          INT            NOT NULL,
    [CUseSignerModify]          BIT            NOT NULL,
    [CUseConsultModi]           BIT            NOT NULL,
    [CNotifyCommentType]        NVARCHAR (20)  NOT NULL,
    [CNotifyApprovedType]       NVARCHAR (20)  NOT NULL,
    [CUseNewAsThis]             BIT            NOT NULL,
    [CUseReReport]              BIT            DEFAULT ((0)) NOT NULL,
    [CUseTemporarySave]         BIT            DEFAULT ((0)) NOT NULL,
    [CUseReception]             BIT            DEFAULT ((1)) NOT NULL,
    [CUseRefer]                 BIT            DEFAULT ((1)) NOT NULL,
    [CUseConsultation]          BIT            DEFAULT ((1)) NOT NULL,
    [CUseImpler]                BIT            DEFAULT ((1)) NOT NULL,
    [CSecondReport]             BIT            DEFAULT ((1)) NOT NULL,
    [CSignerModifyLine]         BIT            NOT NULL,
    [CConsultSignerPos]         NVARCHAR (20)  NULL,
    [CUseLinkToDo]              BIT            NULL,
    [CComment]                  NVARCHAR (255) NULL,
    [CAllowMultiToDo]           BIT            NULL,
    [CAllowNoticeToReferSigner] BIT            DEFAULT ((1)) NULL,
    [CAllowNoticeToReferRecept] BIT            DEFAULT ((1)) NULL,
    [CMaxAdded1]                INT            NULL,
    [CMaxAdded2]                INT            NULL,
    [CAdded1SignerPos]          NVARCHAR (20)  NULL,
    [CAdded2SignerPos]          NVARCHAR (20)  NULL,
    [CFixedModifyLine]          BIT            NULL,
    [CModeFileAddPerm]          NVARCHAR (255) NULL,
    [CModeFileAddStatus]        NVARCHAR (255) NULL,
    [CUseErrorReport]           BIT            NULL,
    [CMultiReport]              BIT            DEFAULT ((0)) NOT NULL,
    [CNoFromMultiPrev]          BIT            DEFAULT ((0)) NOT NULL,
    [CDisableUpload]            BIT            DEFAULT ((0)) NOT NULL,
    [CUseConsultModify]         BIT            DEFAULT ((0)) NOT NULL,
    [CUseReceptText]            BIT            DEFAULT ((0)) NOT NULL,
    [CDepartNameDpType]         NVARCHAR (255) DEFAULT ('Name') NOT NULL,
    [CUseCtrler]                BIT            DEFAULT ((0)) NOT NULL,
    [CPassiveSendType]          NVARCHAR (255) DEFAULT ('Auto') NOT NULL,
    [CIsActionCopy]             BIT            DEFAULT ((0)) NOT NULL,
    [CActionCopyOrgFormId]      NVARCHAR (50)  NULL,
    [CIsCirculating]            BIT            DEFAULT ((0)) NOT NULL,
    [CNotAllowMulti]            BIT            DEFAULT ((0)) NOT NULL,
    [CNotAllowMultiLink]        BIT            DEFAULT ((0)) NOT NULL,
    [CConsultModifyLine]        BIT            NULL,
    [CInsteadModifyLine]        BIT            NULL,
    [CAllowModifyDate]          BIT            DEFAULT ((0)) NULL,
    [CUseShortLevelName]        BIT            NULL,
    [CForceUseFixedCon]         BIT            DEFAULT ((0)) NOT NULL,
    [CSignUsePwType]            NVARCHAR (255) DEFAULT ('inherit') NOT NULL,
    [CForceSkipCommentPrint]    BIT            NULL,
    [CCorrectDay]               INT            NULL,
    [CUseAddSignerModify]       BIT            DEFAULT ((0)) NOT NULL,
    [CModeRefAddPerm]           NVARCHAR (255) NULL,
    [CModeRefAddStatus]         NVARCHAR (255) NULL,
    [CUseSenderName]            BIT            NULL,
    [CAllowAutoAction]          BIT            DEFAULT ((0)) NOT NULL,
    [CAutoActionFormId]         NVARCHAR (50)  NULL,
    [CShowControl]              BIT            NULL,
    [CShowSeal]                 BIT            NULL,
    [CUseCircul]                BIT            NULL,
    [CAliasId]                  NVARCHAR (100) NULL,
    [CMaxAudit]                 INT            NULL,
    [CUseAddedDepart]           BIT            DEFAULT ((0)) NOT NULL,
    [CAddedModifyLine]          BIT            NULL,
    [CNeedAdded1]               BIT            NULL,
    [CNeedAdded2]               BIT            NULL,
    [CNeedReception]            BIT            NULL,
    [CDefaultKindId]            INT            NULL,
    [CAliasId2]                 NVARCHAR (100) NULL,
    [CStringValue1]             NVARCHAR (255) NULL,
    [CStringValue2]             NVARCHAR (255) NULL,
    [CStringValue3]             NVARCHAR (255) NULL,
    [CStringValue4]             NVARCHAR (255) NULL,
    [CStringValue5]             NVARCHAR (255) NULL,
    [CStringValue6]             NVARCHAR (255) NULL,
    [CStringValue7]             NVARCHAR (255) NULL,
    [CStringValue8]             NVARCHAR (255) NULL,
    [CStringValue9]             NVARCHAR (255) NULL,
    [CLongValue1]               BIGINT         NULL,
    [CLongValue2]               BIGINT         NULL,
    [CLongValue3]               BIGINT         NULL,
    [CLongValue4]               BIGINT         NULL,
    [CLongValue5]               BIGINT         NULL,
    [CLongValue6]               BIGINT         NULL,
    [CLongValue7]               BIGINT         NULL,
    [CLongValue8]               BIGINT         NULL,
    [CLongValue9]               BIGINT         NULL,
    [CNeedCircul]               BIT            NULL,
    [CUseArbitraryOnly]         BIT            NULL,
    [CCompulsorySignerPos]      NVARCHAR (20)  NULL,
    PRIMARY KEY CLUSTERED ([CFormId] ASC),
    CONSTRAINT [FK_4m2g4fwjij526e4h8ny2ax40x] FOREIGN KEY ([CDefaultKindId]) REFERENCES [dbo].[TApprDocKind] ([CKindId]),
    CONSTRAINT [FKF0E17B4963BE5C37] FOREIGN KEY ([CDefaultSecuLevel]) REFERENCES [dbo].[TApprSecurityLevel] ([CLevelId]),
    CONSTRAINT [FKF0E17B49B2D6B1FF] FOREIGN KEY ([CFormGroupId]) REFERENCES [dbo].[TApprFormGroup] ([CGroupId]),
    CONSTRAINT [FKF0E17B49D72523CE] FOREIGN KEY ([CFormType]) REFERENCES [dbo].[TApprFormType] ([CFormTypeId])
);


GO

CREATE TABLE [dbo].[TApprDocReader] (
    [CDocId]          BIGINT         NOT NULL,
    [CReaderId]       NVARCHAR (30)  NOT NULL,
    [CCount]          INT            NOT NULL,
    [CFirstReadTime]  DATETIME       NOT NULL,
    [CLastReadTime]   DATETIME       NOT NULL,
    [CReadDone]       BIT            NOT NULL,
    [CFirstReadIp]    NVARCHAR (255) NULL,
    [CFirstSessionId] NVARCHAR (255) NULL,
    [CFirstFolderId]  NVARCHAR (255) NULL,
    [CFirstClientId]  NVARCHAR (255) NULL,
    [CLastReadIp]     NVARCHAR (255) NULL,
    [CLastSessionId]  NVARCHAR (255) NULL,
    [CLastFolderId]   NVARCHAR (255) NULL,
    [CLastClientId]   NVARCHAR (255) NULL,
    PRIMARY KEY CLUSTERED ([CDocId] ASC, [CReaderId] ASC),
    CONSTRAINT [FK6A08DCB660B70BF] FOREIGN KEY ([CReaderId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK6A08DCB6F064EB59] FOREIGN KEY ([CDocId]) REFERENCES [dbo].[TApprDoc] ([CDocId])
);


GO

CREATE TABLE [dbo].[tbl_TutorLateHistory] (
    [idSeq]      INT            IDENTITY (1, 1) NOT NULL,
    [lateDate]   DATETIME       DEFAULT (NULL) NULL,
    [branchCode] NVARCHAR (20)  DEFAULT (NULL) NULL,
    [tutorCode]  INT            DEFAULT (NULL) NULL,
    [lateMemo]   NVARCHAR (255) DEFAULT (NULL) NULL
);


GO

CREATE TABLE [dbo].[TPartner] (
    [CId]            BIGINT         IDENTITY (1, 1) NOT NULL,
    [CIsUse]         BIT            NULL,
    [CIsCust]        BIT            NULL,
    [CIsPurchasing]  BIT            NULL,
    [CIsSalesCh]     BIT            NULL,
    [CName0]         NVARCHAR (100) NULL,
    [CName1]         NVARCHAR (100) NULL,
    [CName2]         NVARCHAR (100) NULL,
    [CName3]         NVARCHAR (100) NULL,
    [CName4]         NVARCHAR (100) NULL,
    [CShortName0]    NVARCHAR (100) NULL,
    [CShortName1]    NVARCHAR (100) NULL,
    [CShortName2]    NVARCHAR (100) NULL,
    [CShortName3]    NVARCHAR (100) NULL,
    [CShortName4]    NVARCHAR (100) NULL,
    [CRegNo]         NVARCHAR (255) NULL,
    [CBankGroupCode] NVARCHAR (50)  NULL,
    [CBankCode]      NVARCHAR (50)  NULL,
    [CBankNo]        NVARCHAR (255) NULL,
    [CAccountHolder] NVARCHAR (255) NULL,
    [CMasterName]    NVARCHAR (255) NULL,
    [CTaxEmailAdd]   NVARCHAR (255) NULL,
    [CBankBookId]    BIGINT         NULL,
    [CBizLicenseId]  BIGINT         NULL,
    [CPostNo]        NVARCHAR (20)  NULL,
    [CAddress]       NVARCHAR (200) NULL,
    [CKind1]         NVARCHAR (255) NULL,
    [CKind2]         NVARCHAR (255) NULL,
    [CRegStaffId]    NVARCHAR (30)  NULL,
    [CRegTime]       DATETIME       NOT NULL,
    [CUpdStaffId]    NVARCHAR (30)  NULL,
    [CUpdTime]       DATETIME       NULL,
    [CRemark]        NTEXT          NULL,
    [CStaffGroupId]  NVARCHAR (20)  NULL,
    [CAsStartDate]   DATETIME       NULL,
    [CAsEndDate]     DATETIME       NULL,
    PRIMARY KEY CLUSTERED ([CId] ASC),
    CONSTRAINT [FK_9m3kh96dyssiumgd7a4911vxa] FOREIGN KEY ([CBizLicenseId]) REFERENCES [dbo].[TFile] ([CFileId]),
    CONSTRAINT [FK_ky6wggfompxnm8qdvphhbtwdm] FOREIGN KEY ([CBankGroupCode], [CBankCode]) REFERENCES [dbo].[TCommonCode] ([CCodeGroup], [CCode]),
    CONSTRAINT [FK_ld9n2wbf4tbxwyg595r8ng79i] FOREIGN KEY ([CStaffGroupId]) REFERENCES [dbo].[TStaffGroup] ([CGroupId]),
    CONSTRAINT [FK_m9vwj24ffuq2h5m50pojqcdw8] FOREIGN KEY ([CBankBookId]) REFERENCES [dbo].[TFile] ([CFileId]),
    CONSTRAINT [FK_ncw1n4hrbsqvp5wq5bapfebl1] FOREIGN KEY ([CRegStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_qy3rcytoogvcloyr54hso5x9u] FOREIGN KEY ([CUpdStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[DL_SMS_MSG] (
    [TR_NUM]          INT           IDENTITY (1, 1) NOT NULL,
    [TR_SENDDATE]     DATETIME      DEFAULT (getdate()) NOT NULL,
    [TR_SERIALNUM]    INT           NULL,
    [TR_ID]           VARCHAR (16)  NULL,
    [TR_SENDSTAT]     VARCHAR (1)   DEFAULT ('0') NOT NULL,
    [TR_RSLTSTAT]     VARCHAR (10)  DEFAULT ('00') NULL,
    [TR_MSGTYPE]      VARCHAR (1)   DEFAULT ('0') NOT NULL,
    [TR_PHONE]        VARCHAR (20)  NOT NULL,
    [TR_CALLBACK]     VARCHAR (20)  DEFAULT ('') NOT NULL,
    [TR_ORG_CALLBACK] VARCHAR (20)  DEFAULT ('') NULL,
    [TR_BILL_ID]      VARCHAR (20)  DEFAULT ('') NULL,
    [TR_RSLTDATE]     DATETIME      NULL,
    [TR_MODIFIED]     DATETIME      NULL,
    [TR_MSG]          VARCHAR (160) NULL,
    [TR_NET]          VARCHAR (4)   NULL,
    [TR_ETC1]         VARCHAR (34)  NULL,
    [TR_ETC2]         VARCHAR (34)  NULL,
    [TR_ETC3]         VARCHAR (34)  NULL,
    [TR_ETC4]         VARCHAR (34)  NULL,
    [TR_ETC5]         VARCHAR (34)  NULL,
    [TR_ETC6]         VARCHAR (34)  NULL,
    [TR_ETC7]         VARCHAR (34)  NULL,
    [TR_ETC8]         VARCHAR (34)  NULL,
    [TR_ETC9]         VARCHAR (34)  NULL,
    [TR_ETC10]        VARCHAR (34)  NULL,
    [TR_REALSENDDATE] DATETIME      NULL,
    CONSTRAINT [PK_DL_SMS_MSG_TR_NUM] PRIMARY KEY CLUSTERED ([TR_NUM] ASC)
);


GO

CREATE TABLE [dbo].[TCreditCard] (
    [CBrDepartCode]      NVARCHAR (20)  NOT NULL,
    [CBrDepartStartDate] DATETIME       NOT NULL,
    [CCode]              NVARCHAR (50)  NOT NULL,
    [CCommonGroupCode]   NVARCHAR (50)  NULL,
    [CCommonCode]        NVARCHAR (50)  NULL,
    [CCardName]          NVARCHAR (255) NULL,
    [CType]              NVARCHAR (50)  NULL,
    [CBaDepartCode]      NVARCHAR (20)  NULL,
    [CBaDepartStartDate] DATETIME       NULL,
    [CBaCode]            NVARCHAR (50)  NULL,
    [CPayDate]           NVARCHAR (255) NULL,
    [CTermStart]         NVARCHAR (255) NULL,
    [CTermEnd]           NVARCHAR (255) NULL,
    [CEnabled]           BIT            NULL,
    PRIMARY KEY CLUSTERED ([CBrDepartCode] ASC, [CBrDepartStartDate] ASC, [CCode] ASC),
    CONSTRAINT [FK3031F91D2D35EBE2] FOREIGN KEY ([CBrDepartCode], [CBrDepartStartDate]) REFERENCES [dbo].[TFacility] ([CDepartCode], [CDepartStartDate]),
    CONSTRAINT [FK3031F91DA4102632] FOREIGN KEY ([CBaDepartCode], [CBaDepartStartDate], [CBaCode]) REFERENCES [dbo].[TBankAccount] ([CBrDepartCode], [CBrDepartStartDate], [CCode]),
    CONSTRAINT [FK3031F91DC74495AF] FOREIGN KEY ([CCommonGroupCode], [CCommonCode]) REFERENCES [dbo].[TCommonCode] ([CCodeGroup], [CCode])
);


GO

CREATE TABLE [dbo].[TB_ATT_MESSAGE] (
    [CBranchCode]      NVARCHAR (20)  NOT NULL,
    [CBranchStartDate] DATETIME       NOT NULL,
    [CCode]            NVARCHAR (50)  NOT NULL,
    [CManagerId]       NVARCHAR (30)  NOT NULL,
    [CRegDate]         DATETIME       NOT NULL,
    [CMsgType]         NVARCHAR (20)  NOT NULL,
    [CMessage]         NVARCHAR (255) NOT NULL,
    CONSTRAINT [PK_TB_ATT_MESSAGE] PRIMARY KEY CLUSTERED ([CBranchCode] ASC, [CBranchStartDate] ASC, [CCode] ASC, [CManagerId] ASC, [CRegDate] ASC, [CMsgType] ASC)
);


GO

CREATE TABLE [dbo].[TScheduleType] (
    [CId]             NVARCHAR (10) NOT NULL,
    [CName0]          NVARCHAR (30) NULL,
    [CName1]          NVARCHAR (30) NULL,
    [CName2]          NVARCHAR (30) NULL,
    [CName3]          NVARCHAR (30) NULL,
    [CName4]          NVARCHAR (30) NULL,
    [CDefaultType]    BIT           NOT NULL,
    [CCompanyEvent]   BIT           NOT NULL,
    [CChangable]      BIT           NOT NULL,
    [CEnable]         BIT           NOT NULL,
    [CColor4me]       NVARCHAR (10) NULL,
    [CColor4other]    NVARCHAR (10) NULL,
    [CDisplayIndex]   INT           NULL,
    [CDefaultShow]    BIT           DEFAULT ((1)) NOT NULL,
    [CHideWriterName] BIT           NULL,
    [COtherEvent]     BIT           NULL,
    PRIMARY KEY CLUSTERED ([CId] ASC)
);


GO

CREATE TABLE [dbo].[TPerpetualCalendar] (
    [CSolar] DATETIME     NOT NULL,
    [CLunar] NVARCHAR (8) NOT NULL,
    [CLeap]  BIT          NOT NULL,
    PRIMARY KEY CLUSTERED ([CSolar] ASC)
);


GO

CREATE TABLE [dbo].[TMemo] (
    [CStaff]   NVARCHAR (30) NOT NULL,
    [CDate]    DATETIME      NOT NULL,
    [CContent] NTEXT         NULL,
    PRIMARY KEY CLUSTERED ([CStaff] ASC, [CDate] ASC),
    CONSTRAINT [FK4C43FAE92BCCA9B] FOREIGN KEY ([CStaff]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[TApprStaffLineMember] (
    [CLineId]          BIGINT        NOT NULL,
    [CSeq]             INT           NOT NULL,
    [CSignOrder]       INT           NOT NULL,
    [CSignerType]      NVARCHAR (15) NOT NULL,
    [CApplyPosition]   INT           NOT NULL,
    [CSignerId]        NVARCHAR (30) NULL,
    [CLevelType]       NVARCHAR (10) NULL,
    [CLevelCode]       NVARCHAR (10) NULL,
    [CLevelSeq]        INT           NULL,
    [CDepartCode]      NVARCHAR (20) NULL,
    [CDepartStartDate] DATETIME      NULL,
    PRIMARY KEY CLUSTERED ([CLineId] ASC, [CSeq] ASC),
    CONSTRAINT [FK9542A30948D9611] FOREIGN KEY ([CDepartCode], [CDepartStartDate]) REFERENCES [dbo].[TDepartment] ([CDepartCode], [CDepartStartDate]),
    CONSTRAINT [FK9542A3094C4F8966] FOREIGN KEY ([CSignerId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK9542A3095BEC2CB7] FOREIGN KEY ([CLineId]) REFERENCES [dbo].[TApprStaffLine] ([CLineId]),
    CONSTRAINT [FK9542A309E6DE7DCD] FOREIGN KEY ([CLevelType], [CLevelCode], [CLevelSeq]) REFERENCES [dbo].[TStaffLevel] ([CLevelType], [CLevelCode], [CLevelSeq])
);


GO

CREATE TABLE [dbo].[TSystemDisplay] (
    [CStaffId]     NVARCHAR (30) NOT NULL,
    [CComTypeId]   NVARCHAR (20) NOT NULL,
    [CNo]          INT           NOT NULL,
    [CTypeId]      NVARCHAR (50) NULL,
    [CMenuId]      NVARCHAR (50) NULL,
    [CMenuName]    NVARCHAR (50) NULL,
    [CIsNecessary] BIT           NULL,
    [CCols]        NVARCHAR (50) NULL,
    PRIMARY KEY CLUSTERED ([CStaffId] ASC, [CComTypeId] ASC, [CNo] ASC),
    CONSTRAINT [FK28F9939F9E3C3476] FOREIGN KEY ([CStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[TComponentAttach] (
    [CComponentNo] BIGINT        NOT NULL,
    [CAttachNo]    BIGINT        NOT NULL,
    [CType]        NVARCHAR (50) NULL,
    [CFileNo]      INT           NULL,
    PRIMARY KEY CLUSTERED ([CComponentNo] ASC, [CAttachNo] ASC),
    CONSTRAINT [FK79460AAE44F3BF8] FOREIGN KEY ([CComponentNo]) REFERENCES [dbo].[TComponent] ([CComponentNo]),
    CONSTRAINT [FK79460AAEA35933C3] FOREIGN KEY ([CAttachNo]) REFERENCES [dbo].[TFile] ([CFileId])
);


GO

CREATE TABLE [dbo].[TApprFormType] (
    [CFormTypeId]   NVARCHAR (15) NOT NULL,
    [CName]         NVARCHAR (50) NOT NULL,
    [CEnabled]      BIT           NULL,
    [CDisplayIndex] INT           NOT NULL,
    PRIMARY KEY CLUSTERED ([CFormTypeId] ASC)
);


GO

CREATE TABLE [dbo].[TBranchSeasonStaff] (
    [CBstCode]            NVARCHAR (50) NOT NULL,
    [CBstDepartCode]      NVARCHAR (20) NOT NULL,
    [CBstDepartStartDate] DATETIME      NOT NULL,
    [CBstSeasonType]      NVARCHAR (15) NOT NULL,
    [CBstNo]              INT           NOT NULL,
    [CStaffId]            NVARCHAR (30) NOT NULL,
    PRIMARY KEY CLUSTERED ([CBstCode] ASC, [CBstDepartCode] ASC, [CBstDepartStartDate] ASC, [CBstSeasonType] ASC, [CBstNo] ASC, [CStaffId] ASC),
    CONSTRAINT [FK646A38C71071138B] FOREIGN KEY ([CBstCode], [CBstDepartCode], [CBstDepartStartDate], [CBstSeasonType], [CBstNo]) REFERENCES [dbo].[TBranchSeasonTask] ([CBsCode], [CBsDepartCode], [CBsDepartStartDate], [CBsSeasonType], [CNo]),
    CONSTRAINT [FK646A38C79E3C3476] FOREIGN KEY ([CStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[TAccountCode] (
    [CCode]       NVARCHAR (15)  NOT NULL,
    [CDepth]      INT            NULL,
    [CName]       NVARCHAR (255) NULL,
    [CType]       NVARCHAR (255) NULL,
    [CComment]    NVARCHAR (255) NULL,
    [CEnabled]    BIT            NULL,
    [CParentCode] NVARCHAR (15)  NULL,
    CONSTRAINT [PK__TAccount__66C1C0837093AB15] PRIMARY KEY CLUSTERED ([CCode] ASC),
    CONSTRAINT [FK1D4CB8C6E7F31233] FOREIGN KEY ([CParentCode]) REFERENCES [dbo].[TAccountCode] ([CCode])
);


GO

CREATE TABLE [dbo].[tbl_CommonCode] (
    [code_idx]        INT            IDENTITY (1, 1) NOT NULL,
    [code_group_id]   NVARCHAR (50)  NULL,
    [code_name]       NVARCHAR (255) NULL,
    [parent_code_idx] INT            NULL,
    [code_memo]       NVARCHAR (200) NULL,
    [sort]            INT            NULL,
    [use_yn]          CHAR (1)       NULL,
    [del_yn]          CHAR (1)       NULL,
    CONSTRAINT [PK_tbl_CommonCode] PRIMARY KEY CLUSTERED ([code_idx] ASC)
);


GO

CREATE TABLE [dbo].[TSiteDbOption] (
    [CCodeId]        NVARCHAR (255) NOT NULL,
    [CCodeName]      NVARCHAR (100) NOT NULL,
    [CDepth]         INT            NULL,
    [CStringValue1]  NVARCHAR (255) NULL,
    [CStringValue2]  NVARCHAR (255) NULL,
    [CStringValue3]  NVARCHAR (255) NULL,
    [CStringValue4]  NVARCHAR (255) NULL,
    [CStringValue5]  NVARCHAR (255) NULL,
    [CStringValue6]  NVARCHAR (255) NULL,
    [CStringValue7]  NVARCHAR (255) NULL,
    [CStringValue8]  NVARCHAR (255) NULL,
    [CStringValue9]  NVARCHAR (255) NULL,
    [CStringValue10] NVARCHAR (255) NULL,
    [CLongValue1]    BIGINT         NULL,
    [CLongValue2]    BIGINT         NULL,
    [CLongValue3]    BIGINT         NULL,
    [CLongValue4]    BIGINT         NULL,
    [CLongValue5]    BIGINT         NULL,
    [CLongValue6]    BIGINT         NULL,
    [CLongValue7]    BIGINT         NULL,
    [CLongValue8]    BIGINT         NULL,
    [CLongValue9]    BIGINT         NULL,
    [CLongValue10]   BIGINT         NULL,
    [CTextValue1]    NTEXT          NULL,
    [CTextValue2]    NTEXT          NULL,
    [CTextValue3]    NTEXT          NULL,
    [CRemark]        NTEXT          NULL,
    [CValueTitle]    NTEXT          NULL,
    [CUpdTime]       DATETIME       NULL,
    PRIMARY KEY CLUSTERED ([CCodeId] ASC)
);


GO

CREATE TABLE [dbo].[TPriceStudentCounsel] (
    [CDepartCode]       NVARCHAR (20) NOT NULL,
    [CDepartStartDate]  DATETIME      NOT NULL,
    [CGrade]            NVARCHAR (50) NOT NULL,
    [CRegDate]          DATETIME      NOT NULL,
    [CAttendType]       NVARCHAR (50) NOT NULL,
    [CPriceMonth]       INT           NULL,
    [CRegStaff]         NVARCHAR (30) NULL,
    [CAttributionPrice] INT           NULL,
    CONSTRAINT [PK__TPriceSt__28DCD2D01D3C345A] PRIMARY KEY CLUSTERED ([CDepartCode] ASC, [CDepartStartDate] ASC, [CGrade] ASC, [CRegDate] ASC, [CAttendType] ASC),
    CONSTRAINT [FK547CA82F1122766D] FOREIGN KEY ([CRegStaff]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK547CA82F282531E2] FOREIGN KEY ([CDepartCode], [CDepartStartDate]) REFERENCES [dbo].[TFacility] ([CDepartCode], [CDepartStartDate])
);


GO

CREATE TABLE [dbo].[TCognitivePath] (
    [CCode]           NVARCHAR (255) NOT NULL,
    [CDepth]          INT            NULL,
    [CParentCode]     NVARCHAR (255) NULL,
    [CSort]           INT            NULL,
    [CName]           NVARCHAR (255) NULL,
    [CEnabled]        BIT            NULL,
    [CApprovalStatus] NVARCHAR (15)  NULL,
    PRIMARY KEY CLUSTERED ([CCode] ASC)
);


GO

CREATE TABLE [dbo].[tb_AttachFile] (
    [it_AttachFileIdx]        INT             IDENTITY (1, 1) NOT NULL,
    [it_AttachFileFromIdx]    INT             NULL,
    [st_AttachFileFromType]   NVARCHAR (255)  NULL,
    [st_AttachFileName]       NVARCHAR (255)  NULL,
    [st_AttachFileNameOnDisk] NVARCHAR (255)  NULL,
    [st_AttachFileMemo]       NVARCHAR (1000) NULL,
    [st_AttachFileDiskPath]   NVARCHAR (255)  NULL,
    [de_AttachFileSize]       DECIMAL (18)    NULL,
    [st_MimeType]             NVARCHAR (255)  NULL,
    [it_AttachDownloadCount]  INT             NULL,
    [st_StaffCodeUpload]      NVARCHAR (50)   NULL,
    [dt_AttachFileUpload]     DATETIME        NULL,
    [st_StaffCodeDelete]      NVARCHAR (50)   NULL,
    [dt_AttachFileDelete]     DATETIME        NULL,
    [do_AttachFilePlayTime]   FLOAT (53)      NULL,
    CONSTRAINT [PK_tb_AttachFiles] PRIMARY KEY CLUSTERED ([it_AttachFileIdx] ASC)
);


GO

CREATE TABLE [dbo].[DL_MMS_LOG] (
    [MSGKEY]         INT            NOT NULL,
    [SUBJECT]        VARCHAR (120)  NULL,
    [PHONE]          VARCHAR (15)   NOT NULL,
    [CALLBACK]       VARCHAR (15)   NULL,
    [ORG_CALLBACK]   VARCHAR (20)   DEFAULT ('') NULL,
    [BILL_ID]        VARCHAR (20)   DEFAULT ('') NULL,
    [STATUS]         VARCHAR (2)    DEFAULT ('0') NOT NULL,
    [REQDATE]        DATETIME       DEFAULT (getdate()) NOT NULL,
    [MSG]            VARCHAR (4000) NULL,
    [FILE_CNT]       INT            DEFAULT ((0)) NOT NULL,
    [FILE_CNT_REAL]  INT            DEFAULT ((0)) NOT NULL,
    [FILE_PATH1]     VARCHAR (128)  NULL,
    [FILE_PATH1_SIZ] INT            NULL,
    [FILE_PATH2]     VARCHAR (128)  NULL,
    [FILE_PATH2_SIZ] INT            NULL,
    [FILE_PATH3]     VARCHAR (128)  NULL,
    [FILE_PATH3_SIZ] INT            NULL,
    [FILE_PATH4]     VARCHAR (128)  NULL,
    [FILE_PATH4_SIZ] INT            NULL,
    [FILE_PATH5]     VARCHAR (128)  NULL,
    [FILE_PATH5_SIZ] INT            NULL,
    [EXPIRETIME]     VARCHAR (10)   NULL,
    [SENTDATE]       DATETIME       NULL,
    [RSLTDATE]       DATETIME       NULL,
    [REPORTDATE]     DATETIME       NULL,
    [TERMINATEDDATE] DATETIME       NULL,
    [RSLT]           VARCHAR (10)   NULL,
    [REPCNT]         INT            DEFAULT ((0)) NULL,
    [TYPE]           VARCHAR (2)    DEFAULT ('0') NOT NULL,
    [TELCOINFO]      VARCHAR (12)   NULL,
    [ID]             VARCHAR (22)   NULL,
    [POST]           VARCHAR (22)   NULL,
    [ETC1]           VARCHAR (68)   NULL,
    [ETC2]           VARCHAR (34)   NULL,
    [ETC3]           VARCHAR (34)   NULL,
    [ETC4]           INT            NULL,
    [ETC5]           VARCHAR (34)   NULL,
    [ETC6]           VARCHAR (34)   NULL,
    [ETC7]           VARCHAR (34)   NULL,
    [ETC8]           VARCHAR (34)   NULL,
    [ETC9]           VARCHAR (34)   NULL,
    [ETC10]          VARCHAR (34)   NULL
);


GO

CREATE TABLE [dbo].[TApprSecuStaffGroup] (
    [CLevelId]      INT           NOT NULL,
    [CStaffGroupId] NVARCHAR (20) NOT NULL,
    [COrder]        INT           NOT NULL,
    PRIMARY KEY CLUSTERED ([CLevelId] ASC, [CStaffGroupId] ASC),
    CONSTRAINT [FK42A881282F4C85C4] FOREIGN KEY ([CStaffGroupId]) REFERENCES [dbo].[TStaffGroup] ([CGroupId]),
    CONSTRAINT [FK42A881289461F911] FOREIGN KEY ([CLevelId]) REFERENCES [dbo].[TApprSecurityLevel] ([CLevelId])
);


GO

CREATE TABLE [dbo].[TContentEvalItem] (
    [CContentId]  BIGINT        NOT NULL,
    [CEvalItemId] NVARCHAR (50) NOT NULL,
    [CIndex]      INT           NULL,
    PRIMARY KEY CLUSTERED ([CContentId] ASC, [CEvalItemId] ASC),
    CONSTRAINT [FK627686741E2854BF] FOREIGN KEY ([CEvalItemId]) REFERENCES [dbo].[TBoardEvaluationItem] ([CItemId]),
    CONSTRAINT [FK627686749F2A2E67] FOREIGN KEY ([CContentId]) REFERENCES [dbo].[TContent] ([CContentId])
);


GO

CREATE TABLE [dbo].[TApprDoc] (
    [CDocId]                  BIGINT         IDENTITY (1, 1) NOT NULL,
    [CFormId]                 NVARCHAR (15)  NULL,
    [CFormVer]                INT            NULL,
    [CTermYears]              INT            NOT NULL,
    [CTermDate]               DATETIME       NOT NULL,
    [CDepartCode]             NVARCHAR (20)  NULL,
    [CDepartStartDate]        DATETIME       NULL,
    [CWriterId]               NVARCHAR (30)  NULL,
    [CTitle]                  NVARCHAR (255) NOT NULL,
    [CBody1]                  NTEXT          NULL,
    [CSecurityLevel]          INT            NULL,
    [CPlanCurrency]           NVARCHAR (255) NULL,
    [CPlanMoney]              FLOAT (53)     NULL,
    [CDefiniteCurrency]       NVARCHAR (255) NULL,
    [CDefiniteMoney]          FLOAT (53)     NULL,
    [CExchangeRate]           FLOAT (53)     NULL,
    [CDone]                   BIT            NOT NULL,
    [CStatus]                 NVARCHAR (15)  NULL,
    [CBaseTime]               DATETIME       NOT NULL,
    [CStartTime]              DATETIME       NOT NULL,
    [CDecideTime]             DATETIME       NOT NULL,
    [CBookedPayDate]          DATETIME       NOT NULL,
    [CPayDate]                DATETIME       NOT NULL,
    [CImplDate]               DATETIME       NOT NULL,
    [CImplerId]               NVARCHAR (30)  NULL,
    [CImplerCount]            INT            NULL,
    [CImplState]              NVARCHAR (10)  NULL,
    [CImplStartDate]          DATETIME       NULL,
    [CImplEndDate]            DATETIME       NULL,
    [CDocNo]                  NVARCHAR (200) NULL,
    [CDocFileId]              BIGINT         NULL,
    [CConsultAtOnce]          BIT            NULL,
    [CIsArbitrary]            BIT            NULL,
    [CProjectId]              NVARCHAR (40)  NULL,
    [CIsApprByRecpt]          BIT            NOT NULL,
    [CMaxViewSigner]          INT            NULL,
    [CMaxViewConsult]         INT            NULL,
    [CLastModiTime]           DATETIME       NULL,
    [CLastModiStaffId]        NVARCHAR (30)  NULL,
    [CTmpBody2]               NTEXT          NULL,
    [CTmpBody3]               NTEXT          NULL,
    [CTmpBody4]               NTEXT          NULL,
    [CTemp1]                  NVARCHAR (40)  NULL,
    [CTemp2]                  NVARCHAR (40)  NULL,
    [CTemp3]                  NVARCHAR (40)  NULL,
    [CTemp4]                  NVARCHAR (40)  NULL,
    [CTemp5]                  NVARCHAR (40)  NULL,
    [CTemp6]                  NVARCHAR (40)  NULL,
    [CTemp7]                  NVARCHAR (40)  NULL,
    [CTemp8]                  NVARCHAR (40)  NULL,
    [CTemp9]                  NVARCHAR (40)  NULL,
    [CTemp10]                 NVARCHAR (40)  NULL,
    [CTempInt1]               BIGINT         NULL,
    [CTempInt2]               BIGINT         NULL,
    [CTempInt3]               BIGINT         NULL,
    [CTempInt4]               BIGINT         NULL,
    [CTempInt5]               BIGINT         NULL,
    [CTmpAdText1]             NVARCHAR (100) NULL,
    [CTmpAdText2]             NVARCHAR (100) NULL,
    [CTmpAdText3]             NVARCHAR (100) NULL,
    [CTmpAdText4]             NVARCHAR (100) NULL,
    [CTmpAdText5]             NVARCHAR (100) NULL,
    [CTmpAdText6]             NVARCHAR (100) NULL,
    [CTmpAdText7]             NVARCHAR (100) NULL,
    [CTmpAdText8]             NVARCHAR (100) NULL,
    [CTmpAdText9]             NVARCHAR (100) NULL,
    [CTmpAdMText1]            NTEXT          NULL,
    [CTmpAdMText2]            NTEXT          NULL,
    [CTmpAdMText3]            NTEXT          NULL,
    [CTmpAdMText4]            NTEXT          NULL,
    [CTmpAdMText5]            NTEXT          NULL,
    [CTmpAdDate1]             DATETIME       NULL,
    [CTmpAdDate2]             DATETIME       NULL,
    [CTmpAdDate3]             DATETIME       NULL,
    [CTmpAdDate4]             DATETIME       NULL,
    [CTmpAdTime1]             NVARCHAR (8)   NULL,
    [CTmpAdTime2]             NVARCHAR (8)   NULL,
    [CTmpAdTime3]             NVARCHAR (8)   NULL,
    [CTmpAdTime4]             NVARCHAR (8)   NULL,
    [CTmpAdDateT1]            DATETIME       NULL,
    [CTmpAdDateT2]            DATETIME       NULL,
    [CTmpAdDateT3]            DATETIME       NULL,
    [CTmpAdDateT4]            DATETIME       NULL,
    [CTmpAdMoney1]            FLOAT (53)     NULL,
    [CTmpAdMoney2]            FLOAT (53)     NULL,
    [CTmpAdMoney3]            FLOAT (53)     NULL,
    [CTmpAdMoney4]            FLOAT (53)     NULL,
    [CTmpAdCombo1]            NVARCHAR (100) NULL,
    [CTmpAdCombo2]            NVARCHAR (100) NULL,
    [CTmpAdCombo3]            NVARCHAR (100) NULL,
    [CTmpAdCombo4]            NVARCHAR (100) NULL,
    [CTmpAdCombo5]            NVARCHAR (100) NULL,
    [CTmpAdStaff1]            NVARCHAR (30)  NULL,
    [CTmpAdStaff2]            NVARCHAR (30)  NULL,
    [CTmpAdStaff3]            NVARCHAR (30)  NULL,
    [CTmpAdStaff4]            NVARCHAR (30)  NULL,
    [CTmpAdStaff5]            NVARCHAR (30)  NULL,
    [CTmpDepartCode1]         NVARCHAR (20)  NULL,
    [CTmpDepartStartDate1]    DATETIME       NULL,
    [CTmpDepartCode2]         NVARCHAR (20)  NULL,
    [CTmpDepartStartDate2]    DATETIME       NULL,
    [CTmpDepartCode3]         NVARCHAR (20)  NULL,
    [CTmpDepartStartDate3]    DATETIME       NULL,
    [CTmpDepartCode4]         NVARCHAR (20)  NULL,
    [CTmpDepartStartDate4]    DATETIME       NULL,
    [CTmpDepartCode5]         NVARCHAR (20)  NULL,
    [CTmpDepartStartDate5]    DATETIME       NULL,
    [CTmpAdFile1]             BIGINT         NULL,
    [CTmpAdFile2]             BIGINT         NULL,
    [CTmpAdFile3]             BIGINT         NULL,
    [CReWriteOrgId]           BIGINT         NULL,
    [CParentDocId]            BIGINT         NULL,
    [CDocLastFileId]          BIGINT         NULL,
    [CMaxViewAdded1]          INT            NULL,
    [CMaxViewAdded2]          INT            NULL,
    [CDocDistFileId]          BIGINT         NULL,
    [CImplLimitDate]          DATETIME       NULL,
    [CTargetStaffId]          NVARCHAR (30)  NULL,
    [CTargetLevelType]        NVARCHAR (10)  NULL,
    [CTargetLevelCode]        NVARCHAR (10)  NULL,
    [CTargetLevelSeq]         INT            NULL,
    [CTargetDepartCode]       NVARCHAR (20)  NULL,
    [CTargetDepartStartDate]  DATETIME       NULL,
    [CTargetHeaderId]         NVARCHAR (30)  NULL,
    [CFacilityCode]           NVARCHAR (20)  NULL,
    [CFacilityStartDate]      DATETIME       NULL,
    [CCommentCount]           INT            NULL,
    [CPassiveDate]            DATETIME       NULL,
    [CSentDate]               DATETIME       NULL,
    [CTargetStaffNo]          NVARCHAR (255) NULL,
    [CTargetStaffJoinDate]    DATETIME       NULL,
    [CTargetStaffOutDate]     DATETIME       NULL,
    [CTargetStaffId2]         NVARCHAR (30)  NULL,
    [CTarget2StaffNo]         NVARCHAR (255) NULL,
    [CTargetLevelType2]       NVARCHAR (10)  NULL,
    [CTargetLevelCode2]       NVARCHAR (10)  NULL,
    [CTargetLevelSeq2]        INT            NULL,
    [CTargetDepartCode2]      NVARCHAR (20)  NULL,
    [CTargetDepartStartDate2] DATETIME       NULL,
    [CTargetHeaderId2]        NVARCHAR (30)  NULL,
    [CTarget2StaffJoinDate]   DATETIME       NULL,
    [CTarget2StaffOutDate]    DATETIME       NULL,
    [CLineChangeSeq]          INT            NULL,
    [CIsFileUpdated]          BIT            DEFAULT ((1)) NOT NULL,
    [CFile1Id]                BIGINT         NULL,
    [CFile2Id]                BIGINT         NULL,
    [CFile3Id]                BIGINT         NULL,
    [CArbitrarySignerId]      NVARCHAR (30)  NULL,
    [CReturnSignerId]         NVARCHAR (30)  NULL,
    [CNextSignerId]           NVARCHAR (30)  NULL,
    [CNextWaitTime]           DATETIME       NULL,
    [CIsDeferred]             BIT            NULL,
    [CFirstAttachedFileId]    BIGINT         NULL,
    [CIsMultiDocMain]         BIT            DEFAULT ((0)) NOT NULL,
    [CIsMultiDocSub]          BIT            DEFAULT ((0)) NOT NULL,
    [CMultiMainDocId]         BIGINT         NULL,
    [CEmail]                  NVARCHAR (100) NULL,
    [CTelNo]                  NVARCHAR (50)  NULL,
    [CFaxNo]                  NVARCHAR (50)  NULL,
    [CComPostNo]              NVARCHAR (10)  NULL,
    [CComAddress1]            NVARCHAR (200) NULL,
    [CComAddress2]            NVARCHAR (200) NULL,
    [CHomepageUrl]            NVARCHAR (100) NULL,
    [CSealDepartCode]         NVARCHAR (20)  NULL,
    [CSealDepartStartDate]    DATETIME       NULL,
    [CSealTextType]           NVARCHAR (10)  NULL,
    [CCount]                  INT            DEFAULT ((0)) NOT NULL,
    [CTmpAdMText6]            NTEXT          NULL,
    [CTmpAdMText7]            NTEXT          NULL,
    [CTmpAdMText8]            NTEXT          NULL,
    [CTmpAdMText9]            NTEXT          NULL,
    [CTmpAdMoney5]            FLOAT (53)     NULL,
    [CTmpAdMoney6]            FLOAT (53)     NULL,
    [CTmpAdMoney7]            FLOAT (53)     NULL,
    [CTmpAdMoney8]            FLOAT (53)     NULL,
    [CTmpAdMoney9]            FLOAT (53)     NULL,
    [CDeletedTime]            DATETIME       DEFAULT ('1900-01-01') NOT NULL,
    [CDelStaffId]             NVARCHAR (30)  NULL,
    [CSenderName]             NVARCHAR (255) NULL,
    [CReceiverName]           NVARCHAR (255) NULL,
    [CRemarkerId]             NVARCHAR (30)  NULL,
    [CRemarkTime]             DATETIME       NULL,
    [CRemark]                 NVARCHAR (255) NULL,
    [CTargetTempStr1]         NVARCHAR (255) NULL,
    [CTargetTempStr2]         NVARCHAR (255) NULL,
    [CTargetTempStr3]         NVARCHAR (255) NULL,
    [CTargetTempStr4]         NVARCHAR (255) NULL,
    [CTargetTempStr5]         NVARCHAR (255) NULL,
    [CTarget2TempStr1]        NVARCHAR (255) NULL,
    [CTarget2TempStr2]        NVARCHAR (255) NULL,
    [CTarget2TempStr3]        NVARCHAR (255) NULL,
    [CTarget2TempStr4]        NVARCHAR (255) NULL,
    [CTarget2TempStr5]        NVARCHAR (255) NULL,
    [CAutoActionCopy]         BIT            NULL,
    [CAliasId]                NVARCHAR (100) NULL,
    [CDocKind]                INT            NULL,
    [CAdded1DepartCode]       NVARCHAR (20)  NULL,
    [CAdded1DepartStartDate]  DATETIME       NULL,
    [CAdded1DptStartTime]     DATETIME       NULL,
    [CAdded2DepartCode]       NVARCHAR (20)  NULL,
    [CAdded2DepartStartDate]  DATETIME       NULL,
    [CAdded2DptStartTime]     DATETIME       NULL,
    [CMobileNo]               NVARCHAR (200) NULL,
    [CTmpAdText10]            NVARCHAR (100) NULL,
    [CTmpAdText11]            NVARCHAR (100) NULL,
    [CTmpAdText12]            NVARCHAR (100) NULL,
    [CTmpAdText13]            NVARCHAR (100) NULL,
    [CTmpAdText14]            NVARCHAR (100) NULL,
    [CTmpAdText15]            NVARCHAR (100) NULL,
    [CTmpAdText16]            NVARCHAR (100) NULL,
    [CTmpAdText17]            NVARCHAR (100) NULL,
    [CTmpAdText18]            NVARCHAR (100) NULL,
    [CTmpAdText19]            NVARCHAR (100) NULL,
    [CTmpAdText20]            NVARCHAR (100) NULL,
    [CTmpAdMoney10]           FLOAT (53)     NULL,
    [CTmpAdMoney11]           FLOAT (53)     NULL,
    [CTmpAdMoney12]           FLOAT (53)     NULL,
    [CTmpAdMoney13]           FLOAT (53)     NULL,
    [CTmpAdMoney14]           FLOAT (53)     NULL,
    [CTmpAdMoney15]           FLOAT (53)     NULL,
    [CTmpAdMoney16]           FLOAT (53)     NULL,
    [CTmpAdMoney17]           FLOAT (53)     NULL,
    [CTmpAdMoney18]           FLOAT (53)     NULL,
    [CTmpAdMoney19]           FLOAT (53)     NULL,
    [CTmpAdMoney20]           FLOAT (53)     NULL,
    [CMigFacilityCode]        NVARCHAR (20)  NULL,
    [CMigFacilityStartDate]   DATETIME       NULL,
    [CMigDepartCode]          NVARCHAR (20)  NULL,
    [CMigDepartStartDate]     DATETIME       NULL,
    [CPriority]               INT            NULL,
    [CMigAdded1DpCode]        NVARCHAR (20)  NULL,
    [CMigAdded1DpStartDate]   DATETIME       NULL,
    [CMigAdded2DpCode]        NVARCHAR (20)  NULL,
    [CMigAdded2DpStartDate]   DATETIME       NULL,
    [CSyncTime]               DATETIME       NULL,
    [CSyncSkip]               BIT            NULL,
    CONSTRAINT [PK__TApprDoc__33A9D9B1398D8EEE] PRIMARY KEY CLUSTERED ([CDocId] ASC),
    CONSTRAINT [FK_146h952twng37jlu5275o2nm0] FOREIGN KEY ([CTargetLevelType], [CTargetLevelCode], [CTargetLevelSeq]) REFERENCES [dbo].[TStaffLevel] ([CLevelType], [CLevelCode], [CLevelSeq]),
    CONSTRAINT [FK_1fbfpam5j7te006my8rxi07fa] FOREIGN KEY ([CTargetHeaderId2]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_2dfl72j4pwo0k0jvedhq6m7ef] FOREIGN KEY ([CAdded1DepartCode], [CAdded1DepartStartDate]) REFERENCES [dbo].[TDepartment] ([CDepartCode], [CDepartStartDate]),
    CONSTRAINT [FK_4dr12w89xxqtcsiifhljrjj2b] FOREIGN KEY ([CDelStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_6bw5qjehto2l2n6j00j8cmtmm] FOREIGN KEY ([CTargetStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_970xsk6v0ia8yiim5wgl8pxoi] FOREIGN KEY ([CFirstAttachedFileId]) REFERENCES [dbo].[TFile] ([CFileId]),
    CONSTRAINT [FK_d9bk5js8l1y2ipk1yd7p6j2pw] FOREIGN KEY ([CDocDistFileId]) REFERENCES [dbo].[TFile] ([CFileId]),
    CONSTRAINT [FK_dmggoyr5qo8kf4xcqf6awhm0i] FOREIGN KEY ([CReturnSignerId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_elxe1gukwymrhvnbybajciki1] FOREIGN KEY ([CDocLastFileId]) REFERENCES [dbo].[TFile] ([CFileId]),
    CONSTRAINT [FK_flg83dug6w5l698r9ojfgomg4] FOREIGN KEY ([CTargetHeaderId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_geg6v5kq3hc587h29rfq6okw5] FOREIGN KEY ([CFacilityCode], [CFacilityStartDate]) REFERENCES [dbo].[TFacility] ([CDepartCode], [CDepartStartDate]),
    CONSTRAINT [FK_hjs4s3rf8ead8vm8ktwyft6nn] FOREIGN KEY ([CSealDepartCode], [CSealDepartStartDate]) REFERENCES [dbo].[TDepartment] ([CDepartCode], [CDepartStartDate]),
    CONSTRAINT [FK_ht3adk2m0qsqdeiupolpauj5h] FOREIGN KEY ([CTargetDepartCode], [CTargetDepartStartDate]) REFERENCES [dbo].[TDepartment] ([CDepartCode], [CDepartStartDate]),
    CONSTRAINT [FK_hxuuhbarclu19c68adtu2b4d] FOREIGN KEY ([CRemarkerId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_jb5c77td54ogudjnnvi2cdx15] FOREIGN KEY ([CFile1Id]) REFERENCES [dbo].[TFile] ([CFileId]),
    CONSTRAINT [FK_kn1bw26hsewk50c40s4ren5m7] FOREIGN KEY ([CMigAdded1DpCode], [CMigAdded1DpStartDate]) REFERENCES [dbo].[TDepartment] ([CDepartCode], [CDepartStartDate]),
    CONSTRAINT [FK_kurdsbxkfh95t1quq2ss9mdf8] FOREIGN KEY ([CMigDepartCode], [CMigDepartStartDate]) REFERENCES [dbo].[TDepartment] ([CDepartCode], [CDepartStartDate]),
    CONSTRAINT [FK_mmju0l1p2l70xqsy1l58vfv5p] FOREIGN KEY ([CMultiMainDocId]) REFERENCES [dbo].[TApprDoc] ([CDocId]),
    CONSTRAINT [FK_mu2y795dvkwu5yrih8rpi4f6r] FOREIGN KEY ([CAdded2DepartCode], [CAdded2DepartStartDate]) REFERENCES [dbo].[TDepartment] ([CDepartCode], [CDepartStartDate]),
    CONSTRAINT [FK_n8un60qepin9dk0q5bsbcw92h] FOREIGN KEY ([CArbitrarySignerId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_n9gs47y9sulu1lwmxlvruaotd] FOREIGN KEY ([CFile3Id]) REFERENCES [dbo].[TFile] ([CFileId]),
    CONSTRAINT [FK_oajbenjsioa7qmxkpfnrf80w] FOREIGN KEY ([CMigFacilityCode], [CMigFacilityStartDate]) REFERENCES [dbo].[TFacility] ([CDepartCode], [CDepartStartDate]),
    CONSTRAINT [FK_p8yj1jmbvsym9l2ak5r7gkm6n] FOREIGN KEY ([CTargetStaffId2]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_pwl714rawdtf2d805kyon02h3] FOREIGN KEY ([CTargetDepartCode2], [CTargetDepartStartDate2]) REFERENCES [dbo].[TDepartment] ([CDepartCode], [CDepartStartDate]),
    CONSTRAINT [FK_qdo672tbbu9v4o27flmef0ckb] FOREIGN KEY ([CTargetLevelType2], [CTargetLevelCode2], [CTargetLevelSeq2]) REFERENCES [dbo].[TStaffLevel] ([CLevelType], [CLevelCode], [CLevelSeq]),
    CONSTRAINT [FK_qego3uijj2plebnjhvyxqs4w] FOREIGN KEY ([CDocKind]) REFERENCES [dbo].[TApprDocKind] ([CKindId]),
    CONSTRAINT [FK_qg7q2btj53yp4nd30w846o0eu] FOREIGN KEY ([CNextSignerId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_r81jer2iq87v3n2bnpsyv5amd] FOREIGN KEY ([CMigAdded2DpCode], [CMigAdded2DpStartDate]) REFERENCES [dbo].[TDepartment] ([CDepartCode], [CDepartStartDate]),
    CONSTRAINT [FK_tkb9w5wu3se5u84t0oxj9awrr] FOREIGN KEY ([CFile2Id]) REFERENCES [dbo].[TFile] ([CFileId]),
    CONSTRAINT [FK49D5B213205C2449] FOREIGN KEY ([CImplerId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK49D5B213344B10B9] FOREIGN KEY ([CTmpDepartCode1], [CTmpDepartStartDate1]) REFERENCES [dbo].[TDepartment] ([CDepartCode], [CDepartStartDate]),
    CONSTRAINT [FK49D5B213344B10BB] FOREIGN KEY ([CTmpDepartCode2], [CTmpDepartStartDate2]) REFERENCES [dbo].[TDepartment] ([CDepartCode], [CDepartStartDate]),
    CONSTRAINT [FK49D5B213344B10BD] FOREIGN KEY ([CTmpDepartCode3], [CTmpDepartStartDate3]) REFERENCES [dbo].[TDepartment] ([CDepartCode], [CDepartStartDate]),
    CONSTRAINT [FK49D5B213344B10BF] FOREIGN KEY ([CTmpDepartCode4], [CTmpDepartStartDate4]) REFERENCES [dbo].[TDepartment] ([CDepartCode], [CDepartStartDate]),
    CONSTRAINT [FK49D5B213344B10C1] FOREIGN KEY ([CTmpDepartCode5], [CTmpDepartStartDate5]) REFERENCES [dbo].[TDepartment] ([CDepartCode], [CDepartStartDate]),
    CONSTRAINT [FK49D5B21348D9611] FOREIGN KEY ([CDepartCode], [CDepartStartDate]) REFERENCES [dbo].[TDepartment] ([CDepartCode], [CDepartStartDate]),
    CONSTRAINT [FK49D5B2136DAAF46] FOREIGN KEY ([CTmpAdStaff1]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK49D5B2136DAAF47] FOREIGN KEY ([CTmpAdStaff2]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK49D5B2136DAAF48] FOREIGN KEY ([CTmpAdStaff3]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK49D5B2136DAAF49] FOREIGN KEY ([CTmpAdStaff4]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK49D5B2136DAAF4A] FOREIGN KEY ([CTmpAdStaff5]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK49D5B2137839EB2F] FOREIGN KEY ([CParentDocId]) REFERENCES [dbo].[TApprDoc] ([CDocId]),
    CONSTRAINT [FK49D5B21384B7FE5F] FOREIGN KEY ([CReWriteOrgId]) REFERENCES [dbo].[TApprDoc] ([CDocId]),
    CONSTRAINT [FK49D5B213917AA67C] FOREIGN KEY ([CFormId], [CFormVer]) REFERENCES [dbo].[TApprFormHtml] ([CFormId], [CFormVer]),
    CONSTRAINT [FK49D5B21393A16BF6] FOREIGN KEY ([CSecurityLevel]) REFERENCES [dbo].[TApprSecurityLevel] ([CLevelId]),
    CONSTRAINT [FK49D5B213A3D4A799] FOREIGN KEY ([CLastModiStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK49D5B213A4924F54] FOREIGN KEY ([CProjectId]) REFERENCES [dbo].[TProject] ([CProjectId]),
    CONSTRAINT [FK49D5B213C1D4DB38] FOREIGN KEY ([CTmpAdFile1]) REFERENCES [dbo].[TFile] ([CFileId]),
    CONSTRAINT [FK49D5B213C1D4DB39] FOREIGN KEY ([CTmpAdFile2]) REFERENCES [dbo].[TFile] ([CFileId]),
    CONSTRAINT [FK49D5B213C1D4DB3A] FOREIGN KEY ([CTmpAdFile3]) REFERENCES [dbo].[TFile] ([CFileId]),
    CONSTRAINT [FK49D5B213C39BD566] FOREIGN KEY ([CDocFileId]) REFERENCES [dbo].[TFile] ([CFileId]),
    CONSTRAINT [FK49D5B213CBAA906F] FOREIGN KEY ([CWriterId]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[TMBTI] (
    [CTestBranchCode]         NVARCHAR (20) NOT NULL,
    [CTestBranchStartDate]    DATETIME      NOT NULL,
    [CTestStudentCode]        NVARCHAR (50) NOT NULL,
    [CTestNo]                 INT           NOT NULL,
    [CType]                   NVARCHAR (50) NOT NULL,
    [CStaffId]                NVARCHAR (30) NULL,
    [CStudentBranchCode]      NVARCHAR (20) NULL,
    [CStudentBranchStartDate] DATETIME      NULL,
    [CStudentCode]            NVARCHAR (50) NULL,
    [CDate]                   DATETIME      NULL,
    [CExpectM]                NVARCHAR (1)  NULL,
    [CExpectB]                NVARCHAR (1)  NULL,
    [CExpectT]                NVARCHAR (1)  NULL,
    [CExpectI]                NVARCHAR (1)  NULL,
    [CResultM]                NVARCHAR (1)  NULL,
    [CResultB]                NVARCHAR (1)  NULL,
    [CResultT]                NVARCHAR (1)  NULL,
    [CResultI]                NVARCHAR (1)  NULL,
    [CScoreM]                 INT           NULL,
    [CScoreB]                 INT           NULL,
    [CScoreT]                 INT           NULL,
    [CScoreI]                 INT           NULL,
    [CCode]                   NVARCHAR (50) NULL,
    PRIMARY KEY CLUSTERED ([CTestBranchCode] ASC, [CTestBranchStartDate] ASC, [CTestStudentCode] ASC, [CTestNo] ASC, [CType] ASC),
    CONSTRAINT [FK4C3B91E4D22C2D8] FOREIGN KEY ([CStudentBranchCode], [CStudentBranchStartDate], [CStudentCode]) REFERENCES [dbo].[TStudent] ([CBranchCode], [CBranchStartDate], [CCode]),
    CONSTRAINT [FK4C3B91E935CE10E] FOREIGN KEY ([CTestBranchCode], [CTestBranchStartDate], [CTestStudentCode], [CTestNo]) REFERENCES [dbo].[TTestInfo] ([CStdBranchCode], [CStdBranchStartDate], [CCode], [CNo]),
    CONSTRAINT [FK4C3B91E9E3C3476] FOREIGN KEY ([CStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[SC_TRAN] (
    [TR_NUM]          BIGINT         IDENTITY (963030059, 1) NOT NULL,
    [TR_SendDate]     DATETIME       NULL,
    [TR_SerialNum]    INT            NULL,
    [TR_ID]           VARCHAR (16)   NULL,
    [TR_SendStat]     VARCHAR (1)    CONSTRAINT [DF__SC_TRAN__TR_Send__6BA4D8C6] DEFAULT ('0') NULL,
    [TR_RsltStat]     VARCHAR (2)    CONSTRAINT [DF__SC_TRAN__TR_Rslt__6C98FCFF] DEFAULT ('00') NULL,
    [TR_MsgType]      VARCHAR (1)    CONSTRAINT [DF__SC_TRAN__TR_MsgT__6D8D2138] DEFAULT ('0') NULL,
    [TR_Phone]        VARCHAR (20)   CONSTRAINT [DF__SC_TRAN__TR_Phon__6E814571] DEFAULT ('') NULL,
    [TR_Callback]     VARCHAR (20)   NULL,
    [TR_RsltDate]     DATETIME       NULL,
    [TR_Modified]     DATETIME       NULL,
    [TR_Msg]          VARCHAR (1000) NULL,
    [TR_Net]          VARCHAR (4)    NULL,
    [TR_Etc1]         VARCHAR (160)  NULL,
    [TR_Etc2]         VARCHAR (160)  NULL,
    [TR_Etc3]         VARCHAR (160)  NULL,
    [TR_Etc4]         VARCHAR (160)  NULL,
    [TR_Etc5]         VARCHAR (160)  NULL,
    [TR_Etc6]         VARCHAR (160)  NULL,
    [TR_RealSendDate] DATETIME       NULL,
    [TR_ROUTEID]      VARCHAR (20)   NULL,
    CONSTRAINT [PK__SC_TRAN__632B00E269BC9054] PRIMARY KEY CLUSTERED ([TR_NUM] ASC)
);


GO

CREATE TABLE [dbo].[TTradeRoyaltyLink] (
    [CBranchCode]         NVARCHAR (20) NOT NULL,
    [CBranchStartDate]    DATETIME      NOT NULL,
    [CRoyaltyMonth]       DATETIME      NOT NULL,
    [CRoyaltyNo]          INT           NOT NULL,
    [CRoyaltyType]        NVARCHAR (15) NOT NULL,
    [CScDepartCode]       NVARCHAR (20) NULL,
    [CScDepartStartDate]  DATETIME      NULL,
    [CScCode]             NVARCHAR (50) NULL,
    [CScNo]               INT           NULL,
    [CStDepartCode]       NVARCHAR (20) NULL,
    [CStDepartStartDate]  DATETIME      NULL,
    [CStCode]             NVARCHAR (50) NULL,
    [CStNo]               INT           NULL,
    [CStdBranchCode]      NVARCHAR (20) NULL,
    [CStdBranchStartDate] DATETIME      NULL,
    [CCode]               NVARCHAR (50) NULL,
    [CNo]                 INT           NULL,
    [CSaleSeq]            BIGINT        NULL,
    PRIMARY KEY CLUSTERED ([CBranchCode] ASC, [CBranchStartDate] ASC, [CRoyaltyMonth] ASC, [CRoyaltyNo] ASC),
    CONSTRAINT [FK_47nu5vvya7qwj7f6c2qgnp3m9] FOREIGN KEY ([CSaleSeq]) REFERENCES [dbo].[TOtherSale] ([CSaleSeq]),
    CONSTRAINT [FK_92mexb1ylnn566ubraoyq9cyr] FOREIGN KEY ([CStdBranchCode], [CStdBranchStartDate], [CCode], [CNo]) REFERENCES [dbo].[TTestInfo] ([CStdBranchCode], [CStdBranchStartDate], [CCode], [CNo]),
    CONSTRAINT [FK744152565A0759E8] FOREIGN KEY ([CScDepartCode], [CScDepartStartDate], [CScCode], [CScNo]) REFERENCES [dbo].[TStudentCounsel] ([CScDepartCode], [CScDepartStartDate], [CScCode], [CNo]),
    CONSTRAINT [FK74415256D7860A66] FOREIGN KEY ([CBranchCode], [CBranchStartDate], [CRoyaltyMonth]) REFERENCES [dbo].[TTradeRoyaltyMonth] ([CBranchCode], [CBranchStartDate], [CRoyaltyMonth]),
    CONSTRAINT [FK74415256E6832CDD] FOREIGN KEY ([CStDepartCode], [CStDepartStartDate], [CStCode], [CStNo]) REFERENCES [dbo].[TStudentTutoring] ([CStdDepartCode], [CStdDepartStartDate], [CStdCode], [CNo])
);


GO

CREATE TABLE [dbo].[TApprDocSub] (
    [CDocId]          BIGINT         NOT NULL,
    [CSeq]            BIGINT         NOT NULL,
    [CTempInt1]       INT            NULL,
    [CTempInt2]       INT            NULL,
    [CTempInt3]       INT            NULL,
    [CTempInt4]       INT            NULL,
    [CTempInt5]       INT            NULL,
    [CTempInt6]       INT            NULL,
    [CTempInt7]       INT            NULL,
    [CTempInt8]       INT            NULL,
    [CTempInt9]       INT            NULL,
    [CTempInt10]      INT            NULL,
    [CTempLong1]      BIGINT         NULL,
    [CTempLong2]      BIGINT         NULL,
    [CTempLong3]      BIGINT         NULL,
    [CTempLong4]      BIGINT         NULL,
    [CTempLong5]      BIGINT         NULL,
    [CTempLong6]      BIGINT         NULL,
    [CTempLong7]      BIGINT         NULL,
    [CTempLong8]      BIGINT         NULL,
    [CTempLong9]      BIGINT         NULL,
    [CTempLong10]     BIGINT         NULL,
    [CTempString1]    NVARCHAR (255) NULL,
    [CTempString2]    NVARCHAR (255) NULL,
    [CTempString3]    NVARCHAR (255) NULL,
    [CTempString4]    NVARCHAR (255) NULL,
    [CTempString5]    NVARCHAR (255) NULL,
    [CTempString6]    NVARCHAR (255) NULL,
    [CTempString7]    NVARCHAR (255) NULL,
    [CTempString8]    NVARCHAR (255) NULL,
    [CTempString9]    NVARCHAR (255) NULL,
    [CTempString10]   NVARCHAR (255) NULL,
    [CTempBody1]      NTEXT          NULL,
    [CTempBody2]      NTEXT          NULL,
    [CTempBody3]      NTEXT          NULL,
    [CTempBody4]      NTEXT          NULL,
    [CTempBody5]      NTEXT          NULL,
    [CTempBody6]      NTEXT          NULL,
    [CTempBody7]      NTEXT          NULL,
    [CTempBody8]      NTEXT          NULL,
    [CTempBody9]      NTEXT          NULL,
    [CTempBody10]     NTEXT          NULL,
    [CTempDate1]      DATETIME       NULL,
    [CTempDate2]      DATETIME       NULL,
    [CTempDate3]      DATETIME       NULL,
    [CTempDate4]      DATETIME       NULL,
    [CTempDate5]      DATETIME       NULL,
    [CTempDate6]      DATETIME       NULL,
    [CTempDate7]      DATETIME       NULL,
    [CTempDate8]      DATETIME       NULL,
    [CTempDate9]      DATETIME       NULL,
    [CTempDate10]     DATETIME       NULL,
    [CTempAdMoney1]   FLOAT (53)     NULL,
    [CTempAdMoney2]   FLOAT (53)     NULL,
    [CTempAdMoney3]   FLOAT (53)     NULL,
    [CTempAdMoney4]   FLOAT (53)     NULL,
    [CTempAdMoney5]   FLOAT (53)     NULL,
    [CTempAdString1]  NVARCHAR (255) NULL,
    [CTempAdString2]  NVARCHAR (255) NULL,
    [CTempAdString3]  NVARCHAR (255) NULL,
    [CTempAdString4]  NVARCHAR (255) NULL,
    [CTempAdString5]  NVARCHAR (255) NULL,
    [CTempAdString6]  NVARCHAR (255) NULL,
    [CTempAdString7]  NVARCHAR (255) NULL,
    [CTempAdString8]  NVARCHAR (255) NULL,
    [CTempAdString9]  NVARCHAR (255) NULL,
    [CTempAdString10] NVARCHAR (255) NULL,
    [CTempAdString11] NVARCHAR (255) NULL,
    [CTempAdString12] NVARCHAR (255) NULL,
    [CTempAdString13] NVARCHAR (255) NULL,
    [CTempAdString14] NVARCHAR (255) NULL,
    [CTempAdString15] NVARCHAR (255) NULL,
    PRIMARY KEY CLUSTERED ([CDocId] ASC, [CSeq] ASC),
    CONSTRAINT [FK3AFEF72DF064EB59] FOREIGN KEY ([CDocId]) REFERENCES [dbo].[TApprDoc] ([CDocId])
);


GO

CREATE TABLE [dbo].[TEducationApply] (
    [CCourseNo]      INT            NOT NULL,
    [CEduNo]         INT            NOT NULL,
    [CNo]            INT            NOT NULL,
    [CGroupCourseNo] INT            NULL,
    [CGreoupEduNo]   INT            NULL,
    [CGroupNo]       INT            NULL,
    [CApplyDate]     DATETIME       NULL,
    [CStaffId]       NVARCHAR (30)  NULL,
    [CSatus]         NVARCHAR (15)  NULL,
    [CInput1]        NVARCHAR (255) NULL,
    [CInput2]        NVARCHAR (255) NULL,
    [CInput3]        NVARCHAR (255) NULL,
    [CInput4]        NVARCHAR (255) NULL,
    [CInput5]        NVARCHAR (255) NULL,
    [CInput6]        NVARCHAR (255) NULL,
    [CInput7]        NVARCHAR (255) NULL,
    [CInput8]        NVARCHAR (255) NULL,
    [CInput9]        NVARCHAR (255) NULL,
    [CInput10]       NVARCHAR (255) NULL,
    [CInput11]       NVARCHAR (255) NULL,
    [CInput12]       NVARCHAR (255) NULL,
    [CInput13]       NVARCHAR (255) NULL,
    [CInput14]       NVARCHAR (255) NULL,
    [CInput15]       NVARCHAR (255) NULL,
    [CInput16]       NVARCHAR (255) NULL,
    [CInput17]       NVARCHAR (255) NULL,
    [CInput18]       NVARCHAR (255) NULL,
    [CInput19]       NVARCHAR (255) NULL,
    [CInput20]       NVARCHAR (255) NULL,
    PRIMARY KEY CLUSTERED ([CCourseNo] ASC, [CEduNo] ASC, [CNo] ASC),
    CONSTRAINT [FKAA195E1A2FB03371] FOREIGN KEY ([CCourseNo], [CEduNo]) REFERENCES [dbo].[TEducation] ([CCourseNo], [CNo]),
    CONSTRAINT [FKAA195E1A6568FEFA] FOREIGN KEY ([CGroupCourseNo], [CGreoupEduNo], [CGroupNo]) REFERENCES [dbo].[TEducationGroup] ([CCourseNo], [CEduNo], [CNo]),
    CONSTRAINT [FKAA195E1A9E3C3476] FOREIGN KEY ([CStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[TMember] (
    [CDepartCode]           NVARCHAR (20)  NOT NULL,
    [CDepartStartDate]      DATETIME       NOT NULL,
    [CMemberCode]           NVARCHAR (50)  NOT NULL,
    [CBarcodeSeq]           INT            NULL,
    [CBarcodeNumber]        NVARCHAR (255) NULL,
    [CMemberName]           NVARCHAR (255) NULL,
    [CAttachWebcam]         BIGINT         NULL,
    [CAttachMobile]         BIGINT         NULL,
    [CSex]                  NVARCHAR (255) NULL,
    [CResidentNumber]       NVARCHAR (255) NULL,
    [CPhoneNumber]          NVARCHAR (255) NULL,
    [CMobilePhoneNumber]    NVARCHAR (255) NULL,
    [CPostNo]               NVARCHAR (255) NULL,
    [CAddress]              NVARCHAR (255) NULL,
    [CBirthday]             NVARCHAR (255) NULL,
    [CBirthdayDateType]     NVARCHAR (255) NULL,
    [CEmail]                NVARCHAR (255) NULL,
    [CMarryDate]            NVARCHAR (255) NULL,
    [CMarried]              BIT            NULL,
    [CMemberType]           NVARCHAR (255) NULL,
    [CTrainer]              NVARCHAR (30)  NULL,
    [CManager]              NVARCHAR (30)  NULL,
    [CPreferHelthTime]      DATETIME       NULL,
    [CHealthTotalCount]     INT            NULL,
    [CContinueRegMonth]     INT            NULL,
    [CBeginner]             BIT            NULL,
    [CBeginnerType]         NVARCHAR (255) NULL,
    [CRemarks]              NVARCHAR (255) NULL,
    [CTemp1]                NVARCHAR (255) NULL,
    [CTemp2]                NVARCHAR (255) NULL,
    [CTemp3]                NVARCHAR (255) NULL,
    [CLocker]               INT            NULL,
    [CEndDate]              DATETIME       NULL,
    [CMemberStatus]         NVARCHAR (255) NULL,
    [CCurrentCourse]        INT            NULL,
    [CBeforDepartCode]      NVARCHAR (20)  NULL,
    [CBeforDepartStartDate] DATETIME       NULL,
    [CBeforMemberCode]      NVARCHAR (50)  NULL,
    [CLoginId]              NVARCHAR (255) NULL,
    [CPassword]             NVARCHAR (255) NULL,
    [CRegDate]              DATETIME       NOT NULL,
    [CRegStaff]             NVARCHAR (30)  NULL,
    [CEditDate]             DATETIME       NOT NULL,
    [CEditStaff]            NVARCHAR (30)  NULL,
    PRIMARY KEY CLUSTERED ([CDepartCode] ASC, [CDepartStartDate] ASC, [CMemberCode] ASC),
    CONSTRAINT [FK_1ejw9177x3uqj7aclmeic5qwo] FOREIGN KEY ([CTrainer]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_67ujktynidas5tk5uuilojvhe] FOREIGN KEY ([CBeforDepartCode], [CBeforDepartStartDate], [CBeforMemberCode]) REFERENCES [dbo].[TMember] ([CDepartCode], [CDepartStartDate], [CMemberCode]),
    CONSTRAINT [FK_6l8u7sm7dvdbpwopk5bhj6q6s] FOREIGN KEY ([CLocker]) REFERENCES [dbo].[TLocker] ([CLockerSeq]),
    CONSTRAINT [FK_6n3jmcwwvn29wwd19sdlq51tc] FOREIGN KEY ([CEditStaff]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_95y7xsdp0nyx67wnt6bwmckg9] FOREIGN KEY ([CManager]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_9ft8xms626eamyac0kkgixgu2] FOREIGN KEY ([CBarcodeSeq], [CBarcodeNumber]) REFERENCES [dbo].[TMemberCard] ([CBarcodeInfo], [CBarcodeNumber]),
    CONSTRAINT [FK_a509evqa2hf7dcnk2kfktlftp] FOREIGN KEY ([CAttachMobile]) REFERENCES [dbo].[TFile] ([CFileId]),
    CONSTRAINT [FK_hb5se9weclmtkseplj8624seq] FOREIGN KEY ([CDepartCode], [CDepartStartDate]) REFERENCES [dbo].[TFacility] ([CDepartCode], [CDepartStartDate]),
    CONSTRAINT [FK_nvn7cirnnxs6ghaqi56pq2jpd] FOREIGN KEY ([CRegStaff]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_oe8lqs5d3b87uovdb74vlujju] FOREIGN KEY ([CCurrentCourse]) REFERENCES [dbo].[TCourseRegister] ([CCourseSeq]),
    CONSTRAINT [FK_r9oomjrn2jtmcrfwdfocvimkf] FOREIGN KEY ([CAttachWebcam]) REFERENCES [dbo].[TFile] ([CFileId])
);


GO

CREATE TABLE [dbo].[TSetReceiveMsg] (
    [CStaffId]    NVARCHAR (30) NOT NULL,
    [CComeSchool] BIT           NULL,
    [CPerceive]   BIT           NULL,
    [CAbsent]     BIT           NULL,
    [CLeaving]    BIT           NULL,
    [CComeHome]   BIT           NULL,
    [CBackSchool] BIT           NULL,
    [CStay]       BIT           NULL,
    PRIMARY KEY CLUSTERED ([CStaffId] ASC),
    CONSTRAINT [FK_8x7b3uaybf806pv4ae5dhox4g] FOREIGN KEY ([CStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[TReportStudentItem] (
    [CReportStudentCode]     NVARCHAR (50)  NOT NULL,
    [CReportPatternCode]     NVARCHAR (50)  NOT NULL,
    [CReportPatternItemType] NVARCHAR (50)  NOT NULL,
    [CSeq]                   INT            NULL,
    [CStartDate]             DATETIME       NULL,
    [CEndDate]               DATETIME       NULL,
    [CPageBreak]             BIT            NULL,
    [CSkip]                  BIT            NULL,
    [CField1]                NVARCHAR (255) NULL,
    [CField2]                NVARCHAR (255) NULL,
    [CField3]                NVARCHAR (255) NULL,
    [CField4]                NVARCHAR (255) NULL,
    [CField5]                NVARCHAR (255) NULL,
    [CContent1]              NTEXT          NULL,
    [CContent2]              NTEXT          NULL,
    [CContent3]              NTEXT          NULL,
    [CContent4]              NTEXT          NULL,
    [CContent5]              NTEXT          NULL,
    PRIMARY KEY CLUSTERED ([CReportStudentCode] ASC, [CReportPatternCode] ASC, [CReportPatternItemType] ASC),
    CONSTRAINT [FK368E182657D0C149] FOREIGN KEY ([CReportPatternCode], [CReportPatternItemType]) REFERENCES [dbo].[TReportPatternItem] ([CReportPattern], [CItemType]),
    CONSTRAINT [FK368E18269C806AC6] FOREIGN KEY ([CReportStudentCode]) REFERENCES [dbo].[TReportStudent] ([CCode])
);


GO

CREATE TABLE [dbo].[BookedMail] (
    [schemaName]     NVARCHAR (50) NOT NULL,
    [mailId]         BIGINT        NOT NULL,
    [bookedDateTime] DATETIME      NULL,
    [status]         NVARCHAR (10) NOT NULL,
    [remark]         NTEXT         NULL,
    PRIMARY KEY CLUSTERED ([schemaName] ASC, [mailId] ASC)
);


GO

CREATE TABLE [dbo].[TSystemPatchHistory] (
    [CPatchSeq]         INT            IDENTITY (1, 1) NOT NULL,
    [CType]             NVARCHAR (20)  NOT NULL,
    [CMajor]            INT            NOT NULL,
    [CMinor]            INT            NOT NULL,
    [CRevision]         INT            NOT NULL,
    [CWritenDate]       NVARCHAR (8)   NOT NULL,
    [CBuild]            INT            NOT NULL,
    [CTitle]            NVARCHAR (255) NULL,
    [CWriter]           NVARCHAR (50)  NULL,
    [CDescription]      NTEXT          NULL,
    [CPatchedStartTime] DATETIME       NOT NULL,
    [CPatchedEndTime]   DATETIME       NOT NULL,
    [CSuccess]          BIT            NOT NULL,
    [CMessage]          NTEXT          NULL,
    [CErrorMsg]         NTEXT          NULL,
    PRIMARY KEY CLUSTERED ([CPatchSeq] ASC)
);


GO

CREATE TABLE [dbo].[TProjectMemberHistory] (
    [CProjectId]    NVARCHAR (40) NOT NULL,
    [CJoinTime]     DATETIME      NOT NULL,
    [CType]         NVARCHAR (50) NOT NULL,
    [CMemberId]     NVARCHAR (30) NOT NULL,
    [COutTime]      DATETIME      NOT NULL,
    [CDisplayIndex] INT           NULL,
    PRIMARY KEY CLUSTERED ([CProjectId] ASC, [CJoinTime] ASC, [CType] ASC, [CMemberId] ASC),
    CONSTRAINT [FK_8qswbyfkheifh5dyvgv7vdvi3] FOREIGN KEY ([CProjectId]) REFERENCES [dbo].[TProject] ([CProjectId]),
    CONSTRAINT [FK_dr2tajwekvt6dfe1dncf1npiu] FOREIGN KEY ([CMemberId]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[otbl_Category] (
    [category_idx]        INT            IDENTITY (1, 1) NOT NULL,
    [parent_category_idx] INT            CONSTRAINT [DF_otbl_Category_parent_category_idx] DEFAULT ((-1)) NULL,
    [title]               NVARCHAR (30)  NULL,
    [use_yn]              CHAR (1)       NULL,
    [credit_Type]         INT            NULL,
    [sort]                INT            CONSTRAINT [DF_otbl_Category_sort] DEFAULT ((0)) NULL,
    [cm_1]                DECIMAL (4, 1) NULL,
    [cm_2]                DECIMAL (4, 1) NULL,
    [cm_3]                DECIMAL (4, 1) NULL,
    [cm_4]                DECIMAL (4, 1) NULL,
    [cm_5]                DECIMAL (4, 1) NULL,
    [tm_1]                DECIMAL (4, 1) NULL,
    [tm_2]                DECIMAL (4, 1) NULL,
    [tm_3]                DECIMAL (4, 1) NULL,
    [tm_4]                DECIMAL (4, 1) NULL,
    [tm_5]                DECIMAL (4, 1) NULL,
    [director]            DECIMAL (4, 1) NULL,
    CONSTRAINT [PK_otbl_Category] PRIMARY KEY CLUSTERED ([category_idx] ASC)
);


GO

CREATE TABLE [dbo].[TTradeTaxInvoice] (
    [CTdRequireDate]     DATETIME       NOT NULL,
    [CTdDepartCode]      NVARCHAR (20)  NOT NULL,
    [CTdDepartStartDate] DATETIME       NOT NULL,
    [CTdTradeNo]         INT            NOT NULL,
    [CTdBranchCode]      NVARCHAR (20)  NOT NULL,
    [CTdBranchStartDate] DATETIME       NOT NULL,
    [CDetailNo]          INT            NOT NULL,
    [CTaxInvoiceCode]    NVARCHAR (255) NOT NULL,
    [CLineNo]            INT            NOT NULL,
    [CTaxInvoiceDate]    DATETIME       NULL,
    [CTaxInvoicePrice]   INT            NULL,
    [CIssueDate]         DATETIME       NULL,
    [CIssueStaffId]      NVARCHAR (30)  NULL,
    CONSTRAINT [PK__TTradeTa__63E6EF2A7128A7F2] PRIMARY KEY CLUSTERED ([CTdRequireDate] ASC, [CTdDepartCode] ASC, [CTdDepartStartDate] ASC, [CTdTradeNo] ASC, [CTdBranchCode] ASC, [CTdBranchStartDate] ASC, [CDetailNo] ASC, [CTaxInvoiceCode] ASC, [CLineNo] ASC),
    CONSTRAINT [FK13871A92313D52F0] FOREIGN KEY ([CTdRequireDate], [CTdDepartCode], [CTdDepartStartDate], [CTdTradeNo], [CTdBranchCode], [CTdBranchStartDate], [CDetailNo]) REFERENCES [dbo].[TTradeDetail] ([CRequireDate], [CTiDepartCode], [CTiDepartStartDate], [CTradeNo], [CBranchCode], [CBranchStartDate], [CDetailNo]),
    CONSTRAINT [FK13871A923587BF23] FOREIGN KEY ([CIssueStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[TMailFilterTarget] (
    [CStaffId]          NVARCHAR (30) NOT NULL,
    [CFilterSeq]        INT           NOT NULL,
    [CTargetType]       NVARCHAR (10) NOT NULL,
    [CKeywordCondition] NVARCHAR (10) NULL,
    [CIsPrivateAddress] BIT           NULL,
    [CIsSharedAddress]  BIT           NULL,
    [CIsStaffAddress]   BIT           NULL,
    [CIsNotAddress]     BIT           NULL,
    [CEnabled]          BIT           NULL,
    PRIMARY KEY CLUSTERED ([CStaffId] ASC, [CFilterSeq] ASC, [CTargetType] ASC),
    CONSTRAINT [FK299D4AF43F41F15D] FOREIGN KEY ([CStaffId], [CFilterSeq]) REFERENCES [dbo].[TMailFilter] ([CStaffId], [CFilterSeq])
);


GO

CREATE TABLE [dbo].[TVltTypeTopicSort] (
    [CVltTypeNo] INT NOT NULL,
    [CTopic]     INT NOT NULL,
    [CSort]      INT NULL,
    PRIMARY KEY CLUSTERED ([CVltTypeNo] ASC, [CTopic] ASC),
    CONSTRAINT [FK7962D9E914EA8B9B] FOREIGN KEY ([CTopic]) REFERENCES [dbo].[TTopic] ([CTopicNo]),
    CONSTRAINT [FK7962D9E9693A000E] FOREIGN KEY ([CVltTypeNo]) REFERENCES [dbo].[TVltType] ([CTypeNo])
);


GO

CREATE TABLE [dbo].[TMail] (
    [CMailId]             BIGINT         IDENTITY (1, 1) NOT NULL,
    [CStaffId]            NVARCHAR (30)  NULL,
    [CFolderId]           INT            NULL,
    [CType]               NVARCHAR (1)   NULL,
    [CBasicDateTime]      DATETIME       NOT NULL,
    [CReadDateTime]       DATETIME       NULL,
    [CSentDateTime]       DATETIME       NULL,
    [CLastSentDateTime]   DATETIME       NULL,
    [CBookedDateTime]     DATETIME       NULL,
    [CRollbackDateTime]   DATETIME       NULL,
    [CDelDateTimeByStaff] DATETIME       NULL,
    [CDelDateTimeByAdmin] DATETIME       NULL,
    [CReadState]          NVARCHAR (2)   NULL,
    [CContentType]        NVARCHAR (50)  NULL,
    [CCharset]            NVARCHAR (20)  NULL,
    [CTitle]              NVARCHAR (200) NULL,
    [CContentBody]        NTEXT          NULL,
    [CSender]             NVARCHAR (200) NULL,
    [CReceiver]           NVARCHAR (200) NULL,
    [CReplyAddress]       NVARCHAR (200) NULL,
    [CIsDone]             BIT            NOT NULL,
    [CLastAction]         NVARCHAR (1)   NULL,
    [CFileCount]          INT            NULL,
    [CTotalFileCount]     INT            NULL,
    [CSize]               BIGINT         NULL,
    [CMailHeader]         NTEXT          NULL,
    [CMailUniqueId]       NVARCHAR (255) NULL,
    [CServerMailUniqueId] NVARCHAR (255) NULL,
    [CServerFileName]     NVARCHAR (255) NULL,
    [CIsAutoMail]         BIT            NULL,
    [CIsSent]             BIT            NULL,
    [CIsAllowLink]        BIT            NULL,
    [CIsBigMail]          BIT            NULL,
    [CRemark]             NVARCHAR (255) NULL,
    [CRefMailId]          BIGINT         NULL,
    [CRefMailType]        NVARCHAR (1)   NULL,
    [CParentMailId]       BIGINT         NULL,
    [CIsSendEach]         BIT            NULL,
    [CIsLock]             BIT            NULL,
    [CImportant]          NVARCHAR (255) DEFAULT ('3') NULL,
    [CFavorite]           BIT            DEFAULT ((0)) NOT NULL,
    [CDeletedAtZimbra]    BIT            NULL,
    [CIsBackground]       BIT            NULL,
    CONSTRAINT [PK__TMail__F94351A129E1370A] PRIMARY KEY CLUSTERED ([CMailId] ASC),
    CONSTRAINT [FK4C4302B25A3C388] FOREIGN KEY ([CParentMailId]) REFERENCES [dbo].[TMail] ([CMailId]),
    CONSTRAINT [FK4C4302B63B698DB] FOREIGN KEY ([CStaffId], [CFolderId]) REFERENCES [dbo].[TMailFolder] ([CStaffId], [CFolderId])
);


GO

CREATE TABLE [dbo].[TSeason] (
    [CSeasonNo]   INT            IDENTITY (1, 1) NOT NULL,
    [CSeasonType] NVARCHAR (255) NULL,
    [CSeasonName] NVARCHAR (255) NULL,
    [CSoul]       BIT            NULL,
    [CLearning]   BIT            NULL,
    [CAction]     BIT            NULL,
    [CCareer]     BIT            NULL,
    PRIMARY KEY CLUSTERED ([CSeasonNo] ASC)
);


GO

CREATE TABLE [dbo].[TStudentDailyAttend] (
    [CStduentBranchCode]      NVARCHAR (20) NOT NULL,
    [CStduentBranchStartDate] DATETIME      NOT NULL,
    [CStduentcode]            NVARCHAR (50) NOT NULL,
    [CDate]                   DATETIME      NOT NULL,
    [CStartPlanTime]          DATETIME      NULL,
    [CEndPlanTime]            DATETIME      NULL,
    [CPlanHours]              FLOAT (53)    NULL,
    [CAttendType]             NVARCHAR (15) NULL,
    [CStartTime]              DATETIME      NULL,
    [CEndTime]                DATETIME      NULL,
    [CHours]                  FLOAT (53)    NULL,
    [CAttendStatus]           NVARCHAR (15) NULL,
    [CSentLateMsg]            BIT           NULL,
    [CSentNotLeaveMsg]        BIT           NULL,
    CONSTRAINT [PK_TStudentDailyAttend] PRIMARY KEY CLUSTERED ([CStduentBranchCode] ASC, [CStduentBranchStartDate] ASC, [CStduentcode] ASC, [CDate] ASC),
    CONSTRAINT [FK_TStudent_TStudentDailyAttend] FOREIGN KEY ([CStduentBranchCode], [CStduentBranchStartDate], [CStduentcode]) REFERENCES [dbo].[TStudent] ([CBranchCode], [CBranchStartDate], [CCode])
);


GO

CREATE TABLE [dbo].[TStudentManager_20150206] (
    [CBranchCode]      NVARCHAR (20)  NOT NULL,
    [CBranchStartDate] DATETIME       NOT NULL,
    [CStudentCode]     NVARCHAR (50)  NOT NULL,
    [CManagerId]       NVARCHAR (30)  NOT NULL,
    [CManagerType]     NVARCHAR (50)  NOT NULL,
    [CStartDate]       DATETIME       NOT NULL,
    [CEndDate]         DATETIME       NULL,
    [CComment]         NVARCHAR (225) NULL
);


GO

CREATE TABLE [dbo].[TRFID] (
    [CBranchCode]             NVARCHAR (20) NOT NULL,
    [CBranchStartDate]        DATETIME      NOT NULL,
    [CCardNumber]             NVARCHAR (50) NOT NULL,
    [CCardType]               NVARCHAR (50) NULL,
    [CStaffId]                NVARCHAR (30) NULL,
    [CStudentBranchCode]      NVARCHAR (20) NULL,
    [CStudentBranchStartDate] DATETIME      NULL,
    [CStudentCode]            NVARCHAR (50) NULL,
    [CEnabled]                BIT           NULL,
    [CSendType]               NVARCHAR (15) NULL,
    PRIMARY KEY CLUSTERED ([CBranchCode] ASC, [CBranchStartDate] ASC, [CCardNumber] ASC),
    CONSTRAINT [FK_TFacility_TRFID] FOREIGN KEY ([CBranchCode], [CBranchStartDate]) REFERENCES [dbo].[TFacility] ([CDepartCode], [CDepartStartDate]),
    CONSTRAINT [FK_TStudent_TRFID] FOREIGN KEY ([CStudentBranchCode], [CStudentBranchStartDate], [CStudentCode]) REFERENCES [dbo].[TStudent] ([CBranchCode], [CBranchStartDate], [CCode]),
    CONSTRAINT [FK4C60CA39E3C3476] FOREIGN KEY ([CStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[TToDo] (
    [CId]                    BIGINT         IDENTITY (1, 1) NOT NULL,
    [CWrittenTime]           DATETIME       NOT NULL,
    [CModifiedTime]          DATETIME       NOT NULL,
    [CTargetTime]            DATETIME       NOT NULL,
    [CEndTime]               DATETIME       NOT NULL,
    [CFeedBackTime]          DATETIME       NULL,
    [CReadTime]              DATETIME       NULL,
    [COriginId]              BIGINT         NULL,
    [CState]                 NVARCHAR (15)  NOT NULL,
    [CFeedBackState]         NVARCHAR (15)  NULL,
    [CTitle]                 NVARCHAR (255) NOT NULL,
    [CReferenceId]           NVARCHAR (255) NULL,
    [CApprFormId]            NVARCHAR (15)  NULL,
    [CApprWorkParam]         NVARCHAR (255) NULL,
    [CApprovedDocId]         BIGINT         NULL,
    [CTempString1]           NVARCHAR (255) NULL,
    [CTempString2]           NVARCHAR (255) NULL,
    [CTempString3]           NVARCHAR (255) NULL,
    [CTempString4]           NVARCHAR (255) NULL,
    [CTempString5]           NVARCHAR (255) NULL,
    [CTempLong1]             BIGINT         NULL,
    [CTempLong2]             BIGINT         NULL,
    [CTempLong3]             BIGINT         NULL,
    [CTempLong4]             BIGINT         NULL,
    [CTempLong5]             BIGINT         NULL,
    [CTempBody1]             NTEXT          NULL,
    [CTempBody2]             NTEXT          NULL,
    [CTempBody3]             NTEXT          NULL,
    [CParentToDoId]          BIGINT         NULL,
    [CWriterId]              NVARCHAR (30)  NULL,
    [CWriterDepartCode]      NVARCHAR (20)  NULL,
    [CWriterDepartStartDate] DATETIME       NULL,
    [CWriterLevelType]       NVARCHAR (10)  NULL,
    [CWriterLevelCode]       NVARCHAR (10)  NULL,
    [CWriterLevelSeq]        INT            NULL,
    [CFileCount]             INT            NULL,
    [CSize]                  BIGINT         NULL,
    [CBypassStaffId]         NVARCHAR (30)  NULL,
    [CTypeId]                NVARCHAR (255) NULL,
    [COnlyReport]            BIT            NULL,
    [CModifierId]            NVARCHAR (30)  NULL,
    PRIMARY KEY CLUSTERED ([CId] ASC),
    CONSTRAINT [FK_8qrqhl9e2ar5wdan6tavf7flh] FOREIGN KEY ([CModifierId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK4C78EDA73839F5A] FOREIGN KEY ([CWriterLevelType], [CWriterLevelCode], [CWriterLevelSeq]) REFERENCES [dbo].[TStaffLevel] ([CLevelType], [CLevelCode], [CLevelSeq]),
    CONSTRAINT [FK4C78EDA95C1F7F9] FOREIGN KEY ([CTypeId]) REFERENCES [dbo].[TToDoType] ([CId]),
    CONSTRAINT [FK4C78EDA9E25384B] FOREIGN KEY ([COriginId]) REFERENCES [dbo].[TToDo] ([CId]),
    CONSTRAINT [FK4C78EDAA98D2115] FOREIGN KEY ([CParentToDoId]) REFERENCES [dbo].[TToDo] ([CId]),
    CONSTRAINT [FK4C78EDAADE0A5C6] FOREIGN KEY ([CApprFormId]) REFERENCES [dbo].[TApprForm] ([CFormId]),
    CONSTRAINT [FK4C78EDAB4D390CE] FOREIGN KEY ([CBypassStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK4C78EDACBAA906F] FOREIGN KEY ([CWriterId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK4C78EDAD0525F1] FOREIGN KEY ([CWriterDepartCode], [CWriterDepartStartDate]) REFERENCES [dbo].[TDepartment] ([CDepartCode], [CDepartStartDate]),
    CONSTRAINT [FK4C78EDAFF4B5202] FOREIGN KEY ([CApprovedDocId]) REFERENCES [dbo].[TApprDoc] ([CDocId])
);


GO

CREATE TABLE [dbo].[TStudentCounsel] (
    [CScDepartCode]      NVARCHAR (20)  NOT NULL,
    [CScDepartStartDate] DATETIME       NOT NULL,
    [CScCode]            NVARCHAR (50)  NOT NULL,
    [CNo]                INT            NOT NULL,
    [CRegistType]        NVARCHAR (50)  NULL,
    [CAttendType]        NVARCHAR (50)  NULL,
    [CMonday]            BIT            NULL,
    [CTuesday]           BIT            NULL,
    [CWednesday]         BIT            NULL,
    [CThursday]          BIT            NULL,
    [CFriday]            BIT            NULL,
    [CSaturday]          BIT            NULL,
    [CSunday]            BIT            NULL,
    [CGrade]             NVARCHAR (255) NULL,
    [CManager]           NVARCHAR (30)  NULL,
    [CDeaultStartDate]   DATETIME       NULL,
    [CDeaultEndDate]     DATETIME       NULL,
    [CStartDate]         DATETIME       NULL,
    [CEndDate]           DATETIME       NULL,
    [CManageDays]        INT            NULL,
    [CFreeDays]          INT            NULL,
    [CFreeComment]       NVARCHAR (255) NULL,
    [CPayDays]           INT            NULL,
    [CChangeDateReason]  NVARCHAR (255) NULL,
    [CBillPrice]         INT            NULL,
    [CTestDCPrice]       INT            NULL,
    [CPayPrice]          INT            NULL,
    [CTotalPrice]        INT            NULL,
    [CChangePriceReason] NVARCHAR (255) NULL,
    [CPayDate]           DATETIME       NULL,
    [CRoyaltyRate]       FLOAT (53)     NULL,
    [CRoyalty]           INT            NULL,
    [CRoyaltyPayDate]    DATETIME       NULL,
    [CChk]               NVARCHAR (255) NULL,
    [CFixRoyalty]        INT            NULL,
    [CChildren]          BIT            NULL,
    [CSaleProof]         BIGINT         NULL,
    [CAttributionPrice]  INT            NULL,
    [CAttributionMemo]   NVARCHAR (255) NULL,
    [CInsDate]           DATETIME       CONSTRAINT [DF_TStudentCounsel_CInsDate_1] DEFAULT (CONVERT([varchar],getdate(),(23))) NULL,
    CONSTRAINT [PK__TStudent__59D5D01573B00EE2] PRIMARY KEY CLUSTERED ([CScDepartCode] ASC, [CScDepartStartDate] ASC, [CScCode] ASC, [CNo] ASC),
    CONSTRAINT [FK_gghjoqr0lsdv1r4vtnlco4vvk] FOREIGN KEY ([CSaleProof]) REFERENCES [dbo].[TSaleProof] ([CProofSeq]),
    CONSTRAINT [FK3C8628EE411FAC28] FOREIGN KEY ([CManager]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK3C8628EE90B9D2F3] FOREIGN KEY ([CScDepartCode], [CScDepartStartDate], [CScCode]) REFERENCES [dbo].[TStudent] ([CBranchCode], [CBranchStartDate], [CCode])
);


GO

CREATE TABLE [dbo].[TTimeScheduleDayTime] (
    [CDayId]                   BIGINT         NOT NULL,
    [CRow]                     INT            NOT NULL,
    [CColumn]                  INT            NOT NULL,
    [CFromTime]                NVARCHAR (5)   NULL,
    [CToTime]                  NVARCHAR (5)   NULL,
    [CTutorId]                 NVARCHAR (30)  NULL,
    [CReady]                   BIT            NULL,
    [CStduentBranchCode1]      NVARCHAR (20)  NULL,
    [CStduentBranchStartDate1] DATETIME       NULL,
    [CStduentcode1]            NVARCHAR (50)  NULL,
    [CCourse1]                 NVARCHAR (255) NULL,
    [CStduentBranchCode2]      NVARCHAR (20)  NULL,
    [CStduentBranchStartDate2] DATETIME       NULL,
    [CStduentcode2]            NVARCHAR (50)  NULL,
    [CCourse2]                 NVARCHAR (255) NULL,
    [CStduentBranchCode3]      NVARCHAR (20)  NULL,
    [CStduentBranchStartDate3] DATETIME       NULL,
    [CStduentcode3]            NVARCHAR (50)  NULL,
    [CCourse3]                 NVARCHAR (255) NULL,
    PRIMARY KEY CLUSTERED ([CDayId] ASC, [CRow] ASC, [CColumn] ASC),
    CONSTRAINT [FK_4svmywxw2tjtvmbx89w97htqu] FOREIGN KEY ([CStduentBranchCode2], [CStduentBranchStartDate2], [CStduentcode2]) REFERENCES [dbo].[TStudent] ([CBranchCode], [CBranchStartDate], [CCode]),
    CONSTRAINT [FK_5duuo3syetivhu75r1babubib] FOREIGN KEY ([CStduentBranchCode1], [CStduentBranchStartDate1], [CStduentcode1]) REFERENCES [dbo].[TStudent] ([CBranchCode], [CBranchStartDate], [CCode]),
    CONSTRAINT [FK_62fu8guwm1iy95rgpjkelbylx] FOREIGN KEY ([CTutorId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_avqs90jje0h9vkixkrb5bwmxb] FOREIGN KEY ([CDayId]) REFERENCES [dbo].[TTimeScheduleDay] ([CId]),
    CONSTRAINT [FK_okceuy8ff2svxr0rkyt5t4lsh] FOREIGN KEY ([CStduentBranchCode3], [CStduentBranchStartDate3], [CStduentcode3]) REFERENCES [dbo].[TStudent] ([CBranchCode], [CBranchStartDate], [CCode])
);


GO

CREATE TABLE [dbo].[TIpGroup] (
    [CGroupId]       NVARCHAR (20)  NOT NULL,
    [CName0]         NVARCHAR (50)  NOT NULL,
    [CName1]         NVARCHAR (50)  NULL,
    [CName2]         NVARCHAR (50)  NULL,
    [CName3]         NVARCHAR (50)  NULL,
    [CName4]         NVARCHAR (50)  NULL,
    [CShortName0]    NVARCHAR (15)  NOT NULL,
    [CShortName1]    NVARCHAR (15)  NULL,
    [CShortName2]    NVARCHAR (15)  NULL,
    [CShortName3]    NVARCHAR (15)  NULL,
    [CShortName4]    NVARCHAR (15)  NULL,
    [CDepth]         INT            NULL,
    [CEnabled]       BIT            NULL,
    [CRemark]        NVARCHAR (255) NULL,
    [CDisplayIndex]  INT            NULL,
    [CParentGroupId] NVARCHAR (20)  NULL,
    [CCreaterId]     NVARCHAR (30)  NULL,
    [CCreatedTime]   DATETIME       NULL,
    [CUpdaterId]     NVARCHAR (30)  NULL,
    [CUpdatedTime]   DATETIME       NULL,
    PRIMARY KEY CLUSTERED ([CGroupId] ASC),
    CONSTRAINT [FK_h5ki8abdhhtjf0jy6u6rr2ee4] FOREIGN KEY ([CUpdaterId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_k5s3h9f7sklfqp4tyx41x5vc6] FOREIGN KEY ([CCreaterId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FKEEC66AA4D1BD9D9D] FOREIGN KEY ([CParentGroupId]) REFERENCES [dbo].[TIpGroup] ([CGroupId])
);


GO

CREATE TABLE [dbo].[TMailSharedFolder] (
    [CMailFolderStaffId] NVARCHAR (30) NOT NULL,
    [CMailFolderId]      INT           NOT NULL,
    [CSharedStaffId]     NVARCHAR (30) NOT NULL,
    [CRegTime]           DATETIME      NULL,
    PRIMARY KEY CLUSTERED ([CMailFolderStaffId] ASC, [CMailFolderId] ASC, [CSharedStaffId] ASC),
    CONSTRAINT [FK_8y9x42mxwgugud0ro23fh4wmh] FOREIGN KEY ([CMailFolderStaffId], [CMailFolderId]) REFERENCES [dbo].[TMailFolder] ([CStaffId], [CFolderId]),
    CONSTRAINT [FK_o7iw1ln5fy57tyxcv0ypemg2w] FOREIGN KEY ([CSharedStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[otbl_Lecture_attend_student] (
    [class_student_idx] INT           IDENTITY (1, 1) NOT NULL,
    [lecture_id]        INT           NULL,
    [staff_id]          NVARCHAR (30) NULL,
    [reg_date]          DATETIME      NULL,
    [confirm_date]      DATETIME      NULL,
    [confirm_yn]        CHAR (1)      NULL,
    [pass_yn]           CHAR (1)      NULL,
    [star]              FLOAT (53)    NULL,
    [review]            NTEXT         NULL,
    [gain_credit]       FLOAT (53)    NULL,
    [del_yn]            CHAR (1)      CONSTRAINT [DF_otbl_Lecture_attend_student_del_yn] DEFAULT ('N') NULL,
    CONSTRAINT [PK_otbl_Lecture_attend_student] PRIMARY KEY CLUSTERED ([class_student_idx] ASC),
    CONSTRAINT [FK_otbl_Lecture_attend_student_otbl_Lecture] FOREIGN KEY ([lecture_id]) REFERENCES [dbo].[otbl_Lecture] ([lecture_idx])
);


GO

CREATE TABLE [dbo].[TSaleAssetLink] (
    [CSaleItemCode]    NVARCHAR (255) NOT NULL,
    [CBranchCode]      NVARCHAR (20)  NOT NULL,
    [CBranchStartDate] DATETIME       NOT NULL,
    [CCodeGroup]       NVARCHAR (50)  NOT NULL,
    [CCommonCode]      NVARCHAR (50)  NOT NULL,
    [CItemCode]        NVARCHAR (255) NOT NULL,
    PRIMARY KEY CLUSTERED ([CSaleItemCode] ASC, [CBranchCode] ASC, [CBranchStartDate] ASC, [CCodeGroup] ASC, [CCommonCode] ASC, [CItemCode] ASC),
    CONSTRAINT [FK52DA2E8F59EE0656] FOREIGN KEY ([CSaleItemCode]) REFERENCES [dbo].[TSaleItem] ([CCode]),
    CONSTRAINT [FK52DA2E8FE984325B] FOREIGN KEY ([CBranchCode], [CBranchStartDate], [CCodeGroup], [CCommonCode], [CItemCode]) REFERENCES [dbo].[TAssetItem] ([CBranchCode], [CBranchStartDate], [CCodeGroup], [CCommonCode], [CCode])
);


GO

CREATE TABLE [dbo].[TDayAttendance] (
    [CDate]       DATETIME       NOT NULL,
    [CStaffId]    NVARCHAR (30)  NOT NULL,
    [CType]       NVARCHAR (20)  NOT NULL,
    [CTime]       DATETIME       NULL,
    [CRemark]     NVARCHAR (255) NULL,
    [CUpdStaffId] NVARCHAR (30)  NULL,
    [CUpdTime]    DATETIME       NULL,
    PRIMARY KEY CLUSTERED ([CDate] ASC, [CStaffId] ASC, [CType] ASC),
    CONSTRAINT [FK_3cqjosx2fum275tsik64gjse8] FOREIGN KEY ([CStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_cwspjjdc79pflgp983sm9hrmt] FOREIGN KEY ([CUpdStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[MMS_MSG] (
    [MSGKEY]         BIGINT         IDENTITY (1, 1) NOT NULL,
    [SUBJECT]        VARCHAR (120)  NULL,
    [PHONE]          VARCHAR (15)   NOT NULL,
    [CALLBACK]       VARCHAR (15)   NOT NULL,
    [STATUS]         VARCHAR (2)    CONSTRAINT [DF__MMS_MSG__STATUS__5A9BD276] DEFAULT ('0') NOT NULL,
    [REQDATE]        DATETIME       NOT NULL,
    [MSG]            VARCHAR (4000) NULL,
    [FILE_CNT]       INT            CONSTRAINT [DF__MMS_MSG__FILE_CN__5B8FF6AF] DEFAULT ((0)) NOT NULL,
    [FILE_CNT_REAL]  INT            NULL,
    [FILE_PATH1]     VARCHAR (512)  NULL,
    [FILE_PATH1_SIZ] INT            NULL,
    [FILE_PATH2]     VARCHAR (512)  NULL,
    [FILE_PATH2_SIZ] INT            NULL,
    [FILE_PATH3]     VARCHAR (512)  NULL,
    [FILE_PATH3_SIZ] INT            NULL,
    [FILE_PATH4]     VARCHAR (512)  NULL,
    [FILE_PATH4_SIZ] INT            NULL,
    [FILE_PATH5]     VARCHAR (512)  NULL,
    [FILE_PATH5_SIZ] INT            NULL,
    [EXPIRETIME]     VARCHAR (10)   CONSTRAINT [DF__MMS_MSG__EXPIRET__5C841AE8] DEFAULT ('43200') NOT NULL,
    [SENTDATE]       DATETIME       NULL,
    [RSLTDATE]       DATETIME       NULL,
    [REPORTDATE]     DATETIME       NULL,
    [TERMINATEDDATE] DATETIME       NULL,
    [RSLT]           VARCHAR (4)    NULL,
    [TYPE]           VARCHAR (2)    CONSTRAINT [DF__MMS_MSG__TYPE__5D783F21] DEFAULT ('0') NOT NULL,
    [TELCOINFO]      VARCHAR (10)   NULL,
    [ROUTE_ID]       VARCHAR (20)   NULL,
    [ID]             VARCHAR (20)   NULL,
    [POST]           VARCHAR (20)   NULL,
    [ETC1]           VARCHAR (64)   NULL,
    [ETC2]           VARCHAR (32)   NULL,
    [ETC3]           VARCHAR (32)   NULL,
    [ETC4]           INT            NULL,
    CONSTRAINT [PK_MMS_MSG] PRIMARY KEY CLUSTERED ([MSGKEY] ASC)
);


GO

CREATE TABLE [dbo].[TMessageRoom] (
    [CCreaterId]  NVARCHAR (30) NOT NULL,
    [CCreateTime] DATETIME      NOT NULL,
    [CType]       NVARCHAR (10) NOT NULL,
    [CLastTime]   DATETIME      NULL,
    PRIMARY KEY CLUSTERED ([CCreaterId] ASC, [CCreateTime] ASC),
    CONSTRAINT [FKB5A8848E7F53A7CC] FOREIGN KEY ([CCreaterId]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[TStaffHoliday] (
    [CStaffId]         NVARCHAR (30) NOT NULL,
    [CYear]            INT           NOT NULL,
    [CDepartCode]      NVARCHAR (20) NOT NULL,
    [CDepartStartDate] DATETIME      NOT NULL,
    [CHolidayTotal]    INT           NULL,
    [CHolidayUsed]     INT           NULL,
    [CHolidayRemain]   INT           NULL,
    [CBranchCode]      NVARCHAR (20) NOT NULL,
    [CBranchStartDate] DATETIME      NOT NULL,
    CONSTRAINT [PK_TStaffHoliday] PRIMARY KEY CLUSTERED ([CStaffId] ASC, [CYear] ASC),
    CONSTRAINT [FKE45577CC282531E2] FOREIGN KEY ([CDepartCode], [CDepartStartDate]) REFERENCES [dbo].[TFacility] ([CDepartCode], [CDepartStartDate]),
    CONSTRAINT [FKE45577CC48562EA2] FOREIGN KEY ([CBranchCode], [CBranchStartDate]) REFERENCES [dbo].[TFacility] ([CDepartCode], [CDepartStartDate]),
    CONSTRAINT [FKE45577CC9537B03E] FOREIGN KEY ([CStaffId]) REFERENCES [dbo].[TStaffInfo] ([CStaffId]),
    CONSTRAINT [FKE45577CC9E3C3476] FOREIGN KEY ([CStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[TKnowreAccountMonth] (
    [CKnowreAccount] NVARCHAR (50)  NOT NULL,
    [CStartDate]     DATETIME       NOT NULL,
    [CEndDate]       DATETIME       NOT NULL,
    [CAmount]        INT            NOT NULL,
    [CStatus]        NVARCHAR (255) NOT NULL,
    [CSaleProof]     BIGINT         NULL,
    PRIMARY KEY CLUSTERED ([CKnowreAccount] ASC, [CStartDate] ASC),
    CONSTRAINT [FK_kcorsj411uikpx36kr2ffpbre] FOREIGN KEY ([CKnowreAccount]) REFERENCES [dbo].[TKnowreAccount] ([CLoginId]),
    CONSTRAINT [FK_n0tx0qnd5x7pfstcsm9ke9n3j] FOREIGN KEY ([CSaleProof]) REFERENCES [dbo].[TSaleProof] ([CProofSeq])
);


GO

CREATE TABLE [dbo].[TMailSignature] (
    [CStaffId]   NVARCHAR (30)  NOT NULL,
    [CHtml]      NTEXT          NULL,
    [CSignId]    INT            DEFAULT ((1)) NOT NULL,
    [CSignTitle] NVARCHAR (255) DEFAULT ('기본 서명') NOT NULL,
    PRIMARY KEY NONCLUSTERED ([CStaffId] ASC, [CSignId] ASC)
);


GO

CREATE TABLE [dbo].[THpProductVer] (
    [CProductId]    NVARCHAR (30) NOT NULL,
    [CProductVer]   NVARCHAR (30) NOT NULL,
    [CName0]        NVARCHAR (50) NULL,
    [CName1]        NVARCHAR (50) NULL,
    [CName2]        NVARCHAR (50) NULL,
    [CName3]        NVARCHAR (50) NULL,
    [CName4]        NVARCHAR (50) NULL,
    [CDisplayIndex] INT           NULL,
    [CRemark]       NTEXT         NULL,
    PRIMARY KEY CLUSTERED ([CProductId] ASC, [CProductVer] ASC),
    CONSTRAINT [FK_ba1wf2lelwg4gi5ajp5lgn36h] FOREIGN KEY ([CProductId]) REFERENCES [dbo].[THpProduct] ([CProductId])
);


GO

CREATE TABLE [dbo].[tb_RootTest] (
    [it_RootTestIdx]         INT             IDENTITY (1, 1) NOT NULL,
    [it_RootCourseIdx]       INT             NOT NULL,
    [st_RootTestTitle]       NVARCHAR (500)  NULL,
    [st_RootTestContent]     TEXT            NULL,
    [st_RootTestContentText] NVARCHAR (1000) NULL,
    [st_RootTestMemo]        NVARCHAR (1000) NULL,
    [it_RootTestOpen]        INT             NULL,
    [it_RootTestSort]        INT             NULL,
    [st_StaffCode]           NVARCHAR (50)   NULL,
    [dt_RootTestMake]        DATETIME        NULL,
    [dt_RootTestUpdate]      DATETIME        NULL,
    [dt_RootTestDelete]      DATETIME        NULL,
    CONSTRAINT [PK_tb_RootTest] PRIMARY KEY CLUSTERED ([it_RootTestIdx] ASC),
    CONSTRAINT [FK_tb_RootTest_tb_RootCourse] FOREIGN KEY ([it_RootCourseIdx]) REFERENCES [dbo].[tb_RootCourse] ([it_RootCourseIdx])
);


GO

CREATE TABLE [dbo].[TMailForwardMaster] (
    [CMailAddress] NVARCHAR (100) NOT NULL,
    [CSenderName]  NVARCHAR (50)  NULL,
    [CRegStaffId]  NVARCHAR (30)  NULL,
    [CRegTime]     DATETIME       NULL,
    [CUpdStaffId]  NVARCHAR (30)  NULL,
    [CUpdTime]     DATETIME       NULL,
    [CCount]       INT            NULL,
    [CZimbraId]    NVARCHAR (255) NULL,
    PRIMARY KEY CLUSTERED ([CMailAddress] ASC),
    CONSTRAINT [FK_144fn1y4mx73bdyxsuj83pu6p] FOREIGN KEY ([CRegStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_7p8xa3kgvfg235o7fir3830yg] FOREIGN KEY ([CUpdStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[TMenu] (
    [CMenuId]               NVARCHAR (50)  NOT NULL,
    [CGroupCode]            NVARCHAR (50)  NULL,
    [CDepth]                INT            NULL,
    [CHasSon]               BIT            NULL,
    [CName0]                NVARCHAR (50)  NOT NULL,
    [CName1]                NVARCHAR (50)  NULL,
    [CName2]                NVARCHAR (50)  NULL,
    [CName3]                NVARCHAR (50)  NULL,
    [CName4]                NVARCHAR (50)  NULL,
    [CType]                 NVARCHAR (20)  NULL,
    [CPopupOption]          NTEXT          NULL,
    [CUrl]                  NVARCHAR (255) NULL,
    [CUrlGetParameter]      NVARCHAR (255) NULL,
    [CIcon]                 NVARCHAR (255) NULL,
    [CDisableIcon]          NVARCHAR (255) NULL,
    [CEnabled]              BIT            NULL,
    [CVisibled]             BIT            NULL,
    [CExpand]               BIT            NULL,
    [CNeedSso]              BIT            NULL,
    [CDisplayIndex]         INT            NULL,
    [CDefaultAllowType]     NVARCHAR (20)  NULL,
    [CPermApplyOrder]       NVARCHAR (255) NULL,
    [CCheckStopPoint]       NVARCHAR (20)  NULL,
    [CSubMenuInfo1]         NVARCHAR (255) NULL,
    [CSubMenuInfo2]         NVARCHAR (255) NULL,
    [CGwCode]               NVARCHAR (50)  NULL,
    [CReferenceOtherSystem] NVARCHAR (20)  NULL,
    [CRemark]               NVARCHAR (255) NULL,
    [CRelativeId]           NVARCHAR (50)  NULL,
    [CParentMenuId]         NVARCHAR (50)  NULL,
    [CSkipAutoParam]        BIT            NULL,
    [CMobileClass]          NVARCHAR (255) NULL,
    [CModifiedTime]         DATETIME       DEFAULT ('1900-01-01') NOT NULL,
    [COwnerFacilityCode]    NVARCHAR (255) NULL,
    PRIMARY KEY CLUSTERED ([CMenuId] ASC),
    CONSTRAINT [FK4C43FD356866734] FOREIGN KEY ([CParentMenuId]) REFERENCES [dbo].[TMenu] ([CMenuId])
);


GO

CREATE TABLE [dbo].[TApprFormHtmlHistory] (
    [CSeq]          BIGINT         IDENTITY (1, 1) NOT NULL,
    [CFormId]       NVARCHAR (15)  NULL,
    [CFormVer]      INT            NULL,
    [CFormType]     NVARCHAR (255) NULL,
    [CHtml]         NTEXT          NULL,
    [CCss]          NTEXT          NULL,
    [CScript]       NTEXT          NULL,
    [CModifier]     NVARCHAR (30)  NULL,
    [CModifiedTime] DATETIME       NULL,
    PRIMARY KEY CLUSTERED ([CSeq] ASC),
    CONSTRAINT [FK_3c40e3wp0iohbvoqr4f2rjbtq] FOREIGN KEY ([CFormId], [CFormVer]) REFERENCES [dbo].[TApprFormHtml] ([CFormId], [CFormVer]),
    CONSTRAINT [FK_pl6efudo2ca1c5gjspabtdxa] FOREIGN KEY ([CModifier]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[TAnniversary] (
    [CId]                BIGINT        IDENTITY (1, 1) NOT NULL,
    [CIsComAnni]         BIT           DEFAULT ((0)) NOT NULL,
    [CStaffId]           NVARCHAR (30) NOT NULL,
    [CRegDate]           DATETIME      NOT NULL,
    [CStartYear]         INT           NOT NULL,
    [CEndYear]           INT           NOT NULL,
    [CCalendarType]      NVARCHAR (2)  NOT NULL,
    [CStartDate]         NVARCHAR (4)  NOT NULL,
    [CEndDate]           NVARCHAR (4)  NOT NULL,
    [CTitle]             NVARCHAR (50) NOT NULL,
    [CWorkType]          NVARCHAR (10) NULL,
    [CRemark]            NTEXT         NULL,
    [CUpdStaff]          NVARCHAR (30) NULL,
    [CUpdDate]           DATETIME      NULL,
    [CFacilityCode]      NVARCHAR (20) NULL,
    [CFacilityStartDate] DATETIME      NULL,
    PRIMARY KEY CLUSTERED ([CId] ASC),
    CONSTRAINT [FKB1A25A9C898BFEF8] FOREIGN KEY ([CUpdStaff]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FKB1A25A9C9E3C3476] FOREIGN KEY ([CStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FKB1A25A9CB93F5F42] FOREIGN KEY ([CFacilityCode], [CFacilityStartDate]) REFERENCES [dbo].[TFacility] ([CDepartCode], [CDepartStartDate])
);


GO

CREATE TABLE [dbo].[TBranchAttendMaster] (
    [CBranchCode]      NVARCHAR (20) NOT NULL,
    [CBranchStartDate] DATETIME      NOT NULL,
    [CMonday]          BIT           NULL,
    [CTuesday]         BIT           NULL,
    [CWednesday]       BIT           NULL,
    [CThursday]        BIT           NULL,
    [CFriday]          BIT           NULL,
    [CSaturday]        BIT           NULL,
    [CSunday]          BIT           NULL,
    [CStartTime]       DATETIME      NULL,
    [CEndTime]         DATETIME      NULL,
    CONSTRAINT [PK__TBranchA__3C1CD5C57152C524] PRIMARY KEY CLUSTERED ([CBranchCode] ASC, [CBranchStartDate] ASC),
    CONSTRAINT [FKD95B1FD248562EA2] FOREIGN KEY ([CBranchCode], [CBranchStartDate]) REFERENCES [dbo].[TFacility] ([CDepartCode], [CDepartStartDate])
);


GO

CREATE TABLE [dbo].[TBizWeekly4DptC] (
    [CBizDate]        DATETIME      NOT NULL,
    [CGroupId]        NVARCHAR (20) NOT NULL,
    [CLastRegStaffId] NVARCHAR (30) NULL,
    [CLastRegTime]    DATETIME      NULL,
    [CRemark]         NTEXT         NULL,
    [CVisitor]        NTEXT         NULL,
    [CApprDocId]      BIGINT        NULL,
    PRIMARY KEY CLUSTERED ([CBizDate] ASC, [CGroupId] ASC),
    CONSTRAINT [FK_bwqkhg83f3k1lj1svg88u337p] FOREIGN KEY ([CLastRegStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_i63j63mdcf4f9qmunqdenu6b6] FOREIGN KEY ([CGroupId]) REFERENCES [dbo].[TDepartGroup] ([CGroupId])
);


GO

CREATE TABLE [dbo].[TApprMultiIngDoc] (
    [CMainDocId] BIGINT NOT NULL,
    [CTabIndex]  INT    NOT NULL,
    [CSubDocId]  BIGINT NULL,
    PRIMARY KEY CLUSTERED ([CMainDocId] ASC, [CTabIndex] ASC),
    CONSTRAINT [FK_33a4n6q210m6up65bmlay8peo] FOREIGN KEY ([CSubDocId]) REFERENCES [dbo].[TApprDoc] ([CDocId]),
    CONSTRAINT [FK_tqluw7o4llgyhdpffhi5q04rr] FOREIGN KEY ([CMainDocId]) REFERENCES [dbo].[TApprDoc] ([CDocId])
);


GO

CREATE TABLE [dbo].[TStaffInfo] (
    [CStaffId]          NVARCHAR (30)  NOT NULL,
    [CNationalityGroup] NVARCHAR (50)  NULL,
    [CNationalityCode]  NVARCHAR (50)  NULL,
    [CResidentNumber]   NVARCHAR (50)  NULL,
    [CSex]              NVARCHAR (10)  NULL,
    [CJoinCompanyGroup] NVARCHAR (50)  NULL,
    [CJoinCompanyCode]  NVARCHAR (50)  NULL,
    [CJob1Group]        NVARCHAR (50)  NULL,
    [CJob1Code]         NVARCHAR (50)  NULL,
    [CJob2Group]        NVARCHAR (50)  NULL,
    [CJob2Code]         NVARCHAR (50)  NULL,
    [CJob3Group]        NVARCHAR (50)  NULL,
    [CJob3Code]         NVARCHAR (50)  NULL,
    [CMainJob]          NVARCHAR (255) NULL,
    [CDirectlyGroup]    NVARCHAR (50)  NULL,
    [CDirectlyCode]     NVARCHAR (50)  NULL,
    [CJoinDate]         DATETIME       NULL,
    [CFirstJoinDate]    DATETIME       NULL,
    [CCalcRetireDate]   DATETIME       NULL,
    [CResignDate]       DATETIME       NULL,
    [CWorkStatusGroup]  NVARCHAR (50)  NULL,
    [CWorkStatusCode]   NVARCHAR (50)  NULL,
    [CHeadFamily]       NVARCHAR (10)  NULL,
    [CHomelandZip]      NVARCHAR (10)  NULL,
    [CHomelandAddress]  NVARCHAR (50)  NULL,
    [CHobby]            NVARCHAR (50)  NULL,
    [CAblity]           NVARCHAR (50)  NULL,
    [CAdobeTypeGroup]   NVARCHAR (50)  NULL,
    [CAdobeTypeCode]    NVARCHAR (50)  NULL,
    [CReligionGroup]    NVARCHAR (50)  NULL,
    [CReligionCode]     NVARCHAR (50)  NULL,
    [COwnCar]           BIT            NULL,
    [CCarNumber]        NVARCHAR (50)  NULL,
    [CCarName]          NVARCHAR (50)  NULL,
    [CMarried]          BIT            NULL,
    [CMarryDate]        DATETIME       NULL,
    [CPassportNumber]   NVARCHAR (50)  NULL,
    [CVisaNumber]       NVARCHAR (50)  NULL,
    [CVisaExpireDate]   DATETIME       NULL,
    [CArmyDutyGroup]    NVARCHAR (50)  NULL,
    [CArmyDutyCode]     NVARCHAR (50)  NULL,
    [CArmyTypeGroup]    NVARCHAR (50)  NULL,
    [CArmyTypeCode]     NVARCHAR (50)  NULL,
    [CArmyPart]         NVARCHAR (50)  NULL,
    [CArmyLevel]        NVARCHAR (50)  NULL,
    [CArmyNumber]       NVARCHAR (50)  NULL,
    [CArmyPeriod]       NVARCHAR (50)  NULL,
    [CArmyStartDate]    DATETIME       NULL,
    [CArmyEndDate]      DATETIME       NULL,
    [CArmyComment]      NVARCHAR (50)  NULL,
    [CHeight]           INT            NULL,
    [CWeight]           INT            NULL,
    [CMtype]            NVARCHAR (1)   NULL,
    [CMscore]           INT            NULL,
    [CBtype]            NVARCHAR (1)   NULL,
    [CBscore]           INT            NULL,
    [CTtype]            NVARCHAR (1)   NULL,
    [CTscore]           INT            NULL,
    [CItype]            NVARCHAR (1)   NULL,
    [CIscore]           INT            NULL,
    [CApprovalStatus]   NVARCHAR (15)  NULL,
    [CHeadFamilyGroup]  NVARCHAR (50)  NULL,
    [CHeadFamilyCode]   NVARCHAR (50)  NULL,
    CONSTRAINT [PK__TStaffIn__199AC62D4EC8A2F6] PRIMARY KEY CLUSTERED ([CStaffId] ASC),
    CONSTRAINT [FKB5C69BA16D75902] FOREIGN KEY ([CReligionGroup], [CReligionCode]) REFERENCES [dbo].[TCommonCode] ([CCodeGroup], [CCode]),
    CONSTRAINT [FKB5C69BA4C565142] FOREIGN KEY ([CArmyDutyGroup], [CArmyDutyCode]) REFERENCES [dbo].[TCommonCode] ([CCodeGroup], [CCode]),
    CONSTRAINT [FKB5C69BA62B6C9A2] FOREIGN KEY ([CDirectlyGroup], [CDirectlyCode]) REFERENCES [dbo].[TCommonCode] ([CCodeGroup], [CCode]),
    CONSTRAINT [FKB5C69BA66624082] FOREIGN KEY ([CJoinCompanyGroup], [CJoinCompanyCode]) REFERENCES [dbo].[TCommonCode] ([CCodeGroup], [CCode]),
    CONSTRAINT [FKB5C69BA73A13562] FOREIGN KEY ([CJob1Group], [CJob1Code]) REFERENCES [dbo].[TCommonCode] ([CCodeGroup], [CCode]),
    CONSTRAINT [FKB5C69BA75642582] FOREIGN KEY ([CJob2Group], [CJob2Code]) REFERENCES [dbo].[TCommonCode] ([CCodeGroup], [CCode]),
    CONSTRAINT [FKB5C69BA772715A2] FOREIGN KEY ([CJob3Group], [CJob3Code]) REFERENCES [dbo].[TCommonCode] ([CCodeGroup], [CCode]),
    CONSTRAINT [FKB5C69BA78CDFB42] FOREIGN KEY ([CAdobeTypeGroup], [CAdobeTypeCode]) REFERENCES [dbo].[TCommonCode] ([CCodeGroup], [CCode]),
    CONSTRAINT [FKB5C69BA7BDC342] FOREIGN KEY ([CWorkStatusGroup], [CWorkStatusCode]) REFERENCES [dbo].[TCommonCode] ([CCodeGroup], [CCode]),
    CONSTRAINT [FKB5C69BA84269DC2] FOREIGN KEY ([CArmyTypeGroup], [CArmyTypeCode]) REFERENCES [dbo].[TCommonCode] ([CCodeGroup], [CCode]),
    CONSTRAINT [FKB5C69BA9E3C3476] FOREIGN KEY ([CStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FKB5C69BAD996E5A2] FOREIGN KEY ([CNationalityGroup], [CNationalityCode]) REFERENCES [dbo].[TCommonCode] ([CCodeGroup], [CCode]),
    CONSTRAINT [FKB5C69BADCF01362] FOREIGN KEY ([CHeadFamilyGroup], [CHeadFamilyCode]) REFERENCES [dbo].[TCommonCode] ([CCodeGroup], [CCode])
);


GO

CREATE TABLE [dbo].[ParsingTime] (
    [message_name]    NVARCHAR (200) NOT NULL,
    [repository_name] NVARCHAR (100) NOT NULL,
    [startDateTime]   DATETIME       NULL,
    [endDateTime]     DATETIME       NULL,
    [parsingMiliSec]  BIGINT         NULL,
    [parsingSize]     BIGINT         NULL,
    [parsingEndType]  NVARCHAR (10)  NULL,
    PRIMARY KEY CLUSTERED ([message_name] ASC, [repository_name] ASC)
);


GO

CREATE TABLE [dbo].[TTestMBTI] (
    [CBranchCode]      NVARCHAR (20)  NOT NULL,
    [CBranchStartDate] DATETIME       NOT NULL,
    [CCode]            NVARCHAR (50)  NOT NULL,
    [CNo]              INT            NOT NULL,
    [CQuestionType]    NVARCHAR (15)  NOT NULL,
    [CQuestionNo]      INT            NOT NULL,
    [CAnswer]          NVARCHAR (255) NULL,
    PRIMARY KEY CLUSTERED ([CBranchCode] ASC, [CBranchStartDate] ASC, [CCode] ASC, [CNo] ASC, [CQuestionType] ASC, [CQuestionNo] ASC),
    CONSTRAINT [FK65F07ED01B890EC5] FOREIGN KEY ([CQuestionType], [CQuestionNo]) REFERENCES [dbo].[TMBTIQuestion] ([CType], [CNo]),
    CONSTRAINT [FK65F07ED07D4C7F9] FOREIGN KEY ([CBranchCode], [CBranchStartDate], [CCode], [CNo]) REFERENCES [dbo].[TTestInfo] ([CStdBranchCode], [CStdBranchStartDate], [CCode], [CNo])
);


GO

CREATE TABLE [dbo].[TApprInsteadSigner] (
    [CSignerId]       NVARCHAR (30) NOT NULL,
    [CSeq]            INT           NOT NULL,
    [CEnabled]        BIT           NULL,
    [CInsteaderId]    NVARCHAR (30) NULL,
    [CStartDate]      DATETIME      NOT NULL,
    [CEndDate]        DATETIME      NOT NULL,
    [CRegStaffId]     NVARCHAR (30) NULL,
    [CLastModStaffId] NVARCHAR (30) NULL,
    [CRegDate]        DATETIME      NULL,
    [CLastModDate]    DATETIME      NULL,
    PRIMARY KEY CLUSTERED ([CSignerId] ASC, [CSeq] ASC),
    CONSTRAINT [FK8E23AC2719E633C8] FOREIGN KEY ([CRegStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK8E23AC271D239AC5] FOREIGN KEY ([CInsteaderId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK8E23AC274C4F8966] FOREIGN KEY ([CSignerId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK8E23AC27A88D9330] FOREIGN KEY ([CLastModStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[TBizWeekly4Dpt] (
    [CBizDate]      DATETIME      NOT NULL,
    [CGroupId]      NVARCHAR (20) NOT NULL,
    [CBizCodeGroup] NVARCHAR (50) NOT NULL,
    [CBizCodeCode]  NVARCHAR (50) NOT NULL,
    [CBizPlan]      NTEXT         NULL,
    [CWriter]       NVARCHAR (30) NULL,
    [CRegTime]      DATETIME      NULL,
    [CLastTime]     DATETIME      NULL,
    [CApprDocId]    BIGINT        NULL,
    PRIMARY KEY CLUSTERED ([CBizDate] ASC, [CGroupId] ASC, [CBizCodeGroup] ASC, [CBizCodeCode] ASC),
    CONSTRAINT [FK_42q242qtxw1p65nmqppd0mccb] FOREIGN KEY ([CGroupId]) REFERENCES [dbo].[TDepartGroup] ([CGroupId]),
    CONSTRAINT [FK_ctio2xl76vs148j9bsygolkt2] FOREIGN KEY ([CBizCodeGroup], [CBizCodeCode]) REFERENCES [dbo].[TCommonCode] ([CCodeGroup], [CCode]),
    CONSTRAINT [FK_sba5w4uyvko9tfuvci25m1mhj] FOREIGN KEY ([CWriter]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[TComplaintPetitioner] (
    [CId]         BIGINT         IDENTITY (1, 1) NOT NULL,
    [CName]       NVARCHAR (50)  NOT NULL,
    [CMobileNo]   NVARCHAR (50)  NOT NULL,
    [CPassword]   NVARCHAR (255) NULL,
    [CEmail]      NVARCHAR (100) NULL,
    [CPostNo]     NVARCHAR (10)  NULL,
    [CAddress1]   NVARCHAR (200) NULL,
    [CAddress2]   NVARCHAR (200) NULL,
    [CRegDate]    DATETIME       NOT NULL,
    [CUpdDate]    DATETIME       NULL,
    [CPasswdInit] BIT            NULL,
    PRIMARY KEY CLUSTERED ([CId] ASC)
);


GO

CREATE TABLE [dbo].[TMailAutoReply] (
    [CStaffId]            NVARCHAR (30)  NOT NULL,
    [CReplyId]            INT            NOT NULL,
    [CEnabled]            BIT            NOT NULL,
    [CStartDateTime]      DATETIME       NOT NULL,
    [CEndDateTime]        DATETIME       NOT NULL,
    [CReplyTitle]         NVARCHAR (255) NOT NULL,
    [CWebContextRealPath] NVARCHAR (255) NULL,
    [CHtml]               NTEXT          NULL,
    PRIMARY KEY CLUSTERED ([CStaffId] ASC, [CReplyId] ASC)
);


GO

CREATE TABLE [dbo].[TFacilityLoginLevel] (
    [CStaffId]           NVARCHAR (30) NOT NULL,
    [CFacilityCode]      NVARCHAR (20) NOT NULL,
    [CFacilityStartDate] DATETIME      NOT NULL,
    [CLoginLevelCode]    NVARCHAR (5)  NOT NULL,
    [CAddedTime]         DATETIME      NOT NULL,
    PRIMARY KEY CLUSTERED ([CStaffId] ASC, [CFacilityCode] ASC, [CFacilityStartDate] ASC),
    CONSTRAINT [FKEA0B60129E3C3476] FOREIGN KEY ([CStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FKEA0B6012B93F5F42] FOREIGN KEY ([CFacilityCode], [CFacilityStartDate]) REFERENCES [dbo].[TFacility] ([CDepartCode], [CDepartStartDate])
);


GO

CREATE TABLE [dbo].[TBankAccount] (
    [CBrDepartCode]      NVARCHAR (20)  NOT NULL,
    [CBrDepartStartDate] DATETIME       NOT NULL,
    [CCode]              NVARCHAR (50)  NOT NULL,
    [CCommonGroupCode]   NVARCHAR (50)  NULL,
    [CCommonCode]        NVARCHAR (50)  NULL,
    [CAccountName]       NVARCHAR (255) NULL,
    [CAccountCode]       NVARCHAR (15)  NULL,
    [CStartBalance]      BIGINT         NULL,
    [CStartDate]         DATETIME       NULL,
    [CEnabled]           BIT            NULL,
    [CAccountType]       NVARCHAR (255) NULL,
    PRIMARY KEY CLUSTERED ([CBrDepartCode] ASC, [CBrDepartStartDate] ASC, [CCode] ASC),
    CONSTRAINT [FKB6A5CB5D2D35EBE2] FOREIGN KEY ([CBrDepartCode], [CBrDepartStartDate]) REFERENCES [dbo].[TFacility] ([CDepartCode], [CDepartStartDate]),
    CONSTRAINT [FKB6A5CB5DAFB5968C] FOREIGN KEY ([CAccountCode]) REFERENCES [dbo].[TAccountCode] ([CCode]),
    CONSTRAINT [FKB6A5CB5DC74495AF] FOREIGN KEY ([CCommonGroupCode], [CCommonCode]) REFERENCES [dbo].[TCommonCode] ([CCodeGroup], [CCode])
);


GO

CREATE TABLE [dbo].[TBranchSeason] (
    [CCode]              NVARCHAR (50)  NOT NULL,
    [CBsDepartCode]      NVARCHAR (20)  NOT NULL,
    [CBsDepartStartDate] DATETIME       NOT NULL,
    [CSeasonType]        NVARCHAR (15)  NOT NULL,
    [CName]              NVARCHAR (255) NULL,
    [CStartDate]         DATETIME       NULL,
    [CEndDate]           DATETIME       NULL,
    [CComment]           NTEXT          NULL,
    [CRegDate]           DATETIME       NULL,
    [CRegStaffId]        NVARCHAR (30)  NULL,
    [CApprovalStatus]    NVARCHAR (15)  NULL,
    PRIMARY KEY CLUSTERED ([CCode] ASC, [CBsDepartCode] ASC, [CBsDepartStartDate] ASC, [CSeasonType] ASC),
    CONSTRAINT [FKED9B19919E633C8] FOREIGN KEY ([CRegStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FKED9B199A3AC7C82] FOREIGN KEY ([CBsDepartCode], [CBsDepartStartDate]) REFERENCES [dbo].[TFacility] ([CDepartCode], [CDepartStartDate])
);


GO

CREATE TABLE [dbo].[TBranchSeasonTask] (
    [CBsCode]            NVARCHAR (50)  NOT NULL,
    [CBsDepartCode]      NVARCHAR (20)  NOT NULL,
    [CBsDepartStartDate] DATETIME       NOT NULL,
    [CBsSeasonType]      NVARCHAR (15)  NOT NULL,
    [CNo]                INT            NOT NULL,
    [CTaskName]          NVARCHAR (255) NULL,
    [CStartDate]         DATETIME       NULL,
    [CEndDate]           DATETIME       NULL,
    [CManagementShow]    BIT            NULL,
    [CComment]           NTEXT          NULL,
    [CRegDate]           DATETIME       NULL,
    [CRegStaffId]        NVARCHAR (30)  NULL,
    PRIMARY KEY CLUSTERED ([CBsCode] ASC, [CBsDepartCode] ASC, [CBsDepartStartDate] ASC, [CBsSeasonType] ASC, [CNo] ASC),
    CONSTRAINT [FKC12CE6BE19E633C8] FOREIGN KEY ([CRegStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FKC12CE6BEF4DB7B8D] FOREIGN KEY ([CBsCode], [CBsDepartCode], [CBsDepartStartDate], [CBsSeasonType]) REFERENCES [dbo].[TBranchSeason] ([CCode], [CBsDepartCode], [CBsDepartStartDate], [CSeasonType])
);


GO

CREATE TABLE [dbo].[tbl_branch_customers] (
    [branch_customer_idx] INT            IDENTITY (1, 1) NOT NULL,
    [head_customer_idx]   INT            NULL,
    [db_date]             DATETIME       NULL,
    [last_db_date]        DATETIME       NULL,
    [branch_code]         NVARCHAR (20)  NULL,
    [db_source_org]       NVARCHAR (30)  NULL,
    [db_source]           NVARCHAR (30)  NULL,
    [category]            INT            CONSTRAINT [DF_tbl_branch_customers_category] DEFAULT ((1)) NULL,
    [route1]              INT            NULL,
    [route2]              INT            NULL,
    [student_name]        NVARCHAR (30)  NULL,
    [gender]              NVARCHAR (50)  NULL,
    [parent_tel]          NVARCHAR (255) NULL,
    [student_tel]         NVARCHAR (255) NULL,
    [school_code]         NVARCHAR (50)  NULL,
    [school_name]         NVARCHAR (50)  NULL,
    [grade]               NVARCHAR (50)  NULL,
    [valid_status]        INT            NULL,
    [call1]               DATETIME       NULL,
    [call2]               DATETIME       NULL,
    [call3]               DATETIME       NULL,
    [call4]               DATETIME       NULL,
    [call5]               DATETIME       NULL,
    [call_memo]           NTEXT          NULL,
    [need_recall_yn]      CHAR (1)       CONSTRAINT [DF_tbl_customers_call_result] DEFAULT ('N') NULL,
    [meeting_memo]        NTEXT          NULL,
    [register_status]     INT            NULL,
    [first_payment_date]  DATETIME       NULL,
    [program_start_date]  DATETIME       NULL,
    [first_reg_program]   CHAR (1)       NULL,
    [counsel_count]       INT            NULL,
    [teaching_count]      INT            NULL,
    [unreg_reason]        INT            NULL,
    [ins_staff_code]      NVARCHAR (30)  NULL,
    [student_code]        NVARCHAR (30)  NULL,
    [ins_date]            DATETIME       NULL,
    [mod_date]            DATETIME       NULL,
    [del_yn]              CHAR (1)       CONSTRAINT [DF_tbl_customers_del_yn_1] DEFAULT ('N') NULL,
    CONSTRAINT [PK_tbl_customers] PRIMARY KEY CLUSTERED ([branch_customer_idx] ASC),
    CONSTRAINT [FK_tbl_branch_customers_tbl_head_customers] FOREIGN KEY ([head_customer_idx]) REFERENCES [dbo].[tbl_head_customers] ([head_customer_idx])
);


GO

CREATE TABLE [dbo].[TKnowreLessonReset] (
    [CUserId]         INT           NOT NULL,
    [CCurriculumId]   INT           NOT NULL,
    [CCurriculumType] NVARCHAR (50) NOT NULL,
    [CCoordsType]     NVARCHAR (50) NOT NULL,
    [CLessonId]       INT           NOT NULL,
    [CResetCount]     INT           NULL,
    [CRegDate]        DATETIME      NOT NULL,
    [CRegStaff]       NVARCHAR (30) NULL,
    [CEditDate]       DATETIME      NOT NULL,
    [CEditStaff]      NVARCHAR (30) NULL,
    PRIMARY KEY CLUSTERED ([CUserId] ASC, [CCurriculumId] ASC, [CCurriculumType] ASC, [CCoordsType] ASC, [CLessonId] ASC),
    CONSTRAINT [FK_osjeubbgxhltu2ertvlfruem6] FOREIGN KEY ([CRegStaff]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_qjhio4odawy8jkncbojaywo0l] FOREIGN KEY ([CEditStaff]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[otbl_Mager] (
    [mager_idx] INT           IDENTITY (1, 1) NOT NULL,
    [title]     NVARCHAR (30) NULL,
    [use_yn]    CHAR (1)      NULL,
    [sort]      INT           CONSTRAINT [DF_otbl_Mager_sort] DEFAULT ((0)) NULL,
    CONSTRAINT [PK_otbl_Mager] PRIMARY KEY CLUSTERED ([mager_idx] ASC)
);


GO

CREATE TABLE [dbo].[THpRecruitGroup] (
    [CGroupId]      INT           IDENTITY (1, 1) NOT NULL,
    [CName0]        NVARCHAR (50) NULL,
    [CName1]        NVARCHAR (50) NULL,
    [CName2]        NVARCHAR (50) NULL,
    [CName3]        NVARCHAR (50) NULL,
    [CName4]        NVARCHAR (50) NULL,
    [CEnabled]      BIT           NULL,
    [CDisplayIndex] INT           NOT NULL,
    PRIMARY KEY CLUSTERED ([CGroupId] ASC)
);


GO

CREATE TABLE [dbo].[TComponent] (
    [CComponentNo] BIGINT         IDENTITY (1, 1) NOT NULL,
    [CRegType]     NVARCHAR (255) NULL,
    [CWriterId]    NVARCHAR (30)  NULL,
    [CRegTime]     DATETIME       NULL,
    [CSubject]     NVARCHAR (255) NULL,
    [CComment]     NTEXT          NULL,
    [CAvgScore]    FLOAT (53)     NULL,
    [CReqComment]  NVARCHAR (255) NULL,
    [CStatus]      NVARCHAR (50)  NULL,
    CONSTRAINT [PK__TCompone__8D89C75875785BC3] PRIMARY KEY CLUSTERED ([CComponentNo] ASC),
    CONSTRAINT [FK4C1A5B09CBAA906F] FOREIGN KEY ([CWriterId]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[TBoardContentStatus] (
    [CStatusId]          NVARCHAR (50)  NOT NULL,
    [CBoardId]           NVARCHAR (20)  NOT NULL,
    [COrder]             INT            NULL,
    [CEnabled]           BIT            NULL,
    [CName0]             NVARCHAR (50)  NOT NULL,
    [CName1]             NVARCHAR (50)  NULL,
    [CName2]             NVARCHAR (50)  NULL,
    [CName3]             NVARCHAR (50)  NULL,
    [CName4]             NVARCHAR (50)  NULL,
    [CStyle]             NVARCHAR (255) NULL,
    [COnlyMgr]           BIT            NULL,
    [CHeadAppState]      BIT            NULL,
    [CReplyNo]           NVARCHAR (50)  NULL,
    [CMessage]           NVARCHAR (255) NULL,
    [CMessageToManager]  NVARCHAR (255) NULL,
    [CProcessRatio]      INT            NULL,
    [CDoneStatus]        BIT            NULL,
    [CMessage2]          NTEXT          NULL,
    [CMessageToManager2] NTEXT          NULL,
    [CTemplateCode]      NVARCHAR (10)  NULL,
    [CMsgMngTmpCode]     NVARCHAR (10)  NULL,
    PRIMARY KEY CLUSTERED ([CStatusId] ASC),
    CONSTRAINT [FKF5ECE7F935D89A81] FOREIGN KEY ([CBoardId]) REFERENCES [dbo].[TBoard] ([CBoardId])
);


GO

CREATE TABLE [dbo].[TWaitingRoom] (
    [CWaitingRoomNo] BIGINT        NOT NULL,
    [CComponentNo]   BIGINT        NOT NULL,
    [CWriterId]      NVARCHAR (30) NULL,
    [CRegDate]       DATETIME      NULL,
    PRIMARY KEY CLUSTERED ([CWaitingRoomNo] ASC, [CComponentNo] ASC),
    CONSTRAINT [FK5E687D444F3BF8] FOREIGN KEY ([CComponentNo]) REFERENCES [dbo].[TComponent] ([CComponentNo]),
    CONSTRAINT [FK5E687D4CBAA906F] FOREIGN KEY ([CWriterId]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[TDepartGroupMember] (
    [CGroupId]         NVARCHAR (20) NOT NULL,
    [CDepartCode]      NVARCHAR (20) NOT NULL,
    [CDepartStartDate] DATETIME      NOT NULL,
    [CCreaterId]       NVARCHAR (30) NULL,
    [CCreatedTime]     DATETIME      NULL,
    [CUpdaterId]       NVARCHAR (30) NULL,
    [CUpdatedTime]     DATETIME      NULL,
    PRIMARY KEY CLUSTERED ([CGroupId] ASC, [CDepartCode] ASC, [CDepartStartDate] ASC),
    CONSTRAINT [FK_7vkciwdtx1iip05d1ebykpnn4] FOREIGN KEY ([CCreaterId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_jsyfodh4bs8s87utjxabl521f] FOREIGN KEY ([CUpdaterId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK902637148D9611] FOREIGN KEY ([CDepartCode], [CDepartStartDate]) REFERENCES [dbo].[TDepartment] ([CDepartCode], [CDepartStartDate]),
    CONSTRAINT [FK902637170792C9A] FOREIGN KEY ([CGroupId]) REFERENCES [dbo].[TDepartGroup] ([CGroupId])
);


GO

CREATE TABLE [dbo].[TApprFolderDepartGrp] (
    [CFolderId]      INT           NOT NULL,
    [CDepartGroupId] NVARCHAR (20) NOT NULL,
    [COrder]         INT           NOT NULL,
    [CMaster]        BIT           NOT NULL,
    PRIMARY KEY CLUSTERED ([CFolderId] ASC, [CDepartGroupId] ASC),
    CONSTRAINT [FKCDFA37DE9DD26866] FOREIGN KEY ([CDepartGroupId]) REFERENCES [dbo].[TDepartGroup] ([CGroupId]),
    CONSTRAINT [FKCDFA37DED260A5E9] FOREIGN KEY ([CFolderId]) REFERENCES [dbo].[TApprFolder] ([CFolderId])
);


GO

CREATE TABLE [dbo].[TBoardType] (
    [CTypeId] NVARCHAR (20)  NOT NULL,
    [CName]   NVARCHAR (100) NULL,
    PRIMARY KEY CLUSTERED ([CTypeId] ASC)
);


GO

CREATE TABLE [dbo].[tbl_appointment] (
    [appointment_idx]       INT            IDENTITY (1, 1) NOT NULL,
    [type]                  INT            NULL,
    [start_date]            DATETIME       NULL,
    [end_date]              DATETIME       NULL,
    [all_day_yn]            CHAR (1)       NULL,
    [title]                 NVARCHAR (255) NULL,
    [location]              NVARCHAR (255) NULL,
    [description]           NVARCHAR (MAX) NULL,
    [status]                INT            CONSTRAINT [DF_tbl_appointmemt_status] DEFAULT ((0)) NULL,
    [label]                 INT            NULL,
    [resource_id]           INT            NULL,
    [resource_ids]          NVARCHAR (MAX) NULL,
    [Reminder_Info]         NVARCHAR (MAX) NULL,
    [Recurrence_Info]       NVARCHAR (MAX) NULL,
    [ins_date]              DATETIME       NULL,
    [mod_date]              DATETIME       NULL,
    [ins_staff_code]        NVARCHAR (30)  NULL,
    [del_yn]                CHAR (1)       CONSTRAINT [DF_tbl_meeting_del_yn] DEFAULT ('N') NULL,
    [appointment_cancel_yn] CHAR (1)       CONSTRAINT [DF_tbl_meeting_con_status] DEFAULT ('N') NULL,
    [customer_idx]          INT            NULL,
    [branch_code]           NVARCHAR (20)  NULL,
    [custom_field1]         NVARCHAR (MAX) NULL,
    [custom_field2]         NVARCHAR (MAX) NULL,
    CONSTRAINT [PK_tbl_meeting] PRIMARY KEY CLUSTERED ([appointment_idx] ASC)
);


GO

CREATE TABLE [dbo].[TPdsDepartPerm] (
    [COwnerStaffId]        NVARCHAR (30) NOT NULL,
    [CFolderId]            INT           NOT NULL,
    [CDepartGroupId]       NVARCHAR (20) NOT NULL,
    [CAllowAccessFolder]   BIT           NULL,
    [CAllowCreateFile]     BIT           NULL,
    [CAllowModifyFileMine] BIT           NULL,
    [CAllowModifyFileAll]  BIT           NULL,
    [CAllowDeleteFileMine] BIT           NULL,
    [CAllowDeleteFileAll]  BIT           NULL,
    [CApplyOrder]          INT           NULL,
    [CAllowViewLog]        BIT           NULL,
    PRIMARY KEY CLUSTERED ([COwnerStaffId] ASC, [CFolderId] ASC, [CDepartGroupId] ASC),
    CONSTRAINT [FK332C076F9DD26866] FOREIGN KEY ([CDepartGroupId]) REFERENCES [dbo].[TDepartGroup] ([CGroupId]),
    CONSTRAINT [FK332C076FFA664AA8] FOREIGN KEY ([COwnerStaffId], [CFolderId]) REFERENCES [dbo].[TPdsFolder] ([COwnerStaffId], [CFolderId])
);


GO

CREATE TABLE [dbo].[TPersonalRankPeriod] (
    [CManagerCode] NVARCHAR (50) NOT NULL,
    [CYearPeriod]  NVARCHAR (5)  NOT NULL,
    [CFlag]        NVARCHAR (1)  NOT NULL,
    [CValue]       FLOAT (53)    NULL,
    [CRank]        INT           NULL,
    [CClass]       NVARCHAR (5)  NULL,
    [CTotal_Avg]   FLOAT (53)    NULL,
    [CS_Avg]       FLOAT (53)    NULL,
    [CA_Avg]       FLOAT (53)    NULL,
    [CB_Avg]       FLOAT (53)    NULL,
    [CC_Avg]       FLOAT (53)    NULL,
    [CD_Avg]       FLOAT (53)    NULL,
    [CF_Avg]       FLOAT (53)    NULL,
    CONSTRAINT [PK_TPersonalRankPeriod] PRIMARY KEY CLUSTERED ([CManagerCode] ASC, [CYearPeriod] ASC, [CFlag] ASC)
);


GO

CREATE TABLE [dbo].[TTestSurvey] (
    [CBranchCode]      NVARCHAR (20)  NOT NULL,
    [CBranchStartDate] DATETIME       NOT NULL,
    [CCode]            NVARCHAR (50)  NOT NULL,
    [CNo]              INT            NOT NULL,
    [CQuestionNo]      INT            NOT NULL,
    [CAnswer]          NVARCHAR (255) NULL,
    PRIMARY KEY CLUSTERED ([CBranchCode] ASC, [CBranchStartDate] ASC, [CCode] ASC, [CNo] ASC, [CQuestionNo] ASC),
    CONSTRAINT [FKB8E626007D4C7F9] FOREIGN KEY ([CBranchCode], [CBranchStartDate], [CCode], [CNo]) REFERENCES [dbo].[TTestInfo] ([CStdBranchCode], [CStdBranchStartDate], [CCode], [CNo]),
    CONSTRAINT [FKB8E62600EA7E5972] FOREIGN KEY ([CQuestionNo]) REFERENCES [dbo].[TSurveyQuestion] ([CNo])
);


GO

CREATE TABLE [dbo].[tb_QnaUserInfo] (
    [it_QnaUserInfoIdx]  INT            NOT NULL,
    [st_CStaffId]        NVARCHAR (30)  NOT NULL,
    [st_GcmKey]          NVARCHAR (200) NULL,
    [st_DeviceOs]        CHAR (1)       NULL,
    [dt_QnaUserInfoMake] DATETIME       NULL,
    [st_AlarmTime]       NVARCHAR (500) NULL,
    CONSTRAINT [PK_tb_QnaUserInfo] PRIMARY KEY CLUSTERED ([it_QnaUserInfoIdx] ASC),
    CONSTRAINT [FK_tb_QnaUserInfo_TStaff] FOREIGN KEY ([st_CStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[tbl_head_customers] (
    [head_customer_idx]       INT            IDENTITY (1, 1) NOT NULL,
    [db_source]               NVARCHAR (30)  NULL,
    [student_name]            NVARCHAR (50)  NULL,
    [gender]                  NVARCHAR (50)  NULL,
    [parent_tel]              NVARCHAR (255) NULL,
    [student_tel]             NVARCHAR (255) NULL,
    [school_code]             NVARCHAR (50)  NULL,
    [school_name]             NVARCHAR (50)  NULL,
    [grade]                   NVARCHAR (50)  NULL,
    [valid_status]            INT            NULL,
    [whois]                   INT            CONSTRAINT [DF_tbl_head_customers_whois] DEFAULT ((2)) NULL,
    [last_linked_branch_code] NVARCHAR (50)  NULL,
    [direct_fc]               NVARCHAR (20)  NULL,
    [branch_link_fail_reason] INT            NULL,
    [connected]               NVARCHAR (100) NULL,
    [vlt_date]                DATETIME       NULL,
    [reg_start_date]          DATETIME       NULL,
    [total_paied_amount]      INT            NULL,
    [deferred_amount]         INT            NULL,
    [donot_call_yn]           CHAR (1)       CONSTRAINT [DF_tbl_head_customers_수신거부_yn] DEFAULT ('N') NULL,
    [need_call_type]          INT            CONSTRAINT [DF_tbl_head_customers_need_call_type] DEFAULT ((-1)) NULL,
    [call1]                   DATETIME       NULL,
    [call1_person]            NVARCHAR (50)  NULL,
    [call2]                   DATETIME       NULL,
    [call2_person]            NVARCHAR (50)  NULL,
    [call3]                   DATETIME       NULL,
    [call3_person]            NVARCHAR (50)  NULL,
    [call4]                   DATETIME       NULL,
    [call4_person]            NVARCHAR (50)  NULL,
    [call5]                   DATETIME       NULL,
    [call5_person]            NVARCHAR (50)  NULL,
    [call6]                   DATETIME       NULL,
    [call6_person]            NVARCHAR (50)  NULL,
    [call7]                   DATETIME       NULL,
    [call7_person]            NVARCHAR (50)  NULL,
    [call8]                   DATETIME       NULL,
    [call8_person]            NVARCHAR (50)  NULL,
    [call9]                   DATETIME       NULL,
    [call9_person]            NVARCHAR (50)  NULL,
    [call10]                  DATETIME       NULL,
    [call10_person]           NVARCHAR (50)  NULL,
    [call_memo_share]         NTEXT          NULL,
    [call_memo_private]       NTEXT          NULL,
    [ins_staff_code]          NVARCHAR (30)  NULL,
    [ins_date]                DATETIME       NULL,
    [upd_date]                DATETIME       NULL,
    [del_yn]                  CHAR (1)       NULL,
    CONSTRAINT [PK_tbl_customers_1] PRIMARY KEY CLUSTERED ([head_customer_idx] ASC)
);


GO

CREATE TABLE [dbo].[TMailForward] (
    [CMailAddress] NVARCHAR (100) NOT NULL,
    [CToStaffId]   NVARCHAR (30)  NOT NULL,
    [CRegStaffId]  NVARCHAR (30)  NULL,
    [CRegTime]     DATETIME       NULL,
    [CAllowSend]   BIT            NULL,
    PRIMARY KEY CLUSTERED ([CMailAddress] ASC, [CToStaffId] ASC),
    CONSTRAINT [FK_3umxc7xt51nts9apyv7ic8x7s] FOREIGN KEY ([CToStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_4u543fc6g4aidni2x1iiipsde] FOREIGN KEY ([CRegStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_8c1skj2dwd88ejwmfhtufrmil] FOREIGN KEY ([CMailAddress]) REFERENCES [dbo].[TMailForwardMaster] ([CMailAddress])
);


GO

CREATE TABLE [dbo].[TTradeBillDetail] (
    [CTcDepartCode]      NVARCHAR (20) NOT NULL,
    [CTcDepartStartDate] DATETIME      NOT NULL,
    [CCollectNo]         INT           NOT NULL,
    [CDetailNo]          INT           NOT NULL,
    [CCollecStatus]      NVARCHAR (15) NULL,
    [CCollecDate]        DATETIME      NULL,
    [CPayType]           NVARCHAR (15) NULL,
    [CBaDepartCode]      NVARCHAR (20) NULL,
    [CBaDepartStartDate] DATETIME      NULL,
    [CBaCode]            NVARCHAR (50) NULL,
    [CPayPrice]          INT           NULL,
    [CCollecPrice]       INT           NULL,
    [CDefaultPrice]      INT           NULL,
    [CRegDate]           DATETIME      NULL,
    [CRegStaffId]        NVARCHAR (30) NULL,
    PRIMARY KEY CLUSTERED ([CTcDepartCode] ASC, [CTcDepartStartDate] ASC, [CCollectNo] ASC, [CDetailNo] ASC),
    CONSTRAINT [FK_TTradeBillCollect_TTradeBillDetail] FOREIGN KEY ([CTcDepartCode], [CTcDepartStartDate], [CCollectNo]) REFERENCES [dbo].[TTradeBillCollect] ([CBranchCode], [CBranchStartDate], [CCollectNo]),
    CONSTRAINT [FK9CD3ACC819E633C8] FOREIGN KEY ([CRegStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK9CD3ACC8A4102632] FOREIGN KEY ([CBaDepartCode], [CBaDepartStartDate], [CBaCode]) REFERENCES [dbo].[TBankAccount] ([CBrDepartCode], [CBrDepartStartDate], [CCode])
);


GO

CREATE TABLE [dbo].[VirtualUserTable] (
    [user]           NVARCHAR (64)  NOT NULL,
    [domain]         NVARCHAR (255) NOT NULL,
    [target_address] NVARCHAR (255) NOT NULL,
    [master_domain]  NVARCHAR (50)  NOT NULL,
    [staff_code]     NVARCHAR (20)  NOT NULL,
    [enabled]        BIT            DEFAULT ((1)) NOT NULL,
    [staff_type]     NVARCHAR (20)  NULL,
    PRIMARY KEY CLUSTERED ([user] ASC, [domain] ASC)
);


GO

CREATE TABLE [dbo].[TManagementResult_CONVERT] (
    [CStDepartCode]      NVARCHAR (20)  NOT NULL,
    [CStDepartStartDate] DATETIME       NOT NULL,
    [CStCode]            NVARCHAR (50)  NOT NULL,
    [CManageDate]        VARCHAR (30)   NULL,
    [CVltType]           INT            NULL,
    [CCommonGroupCode]   VARCHAR (30)   NULL,
    [CCommonCode]        NVARCHAR (50)  NULL,
    [CMangementComment]  VARCHAR (30)   NULL,
    [CTutoringComment]   VARCHAR (30)   NULL,
    [CComponentNo]       BIGINT         NULL,
    [CStartTime]         DATETIME       NULL,
    [CEndTime]           DATETIME       NULL,
    [CCounselComment]    VARCHAR (30)   NULL,
    [CComponentScore]    INT            NULL,
    [CParentMethod]      NVARCHAR (15)  NULL,
    [CParentSide]        NVARCHAR (15)  NULL,
    [CParentSubject]     NVARCHAR (255) NULL,
    [CParentComment]     VARCHAR (30)   NULL,
    [CComment]           NVARCHAR (255) NULL,
    [CRegDate]           DATETIME       NULL,
    [CRegStaffId]        NVARCHAR (30)  NULL,
    [CApprovalStatus]    NVARCHAR (15)  NULL
);


GO

CREATE TABLE [dbo].[TSalaryPlanMonth] (
    [CStaffId]        NVARCHAR (30) NOT NULL,
    [CYear]           INT           NOT NULL,
    [CMonth]          INT           NOT NULL,
    [CSalaryType]     NVARCHAR (50) NULL,
    [CSalaryMain]     BIGINT        NULL,
    [CSalaryBonus]    BIGINT        NULL,
    [CSalaryExtra]    BIGINT        NULL,
    [CSalaryHourly]   BIGINT        NULL,
    [CRetirementFund] BIGINT        NULL,
    PRIMARY KEY CLUSTERED ([CStaffId] ASC, [CYear] ASC, [CMonth] ASC),
    CONSTRAINT [FKFCF277397AE1B1D3] FOREIGN KEY ([CStaffId], [CYear]) REFERENCES [dbo].[TSalaryPlanYear] ([CStaffId], [CYear])
);


GO

CREATE TABLE [dbo].[TManagementProfile] (
    [CStDepartCode]      NVARCHAR (20)  NOT NULL,
    [CStDepartStartDate] DATETIME       NOT NULL,
    [CStCode]            NVARCHAR (50)  NOT NULL,
    [CNo]                INT            NOT NULL,
    [CCommonGroupCode]   NVARCHAR (50)  NOT NULL,
    [CCommonCode]        NVARCHAR (50)  NOT NULL,
    [CRegDate]           DATETIME       NULL,
    [CComment]           NVARCHAR (255) NULL,
    [CRegStaffId]        NVARCHAR (30)  NULL,
    [CApprovalStatus]    NVARCHAR (15)  NULL,
    PRIMARY KEY CLUSTERED ([CStDepartCode] ASC, [CStDepartStartDate] ASC, [CStCode] ASC, [CNo] ASC, [CCommonGroupCode] ASC, [CCommonCode] ASC),
    CONSTRAINT [FK4AEAD9F219E633C8] FOREIGN KEY ([CRegStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK4AEAD9F26F88FD24] FOREIGN KEY ([CStDepartCode], [CStDepartStartDate], [CStCode]) REFERENCES [dbo].[TStudent] ([CBranchCode], [CBranchStartDate], [CCode]),
    CONSTRAINT [FK4AEAD9F2C74495AF] FOREIGN KEY ([CCommonGroupCode], [CCommonCode]) REFERENCES [dbo].[TCommonCode] ([CCodeGroup], [CCode])
);


GO

CREATE TABLE [dbo].[tb_MktResultFreeSet] (
    [it_MktResultFreeSetIdx]   INT             IDENTITY (1, 1) NOT NULL,
    [st_StaffCode]             NVARCHAR (50)   NULL,
    [st_MktResultFreeSetTitle] NVARCHAR (500)  NULL,
    [vr_MktResultFreeSetData]  VARBINARY (MAX) NULL,
    [dt_MktResultFreeSetMake]  DATETIME        NULL,
    CONSTRAINT [PK_tb_MktResultFreeSet] PRIMARY KEY CLUSTERED ([it_MktResultFreeSetIdx] ASC)
);


GO

CREATE TABLE [dbo].[THpRecruitAppRemark] (
    [CNoticeId]    BIGINT         NOT NULL,
    [CApplicantId] BIGINT         NOT NULL,
    [CStaffId]     NVARCHAR (30)  NOT NULL,
    [CRegDateTime] DATETIME       NOT NULL,
    [CGwStaffId]   NVARCHAR (255) NULL,
    [CGwStaffName] NVARCHAR (255) NULL,
    [CRemark]      NTEXT          NULL,
    PRIMARY KEY CLUSTERED ([CNoticeId] ASC, [CApplicantId] ASC, [CStaffId] ASC, [CRegDateTime] ASC),
    CONSTRAINT [FK_5ef61frtbbi1g59uwco49btyh] FOREIGN KEY ([CNoticeId], [CApplicantId]) REFERENCES [dbo].[THpRecruitApp] ([CNoticeId], [CApplicantId]),
    CONSTRAINT [FK_8bnr8cfqjwdnrpkyuis47orur] FOREIGN KEY ([CStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[TTradeRoyaltyMonth] (
    [CBranchCode]        NVARCHAR (20) NOT NULL,
    [CBranchStartDate]   DATETIME      NOT NULL,
    [CRoyaltyMonth]      DATETIME      NOT NULL,
    [CRoyaltyStatus]     NVARCHAR (15) NULL,
    [CSalesTotal]        INT           NULL,
    [CSalesCounsel]      INT           NULL,
    [CSalesTutoring]     INT           NULL,
    [CRoyaltyTotal]      INT           NULL,
    [CRoyaltyCounsel]    INT           NULL,
    [CRoyaltyTutoring]   INT           NULL,
    [CBelongCounsel]     INT           NULL,
    [CBelongInstitute]   INT           NULL,
    [CRequestDate]       DATETIME      NULL,
    [CRequestStaffId]    NVARCHAR (30) NULL,
    [CApprovalStatus]    NVARCHAR (15) NULL,
    [CTdRequireDate]     DATETIME      NULL,
    [CTdDepartCode]      NVARCHAR (20) NULL,
    [CTdDepartStartDate] DATETIME      NULL,
    [CTdTradeNo]         INT           NULL,
    [CTdBranchCode]      NVARCHAR (20) NULL,
    [CTdBranchStartDate] DATETIME      NULL,
    [CDetailNo]          INT           NULL,
    [CSalesTest]         INT           NULL,
    [CRoyaltyTest]       INT           NULL,
    [CSalesOther]        INT           NULL,
    [CRoyaltyOther]      INT           NULL,
    [CConfirmDate]       DATETIME      NULL,
    [CConfirmStaffId]    NVARCHAR (30) NULL,
    [CRoyaltySms]        INT           NULL,
    PRIMARY KEY CLUSTERED ([CBranchCode] ASC, [CBranchStartDate] ASC, [CRoyaltyMonth] ASC),
    CONSTRAINT [FK_llxnvw5lidogd3u8sovijtomx] FOREIGN KEY ([CConfirmStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK13F9CBA4313D52F0] FOREIGN KEY ([CTdRequireDate], [CTdDepartCode], [CTdDepartStartDate], [CTdTradeNo], [CTdBranchCode], [CTdBranchStartDate], [CDetailNo]) REFERENCES [dbo].[TTradeDetail] ([CRequireDate], [CTiDepartCode], [CTiDepartStartDate], [CTradeNo], [CBranchCode], [CBranchStartDate], [CDetailNo]),
    CONSTRAINT [FK13F9CBA448562EA2] FOREIGN KEY ([CBranchCode], [CBranchStartDate]) REFERENCES [dbo].[TFacility] ([CDepartCode], [CDepartStartDate]),
    CONSTRAINT [FK13F9CBA46026CFED] FOREIGN KEY ([CRequestStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[TOpenWeatherNow] (
    [CCity]            INT           NOT NULL,
    [CToday]           DATETIME      NOT NULL,
    [CNowTemp]         FLOAT (53)    NULL,
    [CMinTemp]         FLOAT (53)    NULL,
    [CMaxTemp]         FLOAT (53)    NULL,
    [CHumidity]        INT           NULL,
    [CPressure]        FLOAT (53)    NULL,
    [CWindSpeed]       FLOAT (53)    NULL,
    [CWindDirect]      NVARCHAR (4)  NULL,
    [CClouds]          INT           NULL,
    [CVisibility]      INT           NULL,
    [CPrecipitation]   FLOAT (53)    NULL,
    [CPrecipitUnit]    NVARCHAR (10) NULL,
    [CPrecipitMode]    NVARCHAR (10) NULL,
    [CWeatherCondName] NVARCHAR (20) NULL,
    [CWeatherCondIcon] NVARCHAR (10) NULL,
    [CLastApiTime]     DATETIME      NULL,
    [CLastUpdateTime]  DATETIME      NULL,
    [CSunRise]         DATETIME      NULL,
    [CSunSet]          DATETIME      NULL,
    [CLon]             FLOAT (53)    NULL,
    [CLat]             FLOAT (53)    NULL,
    PRIMARY KEY CLUSTERED ([CCity] ASC, [CToday] ASC),
    CONSTRAINT [FK_e1djcexatoobpw5pk8nfu9pn1] FOREIGN KEY ([CCity]) REFERENCES [dbo].[TOpenWeatherCity] ([CId])
);


GO

CREATE TABLE [dbo].[TApprRelativeDoc] (
    [CDocId]         BIGINT        NOT NULL,
    [CRelativeDocId] BIGINT        NOT NULL,
    [CDisplayOrder]  INT           NOT NULL,
    [CType]          NVARCHAR (10) NULL,
    [CFixed]         BIT           NULL,
    PRIMARY KEY CLUSTERED ([CDocId] ASC, [CRelativeDocId] ASC),
    CONSTRAINT [FK19A2B0A718CF030D] FOREIGN KEY ([CRelativeDocId]) REFERENCES [dbo].[TApprDoc] ([CDocId]),
    CONSTRAINT [FK19A2B0A7F064EB59] FOREIGN KEY ([CDocId]) REFERENCES [dbo].[TApprDoc] ([CDocId])
);


GO

CREATE TABLE [dbo].[TApprStaffLine] (
    [CLineId]        BIGINT        IDENTITY (1, 1) NOT NULL,
    [COwnerId]       NVARCHAR (30) NULL,
    [CName]          NVARCHAR (50) NOT NULL,
    [COrder]         INT           NULL,
    [CConsultAtOnce] BIT           NULL,
    [CIsDefault]     BIT           NULL,
    PRIMARY KEY CLUSTERED ([CLineId] ASC),
    CONSTRAINT [FKD9CA538FD078BB89] FOREIGN KEY ([COwnerId]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[TDreamLineSms] (
    [CSeq]             BIGINT        IDENTITY (1, 1) NOT NULL,
    [CDepartCode]      NVARCHAR (20) NULL,
    [CDepartStartDate] DATETIME      NULL,
    [CPhone]           NVARCHAR (20) NOT NULL,
    [CInsDate]         DATETIME      NULL,
    PRIMARY KEY CLUSTERED ([CSeq] ASC),
    CONSTRAINT [FK_u0dtunqtrq9c4hhpehx7f22s] FOREIGN KEY ([CDepartCode], [CDepartStartDate]) REFERENCES [dbo].[TFacility] ([CDepartCode], [CDepartStartDate])
);


GO

CREATE TABLE [dbo].[TSmsSentence] (
    [CId]                BIGINT         IDENTITY (1, 1) NOT NULL,
    [CTitle]             NVARCHAR (50)  NOT NULL,
    [CBody]              NTEXT          NULL,
    [CRegStaff]          NVARCHAR (30)  NULL,
    [CRegTime]           DATETIME       NULL,
    [CUpdStaff]          NVARCHAR (30)  NULL,
    [CUpdTime]           DATETIME       NULL,
    [CShared]            BIT            NULL,
    [CFacilityCode]      NVARCHAR (20)  NULL,
    [CFacilityStartDate] DATETIME       NULL,
    [CRegStaffId]        NVARCHAR (30)  NULL,
    [CUpdStaffId]        NVARCHAR (30)  NULL,
    [CReplyNo]           NVARCHAR (100) NULL,
    PRIMARY KEY CLUSTERED ([CId] ASC),
    CONSTRAINT [FK_19sbh0iax7oh7o5piktr2dlk4] FOREIGN KEY ([CRegStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_4pa49nerr33x9ivhi0mectaqi] FOREIGN KEY ([CUpdStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_bik81strpp2wjbnjaifo9lx59] FOREIGN KEY ([CRegStaff]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_e1k3h24hex7cy0wlenkneiec3] FOREIGN KEY ([CFacilityCode], [CFacilityStartDate]) REFERENCES [dbo].[TFacility] ([CDepartCode], [CDepartStartDate]),
    CONSTRAINT [FK_mjihsexipbwwnv9ta4lnhh6lu] FOREIGN KEY ([CUpdStaff]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[TSaleProofFile] (
    [CProofSeq]  BIGINT NOT NULL,
    [CFile]      BIGINT NOT NULL,
    [CFileIndex] INT    NULL,
    [CIsHidden]  BIT    NULL,
    PRIMARY KEY CLUSTERED ([CProofSeq] ASC, [CFile] ASC),
    CONSTRAINT [FK_2k3len7u76vl5e2meh3ewbjv] FOREIGN KEY ([CProofSeq]) REFERENCES [dbo].[TSaleProof] ([CProofSeq]),
    CONSTRAINT [FK_pjvcgy5w4s9ohtlc4u31ovbdk] FOREIGN KEY ([CFile]) REFERENCES [dbo].[TFile] ([CFileId])
);


GO

CREATE TABLE [dbo].[TOtherSale] (
    [CSaleSeq]           BIGINT         IDENTITY (1, 1) NOT NULL,
    [CDepartCode]        NVARCHAR (20)  NULL,
    [CDepartStartDate]   DATETIME       NULL,
    [CSateDate]          DATETIME       NULL,
    [CSaleTypeGroupCode] NVARCHAR (50)  NULL,
    [CSaleTypeCode]      NVARCHAR (50)  NULL,
    [CAmount]            INT            NULL,
    [CRemark]            NVARCHAR (255) NULL,
    [CRoyalty]           INT            NULL,
    [CFixRoyalty]        INT            NULL,
    [CSaleProof]         BIGINT         NULL,
    [CStudentName]       NVARCHAR (255) NULL,
    [CGrade]             NVARCHAR (50)  NULL,
    [CManagerName]       NVARCHAR (255) NULL,
    [CCommas]            INT            NULL,
    [CStBranchCode]      NVARCHAR (20)  NULL,
    [CStBranchStartDate] DATETIME       NULL,
    [CStCode]            NVARCHAR (50)  NULL,
    PRIMARY KEY CLUSTERED ([CSaleSeq] ASC),
    CONSTRAINT [FK_dk4152pv3l0c5o82b9t6luwbj] FOREIGN KEY ([CDepartCode], [CDepartStartDate]) REFERENCES [dbo].[TFacility] ([CDepartCode], [CDepartStartDate]),
    CONSTRAINT [FK_j58cddatm6ecctq5lyge6x66c] FOREIGN KEY ([CSaleProof]) REFERENCES [dbo].[TSaleProof] ([CProofSeq]),
    CONSTRAINT [FK_k9qp2297ivd979bu43f3lvd1y] FOREIGN KEY ([CSaleTypeGroupCode], [CSaleTypeCode]) REFERENCES [dbo].[TCommonCode] ([CCodeGroup], [CCode]),
    CONSTRAINT [FK_rcn3vsjy1yrumynf68nvt7nwt] FOREIGN KEY ([CStBranchCode], [CStBranchStartDate], [CStCode]) REFERENCES [dbo].[TStudent] ([CBranchCode], [CBranchStartDate], [CCode])
);


GO

CREATE TABLE [dbo].[TMemberTrainerHistory] (
    [CRegDateTime]     DATETIME       NOT NULL,
    [CDepartCode]      NVARCHAR (20)  NULL,
    [CDepartStartDate] DATETIME       NULL,
    [CMemberCode]      NVARCHAR (50)  NULL,
    [CHelthStaffType]  NVARCHAR (255) NULL,
    [CStaff]           NVARCHAR (30)  NULL,
    [CStartDate]       DATETIME       NULL,
    [CEndDate]         DATETIME       NULL,
    [CComment]         NVARCHAR (255) NULL,
    PRIMARY KEY CLUSTERED ([CRegDateTime] ASC),
    CONSTRAINT [FK_iijkmego63vn91twxalb45ysu] FOREIGN KEY ([CStaff]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_pabuf2xvsf8bb6y1vkeqe0009] FOREIGN KEY ([CDepartCode], [CDepartStartDate], [CMemberCode]) REFERENCES [dbo].[TMember] ([CDepartCode], [CDepartStartDate], [CMemberCode])
);


GO

CREATE TABLE [dbo].[TPartyTable] (
    [CPartyTabIeSeq] INT           IDENTITY (1, 1) NOT NULL,
    [CReservedDate]  DATETIME      NOT NULL,
    [CParty]         INT           NULL,
    [CStartTime]     DATETIME      NOT NULL,
    [CEndTime]       DATETIME      NOT NULL,
    [CTrainer]       NVARCHAR (30) NULL,
    [CMaxPeople]     INT           NULL,
    PRIMARY KEY CLUSTERED ([CPartyTabIeSeq] ASC),
    CONSTRAINT [FK_ltd5tvao0961o2hrelfrvl73y] FOREIGN KEY ([CParty]) REFERENCES [dbo].[TParty] ([CPartySeq]),
    CONSTRAINT [FK_ngvm7vt4rqlnxbvvi32ho8hxr] FOREIGN KEY ([CTrainer]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[TAddressFolder] (
    [CFolderId]       BIGINT         IDENTITY (1, 1) NOT NULL,
    [COwnerStaffId]   NVARCHAR (255) NULL,
    [CDepth]          INT            NOT NULL,
    [CName0]          NVARCHAR (50)  NOT NULL,
    [CName1]          NVARCHAR (50)  NULL,
    [CName2]          NVARCHAR (50)  NULL,
    [CName3]          NVARCHAR (50)  NULL,
    [CName4]          NVARCHAR (50)  NULL,
    [CDisplayIndex]   INT            NULL,
    [CRemark]         NVARCHAR (255) NULL,
    [CTempInt0]       INT            NULL,
    [CTempInt1]       INT            NULL,
    [CTempInt2]       INT            NULL,
    [CParentFolderId] BIGINT         NULL,
    [CTempStr0]       NVARCHAR (255) NULL,
    [CTempStr1]       NVARCHAR (255) NULL,
    [CTempStr2]       NVARCHAR (255) NULL,
    PRIMARY KEY CLUSTERED ([CFolderId] ASC),
    CONSTRAINT [FK9CF358E4E78FF27] FOREIGN KEY ([CParentFolderId]) REFERENCES [dbo].[TAddressFolder] ([CFolderId])
);


GO

CREATE TABLE [dbo].[TMenuPermLoginLevel] (
    [CMenuId]         NVARCHAR (50) NOT NULL,
    [CLoginLevelCode] NVARCHAR (20) NOT NULL,
    [CAccessAll]      BIT           NULL,
    [CAccessMine]     BIT           NULL,
    [CCreateAll]      BIT           NULL,
    [CCreateMine]     BIT           NULL,
    [CModifyAll]      BIT           NULL,
    [CModifyMine]     BIT           NULL,
    [CDeleteAll]      BIT           NULL,
    [CDeleteMine]     BIT           NULL,
    PRIMARY KEY CLUSTERED ([CMenuId] ASC, [CLoginLevelCode] ASC),
    CONSTRAINT [FKFBD3B75EE3BB6C4A] FOREIGN KEY ([CMenuId]) REFERENCES [dbo].[TMenu] ([CMenuId])
);


GO

CREATE TABLE [dbo].[tb_RootCourseMember] (
    [it_RootCourseMemberIdx]    INT           IDENTITY (1, 1) NOT NULL,
    [it_RootCourseIdx]          INT           NULL,
    [st_StaffCode]              NVARCHAR (50) NULL,
    [st_StaffLoginId]           NVARCHAR (50) NULL,
    [st_BranchCodeMake]         NVARCHAR (50) NULL,
    [st_StaffCodeMake]          NVARCHAR (50) NULL,
    [dt_RootCourseMemberMake]   DATETIME      NULL,
    [dt_RootCourseMemberDelete] DATETIME      NULL,
    CONSTRAINT [PK_tb_RootCourseMember] PRIMARY KEY CLUSTERED ([it_RootCourseMemberIdx] ASC),
    CONSTRAINT [FK_tb_RootCourseMember_tb_RootCourse] FOREIGN KEY ([it_RootCourseIdx]) REFERENCES [dbo].[tb_RootCourse] ([it_RootCourseIdx])
);


GO

CREATE TABLE [dbo].[THpMember] (
    [CMemberId]           BIGINT         IDENTITY (1, 1) NOT NULL,
    [CName]               NVARCHAR (50)  NOT NULL,
    [CNickName]           NVARCHAR (50)  NULL,
    [CLoginId]            NVARCHAR (20)  NOT NULL,
    [CLoginPw]            NVARCHAR (255) NULL,
    [CEmail]              NVARCHAR (255) NULL,
    [CAuthKey]            NVARCHAR (255) NULL,
    [CSolarBirth]         BIT            NULL,
    [CBirthday]           NVARCHAR (10)  NOT NULL,
    [CPostNo]             NVARCHAR (20)  NULL,
    [CAddress]            NVARCHAR (255) NULL,
    [CMobileNo]           NVARCHAR (255) NULL,
    [CPhoneNo]            NVARCHAR (255) NULL,
    [CRegDateTime]        DATETIME       NOT NULL,
    [CWithdrawalDateTime] DATETIME       NOT NULL,
    [CAllowLogin]         BIT            NOT NULL,
    [CState]              NVARCHAR (20)  NULL,
    [CMemberRemark]       NTEXT          NULL,
    [CManagerRemark]      NTEXT          NULL,
    [CAllowSms]           BIT            NULL,
    [CAllowEmail]         BIT            NULL,
    [CStaffId]            NVARCHAR (30)  NULL,
    [CCompanyId]          BIGINT         NULL,
    PRIMARY KEY CLUSTERED ([CMemberId] ASC),
    CONSTRAINT [FK_1n80itdbrxpphym36vb7mi1og] FOREIGN KEY ([CCompanyId]) REFERENCES [dbo].[THpCompany] ([CCompanyId]),
    CONSTRAINT [FK_aim0nteskg1fm1sayie5jcw4d] FOREIGN KEY ([CStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [UDXTHpMemberLoginId] UNIQUE NONCLUSTERED ([CLoginId] ASC)
);


GO

CREATE TABLE [dbo].[TContentReader] (
    [CContentId]      BIGINT         NOT NULL,
    [CReaderId]       NVARCHAR (30)  NOT NULL,
    [CFirstReadTime]  DATETIME       NULL,
    [CFirstReadIp]    NVARCHAR (255) NULL,
    [CLastReadTime]   DATETIME       NULL,
    [CLastReadIp]     NVARCHAR (255) NULL,
    [CCount]          INT            NULL,
    [CBlockPopup]     BIT            NULL,
    [CFirstSessionId] NVARCHAR (255) NULL,
    [CLastSessionId]  NVARCHAR (255) NULL,
    PRIMARY KEY CLUSTERED ([CContentId] ASC, [CReaderId] ASC),
    CONSTRAINT [FK3661D2A860B70BF] FOREIGN KEY ([CReaderId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK3661D2A89F2A2E67] FOREIGN KEY ([CContentId]) REFERENCES [dbo].[TContent] ([CContentId])
);


GO

CREATE TABLE [dbo].[TGlobalAddressKoreaRoad] (
    [CCode]               NVARCHAR (12) NOT NULL,
    [CDongSeq]            NVARCHAR (2)  NOT NULL,
    [CName]               NVARCHAR (80) NOT NULL,
    [CNameEng]            NVARCHAR (80) NOT NULL,
    [CDoSiName]           NVARCHAR (20) NOT NULL,
    [CDoSiNameEng]        NVARCHAR (40) NOT NULL,
    [CSiGunGuName]        NVARCHAR (20) NOT NULL,
    [CSiGunGuNameEng]     NVARCHAR (40) NOT NULL,
    [CEupMyunDongName]    NVARCHAR (20) NULL,
    [CEupMyunDongNameEng] NVARCHAR (40) NULL,
    [CEupMyunDongType]    NVARCHAR (1)  NULL,
    [CEupMyunDongCode]    NVARCHAR (3)  NULL,
    [CUsable]             NVARCHAR (1)  NULL,
    [CChangeReason]       NVARCHAR (1)  NULL,
    [CChangeHistory]      NVARCHAR (14) NULL,
    [CNotifiDate]         NVARCHAR (8)  NULL,
    [CErasureDate]        NVARCHAR (8)  NULL,
    PRIMARY KEY CLUSTERED ([CCode] ASC, [CDongSeq] ASC)
);


GO

CREATE TABLE [dbo].[tb_RootFeedback] (
    [it_RootFeedbackIdx]    INT             IDENTITY (1, 1) NOT NULL,
    [it_RootCourseIdx]      INT             NOT NULL,
    [st_StaffCode]          NVARCHAR (50)   NOT NULL,
    [st_RootFeedbackMemo]   NVARCHAR (1000) NULL,
    [st_WriteStaffCode]     NVARCHAR (50)   NULL,
    [dt_RootFeedbackMake]   DATETIME        NULL,
    [dt_RootFeedbackDelete] DATETIME        NULL,
    CONSTRAINT [PK_tb_RootFeedback] PRIMARY KEY CLUSTERED ([it_RootFeedbackIdx] ASC),
    CONSTRAINT [FK_tb_RootFeedback_tb_RootCourse] FOREIGN KEY ([it_RootCourseIdx]) REFERENCES [dbo].[tb_RootCourse] ([it_RootCourseIdx])
);


GO

CREATE TABLE [dbo].[TStaffGroupMember] (
    [CGroupId]     NVARCHAR (20) NOT NULL,
    [CStaffId]     NVARCHAR (30) NOT NULL,
    [CCreaterId]   NVARCHAR (30) NULL,
    [CCreatedTime] DATETIME      NULL,
    [CUpdaterId]   NVARCHAR (30) NULL,
    [CUpdatedTime] DATETIME      NULL,
    [CIsFiltered]  BIT           NULL,
    PRIMARY KEY CLUSTERED ([CGroupId] ASC, [CStaffId] ASC),
    CONSTRAINT [FK_95g4m58kb49vtbhatc7laivg5] FOREIGN KEY ([CCreaterId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_o2nmcjyw7gx2xtn71ka8c10yd] FOREIGN KEY ([CUpdaterId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK8512C76D2B771AFE] FOREIGN KEY ([CGroupId]) REFERENCES [dbo].[TStaffGroup] ([CGroupId]),
    CONSTRAINT [FK8512C76D9E3C3476] FOREIGN KEY ([CStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[TEightIndicator] (
    [CDepartCode]             NVARCHAR (20) NOT NULL,
    [CFirstDate]              DATETIME      NOT NULL,
    [CFlag]                   NVARCHAR (1)  NOT NULL,
    [CValue]                  FLOAT (53)    NULL,
    [CRegist_Count]           BIGINT        NULL,
    [CTotal_Count]            BIGINT        NULL,
    [CClass]                  NVARCHAR (5)  NULL,
    [CTotal_Avg]              FLOAT (53)    NULL,
    [CS_Avg]                  FLOAT (53)    NULL,
    [CA_Avg]                  FLOAT (53)    NULL,
    [CB_Avg]                  FLOAT (53)    NULL,
    [CC_Avg]                  FLOAT (53)    NULL,
    [CD_Avg]                  FLOAT (53)    NULL,
    [CF_Avg]                  FLOAT (53)    NULL,
    [CDetail_Leave_Rate]      FLOAT (53)    NULL,
    [CTutoring_Leave_Rate]    FLOAT (53)    NULL,
    [CTutoring_Leave_In_Rate] FLOAT (53)    NULL,
    CONSTRAINT [PK_TEightIndicator] PRIMARY KEY CLUSTERED ([CDepartCode] ASC, [CFirstDate] ASC, [CFlag] ASC)
);


GO

CREATE TABLE [dbo].[TSpoplexBranchDefault] (
    [CDepartCode]                    NVARCHAR (20) NOT NULL,
    [CDepartStartDate]               DATETIME      NOT NULL,
    [CLeaveMinDay]                   INT           NULL,
    [CLeaveMaxDay]                   INT           NULL,
    [CScheduleRepeat]                BIT           NULL,
    [CBeginnerMaxCount]              INT           NULL,
    [CBeginnerMaxPepole]             INT           NULL,
    [CExercisePoint]                 INT           NULL,
    [CReenterAlarmDays]              INT           NULL,
    [CReenterAlarmTime]              DATETIME      NULL,
    [CNextBookingAlarmTime]          DATETIME      NULL,
    [CRepeatBookingSuccessAlarmTime] DATETIME      NULL,
    [CRepeatBookingFailureAlarmTime] DATETIME      NULL,
    [CTrainingLeaveAlarmDays]        INT           NULL,
    [CTrainingLeaveAlarmTime]        DATETIME      NULL,
    [CAbsentAlarmInterval]           INT           NULL,
    [CAbsentAlarmCount]              INT           NULL,
    PRIMARY KEY CLUSTERED ([CDepartCode] ASC, [CDepartStartDate] ASC),
    CONSTRAINT [FK_f4n1xxiih24ae6709v3wq3m4j] FOREIGN KEY ([CDepartCode], [CDepartStartDate]) REFERENCES [dbo].[TFacility] ([CDepartCode], [CDepartStartDate])
);


GO

CREATE TABLE [dbo].[TIpGroupMember] (
    [CGroupId]     NVARCHAR (20)  NOT NULL,
    [CStartIp]     NVARCHAR (100) NOT NULL,
    [CEndIp]       NVARCHAR (100) NULL,
    [CType]        NVARCHAR (5)   NULL,
    [CCreaterId]   NVARCHAR (30)  NULL,
    [CCreatedTime] DATETIME       NULL,
    [CUpdaterId]   NVARCHAR (30)  NULL,
    [CUpdatedTime] DATETIME       NULL,
    PRIMARY KEY CLUSTERED ([CGroupId] ASC, [CStartIp] ASC),
    CONSTRAINT [FK_dk5vjx10g03sfpr72gds8rn2m] FOREIGN KEY ([CUpdaterId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_ry5uffv9p7aqxluv3j63tv3ym] FOREIGN KEY ([CCreaterId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK374565EEB293B47] FOREIGN KEY ([CGroupId]) REFERENCES [dbo].[TIpGroup] ([CGroupId])
);


GO

CREATE TABLE [dbo].[TPriceStudentTutoring] (
    [CDepartCode]      NVARCHAR (20) NOT NULL,
    [CDepartStartDate] DATETIME      NOT NULL,
    [CGrade]           NVARCHAR (50) NOT NULL,
    [CRegDate]         DATETIME      NOT NULL,
    [CPriceComma]      INT           NULL,
    [CRegStaff]        NVARCHAR (30) NULL,
    [CUseDiscount]     BIT           NULL,
    PRIMARY KEY CLUSTERED ([CDepartCode] ASC, [CDepartStartDate] ASC, [CGrade] ASC, [CRegDate] ASC),
    CONSTRAINT [FK5CCA96321122766D] FOREIGN KEY ([CRegStaff]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK5CCA9632282531E2] FOREIGN KEY ([CDepartCode], [CDepartStartDate]) REFERENCES [dbo].[TFacility] ([CDepartCode], [CDepartStartDate])
);


GO

CREATE TABLE [dbo].[TBoardAnswer] (
    [CBoardId]     NVARCHAR (20) NOT NULL,
    [CAnswerCode]  NVARCHAR (10) NOT NULL,
    [COrder]       INT           NULL,
    [CEnabled]     BIT           NOT NULL,
    [CAnswerText0] NVARCHAR (50) NOT NULL,
    [CAnswerText1] NVARCHAR (50) NULL,
    [CAnswerText2] NVARCHAR (50) NULL,
    [CAnswerText3] NVARCHAR (50) NULL,
    [CAnswerText4] NVARCHAR (50) NULL,
    PRIMARY KEY CLUSTERED ([CBoardId] ASC, [CAnswerCode] ASC),
    CONSTRAINT [FK646AC15035D89A81] FOREIGN KEY ([CBoardId]) REFERENCES [dbo].[TBoard] ([CBoardId])
);


GO

CREATE TABLE [dbo].[TScheduleStaff] (
    [CScheduleId] BIGINT        NOT NULL,
    [CStaffId]    NVARCHAR (30) NOT NULL,
    PRIMARY KEY CLUSTERED ([CScheduleId] ASC, [CStaffId] ASC),
    CONSTRAINT [FKAFBD9E955930B7E5] FOREIGN KEY ([CScheduleId]) REFERENCES [dbo].[TSchedule] ([CId]),
    CONSTRAINT [FKAFBD9E959E3C3476] FOREIGN KEY ([CStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[TEducation] (
    [CCourseNo]     INT            NOT NULL,
    [CNo]           INT            NOT NULL,
    [CStatus]       NVARCHAR (15)  NULL,
    [CName]         NVARCHAR (255) NOT NULL,
    [CStartDate]    DATETIME       NOT NULL,
    [CEndDate]      DATETIME       NOT NULL,
    [CApplytDate]   DATETIME       NULL,
    [CApplyEndDate] DATETIME       NULL,
    [CInput1Name]   NVARCHAR (255) NULL,
    [CInput2Name]   NVARCHAR (255) NULL,
    [CInput3Name]   NVARCHAR (255) NULL,
    [CInput4Name]   NVARCHAR (255) NULL,
    [CInput5Name]   NVARCHAR (255) NULL,
    [CInput6Name]   NVARCHAR (255) NULL,
    [CInput7Name]   NVARCHAR (255) NULL,
    [CInput8Name]   NVARCHAR (255) NULL,
    [CInput9Name]   NVARCHAR (255) NULL,
    [CInput10Name]  NVARCHAR (255) NULL,
    [CInput11Name]  NVARCHAR (255) NULL,
    [CInput12Name]  NVARCHAR (255) NULL,
    [CInput13Name]  NVARCHAR (255) NULL,
    [CInput14Name]  NVARCHAR (255) NULL,
    [CInput15Name]  NVARCHAR (255) NULL,
    [CInput16Name]  NVARCHAR (255) NULL,
    [CInput17Name]  NVARCHAR (255) NULL,
    [CInput18Name]  NVARCHAR (255) NULL,
    [CInput19Name]  NVARCHAR (255) NULL,
    [CInput20Name]  NVARCHAR (255) NULL,
    PRIMARY KEY CLUSTERED ([CCourseNo] ASC, [CNo] ASC),
    CONSTRAINT [FK8E36A5B4FDC523B8] FOREIGN KEY ([CCourseNo]) REFERENCES [dbo].[TEducationCourse] ([CNo])
);


GO

CREATE TABLE [dbo].[THpRecruitNotice] (
    [CNoticeId]       BIGINT         IDENTITY (1, 1) NOT NULL,
    [CRecruitPart]    NVARCHAR (255) NOT NULL,
    [CCareerType]     NVARCHAR (10)  NOT NULL,
    [CRecruitGroupId] INT            NULL,
    [CStartDateTime]  DATETIME       NOT NULL,
    [CEndDateTime]    DATETIME       NOT NULL,
    [CStopDateTime]   DATETIME       NOT NULL,
    [CBody]           NTEXT          NULL,
    PRIMARY KEY CLUSTERED ([CNoticeId] ASC),
    CONSTRAINT [FK_5qut03x9wlki6wojaxmarxls] FOREIGN KEY ([CRecruitGroupId]) REFERENCES [dbo].[THpRecruitGroup] ([CGroupId])
);


GO

CREATE TABLE [dbo].[tb_MktSales] (
    [it_MktSalesIdx]          INT      IDENTITY (1, 1) NOT NULL,
    [it_MktSalesPerRegDi]     INT      NULL,
    [it_MktSalesPerRegFeeDi]  INT      NULL,
    [it_MktSalesMonthEvgDi]   INT      NULL,
    [it_MktSalesRetentionDi]  INT      NULL,
    [it_MktSalesMarginRateDi] INT      NULL,
    [it_MktSalesMarginDi]     INT      NULL,
    [it_MktSalesPerRegFc]     INT      NULL,
    [it_MktSalesPerRegFeeFc]  INT      NULL,
    [it_MktSalesMonthEvgFc]   INT      NULL,
    [it_MktSalesRetentionFc]  INT      NULL,
    [it_MktSalesMarginRateFc] INT      NULL,
    [it_MktSalesMarginFc]     INT      NULL,
    [dt_MktSalesStart]        DATE     NULL,
    [dt_MktSalesDelete]       DATETIME NULL,
    CONSTRAINT [PK_tb_MktSales] PRIMARY KEY CLUSTERED ([it_MktSalesIdx] ASC)
);


GO

CREATE TABLE [dbo].[TCurriculum] (
    [CCourseNo]         INT            NOT NULL,
    [CEduNo]            INT            NOT NULL,
    [CNo]               INT            NOT NULL,
    [CGroupCourseNo]    INT            NULL,
    [CGroupEduNo]       INT            NULL,
    [CGroupNo]          INT            NULL,
    [CName]             NVARCHAR (255) NULL,
    [CTeacherName]      NVARCHAR (255) NULL,
    [CTeacherPhone]     NVARCHAR (255) NULL,
    [CSubTeacher1Name]  NVARCHAR (255) NULL,
    [CSubTeacher1Phone] NVARCHAR (255) NULL,
    [CSubTeacher2Name]  NVARCHAR (255) NULL,
    [CSubTeacher2Phone] NVARCHAR (255) NULL,
    [CSubTeacher3Name]  NVARCHAR (255) NULL,
    [CSubTeacher3Phone] NVARCHAR (255) NULL,
    [CSubTeacher4Name]  NVARCHAR (255) NULL,
    [CSubTeacher4Phone] NVARCHAR (255) NULL,
    [CSubTeacher5Name]  NVARCHAR (255) NULL,
    [CSubTeacher5Phone] NVARCHAR (255) NULL,
    [CRunDate]          DATETIME       NULL,
    [CStratTime]        NVARCHAR (255) NULL,
    [CEndTime]          NVARCHAR (255) NULL,
    [CHours]            FLOAT (53)     NULL,
    PRIMARY KEY CLUSTERED ([CCourseNo] ASC, [CEduNo] ASC, [CNo] ASC),
    CONSTRAINT [FK172D1FAF207506F1] FOREIGN KEY ([CGroupCourseNo], [CGroupEduNo], [CGroupNo]) REFERENCES [dbo].[TEducationGroup] ([CCourseNo], [CEduNo], [CNo]),
    CONSTRAINT [FK172D1FAF2FB03371] FOREIGN KEY ([CCourseNo], [CEduNo]) REFERENCES [dbo].[TEducation] ([CCourseNo], [CNo])
);


GO

CREATE TABLE [dbo].[TUbiProductKey] (
    [CId]           BIGINT        IDENTITY (1, 1) NOT NULL,
    [CType]         NVARCHAR (4)  NOT NULL,
    [CMajorVer]     INT           NOT NULL,
    [CSaleYear]     INT           NOT NULL,
    [CCustomerCode] NVARCHAR (4)  NOT NULL,
    [CMacAddress]   NVARCHAR (30) NOT NULL,
    [CExpireDate]   DATETIME      NULL,
    [CContractUser] INT           NOT NULL,
    [CAllowUser]    INT           NOT NULL,
    [CProductKey]   NVARCHAR (30) NOT NULL,
    [CHashKey]      NVARCHAR (50) NOT NULL,
    [CRegStaff]     NVARCHAR (30) NULL,
    [CRegTime]      DATETIME      NOT NULL,
    PRIMARY KEY CLUSTERED ([CId] ASC),
    CONSTRAINT [FK_92cnvde6mtjcx8hvqdbhb947b] FOREIGN KEY ([CRegStaff]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[TComplaintContentAtt] (
    [CId]             BIGINT NOT NULL,
    [CSeq]            INT    NOT NULL,
    [CPetitionerFile] BIT    NULL,
    [CFileId]         BIGINT NULL,
    PRIMARY KEY CLUSTERED ([CId] ASC, [CSeq] ASC),
    CONSTRAINT [FK_cdx2oy6vna8i3wnntsrluibxf] FOREIGN KEY ([CFileId]) REFERENCES [dbo].[TFile] ([CFileId]),
    CONSTRAINT [FK_dwjfb69ckkraih76wcy429qav] FOREIGN KEY ([CId]) REFERENCES [dbo].[TComplaintContent] ([CId])
);


GO

CREATE TABLE [dbo].[TReportClose] (
    [CCode]                   NVARCHAR (50) NOT NULL,
    [CStDepartCode]           NVARCHAR (20) NOT NULL,
    [CStDepartStartDate]      DATETIME      NOT NULL,
    [CStCode]                 NVARCHAR (50) NOT NULL,
    [CCommonGroupCode]        NVARCHAR (50) NULL,
    [CCommonCode]             NVARCHAR (50) NULL,
    [CCloseReasonParent]      NTEXT         NULL,
    [CCloseReasonManager]     NTEXT         NULL,
    [CStudentManagerRelation] NTEXT         NULL,
    [CStudentParentRelation]  NTEXT         NULL,
    [CManagerParentRelation]  NTEXT         NULL,
    [CAttitudeSelf]           NTEXT         NULL,
    [CAttitudeStudy]          NTEXT         NULL,
    [CCapabilitySchedule]     NTEXT         NULL,
    [CCapabilityStudy]        NTEXT         NULL,
    [CContent]                NTEXT         NULL,
    [CRegTime]                DATETIME      NOT NULL,
    [CEditTime]               DATETIME      NOT NULL,
    [CRegStaffId]             NVARCHAR (30) NULL,
    [CEditStaffId]            NVARCHAR (30) NULL,
    [CApprovalStatus]         NVARCHAR (15) NULL,
    PRIMARY KEY CLUSTERED ([CCode] ASC, [CStDepartCode] ASC, [CStDepartStartDate] ASC, [CStCode] ASC),
    CONSTRAINT [FKD973A43019E633C8] FOREIGN KEY ([CRegStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FKD973A4306F88FD24] FOREIGN KEY ([CStDepartCode], [CStDepartStartDate], [CStCode]) REFERENCES [dbo].[TStudent] ([CBranchCode], [CBranchStartDate], [CCode]),
    CONSTRAINT [FKD973A43078DF60AC] FOREIGN KEY ([CEditStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FKD973A430C74495AF] FOREIGN KEY ([CCommonGroupCode], [CCommonCode]) REFERENCES [dbo].[TCommonCode] ([CCodeGroup], [CCode])
);


GO

CREATE TABLE [dbo].[TStaff] (
    [CStaffId]            NVARCHAR (30)  NOT NULL,
    [CLoginId]            NVARCHAR (30)  NOT NULL,
    [CLoginPw]            NVARCHAR (100) NULL,
    [CSignPw]             NVARCHAR (100) NULL,
    [CName0]              NVARCHAR (50)  NULL,
    [CName1]              NVARCHAR (50)  NULL,
    [CName2]              NVARCHAR (50)  NULL,
    [CName3]              NVARCHAR (50)  NULL,
    [CName4]              NVARCHAR (50)  NULL,
    [CNickName]           NVARCHAR (50)  NULL,
    [CLoginType]          NVARCHAR (20)  NOT NULL,
    [CLanguageCode]       NVARCHAR (5)   NOT NULL,
    [CCountryCode]        NVARCHAR (5)   NOT NULL,
    [CStaffNo]            NVARCHAR (30)  NULL,
    [CLoginLevelCode]     NVARCHAR (5)   NOT NULL,
    [CTimeZone]           NVARCHAR (50)  NOT NULL,
    [CEnvUpdateDateTime]  DATETIME       NULL,
    [CThemeCode]          NVARCHAR (10)  NULL,
    [CJob]                NVARCHAR (255) NULL,
    [CJoinDate]           DATETIME       DEFAULT ('1900-01-01') NOT NULL,
    [COutDate]            DATETIME       DEFAULT ('2200-12-31') NOT NULL,
    [CTempString1]        NVARCHAR (255) NULL,
    [CTempString2]        NVARCHAR (255) NULL,
    [CTempString3]        NVARCHAR (255) NULL,
    [CTempString4]        NVARCHAR (255) NULL,
    [CTempString5]        NVARCHAR (255) NULL,
    [CTempLong1]          BIGINT         NULL,
    [CTempLong2]          BIGINT         NULL,
    [CTempLong3]          BIGINT         NULL,
    [CTempLong4]          BIGINT         NULL,
    [CTempLong5]          BIGINT         NULL,
    [CZimbraId]           NVARCHAR (255) NULL,
    [CGoogleEmail]        NVARCHAR (255) NULL,
    [CGoogleRefreshToken] NVARCHAR (255) NULL,
    [CMobileDeviceType]   NVARCHAR (255) NULL,
    [CMobileDeviceToken]  NVARCHAR (255) NULL,
    [CMobileDeviceName]   NVARCHAR (255) NULL,
    [CMobileDeviceVer]    NVARCHAR (255) NULL,
    [CMobileDeviceTime]   DATETIME       NULL,
    [CStockCode1]         NVARCHAR (255) NULL,
    [CStockCode2]         NVARCHAR (255) NULL,
    [CStockCode3]         NVARCHAR (255) NULL,
    [CSkipSync]           BIT            NULL,
    [CMailPw]             NVARCHAR (100) NULL,
    [CTempDouble1]        FLOAT (53)     NULL,
    [CTempDouble2]        FLOAT (53)     NULL,
    [CTempDouble3]        FLOAT (53)     NULL,
    [CTempDouble4]        FLOAT (53)     NULL,
    [CTempDouble5]        FLOAT (53)     NULL,
    [CLdapUser]           BIT            NULL,
    [CAlarmApprSms]       BIT            NULL,
    [it_DepartmentIdx]    INT            NULL,
    PRIMARY KEY CLUSTERED ([CStaffId] ASC),
    CONSTRAINT [FK_TStaff_tb_Department] FOREIGN KEY ([it_DepartmentIdx]) REFERENCES [dbo].[tb_Department] ([it_DepartmentIdx])
);


GO

CREATE TABLE [dbo].[TTutorSubject] (
    [CSubjectSeq]       INT            IDENTITY (1, 1) NOT NULL,
    [CDepartCode]       NVARCHAR (20)  NULL,
    [CDepartStartDate]  DATETIME       NULL,
    [CSubject]          NVARCHAR (255) NOT NULL,
    [CColor]            NVARCHAR (255) NULL,
    [CEnable]           BIT            NULL,
    [CSubjectNameColor] NVARCHAR (255) NULL,
    PRIMARY KEY CLUSTERED ([CSubjectSeq] ASC),
    CONSTRAINT [FK_8f01g3aetjdhtwkedu70hppys] FOREIGN KEY ([CDepartCode], [CDepartStartDate]) REFERENCES [dbo].[TFacility] ([CDepartCode], [CDepartStartDate])
);


GO

CREATE TABLE [dbo].[TLogRFID] (
    [CBranchCode]      NVARCHAR (20)  NOT NULL,
    [CBranchStartDate] DATETIME       NOT NULL,
    [CCardNumber]      NVARCHAR (50)  NOT NULL,
    [CTagTime]         DATETIME       NOT NULL,
    [CTagDevice]       NVARCHAR (255) NOT NULL,
    PRIMARY KEY CLUSTERED ([CBranchCode] ASC, [CBranchStartDate] ASC, [CCardNumber] ASC, [CTagTime] ASC, [CTagDevice] ASC),
    CONSTRAINT [FK_TRFID_TLogRFID] FOREIGN KEY ([CBranchCode], [CBranchStartDate], [CCardNumber]) REFERENCES [dbo].[TRFID] ([CBranchCode], [CBranchStartDate], [CCardNumber])
);


GO

CREATE TABLE [dbo].[TAccountInputs] (
    [CAccountCode]     NVARCHAR (15)  NOT NULL,
    [CCommonGroupCode] NVARCHAR (50)  NOT NULL,
    [CCommonCode]      NVARCHAR (50)  NOT NULL,
    [CComment]         NVARCHAR (255) NULL,
    [CEssential]       BIT            NULL,
    [CEnabled]         BIT            NULL,
    CONSTRAINT [PK__TAccount__F13E44A774643BF9] PRIMARY KEY CLUSTERED ([CAccountCode] ASC, [CCommonGroupCode] ASC, [CCommonCode] ASC),
    CONSTRAINT [FK7365A828F6AED50] FOREIGN KEY ([CAccountCode]) REFERENCES [dbo].[TAccountCode] ([CCode]),
    CONSTRAINT [FK7365A82E70EBBF2] FOREIGN KEY ([CCommonGroupCode], [CCommonCode]) REFERENCES [dbo].[TCommonCode] ([CCodeGroup], [CCode])
);


GO

CREATE TABLE [dbo].[TToDoComment] (
    [CToDoId]       BIGINT        NOT NULL,
    [CWrittenDate]  DATETIME      NOT NULL,
    [CStaffId]      NVARCHAR (30) NOT NULL,
    [CComment]      NTEXT         NULL,
    [CType]         NVARCHAR (15) DEFAULT ('Normal') NOT NULL,
    [CModifiedDate] DATETIME      NULL,
    PRIMARY KEY CLUSTERED ([CToDoId] ASC, [CWrittenDate] ASC, [CStaffId] ASC),
    CONSTRAINT [FK55DB6E2536C2262B] FOREIGN KEY ([CToDoId]) REFERENCES [dbo].[TToDo] ([CId]),
    CONSTRAINT [FK55DB6E259E3C3476] FOREIGN KEY ([CStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[TPartener] (
    [CId]            BIGINT         IDENTITY (1, 1) NOT NULL,
    [CIsCust]        BIT            NULL,
    [CIsPurchasing]  BIT            NULL,
    [CIsSalesCh]     BIT            NULL,
    [CName0]         NVARCHAR (100) NULL,
    [CName1]         NVARCHAR (100) NULL,
    [CName2]         NVARCHAR (100) NULL,
    [CName3]         NVARCHAR (100) NULL,
    [CName4]         NVARCHAR (100) NULL,
    [CShortName0]    NVARCHAR (100) NULL,
    [CShortName1]    NVARCHAR (100) NULL,
    [CShortName2]    NVARCHAR (100) NULL,
    [CShortName3]    NVARCHAR (100) NULL,
    [CShortName4]    NVARCHAR (100) NULL,
    [CRegNo]         NVARCHAR (255) NULL,
    [CBankGroupCode] NVARCHAR (50)  NULL,
    [CBankCode]      NVARCHAR (50)  NULL,
    [CBankNo]        NVARCHAR (255) NULL,
    [CMasterName]    NVARCHAR (255) NULL,
    [CPostNo]        NVARCHAR (20)  NULL,
    [CAddress]       NVARCHAR (200) NULL,
    [CKind1]         NVARCHAR (255) NULL,
    [CKind2]         NVARCHAR (255) NULL,
    [CRegStaffId]    NVARCHAR (30)  NULL,
    [CRegTime]       DATETIME       NOT NULL,
    [CUpdStaffId]    NVARCHAR (30)  NULL,
    [CUpdTime]       DATETIME       NOT NULL,
    [CRemark]        NTEXT          NULL,
    PRIMARY KEY CLUSTERED ([CId] ASC),
    CONSTRAINT [FK_3anaivm0nn33u7932d6512sab] FOREIGN KEY ([CBankGroupCode], [CBankCode]) REFERENCES [dbo].[TCommonCode] ([CCodeGroup], [CCode]),
    CONSTRAINT [FK_9eyt7rwimht7ysroona0trdw3] FOREIGN KEY ([CUpdStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_lvysc6uylcmuvalhn05l5l9b5] FOREIGN KEY ([CRegStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[TComponentSeason] (
    [CComponentNo] BIGINT NOT NULL,
    [CSeasonNo]    INT    NOT NULL,
    PRIMARY KEY CLUSTERED ([CComponentNo] ASC, [CSeasonNo] ASC),
    CONSTRAINT [FK9721874C44F3BF8] FOREIGN KEY ([CComponentNo]) REFERENCES [dbo].[TComponent] ([CComponentNo]),
    CONSTRAINT [FK9721874CD054F06A] FOREIGN KEY ([CSeasonNo]) REFERENCES [dbo].[TSeason] ([CSeasonNo])
);


GO

CREATE TABLE [dbo].[TFacilityNowStaffPerm] (
    [CStaffId]           NVARCHAR (30) NOT NULL,
    [CFacilityCode]      NVARCHAR (20) NOT NULL,
    [CFacilityStartDate] DATETIME      NOT NULL,
    [CCheckTime]         DATETIME      NULL,
    [CSortOrder]         INT           NULL,
    [CAccessPerm]        BIT           NULL,
    [CLowestPerm]        BIT           NULL,
    [CLoginLevelCode]    NVARCHAR (5)  NULL,
    [CFacilityType]      NVARCHAR (20) NULL,
    CONSTRAINT [PK__TFacilit__D79430203612CF1C] PRIMARY KEY CLUSTERED ([CStaffId] ASC, [CFacilityCode] ASC, [CFacilityStartDate] ASC),
    CONSTRAINT [FKF1C0287195A7C371] FOREIGN KEY ([CFacilityCode], [CFacilityStartDate]) REFERENCES [dbo].[TDepartment] ([CDepartCode], [CDepartStartDate]),
    CONSTRAINT [FKF1C028719E3C3476] FOREIGN KEY ([CStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[TTradeAppealHistory] (
    [CBranchCode]      NVARCHAR (20)  NOT NULL,
    [CBranchStartDate] DATETIME       NOT NULL,
    [CAppealNo]        INT            NOT NULL,
    [CAppealStatus]    NVARCHAR (15)  NULL,
    [CAppealDate]      DATETIME       NULL,
    [CAppealStaffId]   NVARCHAR (30)  NULL,
    [CDefaultPrice]    INT            NULL,
    [CAppealComment]   NTEXT          NULL,
    [CAppealAnswer]    NVARCHAR (255) NULL,
    [CDetailCount]     INT            NULL,
    PRIMARY KEY CLUSTERED ([CBranchCode] ASC, [CBranchStartDate] ASC, [CAppealNo] ASC),
    CONSTRAINT [FKA350907548562EA2] FOREIGN KEY ([CBranchCode], [CBranchStartDate]) REFERENCES [dbo].[TFacility] ([CDepartCode], [CDepartStartDate]),
    CONSTRAINT [FKA3509075E3F7647] FOREIGN KEY ([CAppealStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[TSalesForcast] (
    [CId]              BIGINT         IDENTITY (1, 1) NOT NULL,
    [CSalesPartenerId] BIGINT         NULL,
    [CCustomerId]      BIGINT         NULL,
    [CSalesmanId]      NVARCHAR (30)  NULL,
    [CRegStaffId]      NVARCHAR (30)  NULL,
    [CRegTime]         DATETIME       NULL,
    [CUpdStaffId]      NVARCHAR (30)  NULL,
    [CUpdTime]         DATETIME       NULL,
    [CNextCheckDate]   DATETIME       NULL,
    [CProbability]     NVARCHAR (255) NULL,
    [CStep]            NVARCHAR (255) NULL,
    [CRemark]          NTEXT          NULL,
    [CSecMemo]         NTEXT          NULL,
    [CSalesPartnerId]  BIGINT         NULL,
    [CScheduleId]      BIGINT         NULL,
    [CContractId]      BIGINT         NULL,
    PRIMARY KEY CLUSTERED ([CId] ASC),
    CONSTRAINT [FK_2s3g5r26nbjsih7a1ufx1dgc0] FOREIGN KEY ([CRegStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_abrabj1ytgbikybkp2trlhpq6] FOREIGN KEY ([CCustomerId]) REFERENCES [dbo].[TPartener] ([CId]),
    CONSTRAINT [FK_ek7av9i1dnnihvsiyd50uy50o] FOREIGN KEY ([CSalesPartenerId]) REFERENCES [dbo].[TPartener] ([CId]),
    CONSTRAINT [FK_h76gwklena6njcld9lnxs5gqd] FOREIGN KEY ([CScheduleId]) REFERENCES [dbo].[TSchedule] ([CId]),
    CONSTRAINT [FK_hym7yo2j95agf83w6dw9yr5js] FOREIGN KEY ([CContractId]) REFERENCES [dbo].[TSalesContract] ([CId]),
    CONSTRAINT [FK_phhtxuroermknbtlpp7m3upce] FOREIGN KEY ([CSalesPartnerId]) REFERENCES [dbo].[TPartner] ([CId]),
    CONSTRAINT [FK_qo0nwky8y4qc6oww3s5j8vd1e] FOREIGN KEY ([CUpdStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_r24kn32fkqippxvdcxsjjxqup] FOREIGN KEY ([CSalesmanId]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[TBoardOption] (
    [CBoardId]    NVARCHAR (20)  NOT NULL,
    [COptionKey]  NVARCHAR (25)  NOT NULL,
    [CBoolValue0] BIT            NULL,
    [CBoolValue1] BIT            NULL,
    [CBoolValue2] BIT            NULL,
    [CBoolValue3] BIT            NULL,
    [CBoolValue4] BIT            NULL,
    [CLongValue0] BIGINT         NULL,
    [CLongValue1] BIGINT         NULL,
    [CLongValue2] BIGINT         NULL,
    [CLongValue3] BIGINT         NULL,
    [CLongValue4] BIGINT         NULL,
    [CTextValue0] NVARCHAR (255) NULL,
    [CTextValue1] NVARCHAR (255) NULL,
    [CTextValue2] NVARCHAR (255) NULL,
    [CTextValue3] NVARCHAR (255) NULL,
    [CTextValue4] NVARCHAR (255) NULL,
    PRIMARY KEY CLUSTERED ([CBoardId] ASC, [COptionKey] ASC),
    CONSTRAINT [FK7C6B0A0735D89A81] FOREIGN KEY ([CBoardId]) REFERENCES [dbo].[TBoard] ([CBoardId])
);


GO

CREATE TABLE [dbo].[TRevisionFile] (
    [CFileId]             BIGINT         NOT NULL,
    [CRevisionDate]       DATETIME       NOT NULL,
    [CRevisionStaffId]    NVARCHAR (30)  NULL,
    [CFileName]           NVARCHAR (255) NULL,
    [CExtName]            NVARCHAR (255) NULL,
    [CSubCode]            NVARCHAR (50)  NULL,
    [CRelativeTable]      NVARCHAR (255) NULL,
    [CRelativeCodes]      NVARCHAR (255) NULL,
    [COwnerStaffId]       NVARCHAR (30)  NULL,
    [CSize]               BIGINT         NULL,
    [CContentID]          NVARCHAR (255) NULL,
    [CUploadedDate]       DATETIME       NULL,
    [CDeletedDate]        DATETIME       NULL,
    [CFileStorageCode]    NVARCHAR (30)  NULL,
    [CFileStorageSubCode] NVARCHAR (30)  NULL,
    [CSubstitued]         BIT            NULL,
    PRIMARY KEY CLUSTERED ([CFileId] ASC, [CRevisionDate] ASC),
    CONSTRAINT [FK23A326B55D74554] FOREIGN KEY ([CFileId]) REFERENCES [dbo].[TFile] ([CFileId]),
    CONSTRAINT [FK23A326BE751733B] FOREIGN KEY ([CRevisionStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK23A326BF3FD8C09] FOREIGN KEY ([COwnerStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[TAccountingFixedCostDetail] (
    [CDepartCode]      NVARCHAR (20)  NOT NULL,
    [CDepartStartDate] DATETIME       NOT NULL,
    [CAccFixedCostNo]  INT            NOT NULL,
    [CAccountCode]     NVARCHAR (15)  NOT NULL,
    [CCommonGroupCode] NVARCHAR (50)  NOT NULL,
    [CCommonCode]      NVARCHAR (50)  NOT NULL,
    [CStringValue]     NVARCHAR (255) NULL,
    [CCodeValue]       NVARCHAR (255) NULL,
    [CComment]         NVARCHAR (255) NULL,
    PRIMARY KEY CLUSTERED ([CDepartCode] ASC, [CDepartStartDate] ASC, [CAccFixedCostNo] ASC, [CAccountCode] ASC, [CCommonGroupCode] ASC, [CCommonCode] ASC),
    CONSTRAINT [FKB57CE7C92A0A2DC2] FOREIGN KEY ([CDepartCode], [CDepartStartDate], [CAccFixedCostNo]) REFERENCES [dbo].[TAccountingFixedCost] ([CBrDepartCode], [CBrDepartStartDate], [CNo]),
    CONSTRAINT [FKB57CE7C95883CC21] FOREIGN KEY ([CAccountCode], [CCommonGroupCode], [CCommonCode]) REFERENCES [dbo].[TAccountInputs] ([CAccountCode], [CCommonGroupCode], [CCommonCode])
);


GO

CREATE TABLE [dbo].[TTestCT] (
    [CBranchCode]      NVARCHAR (20) NOT NULL,
    [CBranchStartDate] DATETIME      NOT NULL,
    [CCode]            NVARCHAR (50) NOT NULL,
    [CNo]              INT           NOT NULL,
    [CQuestionNo]      INT           NOT NULL,
    [CAnswer]          INT           NULL,
    PRIMARY KEY CLUSTERED ([CBranchCode] ASC, [CBranchStartDate] ASC, [CCode] ASC, [CNo] ASC, [CQuestionNo] ASC),
    CONSTRAINT [FKF0A7CDF77D4C7F9] FOREIGN KEY ([CBranchCode], [CBranchStartDate], [CCode], [CNo]) REFERENCES [dbo].[TTestInfo] ([CStdBranchCode], [CStdBranchStartDate], [CCode], [CNo]),
    CONSTRAINT [FKF0A7CDF7E4D2BB69] FOREIGN KEY ([CQuestionNo]) REFERENCES [dbo].[TCTQuestion] ([CNo])
);


GO

CREATE TABLE [dbo].[TPersonalRank] (
    [CManagerCode] NVARCHAR (50) NOT NULL,
    [CFirstDate]   DATETIME      NOT NULL,
    [CFlag]        NVARCHAR (1)  NOT NULL,
    [CValue]       FLOAT (53)    NULL,
    [CRank]        INT           NULL,
    [CClass]       NVARCHAR (5)  NULL,
    [CTotal_Avg]   FLOAT (53)    NULL,
    [CS_Avg]       FLOAT (53)    NULL,
    [CA_Avg]       FLOAT (53)    NULL,
    [CB_Avg]       FLOAT (53)    NULL,
    [CC_Avg]       FLOAT (53)    NULL,
    [CD_Avg]       FLOAT (53)    NULL,
    [CF_Avg]       FLOAT (53)    NULL,
    CONSTRAINT [PK_TPersonalRank] PRIMARY KEY CLUSTERED ([CManagerCode] ASC, [CFirstDate] ASC, [CFlag] ASC)
);


GO

CREATE TABLE [dbo].[THpRecruitApp] (
    [CNoticeId]           BIGINT         NOT NULL,
    [CApplicantId]        BIGINT         NOT NULL,
    [CAppDateTime]        DATETIME       NOT NULL,
    [CModiDateTime]       DATETIME       NOT NULL,
    [CIncomeCurrency]     NVARCHAR (30)  NOT NULL,
    [CAnnualIncome]       INT            NOT NULL,
    [CCarrerYears]        INT            NULL,
    [CState]              NVARCHAR (255) NOT NULL,
    [CAppliccationFileId] BIGINT         NULL,
    [CPortfolioFileId]    BIGINT         NULL,
    [COtherFileId]        BIGINT         NULL,
    PRIMARY KEY CLUSTERED ([CNoticeId] ASC, [CApplicantId] ASC),
    CONSTRAINT [FK_46a7j4ehfea2pickm535s8una] FOREIGN KEY ([COtherFileId]) REFERENCES [dbo].[THpFile] ([CFileId]),
    CONSTRAINT [FK_dvtpqgq5by9t34m7rkvu903ss] FOREIGN KEY ([CNoticeId]) REFERENCES [dbo].[THpRecruitNotice] ([CNoticeId]),
    CONSTRAINT [FK_loaxbkjf73pvtaspn7c3xatth] FOREIGN KEY ([CAppliccationFileId]) REFERENCES [dbo].[THpFile] ([CFileId]),
    CONSTRAINT [FK_nd52wjg90i6p0uut2j546kddc] FOREIGN KEY ([CApplicantId]) REFERENCES [dbo].[THpMember] ([CMemberId]),
    CONSTRAINT [FK_ru8ejpmu640vfkn64ijio41mh] FOREIGN KEY ([CPortfolioFileId]) REFERENCES [dbo].[THpFile] ([CFileId])
);


GO

CREATE TABLE [dbo].[TComplaintType] (
    [CId]           BIGINT        IDENTITY (1, 1) NOT NULL,
    [CName]         NVARCHAR (20) NOT NULL,
    [CEnabled]      BIT           NOT NULL,
    [CDepth]        INT           NULL,
    [CDisplayIndex] INT           NULL,
    [CExEasilyCode] NVARCHAR (50) NULL,
    [CManagerId1]   NVARCHAR (30) NULL,
    [CManagerId2]   NVARCHAR (30) NULL,
    [CMasterId1]    NVARCHAR (30) NULL,
    [CMasterId2]    NVARCHAR (30) NULL,
    [CChiefId1]     NVARCHAR (30) NULL,
    [CChiefId2]     NVARCHAR (30) NULL,
    [CParentTypeId] BIGINT        NULL,
    PRIMARY KEY CLUSTERED ([CId] ASC),
    CONSTRAINT [FK_34ihdy418l0liqf3w0629h0a5] FOREIGN KEY ([CMasterId1]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_4upyxafsrweohbifdaxr5rtlw] FOREIGN KEY ([CManagerId2]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_bd9kw8i7ehhjdwgkobk0jbegp] FOREIGN KEY ([CManagerId1]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_j7a29q0m1k9amn96al9itj0u4] FOREIGN KEY ([CParentTypeId]) REFERENCES [dbo].[TComplaintType] ([CId]),
    CONSTRAINT [FK_k61i0ab69r9mlqf1atcqvl59v] FOREIGN KEY ([CChiefId1]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_obuivkn447stkmxcafgo6k4ve] FOREIGN KEY ([CChiefId2]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_q7nsq6vub0x2yqtva82o65qay] FOREIGN KEY ([CMasterId2]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[otbl_Area] (
    [area_idx] INT           IDENTITY (1, 1) NOT NULL,
    [title]    NVARCHAR (30) NULL,
    [use_yn]   CHAR (1)      NULL,
    [sort]     INT           CONSTRAINT [DF_otbl_Area_sort] DEFAULT ((0)) NULL,
    CONSTRAINT [PK_otbl_Area] PRIMARY KEY CLUSTERED ([area_idx] ASC)
);


GO

CREATE TABLE [dbo].[TBoard] (
    [CBoardId]           NVARCHAR (20)  NOT NULL,
    [CType]              NVARCHAR (20)  NULL,
    [CEnabled]           BIT            NULL,
    [CDisplayIndex]      INT            NULL,
    [CName0]             NVARCHAR (50)  NOT NULL,
    [CName1]             NVARCHAR (50)  NULL,
    [CName2]             NVARCHAR (50)  NULL,
    [CName3]             NVARCHAR (50)  NULL,
    [CName4]             NVARCHAR (50)  NULL,
    [CShortName0]        NVARCHAR (10)  NULL,
    [CShortName1]        NVARCHAR (10)  NULL,
    [CShortName2]        NVARCHAR (10)  NULL,
    [CShortName3]        NVARCHAR (10)  NULL,
    [CShortName4]        NVARCHAR (10)  NULL,
    [CEvalMaxPoint]      INT            NULL,
    [CAllowExcelDown]    BIT            DEFAULT ((1)) NULL,
    [CMenuId]            NVARCHAR (50)  NULL,
    [CManagerConfirm]    BIT            DEFAULT ((0)) NULL,
    [COwnerFacilityCode] NVARCHAR (255) NULL,
    [COpenBoard]         BIT            NULL,
    PRIMARY KEY CLUSTERED ([CBoardId] ASC),
    CONSTRAINT [FK932D12F258FE75BA] FOREIGN KEY ([CType]) REFERENCES [dbo].[TBoardType] ([CTypeId]),
    CONSTRAINT [FK932D12F2E3BB6C4A] FOREIGN KEY ([CMenuId]) REFERENCES [dbo].[TMenu] ([CMenuId])
);


GO

CREATE TABLE [dbo].[TContentBookmark] (
    [CStaffId]      NVARCHAR (30) NOT NULL,
    [CContentId]    BIGINT        NOT NULL,
    [CType]         NVARCHAR (15) NOT NULL,
    [CBookmarkTime] DATETIME      NULL,
    PRIMARY KEY CLUSTERED ([CStaffId] ASC, [CContentId] ASC, [CType] ASC),
    CONSTRAINT [FKD06D39DB9E3C3476] FOREIGN KEY ([CStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FKD06D39DB9F2A2E67] FOREIGN KEY ([CContentId]) REFERENCES [dbo].[TContent] ([CContentId])
);


GO

CREATE TABLE [dbo].[TAccountPeriodCloseFacility] (
    [CAccountPeriodClose] DATETIME      NOT NULL,
    [CDepartCode]         NVARCHAR (20) NOT NULL,
    [CDepartStartDate]    DATETIME      NOT NULL,
    [CPeriodClose]        BIT           NULL,
    [CEditDate]           DATETIME      NULL,
    [CStaffId]            NVARCHAR (30) NULL,
    PRIMARY KEY CLUSTERED ([CAccountPeriodClose] ASC, [CDepartCode] ASC, [CDepartStartDate] ASC),
    CONSTRAINT [FKEBE5DC8118609A82] FOREIGN KEY ([CAccountPeriodClose]) REFERENCES [dbo].[TAccountPeriodClose] ([CCloseMonth]),
    CONSTRAINT [FKEBE5DC81282531E2] FOREIGN KEY ([CDepartCode], [CDepartStartDate]) REFERENCES [dbo].[TFacility] ([CDepartCode], [CDepartStartDate]),
    CONSTRAINT [FKEBE5DC819E3C3476] FOREIGN KEY ([CStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[TFundsPlan] (
    [CYyyy]        NVARCHAR (4)   NOT NULL,
    [CSeq]         INT            NOT NULL,
    [CType]        NVARCHAR (255) NOT NULL,
    [CType2]       NVARCHAR (255) NULL,
    [CType3]       NVARCHAR (255) NULL,
    [CBuget]       BIGINT         NULL,
    [CStipulation] BIGINT         NULL,
    [CAmt1]        BIGINT         NULL,
    [CAmt2]        BIGINT         NULL,
    [CAmt3]        BIGINT         NULL,
    [CAmt4]        BIGINT         NULL,
    [CAmt5]        BIGINT         NULL,
    [CAmt6]        BIGINT         NULL,
    [CAmt7]        BIGINT         NULL,
    [CAmt8]        BIGINT         NULL,
    [CAmt9]        BIGINT         NULL,
    [CAmt10]       BIGINT         NULL,
    [CAmt11]       BIGINT         NULL,
    [CAmt12]       BIGINT         NULL,
    [CEtc]         NVARCHAR (255) NULL,
    [CIsFix1]      BIT            NULL,
    [CIsFix2]      BIT            NULL,
    [CIsFix3]      BIT            NULL,
    [CIsFix4]      BIT            NULL,
    [CIsFix5]      BIT            NULL,
    [CIsFix6]      BIT            NULL,
    [CIsFix7]      BIT            NULL,
    [CIsFix8]      BIT            NULL,
    [CIsFix9]      BIT            NULL,
    [CIsFix10]     BIT            NULL,
    [CIsFix11]     BIT            NULL,
    [CIsFix12]     BIT            NULL,
    PRIMARY KEY CLUSTERED ([CYyyy] ASC, [CSeq] ASC, [CType] ASC)
);


GO

CREATE TABLE [dbo].[TToDoType] (
    [CId]            NVARCHAR (255) NOT NULL,
    [CName0]         NVARCHAR (50)  NOT NULL,
    [CName1]         NVARCHAR (50)  NULL,
    [CName2]         NVARCHAR (50)  NULL,
    [CName3]         NVARCHAR (50)  NULL,
    [CName4]         NVARCHAR (50)  NULL,
    [CDisplayIndex]  INT            NOT NULL,
    [CEnabled]       BIT            NOT NULL,
    [CSelectable]    BIT            NOT NULL,
    [CProcessBeanId] NVARCHAR (200) NULL,
    [CRemark]        NTEXT          NULL,
    PRIMARY KEY CLUSTERED ([CId] ASC)
);


GO

CREATE TABLE [dbo].[TAddress] (
    [CAddressId]       BIGINT         IDENTITY (1, 1) NOT NULL,
    [CType]            NVARCHAR (20)  NULL,
    [COwnerStaffId]    NVARCHAR (30)  NULL,
    [CAddressFolderId] BIGINT         NULL,
    [CName]            NVARCHAR (50)  NULL,
    [CNickName]        NVARCHAR (50)  NULL,
    [CStaffId]         NVARCHAR (30)  NULL,
    [CCompanyName]     NVARCHAR (50)  NULL,
    [CDepartName]      NVARCHAR (50)  NULL,
    [CLevelName]       NVARCHAR (50)  NULL,
    [CCompanyPostNo1]  NVARCHAR (10)  NULL,
    [CCompanyAddress1] NVARCHAR (200) NULL,
    [CCompanyPostNo2]  NVARCHAR (10)  NULL,
    [CCompanyAddress2] NVARCHAR (200) NULL,
    [CTelephone]       NVARCHAR (50)  NULL,
    [CInnerNo]         NVARCHAR (50)  NULL,
    [CFaxNo]           NVARCHAR (50)  NULL,
    [CEmailAddress]    NVARCHAR (200) NULL,
    [CHomePostNo]      NVARCHAR (10)  NULL,
    [CHomeAddress]     NVARCHAR (200) NULL,
    [CMobileNo]        NVARCHAR (50)  NULL,
    [CRegStaffId]      NVARCHAR (30)  NULL,
    [CRegDateTime]     DATETIME       NULL,
    [CModStaffId]      NVARCHAR (30)  NULL,
    [CModDateTime]     DATETIME       NULL,
    [CRemark]          NTEXT          NULL,
    [CBirthday]        NVARCHAR (20)  NULL,
    [CDateType]        NVARCHAR (2)   NULL,
    [CTempInt0]        INT            NULL,
    [CTempInt1]        INT            NULL,
    [CTempInt2]        INT            NULL,
    [CCompanyId]       BIGINT         NULL,
    [CTemp1]           NVARCHAR (100) NULL,
    [CTemp2]           NVARCHAR (100) NULL,
    [CTemp3]           NVARCHAR (100) NULL,
    [CTemp4]           NVARCHAR (100) NULL,
    [CTemp5]           NVARCHAR (100) NULL,
    CONSTRAINT [PK__TAddress__AAF00B001AF1EC77] PRIMARY KEY CLUSTERED ([CAddressId] ASC),
    CONSTRAINT [FK_rhxl8lg7d3aatbqyhardd8bx5] FOREIGN KEY ([CCompanyId]) REFERENCES [dbo].[TPartener] ([CId]),
    CONSTRAINT [FK34B2ED0019E633C8] FOREIGN KEY ([CRegStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK34B2ED003C795E8B] FOREIGN KEY ([CAddressFolderId]) REFERENCES [dbo].[TAddressFolder] ([CFolderId]),
    CONSTRAINT [FK34B2ED005E62820E] FOREIGN KEY ([CStaffId]) REFERENCES [dbo].[TStaffAddress] ([CStaffId]),
    CONSTRAINT [FK34B2ED00E77FCD9A] FOREIGN KEY ([CModStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[DL_MsgLog_All] (
    [msg_idx]         BIGINT          IDENTITY (1, 1) NOT NULL,
    [branch_id]       NVARCHAR (20)   NULL,
    [msg_category]    NVARCHAR (255)  NULL,
    [msg_type]        NVARCHAR (255)  NULL,
    [sender_staff_id] NVARCHAR (20)   NULL,
    [sender_name]     NVARCHAR (50)   NULL,
    [sender_phone]    NVARCHAR (50)   NULL,
    [receiver_name]   NVARCHAR (50)   NULL,
    [receiver_phone]  NVARCHAR (50)   NULL,
    [contents]        NVARCHAR (4000) NULL,
    [sendtime]        DATETIME        NULL,
    [real_sendtime]   DATETIME        NULL,
    [send_result]     NVARCHAR (50)   NULL,
    [return_code]     NVARCHAR (50)   NULL,
    [return_name]     NVARCHAR (255)  NULL,
    [related_id]      INT             NULL,
    CONSTRAINT [PK_DL_MsgLog_All_1] PRIMARY KEY CLUSTERED ([msg_idx] ASC)
);


GO

CREATE TABLE [dbo].[TRegistCounselCognitive] (
    [CRcDepartCode]      NVARCHAR (20)  NOT NULL,
    [CRcDepartStartDate] DATETIME       NOT NULL,
    [CRcCode]            NVARCHAR (50)  NOT NULL,
    [CRcNo]              INT            NOT NULL,
    [CCognitiveSort]     INT            NOT NULL,
    [CCognitivePath]     NVARCHAR (255) NULL,
    CONSTRAINT [PK_TRegistCounselCognitive] PRIMARY KEY CLUSTERED ([CRcDepartCode] ASC, [CRcDepartStartDate] ASC, [CRcCode] ASC, [CRcNo] ASC, [CCognitiveSort] ASC),
    CONSTRAINT [FK_TRegistCounsel_TRegistCounselCognitive] FOREIGN KEY ([CRcDepartCode], [CRcDepartStartDate], [CRcCode], [CRcNo]) REFERENCES [dbo].[TRegistCounsel] ([CStdDepartCode], [CStdDepartStartDate], [CStdCode], [CNo]),
    CONSTRAINT [FKA9D373AFD4623E3E] FOREIGN KEY ([CCognitivePath]) REFERENCES [dbo].[TCognitivePath] ([CCode])
);


GO

CREATE TABLE [dbo].[TMailFilter] (
    [CStaffId]         NVARCHAR (30)  NOT NULL,
    [CFilterSeq]       INT            NOT NULL,
    [CMailType]        NVARCHAR (1)   NOT NULL,
    [CDisplayIndex]    INT            NOT NULL,
    [CName]            NVARCHAR (255) NULL,
    [CFilterCondition] NVARCHAR (10)  NULL,
    [CFolderStaffId]   NVARCHAR (30)  NULL,
    [CFolderId]        INT            NULL,
    PRIMARY KEY CLUSTERED ([CStaffId] ASC, [CFilterSeq] ASC),
    CONSTRAINT [FKECF9DB83ED13E2ED] FOREIGN KEY ([CFolderStaffId], [CFolderId]) REFERENCES [dbo].[TMailFolder] ([CStaffId], [CFolderId])
);


GO

CREATE TABLE [dbo].[TCourseRegister] (
    [CCourseSeq]          INT            IDENTITY (1, 1) NOT NULL,
    [CDepartCode]         NVARCHAR (20)  NULL,
    [CDepartStartDate]    DATETIME       NULL,
    [CMemberCode]         NVARCHAR (50)  NULL,
    [CProductCharge]      INT            NULL,
    [CStartDate]          DATETIME       NULL,
    [CEndDate]            DATETIME       NULL,
    [CTrainer]            NVARCHAR (30)  NULL,
    [CManager]            NVARCHAR (30)  NULL,
    [CRemarks]            NVARCHAR (255) NULL,
    [CCourseStatus]       NVARCHAR (255) NULL,
    [CSuperviseCount]     INT            NULL,
    [CPaymentCount]       INT            NULL,
    [CPointCount]         INT            NULL,
    [CUsesCount]          INT            NULL,
    [CRemainCount]        INT            NULL,
    [CSubtractCount]      FLOAT (53)     NULL,
    [CChangeBookingCount] INT            NULL,
    [CMonday]             BIT            NULL,
    [CTuesday]            BIT            NULL,
    [CWednesday]          BIT            NULL,
    [CThursday]           BIT            NULL,
    [CFriday]             BIT            NULL,
    [CSaturday]           BIT            NULL,
    [CSunday]             BIT            NULL,
    [CMonthAmt]           INT            NULL,
    [CDiscountAmt]        INT            NULL,
    [CRegDate]            DATETIME       NOT NULL,
    [CRegStaff]           NVARCHAR (30)  NULL,
    [CEditDate]           DATETIME       NOT NULL,
    [CEditStaff]          NVARCHAR (30)  NULL,
    PRIMARY KEY CLUSTERED ([CCourseSeq] ASC),
    CONSTRAINT [FK_42sajq7kewqq0u4roc7krd0g7] FOREIGN KEY ([CRegStaff]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_4jk956yk3ssn0oeoo33myxqk1] FOREIGN KEY ([CManager]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_663qvxui9ikvw2qk6bqcj92gj] FOREIGN KEY ([CTrainer]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_k0vrkmgnndc1dv2cwi1sw1ndy] FOREIGN KEY ([CProductCharge]) REFERENCES [dbo].[TProductCharge] ([CChargeSeq]),
    CONSTRAINT [FK_mbwf25tb62lryhkah6sweygo7] FOREIGN KEY ([CDepartCode], [CDepartStartDate], [CMemberCode]) REFERENCES [dbo].[TMember] ([CDepartCode], [CDepartStartDate], [CMemberCode]),
    CONSTRAINT [FK_mfd880vnmihylsmjk7pg83781] FOREIGN KEY ([CEditStaff]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[Z_CONVERT] (
    [MSG] NVARCHAR (255) NULL
);


GO

CREATE TABLE [dbo].[TMessage] (
    [CStaffId]     NVARCHAR (30)  NOT NULL,
    [CCreateTime]  DATETIME       NOT NULL,
    [CMessageTime] DATETIME       NOT NULL,
    [CSenderId]    NVARCHAR (30)  NOT NULL,
    [CReceiverId]  NVARCHAR (30)  NULL,
    [CType]        NVARCHAR (255) NULL,
    [CStyle]       NVARCHAR (200) NULL,
    [CMessage]     NTEXT          NULL,
    [CFile]        BIGINT         NULL,
    PRIMARY KEY CLUSTERED ([CStaffId] ASC, [CCreateTime] ASC, [CMessageTime] ASC, [CSenderId] ASC),
    CONSTRAINT [FKB20651133268D3F9] FOREIGN KEY ([CFile]) REFERENCES [dbo].[TFile] ([CFileId]),
    CONSTRAINT [FKB2065113336574C2] FOREIGN KEY ([CStaffId], [CCreateTime]) REFERENCES [dbo].[TMessageRoom] ([CCreaterId], [CCreateTime]),
    CONSTRAINT [FKB2065113841B9DB1] FOREIGN KEY ([CSenderId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FKB2065113842C9A2B] FOREIGN KEY ([CReceiverId]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[TComplaintContentResult] (
    [CId]         BIGINT        IDENTITY (1, 1) NOT NULL,
    [CContentId]  BIGINT        NULL,
    [CContentSeq] INT           NULL,
    [CRegStaffId] NVARCHAR (30) NULL,
    [CRegTime]    DATETIME      NULL,
    [CUpdTime]    DATETIME      NULL,
    [CIsPublic]   BIT           NULL,
    [CResultType] NVARCHAR (20) NULL,
    [CText]       NTEXT         NULL,
    PRIMARY KEY CLUSTERED ([CId] ASC),
    CONSTRAINT [FK_af5a456qirui17ix15jp7mnef] FOREIGN KEY ([CContentId], [CContentSeq]) REFERENCES [dbo].[TComplaintContentSub] ([CId], [CSeq]),
    CONSTRAINT [FK_b4xuwe09od5tqpdr99rgk1asn] FOREIGN KEY ([CRegStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[TTutorInfo] (
    [CTutorSeq]             INT            IDENTITY (1, 1) NOT NULL,
    [CDepartCode]           NVARCHAR (20)  NULL,
    [CDepartStartDate]      DATETIME       NULL,
    [CTutorName]            NVARCHAR (255) NULL,
    [CContact]              NVARCHAR (255) NULL,
    [CSubjectMain]          NVARCHAR (255) NULL,
    [CSubjectSub]           NVARCHAR (255) NULL,
    [CSubjectThird]         NVARCHAR (255) NULL,
    [CWorkingWeek]          NVARCHAR (255) NULL,
    [CSchedule]             NVARCHAR (255) NULL,
    [CInformation]          NVARCHAR (255) NULL,
    [CRemark]               NVARCHAR (255) NULL,
    [CStop]                 BIT            NULL,
    [CNameColor]            NVARCHAR (255) NULL,
    [CId]                   NVARCHAR (255) NULL,
    [CPassword]             NVARCHAR (255) NULL,
    [CEmail]                NVARCHAR (255) NULL,
    [CCommaRest]            INT            NULL,
    [CDCRest]               INT            NULL,
    [CSocialSecurityNumber] NVARCHAR (255) NULL,
    [CBankAccount]          NVARCHAR (255) NULL,
    [CAddress]              NVARCHAR (255) DEFAULT (NULL) NULL,
    [CJoinDate]             DATETIME       NULL,
    PRIMARY KEY CLUSTERED ([CTutorSeq] ASC),
    CONSTRAINT [FK_sk99pe575d6p5l3pp1lfihtpl] FOREIGN KEY ([CDepartCode], [CDepartStartDate]) REFERENCES [dbo].[TFacility] ([CDepartCode], [CDepartStartDate])
);


GO

CREATE TABLE [dbo].[TComplaintOffice] (
    [CId]            BIGINT        IDENTITY (1, 1) NOT NULL,
    [CName]          NVARCHAR (20) NOT NULL,
    [CEnabled]       BIT           NOT NULL,
    [CDisplayIndex]  INT           NULL,
    [CMasterId1]     NVARCHAR (30) NULL,
    [CMasterId2]     NVARCHAR (30) NULL,
    [COfficeStaffId] NVARCHAR (30) NULL,
    PRIMARY KEY CLUSTERED ([CId] ASC),
    CONSTRAINT [FK_bjx8o4n7ties4vc9umfdtp5u6] FOREIGN KEY ([CMasterId2]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_hgf72ascnpvuye3s2nq6enw2c] FOREIGN KEY ([COfficeStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_ltjm0fx4sa2452ytryaj7tsre] FOREIGN KEY ([CMasterId1]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[TAnalytics_Student_Count] (
    [CDepartCode]        NVARCHAR (20)   NOT NULL,
    [지점명]                NVARCHAR (50)   NULL,
    [상담관리(월초)]           INT             NULL,
    [상담관리(월초누락연장)]       INT             NULL,
    [상담관리(신규)]           INT             NULL,
    [상담관리(복회)]           INT             NULL,
    [상담관리(월말)]           INT             NULL,
    [상담관리(월말누락연장)]       INT             NULL,
    [개별지도(월초)]           INT             NULL,
    [개별지도(월초누락연장)]       INT             NULL,
    [개별지도(신규)]           INT             NULL,
    [개별지도(복회)]           INT             NULL,
    [개별지도(월말)]           INT             NULL,
    [개별지도(월말누락연장)]       INT             NULL,
    [CFirstDate]         DATETIME        NOT NULL,
    [salesMoney]         DECIMAL (18, 2) CONSTRAINT [DF_TAnalytics_Student_Count_salesMoney] DEFAULT ((0)) NULL,
    [expenseMoney]       DECIMAL (18, 2) CONSTRAINT [DF_TAnalytics_Student_Count_expenseMoney] DEFAULT ((0)) NULL,
    [counselTotalMoney]  DECIMAL (18, 2) CONSTRAINT [DF_TAnalytics_Student_Count_counselTotalMoney] DEFAULT ((0)) NULL,
    [tutoringTotalMoeny] DECIMAL (18, 2) CONSTRAINT [DF_TAnalytics_Student_Count_tutoringTotalMoeny] DEFAULT ((0)) NULL,
    [CCalcDate]          DATETIME        NOT NULL,
    CONSTRAINT [PK_TAnalytics_Student_Count] PRIMARY KEY CLUSTERED ([CFirstDate] ASC, [CDepartCode] ASC, [CCalcDate] ASC)
);


GO

CREATE TABLE [dbo].[TApprComment] (
    [CDocId]           BIGINT        NOT NULL,
    [CRegTime]         DATETIME      NOT NULL,
    [CCommenterId]     NVARCHAR (30) NOT NULL,
    [CDepartCode]      NVARCHAR (20) NULL,
    [CDepartStartDate] DATETIME      NULL,
    [CLevelType]       NVARCHAR (10) NULL,
    [CLevelCode]       NVARCHAR (10) NULL,
    [CLevelSeq]        INT           NULL,
    [CType]            NVARCHAR (15) NOT NULL,
    [CImplState]       NVARCHAR (15) NULL,
    [CComment]         NTEXT         NULL,
    [CUpdTime]         DATETIME      NULL,
    [CCommentDelYn]    BIT           DEFAULT ((0)) NULL,
    [CToStaffId]       NVARCHAR (30) NULL,
    PRIMARY KEY CLUSTERED ([CDocId] ASC, [CRegTime] ASC, [CCommenterId] ASC),
    CONSTRAINT [FK_6jbcaidlk6bh72xds3x7inr83] FOREIGN KEY ([CToStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FKF09235BA48D9611] FOREIGN KEY ([CDepartCode], [CDepartStartDate]) REFERENCES [dbo].[TDepartment] ([CDepartCode], [CDepartStartDate]),
    CONSTRAINT [FKF09235BA5A5E7F62] FOREIGN KEY ([CCommenterId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FKF09235BAE6DE7DCD] FOREIGN KEY ([CLevelType], [CLevelCode], [CLevelSeq]) REFERENCES [dbo].[TStaffLevel] ([CLevelType], [CLevelCode], [CLevelSeq]),
    CONSTRAINT [FKF09235BAF064EB59] FOREIGN KEY ([CDocId]) REFERENCES [dbo].[TApprDoc] ([CDocId])
);


GO

CREATE TABLE [dbo].[TMyContents] (
    [CMyContentId]       BIGINT IDENTITY (1, 1) NOT NULL,
    [CMyContentFolderId] BIGINT NULL,
    [CContentId]         BIGINT NULL,
    PRIMARY KEY CLUSTERED ([CMyContentId] ASC),
    CONSTRAINT [FK_gtsnjo85304wb3hxlvetgled0] FOREIGN KEY ([CMyContentFolderId]) REFERENCES [dbo].[TMyContentFolder] ([CFolderId]),
    CONSTRAINT [FK_khmglrdhff03r9xsumjth5v7k] FOREIGN KEY ([CContentId]) REFERENCES [dbo].[TContent] ([CContentId])
);


GO

CREATE TABLE [dbo].[TApprStaffGuideLine] (
    [CId]                       INT           IDENTITY (1, 1) NOT NULL,
    [CFormId]                   NVARCHAR (15) NULL,
    [CConductDepartCode]        NVARCHAR (20) NULL,
    [CConductDepartStartDate]   DATETIME      NULL,
    [CStaffLineId]              BIGINT        NULL,
    [CName]                     NVARCHAR (50) NOT NULL,
    [COrder]                    INT           NULL,
    [CConductFacilityCode]      NVARCHAR (20) NULL,
    [CConductFacilityStartDate] DATETIME      NULL,
    [CExceptMe]                 BIT           NULL,
    [CExceptLowOrderStaff]      BIT           NULL,
    PRIMARY KEY CLUSTERED ([CId] ASC),
    CONSTRAINT [FK_30jj3hmn4ldt3h0f2pgp9wjgd] FOREIGN KEY ([CFormId]) REFERENCES [dbo].[TApprForm] ([CFormId]),
    CONSTRAINT [FK_l8o8rrtxaf2x4blpob2rteykr] FOREIGN KEY ([CStaffLineId]) REFERENCES [dbo].[TApprStaffLine] ([CLineId]),
    CONSTRAINT [FK_qj9p51wn874tsvcj8arys8l2e] FOREIGN KEY ([CConductDepartCode], [CConductDepartStartDate]) REFERENCES [dbo].[TDepartment] ([CDepartCode], [CDepartStartDate]),
    CONSTRAINT [FK_qw1c7m07lim973i7yt8djwxe0] FOREIGN KEY ([CConductFacilityCode], [CConductFacilityStartDate]) REFERENCES [dbo].[TFacility] ([CDepartCode], [CDepartStartDate])
);


GO

CREATE TABLE [dbo].[TStudentTutoringRefund] (
    [CStdBrcDptCode]        NVARCHAR (20)  NOT NULL,
    [CStdBrcDptStartDate]   DATETIME       NOT NULL,
    [CStdCode]              NVARCHAR (50)  NOT NULL,
    [CNo]                   INT            NOT NULL,
    [CEndDatePayment]       DATETIME       NULL,
    [CEndDateRefund]        DATETIME       NULL,
    [CRefundCommas]         INT            NULL,
    [CRefundCalcPrice]      INT            NULL,
    [CRefundPrice]          INT            NULL,
    [CRefundComment]        NVARCHAR (255) NULL,
    [CRefundDate]           DATETIME       NULL,
    [CRefundStatus]         NVARCHAR (50)  NULL,
    [CRefundRoyalty]        INT            NULL,
    [CRefundFixRoyalty]     INT            NULL,
    [CRefundProofSeq]       BIGINT         NULL,
    [CRefundModifiedCommas] INT            CONSTRAINT [DF_TStudentTutoringRefund_CRefundModifiedCommas] DEFAULT ((0)) NULL,
    [CUpDate]               DATETIME       CONSTRAINT [DF_TStudentTutoringRefund_CUpDate] DEFAULT (getdate()) NULL,
    PRIMARY KEY CLUSTERED ([CStdBrcDptCode] ASC, [CStdBrcDptStartDate] ASC, [CStdCode] ASC, [CNo] ASC),
    CONSTRAINT [FK_byyt3d3q67u4lv0oregc4byyu] FOREIGN KEY ([CRefundProofSeq]) REFERENCES [dbo].[TSaleProof] ([CProofSeq]),
    CONSTRAINT [FK_TStudentTutoring_TStudentTutoringRefund] FOREIGN KEY ([CStdBrcDptCode], [CStdBrcDptStartDate], [CStdCode], [CNo]) REFERENCES [dbo].[TStudentTutoring] ([CStdDepartCode], [CStdDepartStartDate], [CStdCode], [CNo])
);


GO

CREATE TABLE [dbo].[tb_DiFcDivide] (
    [it_DiFcDivideIdx]      INT           IDENTITY (1, 1) NOT NULL,
    [st_DiFcDivideCategory] NVARCHAR (50) NULL,
    [it_DiFcDivideYear]     INT           NULL,
    [it_DiFcDivideM1]       INT           NULL,
    [it_DiFcDivideM2]       INT           NULL,
    [it_DiFcDivideM3]       INT           NULL,
    [it_DiFcDivideM4]       INT           NULL,
    [it_DiFcDivideM5]       INT           NULL,
    [it_DiFcDivideM6]       INT           NULL,
    [it_DiFcDivideM7]       INT           NULL,
    [it_DiFcDivideM8]       INT           NULL,
    [it_DiFcDivideM9]       INT           NULL,
    [it_DiFcDivideM10]      INT           NULL,
    [it_DiFcDivideM11]      INT           NULL,
    [it_DiFcDivideM12]      INT           NULL,
    [dt_DiFiDivideDelete]   DATETIME      NULL,
    CONSTRAINT [PK_tb_DiFcDivide] PRIMARY KEY CLUSTERED ([it_DiFcDivideIdx] ASC)
);


GO

CREATE TABLE [dbo].[TTestCoupon] (
    [CBranchCode]          NVARCHAR (20)  NOT NULL,
    [CBranchStartDate]     DATETIME       NOT NULL,
    [CCouponIssueDate]     DATETIME       NOT NULL,
    [CCouponNo]            INT            NOT NULL,
    [CCode]                NVARCHAR (255) NOT NULL,
    [CCouponStatus]        NVARCHAR (15)  NULL,
    [CTestBranchCode]      NVARCHAR (20)  NULL,
    [CTestBranchStartDate] DATETIME       NULL,
    [CTestCode]            NVARCHAR (50)  NULL,
    [CTestNo]              INT            NULL,
    [CUseDate]             DATETIME       NULL,
    PRIMARY KEY CLUSTERED ([CBranchCode] ASC, [CBranchStartDate] ASC, [CCouponIssueDate] ASC, [CCouponNo] ASC, [CCode] ASC),
    CONSTRAINT [FK9D4556CC687433DD] FOREIGN KEY ([CTestBranchCode], [CTestBranchStartDate], [CTestCode], [CTestNo]) REFERENCES [dbo].[TTestInfo] ([CStdBranchCode], [CStdBranchStartDate], [CCode], [CNo]),
    CONSTRAINT [FK9D4556CCD117984] FOREIGN KEY ([CBranchCode], [CBranchStartDate], [CCouponIssueDate], [CCouponNo]) REFERENCES [dbo].[TTestCouponGroup] ([CBranchCode], [CBranchStartDate], [CIssueDate], [CNo])
);


GO

CREATE TABLE [dbo].[tb_QnaCatManageLog] (
    [it_QnaCatManageLogIdx]  INT           IDENTITY (1, 1) NOT NULL,
    [it_QnaCatIdx]           INT           NOT NULL,
    [st_CStaffIdBefore]      NVARCHAR (30) NOT NULL,
    [st_CStaffIdAfter]       NVARCHAR (30) NOT NULL,
    [st_CStaffIdMake]        NVARCHAR (30) NOT NULL,
    [dt_QnaCatManageLogMake] DATETIME      NOT NULL,
    CONSTRAINT [PK_tb_QnaCatManageLog] PRIMARY KEY CLUSTERED ([it_QnaCatManageLogIdx] ASC),
    CONSTRAINT [FK_tb_QnaCatManageLog_tb_QnaCat] FOREIGN KEY ([it_QnaCatIdx]) REFERENCES [dbo].[tb_QnaCat] ([it_QnaCatIdx])
);


GO

CREATE TABLE [dbo].[TFacility] (
    [CDepartCode]         NVARCHAR (20)  NOT NULL,
    [CDepartStartDate]    DATETIME       NOT NULL,
    [CFacilityCode]       NVARCHAR (20)  NULL,
    [COpenName0]          NVARCHAR (50)  NULL,
    [COpenName1]          NVARCHAR (50)  NULL,
    [COpenName2]          NVARCHAR (50)  NULL,
    [COpenName3]          NVARCHAR (50)  NULL,
    [COpenName4]          NVARCHAR (50)  NULL,
    [COpenShortName0]     NVARCHAR (20)  NULL,
    [COpenShortName1]     NVARCHAR (20)  NULL,
    [COpenShortName2]     NVARCHAR (20)  NULL,
    [COpenShortName3]     NVARCHAR (20)  NULL,
    [COpenShortName4]     NVARCHAR (20)  NULL,
    [CFacilityType]       NVARCHAR (20)  NULL,
    [CPostNo]             NVARCHAR (10)  NULL,
    [CAddress]            NVARCHAR (255) NULL,
    [CTelephone]          NVARCHAR (50)  NULL,
    [CFaxNo]              NVARCHAR (50)  NULL,
    [CRegistrationNo]     NVARCHAR (50)  NULL,
    [CSignShortCode]      NVARCHAR (10)  NULL,
    [CTemp1]              NVARCHAR (100) NULL,
    [CTemp2]              NVARCHAR (100) NULL,
    [CTemp3]              NVARCHAR (100) NULL,
    [CTemp4]              NVARCHAR (100) NULL,
    [CTemp5]              NVARCHAR (100) NULL,
    [CManagerId]          NVARCHAR (30)  NULL,
    [CTmpDouble1]         FLOAT (53)     NULL,
    [CTmpDouble2]         FLOAT (53)     NULL,
    [CTmpDouble3]         FLOAT (53)     NULL,
    [CTmpDouble4]         FLOAT (53)     NULL,
    [CTmpDouble5]         FLOAT (53)     NULL,
    [CTmpDate1]           DATETIME       NULL,
    [CTmpDate2]           DATETIME       NULL,
    [CTmpDate3]           DATETIME       NULL,
    [CTmpDate4]           DATETIME       NULL,
    [CTmpDate5]           DATETIME       NULL,
    [CTmpText1]           NTEXT          NULL,
    [CTmpText2]           NTEXT          NULL,
    [CTmpText3]           NTEXT          NULL,
    [CMaxAllowUserCount]  INT            NULL,
    [CTmpGroup1]          NVARCHAR (50)  NULL,
    [CTmpCode1]           NVARCHAR (50)  NULL,
    [CTmpGroup2]          NVARCHAR (50)  NULL,
    [CTmpCode2]           NVARCHAR (50)  NULL,
    [CTmpGroup3]          NVARCHAR (50)  NULL,
    [CTmpCode3]           NVARCHAR (50)  NULL,
    [CTmpGroup4]          NVARCHAR (50)  NULL,
    [CTmpCode4]           NVARCHAR (50)  NULL,
    [CTmpGroup5]          NVARCHAR (50)  NULL,
    [CTmpCode5]           NVARCHAR (50)  NULL,
    [CDefaultMailDomain]  NVARCHAR (100) NULL,
    [CAllowFromOtherAdd]  BIT            NULL,
    [CAllowToOtherAdd]    BIT            NULL,
    [CMaxAllowUser2Count] INT            NULL,
    [CMaxAllowUser3Count] INT            NULL,
    [CSignLogoFileId]     BIGINT         NULL,
    [CSignSealFileId]     BIGINT         NULL,
    [CSignSealText]       NVARCHAR (100) NULL,
    [CApprModPermStaffId] NVARCHAR (30)  NULL,
    [CHomepageUrl]        NVARCHAR (100) NULL,
    [CMessengerUrl]       NVARCHAR (255) NULL,
    [CMessengerPort]      INT            NULL,
    PRIMARY KEY CLUSTERED ([CDepartCode] ASC, [CDepartStartDate] ASC),
    CONSTRAINT [FK_4kh126fj7mgou7xhllgabutph] FOREIGN KEY ([CTmpGroup5], [CTmpCode5]) REFERENCES [dbo].[TCommonCode] ([CCodeGroup], [CCode]),
    CONSTRAINT [FK_5ima7tp5qvuxq5j1m4qs9mmqk] FOREIGN KEY ([CTmpGroup2], [CTmpCode2]) REFERENCES [dbo].[TCommonCode] ([CCodeGroup], [CCode]),
    CONSTRAINT [FK_7446lxg7w0kdxe693axjrulqd] FOREIGN KEY ([CSignSealFileId]) REFERENCES [dbo].[TFile] ([CFileId]),
    CONSTRAINT [FK_87i6tsceaj8yj107u2pmbh4ut] FOREIGN KEY ([CTmpGroup3], [CTmpCode3]) REFERENCES [dbo].[TCommonCode] ([CCodeGroup], [CCode]),
    CONSTRAINT [FK_8or0333i8hw4h2ii1kgdgfn1l] FOREIGN KEY ([CTmpGroup1], [CTmpCode1]) REFERENCES [dbo].[TCommonCode] ([CCodeGroup], [CCode]),
    CONSTRAINT [FK_aooo8j8u97fkml0x2m1tjr52l] FOREIGN KEY ([CSignLogoFileId]) REFERENCES [dbo].[TFile] ([CFileId]),
    CONSTRAINT [FK_ivf73imo6juq9w03xjaf5dy6a] FOREIGN KEY ([CApprModPermStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_n5qxoafy6rab5172d7hsfuhw7] FOREIGN KEY ([CTmpGroup4], [CTmpCode4]) REFERENCES [dbo].[TCommonCode] ([CCodeGroup], [CCode]),
    CONSTRAINT [FKC82D3F173F6CE6C3] FOREIGN KEY ([CManagerId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FKC82D3F1748D9611] FOREIGN KEY ([CDepartCode], [CDepartStartDate]) REFERENCES [dbo].[TDepartment] ([CDepartCode], [CDepartStartDate])
);


GO

CREATE TABLE [dbo].[TGlobalAddrDongKorea] (
    [CBjDongCode] NVARCHAR (10) NOT NULL,
    [CSiDo]       NVARCHAR (40) NOT NULL,
    [CSiGunGu]    NVARCHAR (40) NULL,
    [CDong]       NVARCHAR (40) NULL,
    [CRi]         NVARCHAR (40) NULL,
    [CCreateTime] NVARCHAR (8)  NULL,
    [COutTime]    NVARCHAR (8)  NULL,
    [CPosX]       FLOAT (53)    NULL,
    [CPosY]       FLOAT (53)    NULL,
    PRIMARY KEY CLUSTERED ([CBjDongCode] ASC)
);


GO

CREATE TABLE [dbo].[TApprFormHtmlUi] (
    [CUiId]         NVARCHAR (15)  NOT NULL,
    [CName]         NVARCHAR (50)  NOT NULL,
    [CFormat]       NVARCHAR (100) NULL,
    [CAliasName]    NVARCHAR (30)  NULL,
    [CDisplayIndex] INT            NOT NULL,
    PRIMARY KEY CLUSTERED ([CUiId] ASC)
);


GO

CREATE TABLE [dbo].[TSingleSignOnKey] (
    [CTempKey]     NVARCHAR (100) NOT NULL,
    [CStaffId]     NVARCHAR (30)  NOT NULL,
    [CStaffNo]     NVARCHAR (30)  NOT NULL,
    [CStaffName]   NVARCHAR (50)  NULL,
    [CRegDateTime] DATETIME       NOT NULL,
    [CVolatility]  BIT            NULL,
    [CTemp1]       NVARCHAR (255) NULL,
    [CTemp2]       NVARCHAR (255) NULL,
    [CTemp3]       NVARCHAR (255) NULL,
    [CTemp4]       NVARCHAR (255) NULL,
    [CTemp5]       NVARCHAR (255) NULL,
    [CText1]       NTEXT          NULL,
    [CText2]       NTEXT          NULL,
    [CText3]       NTEXT          NULL,
    [CText4]       NTEXT          NULL,
    [CText5]       NTEXT          NULL,
    PRIMARY KEY CLUSTERED ([CTempKey] ASC)
);


GO

CREATE TABLE [dbo].[TGlobalAddressKorea] (
    [CBuildingMngNo]       NVARCHAR (25)  NOT NULL,
    [CBjDongCode]          NVARCHAR (10)  NULL,
    [CSiDoName]            NVARCHAR (40)  NULL,
    [CSiGunGuName]         NVARCHAR (40)  NULL,
    [CBjEupMyunDongName]   NVARCHAR (40)  NULL,
    [CBjRiName]            NVARCHAR (40)  NULL,
    [CSan]                 NVARCHAR (1)   NULL,
    [CLotNoMain]           INT            NULL,
    [CLotNoSub]            INT            NULL,
    [CRoadCode]            NVARCHAR (12)  NULL,
    [CRoadName]            NVARCHAR (80)  NULL,
    [CBasement]            NVARCHAR (1)   NULL,
    [CBuildingNoMain]      INT            NULL,
    [CBuildingNoSub]       INT            NULL,
    [CPaperBuildingName]   NVARCHAR (40)  NULL,
    [CDetailBuildingName]  NVARCHAR (100) NULL,
    [CEupMyunDongSeq]      NVARCHAR (2)   NULL,
    [CHjDongCode]          NVARCHAR (10)  NULL,
    [CHjDongName]          NVARCHAR (20)  NULL,
    [CPostNo]              NVARCHAR (5)   NULL,
    [CPostSeq]             NVARCHAR (3)   NULL,
    [CPostBuildingName]    NVARCHAR (40)  NULL,
    [CMovedReasonCode]     NVARCHAR (2)   NULL,
    [CNotifiDate]          NVARCHAR (8)   NULL,
    [CPrevRoadAddress]     NVARCHAR (25)  NULL,
    [CSiGunGuBuildingName] NVARCHAR (200) NULL,
    [CSharedHouse]         NVARCHAR (1)   NULL,
    [CBasicAreaNo]         NVARCHAR (5)   NULL,
    [CDetailAddress]       NVARCHAR (1)   NULL,
    [CRemark1]             NVARCHAR (15)  NULL,
    [CRemark2]             NVARCHAR (15)  NULL,
    PRIMARY KEY CLUSTERED ([CBuildingMngNo] ASC)
);


GO

CREATE TABLE [dbo].[TApprDocLog] (
    [CId]            BIGINT        IDENTITY (1, 1) NOT NULL,
    [CApprDocId]     BIGINT        NULL,
    [CStaffId]       NVARCHAR (30) NULL,
    [CActionType]    NVARCHAR (30) NOT NULL,
    [CActionTime]    DATETIME      NOT NULL,
    [CHistoryPreSeq] BIGINT        NULL,
    [CRemark]        NTEXT         NULL,
    [CPrevDocFileId] BIGINT        NULL,
    PRIMARY KEY CLUSTERED ([CId] ASC),
    CONSTRAINT [FK_eaewc64a68y2bnhde45k3dkpa] FOREIGN KEY ([CStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_m5qvgl5i8p6s3np2ni48n2ndw] FOREIGN KEY ([CPrevDocFileId]) REFERENCES [dbo].[TFile] ([CFileId]),
    CONSTRAINT [FK_qr6wubbvxnap2x2ydqgbynlc9] FOREIGN KEY ([CApprDocId]) REFERENCES [dbo].[TApprDoc] ([CDocId])
);


GO

CREATE TABLE [dbo].[TComplaintCompliment] (
    [CId]                  BIGINT         IDENTITY (1, 1) NOT NULL,
    [CPetitionerId]        BIGINT         NULL,
    [CComplimentStaffId]   NVARCHAR (30)  NULL,
    [CComplimentStaffName] NVARCHAR (100) NULL,
    [CTitle]               NVARCHAR (255) NOT NULL,
    [CBody]                NTEXT          NULL,
    [CReply]               NTEXT          NULL,
    [CReplierId]           NVARCHAR (30)  NULL,
    [CRegDate]             DATETIME       NOT NULL,
    [CUpdDate]             DATETIME       NULL,
    [CReplyDate]           DATETIME       NULL,
    [CIp]                  NVARCHAR (50)  NULL,
    PRIMARY KEY CLUSTERED ([CId] ASC),
    CONSTRAINT [FK_d2jsfvahi2j1dxhalgv6gcp2a] FOREIGN KEY ([CReplierId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_gskruegxiawjsdql1p06iepdi] FOREIGN KEY ([CComplimentStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_lfv60rtofpa4r758ejh95q9h0] FOREIGN KEY ([CPetitionerId]) REFERENCES [dbo].[TComplaintPetitioner] ([CId])
);


GO

CREATE TABLE [dbo].[tb_QnaReply] (
    [it_QnaRepay]         INT          IDENTITY (1, 1) NOT NULL,
    [it_QnaIdx]           INT          NOT NULL,
    [st_CstaffId]         NUMERIC (18) NOT NULL,
    [st_QnaAnswerContent] NTEXT        NOT NULL,
    [dt_QnaAnswerMake]    DATETIME     NULL,
    [dt_QnaAnswerDelete]  DATETIME     NULL,
    [dt_QnaAnswerUpdate]  DATETIME     NULL,
    CONSTRAINT [PK_tb_QnaReply] PRIMARY KEY CLUSTERED ([it_QnaRepay] ASC),
    CONSTRAINT [FK_tb_QnaReply_tb_Qna] FOREIGN KEY ([it_QnaIdx]) REFERENCES [dbo].[tb_Qna] ([it_QnaIdx])
);


GO

CREATE TABLE [dbo].[TApprDocReceptHistory] (
    [CDocId]                 BIGINT         NOT NULL,
    [CHistorySeq]            INT            NOT NULL,
    [CSeq]                   INT            NOT NULL,
    [CTitle]                 NVARCHAR (255) NOT NULL,
    [CReceptType]            NVARCHAR (15)  NOT NULL,
    [CDepartGroupId]         NVARCHAR (20)  NULL,
    [CStaffGroupId]          NVARCHAR (20)  NULL,
    [CReceptDepartCode]      NVARCHAR (20)  NULL,
    [CReceptDepartStartDate] DATETIME       NULL,
    [CReceptStaffId]         NVARCHAR (30)  NULL,
    [CReceptStaffLevelType]  NVARCHAR (10)  NULL,
    [CReceptStaffLevelCode]  NVARCHAR (10)  NULL,
    [CReceptStaffLevelSeq]   INT            NULL,
    [CFixed]                 BIT            DEFAULT ((0)) NOT NULL,
    PRIMARY KEY CLUSTERED ([CDocId] ASC, [CHistorySeq] ASC, [CSeq] ASC),
    CONSTRAINT [FK_2vjxafp32l5khqi89ub5mvomd] FOREIGN KEY ([CReceptDepartCode], [CReceptDepartStartDate]) REFERENCES [dbo].[TDepartment] ([CDepartCode], [CDepartStartDate]),
    CONSTRAINT [FK_3lwlooaurtl5n9shmt1b5b051] FOREIGN KEY ([CStaffGroupId]) REFERENCES [dbo].[TStaffGroup] ([CGroupId]),
    CONSTRAINT [FK_3vbog33gxeuv2wyp554dcu9fs] FOREIGN KEY ([CDocId]) REFERENCES [dbo].[TApprDoc] ([CDocId]),
    CONSTRAINT [FK_ivoh6fr30llh8pahdwj1eiti6] FOREIGN KEY ([CReceptStaffLevelType], [CReceptStaffLevelCode], [CReceptStaffLevelSeq]) REFERENCES [dbo].[TStaffLevel] ([CLevelType], [CLevelCode], [CLevelSeq]),
    CONSTRAINT [FK_mtioyt73wa2kw4qp1jl2bj5o0] FOREIGN KEY ([CReceptStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_omratgmihwk82293rcx5baiys] FOREIGN KEY ([CDepartGroupId]) REFERENCES [dbo].[TDepartGroup] ([CGroupId])
);


GO

CREATE TABLE [dbo].[TSalaryStaffTutoring] (
    [CPbDepartCode]      NVARCHAR (20) NOT NULL,
    [CPbDepartStartDate] DATETIME      NOT NULL,
    [CRegDate]           DATETIME      NOT NULL,
    [CCommonGroupCode]   NVARCHAR (50) NOT NULL,
    [CCommonCode]        NVARCHAR (50) NOT NULL,
    [CSalaryTutoring]    BIGINT        NULL,
    [CSalaryPrepare]     BIGINT        NULL,
    [CSalaryDailyCheck]  BIGINT        NULL,
    [CRegStaffId]        NVARCHAR (30) NULL,
    PRIMARY KEY CLUSTERED ([CPbDepartCode] ASC, [CPbDepartStartDate] ASC, [CRegDate] ASC, [CCommonGroupCode] ASC, [CCommonCode] ASC),
    CONSTRAINT [FK239FB14E19E633C8] FOREIGN KEY ([CRegStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK239FB14E9ACE1122] FOREIGN KEY ([CPbDepartCode], [CPbDepartStartDate]) REFERENCES [dbo].[TFacility] ([CDepartCode], [CDepartStartDate]),
    CONSTRAINT [FK239FB14EC74495AF] FOREIGN KEY ([CCommonGroupCode], [CCommonCode]) REFERENCES [dbo].[TCommonCode] ([CCodeGroup], [CCode])
);


GO

CREATE TABLE [dbo].[TDepartGroup] (
    [CGroupId]            NVARCHAR (20)  NOT NULL,
    [CName0]              NVARCHAR (50)  NOT NULL,
    [CName1]              NVARCHAR (50)  NULL,
    [CName2]              NVARCHAR (50)  NULL,
    [CName3]              NVARCHAR (50)  NULL,
    [CName4]              NVARCHAR (50)  NULL,
    [CShortName0]         NVARCHAR (15)  NOT NULL,
    [CShortName1]         NVARCHAR (15)  NULL,
    [CShortName2]         NVARCHAR (15)  NULL,
    [CShortName3]         NVARCHAR (15)  NULL,
    [CShortName4]         NVARCHAR (15)  NULL,
    [CDepth]              INT            NULL,
    [CEnabled]            BIT            NULL,
    [CHeadStaffId]        NVARCHAR (30)  NULL,
    [CGeneralStaffId]     NVARCHAR (30)  NULL,
    [CRemark]             NVARCHAR (255) NULL,
    [CDisplayIndex]       INT            NULL,
    [CParentGroupId]      NVARCHAR (20)  NULL,
    [CFacilityDepartCode] NVARCHAR (20)  NULL,
    [CShowAll]            BIT            DEFAULT ((0)) NOT NULL,
    [CNeedStaff]          BIT            DEFAULT ((0)) NOT NULL,
    [CCreaterId]          NVARCHAR (30)  NULL,
    [CCreatedTime]        DATETIME       NULL,
    [CUpdaterId]          NVARCHAR (30)  NULL,
    [CUpdatedTime]        DATETIME       NULL,
    [CHtml]               NTEXT          NULL,
    PRIMARY KEY CLUSTERED ([CGroupId] ASC),
    CONSTRAINT [FK_ffxlbv9rj8a02xq30kcm05njq] FOREIGN KEY ([CUpdaterId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_mwm016sf8vp4r05ea6t3lh61b] FOREIGN KEY ([CCreaterId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK6DC81F72209374] FOREIGN KEY ([CGeneralStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK6DC81F7570D8EF0] FOREIGN KEY ([CParentGroupId]) REFERENCES [dbo].[TDepartGroup] ([CGroupId]),
    CONSTRAINT [FK6DC81F7BA0A416] FOREIGN KEY ([CHeadStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[TMemberKnown] (
    [CKnownSeq]          INT            IDENTITY (1, 1) NOT NULL,
    [CDepartCode]        NVARCHAR (20)  NULL,
    [CDepartStartDate]   DATETIME       NULL,
    [CSubject]           NVARCHAR (255) NULL,
    [CContent]           NTEXT          NULL,
    [CAllScreen]         BIT            NULL,
    [CStartDate]         DATETIME       NULL,
    [CEndDate]           DATETIME       NULL,
    [CPushNotification]  BIT            NULL,
    [CPushStartDateTime] DATETIME       NULL,
    [CTopFixed]          BIT            NULL,
    [CRegStaff]          NVARCHAR (30)  NULL,
    [CRegDate]           DATETIME       NOT NULL,
    PRIMARY KEY CLUSTERED ([CKnownSeq] ASC),
    CONSTRAINT [FK_6qcey5j6im1vixrhmn2sn3qxx] FOREIGN KEY ([CDepartCode], [CDepartStartDate]) REFERENCES [dbo].[TFacility] ([CDepartCode], [CDepartStartDate]),
    CONSTRAINT [FK_kbj5ure6t47ich6pa1iqenefx] FOREIGN KEY ([CRegStaff]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[TApprDocSub2] (
    [CDocId]          BIGINT         NOT NULL,
    [CSeq]            BIGINT         NOT NULL,
    [CTempInt1]       INT            NULL,
    [CTempInt2]       INT            NULL,
    [CTempInt3]       INT            NULL,
    [CTempInt4]       INT            NULL,
    [CTempInt5]       INT            NULL,
    [CTempInt6]       INT            NULL,
    [CTempInt7]       INT            NULL,
    [CTempInt8]       INT            NULL,
    [CTempInt9]       INT            NULL,
    [CTempInt10]      INT            NULL,
    [CTempLong1]      BIGINT         NULL,
    [CTempLong2]      BIGINT         NULL,
    [CTempLong3]      BIGINT         NULL,
    [CTempLong4]      BIGINT         NULL,
    [CTempLong5]      BIGINT         NULL,
    [CTempLong6]      BIGINT         NULL,
    [CTempLong7]      BIGINT         NULL,
    [CTempLong8]      BIGINT         NULL,
    [CTempLong9]      BIGINT         NULL,
    [CTempLong10]     BIGINT         NULL,
    [CTempString1]    NVARCHAR (255) NULL,
    [CTempString2]    NVARCHAR (255) NULL,
    [CTempString3]    NVARCHAR (255) NULL,
    [CTempString4]    NVARCHAR (255) NULL,
    [CTempString5]    NVARCHAR (255) NULL,
    [CTempString6]    NVARCHAR (255) NULL,
    [CTempString7]    NVARCHAR (255) NULL,
    [CTempString8]    NVARCHAR (255) NULL,
    [CTempString9]    NVARCHAR (255) NULL,
    [CTempString10]   NVARCHAR (255) NULL,
    [CTempBody1]      NTEXT          NULL,
    [CTempBody2]      NTEXT          NULL,
    [CTempBody3]      NTEXT          NULL,
    [CTempBody4]      NTEXT          NULL,
    [CTempBody5]      NTEXT          NULL,
    [CTempBody6]      NTEXT          NULL,
    [CTempBody7]      NTEXT          NULL,
    [CTempBody8]      NTEXT          NULL,
    [CTempBody9]      NTEXT          NULL,
    [CTempBody10]     NTEXT          NULL,
    [CTempDate1]      DATETIME       NULL,
    [CTempDate2]      DATETIME       NULL,
    [CTempDate3]      DATETIME       NULL,
    [CTempDate4]      DATETIME       NULL,
    [CTempDate5]      DATETIME       NULL,
    [CTempDate6]      DATETIME       NULL,
    [CTempDate7]      DATETIME       NULL,
    [CTempDate8]      DATETIME       NULL,
    [CTempDate9]      DATETIME       NULL,
    [CTempDate10]     DATETIME       NULL,
    [CTempAdMoney1]   FLOAT (53)     NULL,
    [CTempAdMoney2]   FLOAT (53)     NULL,
    [CTempAdMoney3]   FLOAT (53)     NULL,
    [CTempAdMoney4]   FLOAT (53)     NULL,
    [CTempAdMoney5]   FLOAT (53)     NULL,
    [CTempAdString1]  NVARCHAR (255) NULL,
    [CTempAdString2]  NVARCHAR (255) NULL,
    [CTempAdString3]  NVARCHAR (255) NULL,
    [CTempAdString4]  NVARCHAR (255) NULL,
    [CTempAdString5]  NVARCHAR (255) NULL,
    [CTempAdString6]  NVARCHAR (255) NULL,
    [CTempAdString7]  NVARCHAR (255) NULL,
    [CTempAdString8]  NVARCHAR (255) NULL,
    [CTempAdString9]  NVARCHAR (255) NULL,
    [CTempAdString10] NVARCHAR (255) NULL,
    [CTempAdString11] NVARCHAR (255) NULL,
    [CTempAdString12] NVARCHAR (255) NULL,
    [CTempAdString13] NVARCHAR (255) NULL,
    [CTempAdString14] NVARCHAR (255) NULL,
    [CTempAdString15] NVARCHAR (255) NULL,
    PRIMARY KEY CLUSTERED ([CDocId] ASC, [CSeq] ASC),
    CONSTRAINT [FK_jrrssgtcrlkw6dofvhap470nx] FOREIGN KEY ([CDocId]) REFERENCES [dbo].[TApprDoc] ([CDocId])
);


GO

CREATE TABLE [dbo].[TAccessLog] (
    [CId]        BIGINT         IDENTITY (1, 1) NOT NULL,
    [CIp]        NVARCHAR (50)  NULL,
    [CStaffId]   NVARCHAR (30)  NULL,
    [CMenuId]    NVARCHAR (30)  NULL,
    [CStartTime] DATETIME       NULL,
    [CEndTime]   DATETIME       NULL,
    [CUrl]       VARCHAR (2000) NULL,
    [CResult]    NVARCHAR (10)  NULL,
    [CComment]   VARCHAR (2000) NULL,
    [CDuration]  INT            NULL,
    [CDbInfo]    NTEXT          NULL,
    [CLoginInfo] NTEXT          NULL,
    [COtherInfo] NTEXT          NULL,
    [CSessionId] NVARCHAR (255) NULL,
    CONSTRAINT [PK__TAccessL__C1F8DC396DE88ADC] PRIMARY KEY CLUSTERED ([CId] ASC)
);


GO

CREATE TABLE [dbo].[TToDoStaffSchedule] (
    [CToDoId]       BIGINT        NOT NULL,
    [CStaffId]      NVARCHAR (30) NOT NULL,
    [CScheduleId]   BIGINT        NOT NULL,
    [CIsTargetTime] BIT           NULL,
    PRIMARY KEY CLUSTERED ([CToDoId] ASC, [CStaffId] ASC, [CScheduleId] ASC),
    CONSTRAINT [FK11B6ECDD25716B35] FOREIGN KEY ([CToDoId], [CStaffId]) REFERENCES [dbo].[TToDoStaff] ([CToDoId], [CStaffId]),
    CONSTRAINT [FK11B6ECDD5930B7E5] FOREIGN KEY ([CScheduleId]) REFERENCES [dbo].[TSchedule] ([CId])
);


GO

CREATE TABLE [dbo].[TApprFormGroup] (
    [CGroupId]       NVARCHAR (255) NOT NULL,
    [CName0]         NVARCHAR (50)  NOT NULL,
    [CName1]         NVARCHAR (50)  NULL,
    [CName2]         NVARCHAR (50)  NULL,
    [CName3]         NVARCHAR (50)  NULL,
    [CName4]         NVARCHAR (50)  NULL,
    [CEnabled]       BIT            NOT NULL,
    [CDepth]         INT            NOT NULL,
    [CDisplayIndex]  INT            NOT NULL,
    [CParentGroupId] NVARCHAR (255) NULL,
    [CStringValue1]  NVARCHAR (255) NULL,
    [CStringValue2]  NVARCHAR (255) NULL,
    [CStringValue3]  NVARCHAR (255) NULL,
    [CStringValue4]  NVARCHAR (255) NULL,
    [CStringValue5]  NVARCHAR (255) NULL,
    PRIMARY KEY CLUSTERED ([CGroupId] ASC),
    CONSTRAINT [FKD88330B64B7BAC19] FOREIGN KEY ([CParentGroupId]) REFERENCES [dbo].[TApprFormGroup] ([CGroupId])
);


GO

CREATE TABLE [dbo].[TSalesCollect] (
    [CContractId]     BIGINT         NOT NULL,
    [CSeq]            INT            NOT NULL,
    [CTitle]          NVARCHAR (200) NOT NULL,
    [CPlanDate]       DATETIME       NOT NULL,
    [CBillDate]       DATETIME       NOT NULL,
    [CCollectDate]    DATETIME       NULL,
    [CEndUserId]      BIGINT         NULL,
    [CChannelId]      BIGINT         NULL,
    [CSalesmanId]     NVARCHAR (30)  NULL,
    [CRegStaffId]     NVARCHAR (30)  NULL,
    [CRegTime]        DATETIME       NULL,
    [CUpdStaffId]     NVARCHAR (30)  NULL,
    [CUpdTime]        DATETIME       NULL,
    [CPlanPrice]      BIGINT         NULL,
    [CPlanTax]        BIGINT         NULL,
    [CPlanTotalPrice] BIGINT         NULL,
    [CPrice]          BIGINT         NULL,
    [CTax]            BIGINT         NULL,
    [CTotalPrice]     BIGINT         NULL,
    [CReason]         NTEXT          NULL,
    [CRemark]         NTEXT          NULL,
    [CSecMemo]        NTEXT          NULL,
    [CPlanScheduleId] BIGINT         NULL,
    PRIMARY KEY CLUSTERED ([CContractId] ASC, [CSeq] ASC),
    CONSTRAINT [FK_5h36uc7y7wo6w0o39tac6j4on] FOREIGN KEY ([CEndUserId]) REFERENCES [dbo].[TPartener] ([CId]),
    CONSTRAINT [FK_am2vgw5a1dwky74uhs1g51tyg] FOREIGN KEY ([CUpdStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_b4135xix9jxlv7al0i6d63q1p] FOREIGN KEY ([CContractId]) REFERENCES [dbo].[TSalesContract] ([CId]),
    CONSTRAINT [FK_egvadsembeeuthjd1aqh3s889] FOREIGN KEY ([CChannelId]) REFERENCES [dbo].[TPartener] ([CId]),
    CONSTRAINT [FK_h38h9xxyjdfu366iyhxp91vbp] FOREIGN KEY ([CSalesmanId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_h799rpiv97qk8lu6u6fid2uob] FOREIGN KEY ([CPlanScheduleId]) REFERENCES [dbo].[TSchedule] ([CId]),
    CONSTRAINT [FK_lwhyrt876u7xov6ob22v1nnuk] FOREIGN KEY ([CRegStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[TApprDocLastNo] (
    [CFormat] NVARCHAR (100) NOT NULL,
    [CLastNo] NVARCHAR (100) NOT NULL,
    PRIMARY KEY CLUSTERED ([CFormat] ASC, [CLastNo] ASC)
);


GO

CREATE TABLE [dbo].[TBarcodeType] (
    [CBarcodeType] NVARCHAR (50)  NOT NULL,
    [CBarcodeName] NVARCHAR (255) NULL,
    [CRemark]      NVARCHAR (255) NULL,
    PRIMARY KEY CLUSTERED ([CBarcodeType] ASC)
);


GO

CREATE TABLE [dbo].[tb_WbRule] (
    [it_WbRuleIdx]            INT             NULL,
    [st_WbRuleName]           NVARCHAR (100)  NULL,
    [st_WbRuleMemo]           NVARCHAR (255)  NULL,
    [st_WbRulePermisionArray] NVARCHAR (3000) NULL,
    [it_WbRuleOrder]          INT             NULL,
    [it_WbRuleActive]         INT             NULL,
    [st_WbRuleStaffCode]      NVARCHAR (50)   NULL,
    [dt_WbRuleMake]           DATETIME        NULL,
    [dt_WbRuleDelete]         DATETIME        NULL
);


GO

CREATE TABLE [dbo].[TBoardResourceGroup] (
    [CBoardId]         NVARCHAR (20) NOT NULL,
    [CResourceGroupId] INT           NOT NULL,
    [COrder]           INT           NOT NULL,
    PRIMARY KEY CLUSTERED ([CBoardId] ASC, [CResourceGroupId] ASC),
    CONSTRAINT [FK4278913F35D89A81] FOREIGN KEY ([CBoardId]) REFERENCES [dbo].[TBoard] ([CBoardId]),
    CONSTRAINT [FK4278913FA1E74237] FOREIGN KEY ([CResourceGroupId]) REFERENCES [dbo].[TResourceGroup] ([CGroupId])
);


GO

CREATE TABLE [dbo].[TQuestionMaster] (
    [CQuestionSeq]     INT            IDENTITY (1, 1) NOT NULL,
    [CDepartCode]      NVARCHAR (20)  NULL,
    [CDepartStartDate] DATETIME       NULL,
    [CSeasonName]      NVARCHAR (255) NULL,
    [CStartDate]       DATETIME       NULL,
    [CEndDate]         DATETIME       NULL,
    [CCloseDate]       DATETIME       NULL,
    [CRemark]          NVARCHAR (255) NULL,
    PRIMARY KEY CLUSTERED ([CQuestionSeq] ASC),
    CONSTRAINT [FK_a15ch29alchsh0ly7jmnmapib] FOREIGN KEY ([CDepartCode], [CDepartStartDate]) REFERENCES [dbo].[TFacility] ([CDepartCode], [CDepartStartDate])
);


GO

CREATE TABLE [dbo].[TApprDocRecept] (
    [CDocId]                 BIGINT         NOT NULL,
    [CSeq]                   INT            NOT NULL,
    [CTitle]                 NVARCHAR (255) NOT NULL,
    [CReceptType]            NVARCHAR (15)  NOT NULL,
    [CDepartGroupId]         NVARCHAR (20)  NULL,
    [CStaffGroupId]          NVARCHAR (20)  NULL,
    [CReceptDepartCode]      NVARCHAR (20)  NULL,
    [CReceptDepartStartDate] DATETIME       NULL,
    [CReceptStaffId]         NVARCHAR (30)  NULL,
    [CReceptStaffLevelType]  NVARCHAR (10)  NULL,
    [CReceptStaffLevelCode]  NVARCHAR (10)  NULL,
    [CReceptStaffLevelSeq]   INT            NULL,
    [CFixed]                 BIT            DEFAULT ((0)) NOT NULL,
    [CReadTime]              DATETIME       NULL,
    [CConfirmTime]           DATETIME       NULL,
    PRIMARY KEY CLUSTERED ([CDocId] ASC, [CSeq] ASC),
    CONSTRAINT [FK_fcdkittq3vsqrbcx9b3xhdnq6] FOREIGN KEY ([CReceptStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_fkh8qbm7b7bl76t6lsuu5418w] FOREIGN KEY ([CDocId]) REFERENCES [dbo].[TApprDoc] ([CDocId]),
    CONSTRAINT [FK_hevrn2wcc67t1qgh2pouoovh9] FOREIGN KEY ([CReceptDepartCode], [CReceptDepartStartDate]) REFERENCES [dbo].[TDepartment] ([CDepartCode], [CDepartStartDate]),
    CONSTRAINT [FK_iovscn51h52yaobubrxo9te0t] FOREIGN KEY ([CDepartGroupId]) REFERENCES [dbo].[TDepartGroup] ([CGroupId]),
    CONSTRAINT [FK_lc1y2i5dut1p4dkdxrimsku4n] FOREIGN KEY ([CReceptStaffLevelType], [CReceptStaffLevelCode], [CReceptStaffLevelSeq]) REFERENCES [dbo].[TStaffLevel] ([CLevelType], [CLevelCode], [CLevelSeq]),
    CONSTRAINT [FK_sjdihkaqqs6yow0fglqr8ini6] FOREIGN KEY ([CStaffGroupId]) REFERENCES [dbo].[TStaffGroup] ([CGroupId])
);


GO

CREATE TABLE [dbo].[TBranchSendDocumentAttach] (
    [CNo]        INT    NOT NULL,
    [CAttachId]  BIGINT NOT NULL,
    [CFileIndex] INT    NULL,
    [CIsHidden]  BIT    NULL,
    PRIMARY KEY CLUSTERED ([CNo] ASC, [CAttachId] ASC),
    CONSTRAINT [FK7D0BDE9E3F50C2C1] FOREIGN KEY ([CNo]) REFERENCES [dbo].[TBranchSendDocument] ([CNo]),
    CONSTRAINT [FK7D0BDE9EA359331D] FOREIGN KEY ([CAttachId]) REFERENCES [dbo].[TFile] ([CFileId])
);


GO

CREATE TABLE [dbo].[TIds] (
    [CCoordKnowReMapDataMapId] INT NOT NULL,
    [CCoordMapSeq]             INT NOT NULL,
    [CIdsId]                   INT NOT NULL,
    PRIMARY KEY CLUSTERED ([CCoordKnowReMapDataMapId] ASC, [CCoordMapSeq] ASC, [CIdsId] ASC),
    CONSTRAINT [FK_43jj65gcqp15ka8ne9rqlamfh] FOREIGN KEY ([CCoordKnowReMapDataMapId], [CCoordMapSeq]) REFERENCES [dbo].[TCoords] ([CKnowReMapData], [CMapSeq])
);


GO

CREATE TABLE [dbo].[TComponentVltType] (
    [CComponentNo] BIGINT NOT NULL,
    [CVltTypeNo]   INT    NOT NULL,
    PRIMARY KEY CLUSTERED ([CComponentNo] ASC, [CVltTypeNo] ASC),
    CONSTRAINT [FKF8B1CD8F44F3BF8] FOREIGN KEY ([CComponentNo]) REFERENCES [dbo].[TComponent] ([CComponentNo]),
    CONSTRAINT [FKF8B1CD8F693A000E] FOREIGN KEY ([CVltTypeNo]) REFERENCES [dbo].[TVltType] ([CTypeNo])
);


GO

CREATE TABLE [dbo].[TApprSecurityLevel] (
    [CLevelId] INT           NOT NULL,
    [CName0]   NVARCHAR (50) NOT NULL,
    [CName1]   NVARCHAR (50) NULL,
    [CName2]   NVARCHAR (50) NULL,
    [CName3]   NVARCHAR (50) NULL,
    [CName4]   NVARCHAR (50) NULL,
    PRIMARY KEY CLUSTERED ([CLevelId] ASC)
);


GO

CREATE TABLE [dbo].[TBranchIssueAttach] (
    [CBranchIssueNo] INT    NOT NULL,
    [CAttachNo]      BIGINT NOT NULL,
    [CFileIndex]     INT    NULL,
    [CIsHidden]      BIT    NULL,
    [CNo]            INT    NULL,
    PRIMARY KEY CLUSTERED ([CBranchIssueNo] ASC, [CAttachNo] ASC),
    CONSTRAINT [FKD01A378869357EE3] FOREIGN KEY ([CNo]) REFERENCES [dbo].[TBranchIssue] ([CNo]),
    CONSTRAINT [FKD01A3788A35933C3] FOREIGN KEY ([CAttachNo]) REFERENCES [dbo].[TFile] ([CFileId]),
    CONSTRAINT [FKD01A3788E69B7A74] FOREIGN KEY ([CBranchIssueNo]) REFERENCES [dbo].[TBranchIssue] ([CNo])
);


GO

CREATE TABLE [dbo].[TMenuCachedStaff] (
    [CStaffId]         NVARCHAR (30)  NOT NULL,
    [CIpGroupId]       NVARCHAR (255) CONSTRAINT [DF__TMenuCach__CIpGr__3D120040] DEFAULT ('_') NOT NULL,
    [CMenuId]          NVARCHAR (50)  NOT NULL,
    [CPermType]        NVARCHAR (20)  NOT NULL,
    [CCheckedDateTime] DATETIME       NOT NULL,
    [CAccessIp]        NVARCHAR (50)  NOT NULL,
    [CAllow]           BIT            NULL,
    [CSetted]          BIT            NULL,
    CONSTRAINT [PK__TMenuCac__64F37CE7478F8EB3] PRIMARY KEY NONCLUSTERED ([CStaffId] ASC, [CIpGroupId] ASC, [CMenuId] ASC, [CPermType] ASC, [CCheckedDateTime] ASC),
    CONSTRAINT [FKC7BB4D0B9E3C3476] FOREIGN KEY ([CStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FKC7BB4D0BE3BB6C4A] FOREIGN KEY ([CMenuId]) REFERENCES [dbo].[TMenu] ([CMenuId])
);


GO

CREATE TABLE [dbo].[TAccountPeriodClose] (
    [CCloseMonth]  DATETIME      NOT NULL,
    [CPeriodClose] BIT           NULL,
    [CEditDate]    DATETIME      NULL,
    [CStaffId]     NVARCHAR (30) NULL,
    PRIMARY KEY CLUSTERED ([CCloseMonth] ASC),
    CONSTRAINT [FK23F9A7BE9E3C3476] FOREIGN KEY ([CStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[TMailAutoReplyHistory] (
    [CStaffId]       NVARCHAR (30)  NOT NULL,
    [CReceiverEmail] NVARCHAR (255) NOT NULL,
    [CSenderEmail]   NVARCHAR (255) NOT NULL,
    [CLastReplyTime] DATETIME       NOT NULL,
    [CReplyId]       INT            NULL,
    PRIMARY KEY CLUSTERED ([CStaffId] ASC, [CReceiverEmail] ASC, [CSenderEmail] ASC)
);


GO

CREATE TABLE [dbo].[TSmsMailSentHistory] (
    [CId]           BIGINT         IDENTITY (1, 1) NOT NULL,
    [CSentTime]     DATETIME       NOT NULL,
    [CSms]          BIT            NULL,
    [CMail]         BIT            NULL,
    [CBizTypeGroup] NVARCHAR (50)  NULL,
    [CBizTypeCode]  NVARCHAR (50)  NULL,
    [CTitle]        NVARCHAR (255) NULL,
    [CSenderId]     NVARCHAR (30)  NULL,
    [CSmsMailId]    BIGINT         NULL,
    [CRefLongId]    BIGINT         NULL,
    [CRefStringId]  NVARCHAR (255) NULL,
    [CBizTitle]     NVARCHAR (255) NULL,
    [CTempInt1]     NVARCHAR (255) NULL,
    [CTempInt2]     NVARCHAR (255) NULL,
    [CTempInt3]     NVARCHAR (255) NULL,
    [CTemp1]        NVARCHAR (255) NULL,
    [CTemp2]        NVARCHAR (255) NULL,
    [CTemp3]        NVARCHAR (255) NULL,
    PRIMARY KEY CLUSTERED ([CId] ASC),
    CONSTRAINT [FK_bgvxmhe04yuyn0ovi3dj2psx9] FOREIGN KEY ([CBizTypeGroup], [CBizTypeCode]) REFERENCES [dbo].[TCommonCode] ([CCodeGroup], [CCode]),
    CONSTRAINT [FK_g6g3u0xhogidehaoalv8b2clq] FOREIGN KEY ([CSenderId]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[TTradeAppealDetail] (
    [CTaDepartCode]      NVARCHAR (20) NOT NULL,
    [CTaDepartStartDate] DATETIME      NOT NULL,
    [CAppealNo]          INT           NOT NULL,
    [CTdRequireDate]     DATETIME      NOT NULL,
    [CTdDepartCode]      NVARCHAR (20) NOT NULL,
    [CTdDepartStartDate] DATETIME      NOT NULL,
    [CTdTradeNo]         INT           NOT NULL,
    [CTdBranchCode]      NVARCHAR (20) NOT NULL,
    [CTdBranchStartDate] DATETIME      NOT NULL,
    [CDetailNo]          INT           NOT NULL,
    PRIMARY KEY CLUSTERED ([CTaDepartCode] ASC, [CTaDepartStartDate] ASC, [CAppealNo] ASC, [CTdRequireDate] ASC, [CTdDepartCode] ASC, [CTdDepartStartDate] ASC, [CTdTradeNo] ASC, [CTdBranchCode] ASC, [CTdBranchStartDate] ASC, [CDetailNo] ASC),
    CONSTRAINT [FK6993EC50313D52F0] FOREIGN KEY ([CTdRequireDate], [CTdDepartCode], [CTdDepartStartDate], [CTdTradeNo], [CTdBranchCode], [CTdBranchStartDate], [CDetailNo]) REFERENCES [dbo].[TTradeDetail] ([CRequireDate], [CTiDepartCode], [CTiDepartStartDate], [CTradeNo], [CBranchCode], [CBranchStartDate], [CDetailNo]),
    CONSTRAINT [FK6993EC509A352A17] FOREIGN KEY ([CTaDepartCode], [CTaDepartStartDate], [CAppealNo]) REFERENCES [dbo].[TTradeAppealHistory] ([CBranchCode], [CBranchStartDate], [CAppealNo])
);


GO

CREATE TABLE [dbo].[TStudentManager] (
    [CBranchCode]      NVARCHAR (20)  NOT NULL,
    [CBranchStartDate] DATETIME       NOT NULL,
    [CStudentCode]     NVARCHAR (50)  NOT NULL,
    [CManagerId]       NVARCHAR (30)  NOT NULL,
    [CManagerType]     NVARCHAR (50)  NOT NULL,
    [CStartDate]       DATETIME       NOT NULL,
    [CEndDate]         DATETIME       NULL,
    [CComment]         NVARCHAR (225) NULL,
    CONSTRAINT [PK__TStudent__2C7D77F325FB978D] PRIMARY KEY CLUSTERED ([CBranchCode] ASC, [CBranchStartDate] ASC, [CStudentCode] ASC, [CManagerId] ASC, [CManagerType] ASC, [CStartDate] ASC),
    CONSTRAINT [FK_TStudent_TStudentManager] FOREIGN KEY ([CBranchCode], [CBranchStartDate], [CStudentCode]) REFERENCES [dbo].[TStudent] ([CBranchCode], [CBranchStartDate], [CCode]),
    CONSTRAINT [FK3537E6663F6CE6C3] FOREIGN KEY ([CManagerId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK3537E66648562EA2] FOREIGN KEY ([CBranchCode], [CBranchStartDate]) REFERENCES [dbo].[TFacility] ([CDepartCode], [CDepartStartDate])
);


GO

CREATE TABLE [dbo].[TBizMonthly4DptC] (
    [CBizDate]        DATETIME      NOT NULL,
    [CGroupId]        NVARCHAR (20) NOT NULL,
    [CLastRegStaffId] NVARCHAR (30) NULL,
    [CLastRegTime]    DATETIME      NULL,
    [CRemark]         NTEXT         NULL,
    [CVisitor]        NTEXT         NULL,
    [CApprDocId]      BIGINT        NULL,
    PRIMARY KEY CLUSTERED ([CBizDate] ASC, [CGroupId] ASC),
    CONSTRAINT [FK_o3o2r1f76v3poxs3u0vkdqqat] FOREIGN KEY ([CLastRegStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_q5hph56drayp79ms7g36e2q21] FOREIGN KEY ([CGroupId]) REFERENCES [dbo].[TDepartGroup] ([CGroupId])
);


GO

CREATE TABLE [dbo].[TTempDepartId] (
    [CTempKeyId]       NVARCHAR (255) NOT NULL,
    [CDepartCode]      NVARCHAR (20)  NOT NULL,
    [CDepartStartDate] DATETIME       NOT NULL,
    [CRegTime]         DATETIME       NULL,
    PRIMARY KEY CLUSTERED ([CTempKeyId] ASC, [CDepartCode] ASC, [CDepartStartDate] ASC)
);


GO

CREATE TABLE [dbo].[TMenu_20150411] (
    [CMenuId]               NVARCHAR (50)  NOT NULL,
    [CGroupCode]            NVARCHAR (50)  NULL,
    [CDepth]                INT            NULL,
    [CHasSon]               BIT            NULL,
    [CName0]                NVARCHAR (50)  NOT NULL,
    [CName1]                NVARCHAR (50)  NULL,
    [CName2]                NVARCHAR (50)  NULL,
    [CName3]                NVARCHAR (50)  NULL,
    [CName4]                NVARCHAR (50)  NULL,
    [CType]                 NVARCHAR (20)  NULL,
    [CPopupOption]          NTEXT          NULL,
    [CUrl]                  NVARCHAR (255) NULL,
    [CUrlGetParameter]      NVARCHAR (255) NULL,
    [CIcon]                 NVARCHAR (255) NULL,
    [CDisableIcon]          NVARCHAR (255) NULL,
    [CEnabled]              BIT            NULL,
    [CVisibled]             BIT            NULL,
    [CExpand]               BIT            NULL,
    [CNeedSso]              BIT            NULL,
    [CDisplayIndex]         INT            NULL,
    [CDefaultAllowType]     NVARCHAR (20)  NULL,
    [CPermApplyOrder]       NVARCHAR (255) NULL,
    [CCheckStopPoint]       NVARCHAR (20)  NULL,
    [CSubMenuInfo1]         NVARCHAR (255) NULL,
    [CSubMenuInfo2]         NVARCHAR (255) NULL,
    [CGwCode]               NVARCHAR (50)  NULL,
    [CReferenceOtherSystem] NVARCHAR (20)  NULL,
    [CRemark]               NVARCHAR (255) NULL,
    [CRelativeId]           NVARCHAR (50)  NULL,
    [CParentMenuId]         NVARCHAR (50)  NULL,
    [CSkipAutoParam]        BIT            NULL
);


GO

CREATE TABLE [dbo].[TBranchIssue] (
    [CNo]              INT            IDENTITY (1, 1) NOT NULL,
    [CDepartCode]      NVARCHAR (20)  NULL,
    [CDepartStartDate] DATETIME       NULL,
    [CSupervisorId]    NVARCHAR (30)  NULL,
    [CCallDateTime]    DATETIME       NULL,
    [CSideType]        NVARCHAR (50)  NULL,
    [CContent]         NTEXT          NULL,
    [CRegTime]         DATETIME       NOT NULL,
    [CEditTime]        DATETIME       NOT NULL,
    [CRegStaffId]      NVARCHAR (30)  NULL,
    [CEditStaffId]     NVARCHAR (30)  NULL,
    [CComment]         NVARCHAR (255) NULL,
    CONSTRAINT [PK__TBranchI__C1FF675B7CBA562F] PRIMARY KEY CLUSTERED ([CNo] ASC),
    CONSTRAINT [FKAD5FB36319E633C8] FOREIGN KEY ([CRegStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FKAD5FB363282531E2] FOREIGN KEY ([CDepartCode], [CDepartStartDate]) REFERENCES [dbo].[TFacility] ([CDepartCode], [CDepartStartDate]),
    CONSTRAINT [FKAD5FB3635E7CECA4] FOREIGN KEY ([CSupervisorId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FKAD5FB36378DF60AC] FOREIGN KEY ([CEditStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[TContentStaffPoint] (
    [CContentId]  BIGINT        NOT NULL,
    [CBoardId]    NVARCHAR (20) NOT NULL,
    [CKindId]     NVARCHAR (20) NOT NULL,
    [CStaffId]    NVARCHAR (30) NOT NULL,
    [CEvalItemId] NVARCHAR (50) NOT NULL,
    [CPoint]      INT           NULL,
    PRIMARY KEY CLUSTERED ([CContentId] ASC, [CBoardId] ASC, [CKindId] ASC, [CStaffId] ASC, [CEvalItemId] ASC),
    CONSTRAINT [FKC48A6DF51E2854BF] FOREIGN KEY ([CEvalItemId]) REFERENCES [dbo].[TBoardEvaluationItem] ([CItemId]),
    CONSTRAINT [FKC48A6DF52B909383] FOREIGN KEY ([CContentId], [CBoardId], [CKindId], [CStaffId]) REFERENCES [dbo].[TContentStaff] ([CContentId], [CBoardId], [CKindId], [CStaffId])
);


GO

CREATE TABLE [dbo].[TStaffGroup] (
    [CGroupId]            NVARCHAR (20)  NOT NULL,
    [CName0]              NVARCHAR (50)  NOT NULL,
    [CName1]              NVARCHAR (50)  NULL,
    [CName2]              NVARCHAR (50)  NULL,
    [CName3]              NVARCHAR (50)  NULL,
    [CName4]              NVARCHAR (50)  NULL,
    [CShortName0]         NVARCHAR (15)  NOT NULL,
    [CShortName1]         NVARCHAR (15)  NULL,
    [CShortName2]         NVARCHAR (15)  NULL,
    [CShortName3]         NVARCHAR (15)  NULL,
    [CShortName4]         NVARCHAR (15)  NULL,
    [CDepth]              INT            NULL,
    [CEnabled]            BIT            NULL,
    [CHeadStaffId]        NVARCHAR (30)  NULL,
    [CGeneralStaffId]     NVARCHAR (30)  NULL,
    [CRemark]             NVARCHAR (255) NULL,
    [CDisplayIndex]       INT            NULL,
    [CParentGroupId]      NVARCHAR (20)  NULL,
    [CFacilityDepartCode] NVARCHAR (20)  NULL,
    [CShowAll]            BIT            DEFAULT ((0)) NOT NULL,
    [CNeedStaff]          BIT            DEFAULT ((0)) NOT NULL,
    [CCreaterId]          NVARCHAR (30)  NULL,
    [CCreatedTime]        DATETIME       NULL,
    [CUpdaterId]          NVARCHAR (30)  NULL,
    [CUpdatedTime]        DATETIME       NULL,
    [CHtml]               NTEXT          NULL,
    [CIsFiltered]         BIT            NULL,
    [CLevelDepartAndOr]   BIT            NULL,
    [COnlyLoginable]      BIT            NULL,
    PRIMARY KEY CLUSTERED ([CGroupId] ASC),
    CONSTRAINT [FK_1xnvnrtmey28s4xt6cfoc0fil] FOREIGN KEY ([CCreaterId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_6wqu6wagmphkyhmlyppci7gu0] FOREIGN KEY ([CUpdaterId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK601692F3120B7D54] FOREIGN KEY ([CParentGroupId]) REFERENCES [dbo].[TStaffGroup] ([CGroupId]),
    CONSTRAINT [FK601692F32209374] FOREIGN KEY ([CGeneralStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK601692F3BA0A416] FOREIGN KEY ([CHeadStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[TAssetHistory] (
    [CBranchCode]     NVARCHAR (20)  NOT NULL,
    [CBrachStartDate] DATETIME       NOT NULL,
    [CCodeGroup]      NVARCHAR (50)  NOT NULL,
    [CCommonCode]     NVARCHAR (50)  NOT NULL,
    [CItemCode]       NVARCHAR (255) NOT NULL,
    [CNo]             INT            NOT NULL,
    [CType]           NVARCHAR (15)  NULL,
    [CDate]           DATETIME       NULL,
    [CPrice]          FLOAT (53)     NULL,
    [CCount]          FLOAT (53)     NULL,
    [CValue]          FLOAT (53)     NULL,
    [CComment]        NVARCHAR (255) NULL,
    [CApprovalStatus] NVARCHAR (15)  NULL,
    PRIMARY KEY CLUSTERED ([CBranchCode] ASC, [CBrachStartDate] ASC, [CCodeGroup] ASC, [CCommonCode] ASC, [CItemCode] ASC, [CNo] ASC),
    CONSTRAINT [FK253D9F85CC83E2D] FOREIGN KEY ([CBranchCode], [CBrachStartDate], [CCodeGroup], [CCommonCode], [CItemCode]) REFERENCES [dbo].[TAssetItem] ([CBranchCode], [CBranchStartDate], [CCodeGroup], [CCommonCode], [CCode])
);


GO

CREATE TABLE [dbo].[TMailAttachment] (
    [CMailId]   BIGINT NOT NULL,
    [CSeq]      INT    NOT NULL,
    [CFileId]   BIGINT NULL,
    [CIsHidden] BIT    NOT NULL,
    PRIMARY KEY CLUSTERED ([CMailId] ASC, [CSeq] ASC),
    CONSTRAINT [FKC57B6BAE55D74554] FOREIGN KEY ([CFileId]) REFERENCES [dbo].[TFile] ([CFileId]),
    CONSTRAINT [FKC57B6BAEB2D8C89E] FOREIGN KEY ([CMailId]) REFERENCES [dbo].[TMail] ([CMailId])
);


GO

CREATE TABLE [dbo].[DL_MMS_MSG] (
    [MSGKEY]         INT            IDENTITY (1, 1) NOT NULL,
    [SUBJECT]        VARCHAR (120)  NULL,
    [PHONE]          VARCHAR (15)   NOT NULL,
    [CALLBACK]       VARCHAR (15)   NULL,
    [ORG_CALLBACK]   VARCHAR (20)   DEFAULT ('') NULL,
    [BILL_ID]        VARCHAR (20)   DEFAULT ('') NULL,
    [STATUS]         VARCHAR (2)    DEFAULT ('0') NOT NULL,
    [REQDATE]        DATETIME       DEFAULT (getdate()) NOT NULL,
    [MSG]            VARCHAR (4000) NULL,
    [FILE_CNT]       INT            DEFAULT ((0)) NOT NULL,
    [FILE_CNT_REAL]  INT            DEFAULT ((0)) NOT NULL,
    [FILE_PATH1]     VARCHAR (128)  NULL,
    [FILE_PATH1_SIZ] INT            NULL,
    [FILE_PATH2]     VARCHAR (128)  NULL,
    [FILE_PATH2_SIZ] INT            NULL,
    [FILE_PATH3]     VARCHAR (128)  NULL,
    [FILE_PATH3_SIZ] INT            NULL,
    [FILE_PATH4]     VARCHAR (128)  NULL,
    [FILE_PATH4_SIZ] INT            NULL,
    [FILE_PATH5]     VARCHAR (128)  NULL,
    [FILE_PATH5_SIZ] INT            NULL,
    [EXPIRETIME]     VARCHAR (10)   NULL,
    [SENTDATE]       DATETIME       NULL,
    [RSLTDATE]       DATETIME       NULL,
    [REPORTDATE]     DATETIME       NULL,
    [TERMINATEDDATE] DATETIME       NULL,
    [RSLT]           VARCHAR (10)   NULL,
    [REPCNT]         INT            DEFAULT ((0)) NULL,
    [TYPE]           VARCHAR (2)    DEFAULT ('0') NOT NULL,
    [TELCOINFO]      VARCHAR (12)   NULL,
    [ID]             VARCHAR (22)   NULL,
    [POST]           VARCHAR (22)   NULL,
    [ETC1]           VARCHAR (68)   NULL,
    [ETC2]           VARCHAR (34)   NULL,
    [ETC3]           VARCHAR (34)   NULL,
    [ETC4]           INT            NULL,
    [ETC5]           VARCHAR (34)   NULL,
    [ETC6]           VARCHAR (34)   NULL,
    [ETC7]           VARCHAR (34)   NULL,
    [ETC8]           VARCHAR (34)   NULL,
    [ETC9]           VARCHAR (34)   NULL,
    [ETC10]          VARCHAR (34)   NULL,
    CONSTRAINT [PK_DL_MMS_MSG_MSGKEY] PRIMARY KEY CLUSTERED ([MSGKEY] ASC)
);


GO

CREATE TABLE [dbo].[TMailAddress] (
    [CMailId]           BIGINT         NOT NULL,
    [CSeq]              INT            NOT NULL,
    [CType]             NVARCHAR (3)   NULL,
    [CDisplayName]      NVARCHAR (100) NULL,
    [CEmailAddress]     NVARCHAR (100) NULL,
    [CBasicDateTime]    DATETIME       NULL,
    [CRollbackDateTime] DATETIME       NULL,
    [CMailUniqueId]     NVARCHAR (255) NULL,
    [CErrorMsgId]       NVARCHAR (255) NULL,
    PRIMARY KEY CLUSTERED ([CMailId] ASC, [CSeq] ASC),
    CONSTRAINT [FKA0C88D49B2D8C89E] FOREIGN KEY ([CMailId]) REFERENCES [dbo].[TMail] ([CMailId])
);


GO

CREATE TABLE [dbo].[TPollPartiComment] (
    [CPollId]        BIGINT        NOT NULL,
    [CParticipantId] NVARCHAR (30) NOT NULL,
    [CRegTime]       DATETIME      NULL,
    [CComment]       NTEXT         NULL,
    PRIMARY KEY CLUSTERED ([CPollId] ASC, [CParticipantId] ASC),
    CONSTRAINT [FKD569107C9B3E67BC] FOREIGN KEY ([CPollId]) REFERENCES [dbo].[TPollQuestion] ([CId]),
    CONSTRAINT [FKD569107CF2063649] FOREIGN KEY ([CParticipantId]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[tbl_eTongUserStatics] (
    [actionDate] DATETIME      DEFAULT (NULL) NULL,
    [actionType] INT           DEFAULT (NULL) NULL,
    [branchCode] NVARCHAR (20) DEFAULT (NULL) NULL,
    [staffCode]  NVARCHAR (30) NOT NULL,
    [appName]    NVARCHAR (50) NULL
);


GO

CREATE TABLE [dbo].[TStaffCareer] (
    [CStaffId]   NVARCHAR (30)  NOT NULL,
    [CNo]        INT            NOT NULL,
    [CStartDate] DATETIME       NULL,
    [CEndDate]   DATETIME       NULL,
    [CName]      NVARCHAR (50)  NULL,
    [CDepart]    NVARCHAR (50)  NULL,
    [CPosition]  NVARCHAR (50)  NULL,
    [CInCharge]  NVARCHAR (255) NULL,
    [CChk]       DATETIME       NULL,
    CONSTRAINT [PK__TStaffCa__B58530584727812E] PRIMARY KEY CLUSTERED ([CStaffId] ASC, [CNo] ASC),
    CONSTRAINT [FK9AF9F98A9E3C3476] FOREIGN KEY ([CStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[TTermSchedule] (
    [CStDepartCode]      NVARCHAR (20)  NOT NULL,
    [CStDepartStartDate] DATETIME       NOT NULL,
    [CStCode]            NVARCHAR (50)  NOT NULL,
    [CCode]              NVARCHAR (50)  NOT NULL,
    [CStartDate]         DATETIME       NULL,
    [CEndDate]           DATETIME       NULL,
    [CName]              NVARCHAR (255) NULL,
    [CSubject]           NVARCHAR (255) NULL,
    [CComment]           NTEXT          NULL,
    [CRegDate]           DATETIME       NULL,
    [CRegStaffId]        NVARCHAR (30)  NULL,
    [CApprovalStatus]    NVARCHAR (15)  NULL,
    [CDayCount]          INT            NULL,
    PRIMARY KEY CLUSTERED ([CStDepartCode] ASC, [CStDepartStartDate] ASC, [CStCode] ASC, [CCode] ASC),
    CONSTRAINT [FK4B9B859719E633C8] FOREIGN KEY ([CRegStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK4B9B85976F88FD24] FOREIGN KEY ([CStDepartCode], [CStDepartStartDate], [CStCode]) REFERENCES [dbo].[TStudent] ([CBranchCode], [CBranchStartDate], [CCode])
);


GO

CREATE TABLE [dbo].[TPushQueue] (
    [CQueueId]  INT      IDENTITY (1, 1) NOT NULL,
    [CPushTask] INT      NULL,
    [CSendTime] DATETIME NOT NULL,
    PRIMARY KEY CLUSTERED ([CQueueId] ASC),
    CONSTRAINT [FK_nq37i80im6amfwcgxv8ntmm1t] FOREIGN KEY ([CPushTask]) REFERENCES [dbo].[TPushTask] ([CPushId])
);


GO

CREATE TABLE [dbo].[DL_KAKAO_MSG] (
    [MSGKEY]              INT            IDENTITY (1, 1) NOT NULL,
    [TYPE]                VARCHAR (5)    NOT NULL,
    [RESEND]              VARCHAR (5)    DEFAULT ('NONE') NOT NULL,
    [YELLOWID_KEY]        VARCHAR (50)   NOT NULL,
    [TMPL_CD]             VARCHAR (30)   NULL,
    [MSG]                 VARCHAR (2000) NOT NULL,
    [SMS_MSG]             VARCHAR (90)   NULL,
    [CHAT_BUBBLE_BUTTON1] VARCHAR (2500) DEFAULT (NULL) NULL,
    [CHAT_BUBBLE_BUTTON2] VARCHAR (2500) DEFAULT (NULL) NULL,
    [CHAT_BUBBLE_BUTTON3] VARCHAR (2500) DEFAULT (NULL) NULL,
    [CHAT_BUBBLE_BUTTON4] VARCHAR (2500) DEFAULT (NULL) NULL,
    [CHAT_BUBBLE_BUTTON5] VARCHAR (2500) DEFAULT (NULL) NULL,
    [IMAGE_URL]           VARCHAR (300)  NULL,
    [IMAGE_LINK]          VARCHAR (300)  NULL,
    [PHONE]               VARCHAR (15)   NOT NULL,
    [CALLBACK]            VARCHAR (15)   NULL,
    [ORG_CALLBACK]        VARCHAR (20)   DEFAULT ('') NULL,
    [BILL_ID]             VARCHAR (20)   DEFAULT ('') NULL,
    [STATUS]              VARCHAR (2)    DEFAULT ('0') NOT NULL,
    [REQDATE]             DATETIME       NOT NULL,
    [SENTDATE]            DATETIME       NULL,
    [RSLTDATE]            DATETIME       NULL,
    [REPORTDATE]          DATETIME       NULL,
    [TERMINATEDDATE]      DATETIME       NULL,
    [RSLT]                VARCHAR (10)   NULL,
    [RSLT_RESEND]         VARCHAR (5)    NULL,
    [ID]                  VARCHAR (20)   NULL,
    [POST]                VARCHAR (20)   NULL,
    [ETC1]                VARCHAR (64)   NULL,
    [ETC2]                VARCHAR (32)   NULL,
    [ETC3]                VARCHAR (32)   NULL,
    [ETC4]                INT            NULL,
    [ETC5]                VARCHAR (32)   NULL,
    [ETC6]                VARCHAR (32)   NULL,
    [ETC7]                VARCHAR (32)   NULL,
    [ETC8]                VARCHAR (32)   NULL,
    [ETC9]                VARCHAR (32)   NULL,
    [ETC10]               VARCHAR (32)   NULL,
    [AD_FLAG]             VARCHAR (5)    DEFAULT ('N') NULL,
    PRIMARY KEY CLUSTERED ([MSGKEY] ASC)
);


GO

CREATE TABLE [dbo].[TTestChamp] (
    [CNo]           INT           NOT NULL,
    [CGrade]        NVARCHAR (50) NOT NULL,
    [CCtPeriod]     NVARCHAR (15) NOT NULL,
    [CQuestionNo]   INT           NOT NULL,
    [CSubject]      NCHAR (10)    NULL,
    [CParameter]    NCHAR (100)   NULL,
    [CAverage]      FLOAT (53)    NOT NULL,
    [CStdDeviation] FLOAT (53)    NOT NULL,
    [CCtRevision]   NVARCHAR (15) NULL,
    CONSTRAINT [PK_TTestChamp] PRIMARY KEY CLUSTERED ([CNo] ASC)
);


GO

CREATE TABLE [dbo].[TTutoringPlan] (
    [CTutoringPlanSeq]   BIGINT         IDENTITY (1, 1) NOT NULL,
    [CDepartCode]        NVARCHAR (20)  NULL,
    [CDepartStartDate]   DATETIME       NULL,
    [CPlanDate]          DATETIME       NULL,
    [CTiemName]          NVARCHAR (255) NULL,
    [CTimeNo]            INT            NULL,
    [CSeatNumber]        NVARCHAR (255) NULL,
    [CSeatNo]            INT            NULL,
    [CTutorInfo]         INT            NULL,
    [CTutorColor]        NVARCHAR (255) NULL,
    [CManager]           NVARCHAR (30)  NULL,
    [CStDepartCode]      NVARCHAR (20)  NULL,
    [CStDepartStartDate] DATETIME       NULL,
    [CStCode]            NVARCHAR (50)  NULL,
    [CSubject]           NVARCHAR (255) NULL,
    [CGrade]             NVARCHAR (255) NULL,
    [CComma]             INT            NULL,
    [CRemark]            NVARCHAR (255) NULL,
    [CWeekNumber]        INT            NULL,
    [CDeleteCheck]       BIT            NULL,
    [CDeleteStaff]       NVARCHAR (30)  NULL,
    [CDeleteDatetime]    DATETIME       NULL,
    [CTutorFontColor]    NVARCHAR (255) NULL,
    PRIMARY KEY CLUSTERED ([CTutoringPlanSeq] ASC),
    CONSTRAINT [FK_5y1t9btnddvoeqvfme77q8qjx] FOREIGN KEY ([CDeleteStaff]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_7cybngt6e2wokxb2ypfchp4bf] FOREIGN KEY ([CManager]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_lkhfy2a24k4bu98vjfjakh3xe] FOREIGN KEY ([CTutorInfo]) REFERENCES [dbo].[TTutorInfo] ([CTutorSeq]),
    CONSTRAINT [FK_qa1pl36k1xlyfxj8ib6rft0e3] FOREIGN KEY ([CDepartCode], [CDepartStartDate]) REFERENCES [dbo].[TFacility] ([CDepartCode], [CDepartStartDate]),
    CONSTRAINT [FK_TStudent_TTutoringPlan] FOREIGN KEY ([CStDepartCode], [CStDepartStartDate], [CStCode]) REFERENCES [dbo].[TStudent] ([CBranchCode], [CBranchStartDate], [CCode])
);


GO

CREATE TABLE [dbo].[TPushTask] (
    [CPushId]           INT            IDENTITY (1, 1) NOT NULL,
    [CPushKey]          NVARCHAR (50)  NULL,
    [CBranchCode]       NVARCHAR (20)  NULL,
    [CBranchDate]       DATETIME       NULL,
    [CMemberBranchCode] NVARCHAR (20)  NULL,
    [CMemberBranchDate] DATETIME       NULL,
    [CMemberCode]       NVARCHAR (50)  NULL,
    [CPushType]         NVARCHAR (255) NOT NULL,
    [CMessage]          NVARCHAR (200) NULL,
    [CTermFrom]         DATETIME       NOT NULL,
    [CTermTo]           DATETIME       NULL,
    [CDayInterval]      INT            NULL,
    [CTimeInterval]     INT            NULL,
    [CRegDate]          DATETIME       NOT NULL,
    PRIMARY KEY CLUSTERED ([CPushId] ASC),
    CONSTRAINT [FK_37suwk3abkinl1ofxb4dcn8un] FOREIGN KEY ([CBranchCode], [CBranchDate]) REFERENCES [dbo].[TFacility] ([CDepartCode], [CDepartStartDate]),
    CONSTRAINT [FK_c4b10g1lisupk7xd1clg58dmj] FOREIGN KEY ([CMemberBranchCode], [CMemberBranchDate], [CMemberCode]) REFERENCES [dbo].[TMember] ([CDepartCode], [CDepartStartDate], [CMemberCode])
);


GO

CREATE TABLE [dbo].[THpMemberProduct] (
    [CMemberId]  BIGINT        NOT NULL,
    [CProductId] NVARCHAR (30) NOT NULL,
    PRIMARY KEY CLUSTERED ([CMemberId] ASC, [CProductId] ASC),
    CONSTRAINT [FK_25u32529wkx2h5oybrb8hrnqc] FOREIGN KEY ([CProductId]) REFERENCES [dbo].[THpProduct] ([CProductId]),
    CONSTRAINT [FK_rorx2lufuqel2p50afg349r7u] FOREIGN KEY ([CMemberId]) REFERENCES [dbo].[THpMember] ([CMemberId])
);


GO

CREATE TABLE [dbo].[TContentPopup] (
    [CContentId]   BIGINT   NOT NULL,
    [CStartDate]   DATETIME NOT NULL,
    [CEndDate]     DATETIME NOT NULL,
    [CAlwaysPopup] BIT      NULL,
    [CWidth]       INT      NULL,
    [CHeight]      INT      NULL,
    PRIMARY KEY CLUSTERED ([CContentId] ASC),
    CONSTRAINT [FK7D88A6279F2A2E67] FOREIGN KEY ([CContentId]) REFERENCES [dbo].[TContent] ([CContentId])
);


GO

CREATE TABLE [dbo].[TStaffDepartHistory] (
    [CStaffId]            NVARCHAR (30) NOT NULL,
    [CMain]               BIT           NOT NULL,
    [CDepartCode]         NVARCHAR (20) NOT NULL,
    [CDepartStartDate]    DATETIME      NOT NULL,
    [CHistoryStartDate]   DATETIME      NOT NULL,
    [CHistoryEndDate]     DATETIME      NOT NULL,
    [CRelativeLevelIndex] INT           NULL,
    [CAutoGen]            BIT           NULL,
    PRIMARY KEY CLUSTERED ([CStaffId] ASC, [CMain] ASC, [CDepartCode] ASC, [CDepartStartDate] ASC, [CHistoryStartDate] ASC),
    CONSTRAINT [FKD2FD027448D9611] FOREIGN KEY ([CDepartCode], [CDepartStartDate]) REFERENCES [dbo].[TDepartment] ([CDepartCode], [CDepartStartDate]),
    CONSTRAINT [FKD2FD02749E3C3476] FOREIGN KEY ([CStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[TPdsFile] (
    [CFileId]           BIGINT        NOT NULL,
    [COwnerStaffId]     NVARCHAR (30) NULL,
    [CFolderId]         INT           NULL,
    [CCheckInStaffId]   NVARCHAR (30) NULL,
    [CCheckInDateTime]  DATETIME      NULL,
    [CCheckOutStaffId]  NVARCHAR (30) NULL,
    [CCheckOutDateTime] DATETIME      NULL,
    [CVersion]          INT           NULL,
    [CIsOpen]           BIT           NULL,
    [CRemark]           NTEXT         NULL,
    [CDeletedDate]      DATETIME      NULL,
    [COpenUrl]          NTEXT         NULL,
    [CUploadedTime]     DATETIME      NULL,
    PRIMARY KEY CLUSTERED ([CFileId] ASC),
    CONSTRAINT [FK4EEFD4273FA6FF70] FOREIGN KEY ([CCheckOutStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK4EEFD42755D74554] FOREIGN KEY ([CFileId]) REFERENCES [dbo].[TFile] ([CFileId]),
    CONSTRAINT [FK4EEFD4279B0E048F] FOREIGN KEY ([CCheckInStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK4EEFD427FA664AA8] FOREIGN KEY ([COwnerStaffId], [CFolderId]) REFERENCES [dbo].[TPdsFolder] ([COwnerStaffId], [CFolderId])
);


GO

CREATE TABLE [dbo].[TProjectOption] (
    [CProjectId]  NVARCHAR (40)  NOT NULL,
    [COptionKey]  NVARCHAR (25)  NOT NULL,
    [CBoolValue0] BIT            NULL,
    [CBoolValue1] BIT            NULL,
    [CBoolValue2] BIT            NULL,
    [CBoolValue3] BIT            NULL,
    [CBoolValue4] BIT            NULL,
    [CLongValue0] BIGINT         NULL,
    [CLongValue1] BIGINT         NULL,
    [CLongValue2] BIGINT         NULL,
    [CLongValue3] BIGINT         NULL,
    [CLongValue4] BIGINT         NULL,
    [CTextValue0] NVARCHAR (255) NULL,
    [CTextValue1] NVARCHAR (255) NULL,
    [CTextValue2] NVARCHAR (255) NULL,
    [CTextValue3] NVARCHAR (255) NULL,
    [CTextValue4] NVARCHAR (255) NULL,
    PRIMARY KEY CLUSTERED ([CProjectId] ASC, [COptionKey] ASC),
    CONSTRAINT [FK_qrfqjxu1y7r9efj9vdpqodw63] FOREIGN KEY ([CProjectId]) REFERENCES [dbo].[TProject] ([CProjectId])
);


GO

CREATE TABLE [dbo].[TBizMonthly4Staff] (
    [CBizDate]         DATETIME      NOT NULL,
    [CGroupId]         NVARCHAR (20) NOT NULL,
    [CWriterId]        NVARCHAR (30) NOT NULL,
    [CWriterLevelType] NVARCHAR (10) NULL,
    [CWriterLevelCode] NVARCHAR (10) NULL,
    [CWriterLevelSeq]  INT           NULL,
    [CRegTime]         DATETIME      NULL,
    [CLastTime]        DATETIME      NULL,
    [CWork]            NTEXT         NULL,
    [CPlan]            NTEXT         NULL,
    [CApprDocId]       BIGINT        NULL,
    PRIMARY KEY CLUSTERED ([CBizDate] ASC, [CGroupId] ASC, [CWriterId] ASC),
    CONSTRAINT [FK_1mvi5jlgcq64soq7h1i37et2q] FOREIGN KEY ([CGroupId]) REFERENCES [dbo].[TDepartGroup] ([CGroupId]),
    CONSTRAINT [FK_8ptdsdrcwky50vinpqbqu8jt4] FOREIGN KEY ([CWriterLevelType], [CWriterLevelCode], [CWriterLevelSeq]) REFERENCES [dbo].[TStaffLevel] ([CLevelType], [CLevelCode], [CLevelSeq]),
    CONSTRAINT [FK_m9ywhf9uairnov5c4d7fs82yw] FOREIGN KEY ([CWriterId]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[TWebFaxFolder] (
    [CFolderId]       BIGINT         IDENTITY (1, 1) NOT NULL,
    [COwnerStaffId]   NVARCHAR (255) NULL,
    [CDepth]          INT            NOT NULL,
    [CName0]          NVARCHAR (50)  NOT NULL,
    [CName1]          NVARCHAR (50)  NULL,
    [CName2]          NVARCHAR (50)  NULL,
    [CName3]          NVARCHAR (50)  NULL,
    [CName4]          NVARCHAR (50)  NULL,
    [CDisplayIndex]   INT            NULL,
    [CRemark]         NVARCHAR (255) NULL,
    [CTempInt0]       INT            NULL,
    [CTempInt1]       INT            NULL,
    [CTempInt2]       INT            NULL,
    [CParentFolderId] BIGINT         NULL,
    [CMenuId]         NVARCHAR (50)  NULL,
    PRIMARY KEY CLUSTERED ([CFolderId] ASC),
    CONSTRAINT [FK_53l2qrg8gs93nm3yj23ta4pse] FOREIGN KEY ([CParentFolderId]) REFERENCES [dbo].[TWebFaxFolder] ([CFolderId])
);


GO

CREATE TABLE [dbo].[THpActiveSession] (
    [CSessionId]          NVARCHAR (255) NOT NULL,
    [CMember]             BIGINT         NULL,
    [CLoginDateTime]      DATETIME       NULL,
    [CLastAccessDateTime] DATETIME       NULL,
    [CLoginIP]            NVARCHAR (50)  NULL,
    [CLanguageCode]       NVARCHAR (5)   NULL,
    [CEnvUpdateDateTime]  DATETIME       NULL,
    [CThemeCode]          NVARCHAR (10)  NULL,
    PRIMARY KEY CLUSTERED ([CSessionId] ASC),
    CONSTRAINT [FK_dj6b0n788ebviiun9d1s3el31] FOREIGN KEY ([CMember]) REFERENCES [dbo].[THpMember] ([CMemberId])
);


GO

CREATE TABLE [dbo].[TContentDepart] (
    [CContentId]       BIGINT        NOT NULL,
    [CKindBoardId]     NVARCHAR (20) NOT NULL,
    [CKindId]          NVARCHAR (20) NOT NULL,
    [CDepartCode]      NVARCHAR (20) NOT NULL,
    [CDepartStartDate] DATETIME      NOT NULL,
    [CSeq]             INT           NULL,
    PRIMARY KEY CLUSTERED ([CContentId] ASC, [CKindBoardId] ASC, [CKindId] ASC, [CDepartCode] ASC, [CDepartStartDate] ASC),
    CONSTRAINT [FK_3rdr92spbw8fbekp3m012bv15] FOREIGN KEY ([CContentId]) REFERENCES [dbo].[TContent] ([CContentId]),
    CONSTRAINT [FK_8muh25b1caraip62sqpbhm62o] FOREIGN KEY ([CKindBoardId], [CKindId]) REFERENCES [dbo].[TBoardDepartKind] ([CBoardId], [CKindId]),
    CONSTRAINT [FK_ejaij5dmu7npeo3a0vr6uuhlx] FOREIGN KEY ([CDepartCode], [CDepartStartDate]) REFERENCES [dbo].[TDepartment] ([CDepartCode], [CDepartStartDate])
);


GO

CREATE TABLE [dbo].[TMemberKnownFile] (
    [CMemberKnown] INT    NOT NULL,
    [CFile]        BIGINT NOT NULL,
    [CAddedSeq]    INT    NULL,
    [CHidden]      BIT    NULL,
    PRIMARY KEY CLUSTERED ([CMemberKnown] ASC, [CFile] ASC),
    CONSTRAINT [FK_b3v5kmttofu2743xw5ljhq979] FOREIGN KEY ([CMemberKnown]) REFERENCES [dbo].[TMemberKnown] ([CKnownSeq]),
    CONSTRAINT [FK_radtfsfs6349vfniemmh5jqbl] FOREIGN KEY ([CFile]) REFERENCES [dbo].[TFile] ([CFileId])
);


GO

CREATE TABLE [dbo].[TTimeScheduleStudent] (
    [CScheduleId]       BIGINT         NOT NULL,
    [CBranchCode]       NVARCHAR (20)  NOT NULL,
    [CBranchStartDate]  DATETIME       NOT NULL,
    [CStudentCode]      NVARCHAR (50)  NOT NULL,
    [CContent]          NVARCHAR (255) NULL,
    [CDate]             DATETIME       NOT NULL,
    [CScheduleType]     NVARCHAR (10)  NOT NULL,
    [CStartTime]        DATETIME       NOT NULL,
    [CEndTime]          DATETIME       NOT NULL,
    [COriginScheduleId] BIGINT         NULL,
    [CDayId]            BIGINT         NULL,
    PRIMARY KEY CLUSTERED ([CScheduleId] ASC, [CBranchCode] ASC, [CBranchStartDate] ASC, [CStudentCode] ASC),
    CONSTRAINT [FK_7uxprogvt88fb1sd7mjfxofb] FOREIGN KEY ([CDayId]) REFERENCES [dbo].[TTimeScheduleDay] ([CId]),
    CONSTRAINT [FK27C4B0235DF65B8] FOREIGN KEY ([CBranchCode], [CBranchStartDate], [CStudentCode]) REFERENCES [dbo].[TStudent] ([CBranchCode], [CBranchStartDate], [CCode]),
    CONSTRAINT [FK27C4B023BD80AE12] FOREIGN KEY ([CScheduleId]) REFERENCES [dbo].[TTimeSchedule] ([CId])
);


GO

CREATE TABLE [dbo].[TGlobalAddressKoreaInfo] (
    [CManageNo]            NVARCHAR (25)  NOT NULL,
    [CDongCode]            NVARCHAR (10)  NULL,
    [CDongName]            NVARCHAR (20)  NULL,
    [CPostNo]              NVARCHAR (6)   NULL,
    [CPostNoSeq]           NVARCHAR (3)   NULL,
    [CBulkDeliveryName]    NVARCHAR (40)  NULL,
    [CPaperBuildingName]   NVARCHAR (40)  NULL,
    [CSiGunGuBuildingName] NVARCHAR (200) NULL,
    [CAprtmentHouses]      NVARCHAR (1)   NULL,
    PRIMARY KEY CLUSTERED ([CManageNo] ASC),
    CONSTRAINT [FKD9CDC21B8CB2546] FOREIGN KEY ([CManageNo]) REFERENCES [dbo].[TGlobalAddressKoreaAddress] ([CManageNo])
);


GO

CREATE TABLE [dbo].[TStudentSchoolYear] (
    [CStdDepartCode]      NVARCHAR (20) NOT NULL,
    [CStdDepartStartDate] DATETIME      NOT NULL,
    [CStdCode]            NVARCHAR (50) NOT NULL,
    [CSchCode]            NVARCHAR (50) NOT NULL,
    [CYear]               DATETIME      NOT NULL,
    [CGrade]              NVARCHAR (50) NULL,
    [CAge]                INT           NULL,
    CONSTRAINT [PK__TStudent__EDA4950402F25272] PRIMARY KEY CLUSTERED ([CStdDepartCode] ASC, [CStdDepartStartDate] ASC, [CStdCode] ASC, [CSchCode] ASC, [CYear] ASC),
    CONSTRAINT [FK_TStudent_TStudentSchoolYear] FOREIGN KEY ([CStdDepartCode], [CStdDepartStartDate], [CStdCode]) REFERENCES [dbo].[TStudent] ([CBranchCode], [CBranchStartDate], [CCode]),
    CONSTRAINT [FK_TStudentSchool_TStudentSchoolYear] FOREIGN KEY ([CStdDepartCode], [CStdDepartStartDate], [CStdCode], [CSchCode]) REFERENCES [dbo].[TStudentSchool] ([CBranchCode], [CBranchStartDate], [CStudentCode], [CSchoolCode]),
    CONSTRAINT [FK79B60078BF1575B] FOREIGN KEY ([CSchCode]) REFERENCES [dbo].[TSchool] ([CCode])
);


GO

CREATE TABLE [dbo].[TToDoStaff] (
    [CToDoId]          BIGINT        NOT NULL,
    [CStaffId]         NVARCHAR (30) NOT NULL,
    [CDepartCode]      NVARCHAR (20) NULL,
    [CDepartStartDate] DATETIME      NULL,
    [CLevelType]       NVARCHAR (10) NULL,
    [CLevelCode]       NVARCHAR (10) NULL,
    [CLevelSeq]        INT           NULL,
    [CBaseTime]        DATETIME      NOT NULL,
    [CStaffType]       NVARCHAR (15) NOT NULL,
    [CState]           NVARCHAR (15) NOT NULL,
    [CReceivedTime]    DATETIME      NOT NULL,
    [CTargetTime]      DATETIME      NULL,
    [CEndTime]         DATETIME      NOT NULL,
    [CFeedBackTime]    DATETIME      NOT NULL,
    [CIsAllowDel]      BIT           NOT NULL,
    [CRemark]          NTEXT         NULL,
    [CReadTime]        DATETIME      NULL,
    PRIMARY KEY CLUSTERED ([CToDoId] ASC, [CStaffId] ASC),
    CONSTRAINT [FKA8897C2636C2262B] FOREIGN KEY ([CToDoId]) REFERENCES [dbo].[TToDo] ([CId]),
    CONSTRAINT [FKA8897C2648D9611] FOREIGN KEY ([CDepartCode], [CDepartStartDate]) REFERENCES [dbo].[TDepartment] ([CDepartCode], [CDepartStartDate]),
    CONSTRAINT [FKA8897C269E3C3476] FOREIGN KEY ([CStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FKA8897C26E6DE7DCD] FOREIGN KEY ([CLevelType], [CLevelCode], [CLevelSeq]) REFERENCES [dbo].[TStaffLevel] ([CLevelType], [CLevelCode], [CLevelSeq])
);


GO

CREATE TABLE [dbo].[TQuestionSeason] (
    [CSeasonSeq]  INT            IDENTITY (1, 1) NOT NULL,
    [CSeasonName] NVARCHAR (255) NOT NULL,
    [CStartDate]  DATETIME       NOT NULL,
    [CEndDate]    DATETIME       NOT NULL,
    [CCloseDate]  DATETIME       NULL,
    [CEnable]     BIT            NULL,
    PRIMARY KEY CLUSTERED ([CSeasonSeq] ASC)
);


GO

CREATE TABLE [dbo].[TSalesRequest] (
    [CNo]                         INT            IDENTITY (1, 1) NOT NULL,
    [CStatus]                     NVARCHAR (255) NULL,
    [CRequestType]                NVARCHAR (255) NULL,
    [CCognitivePathCodeGroupCode] NVARCHAR (50)  NULL,
    [CCognitivePathCode]          NVARCHAR (50)  NULL,
    [CFairAttend]                 BIT            NULL,
    [CAddress]                    NVARCHAR (255) NULL,
    [CName]                       NVARCHAR (50)  NULL,
    [CSex]                        NVARCHAR (50)  NULL,
    [CAge]                        INT            NULL,
    [CJobCodeGroupCode]           NVARCHAR (50)  NULL,
    [CJobCode]                    NVARCHAR (50)  NULL,
    [CPhone]                      NVARCHAR (50)  NULL,
    [CMobie]                      NVARCHAR (50)  NULL,
    [CEmail]                      NVARCHAR (255) NULL,
    [COpenArea1]                  NVARCHAR (50)  NULL,
    [COpenArea2]                  NVARCHAR (50)  NULL,
    [COpenArea3]                  NVARCHAR (50)  NULL,
    [CInitialFund]                NVARCHAR (50)  NULL,
    [CExperienceFC]               BIT            NULL,
    [CExpFCPeroid]                NVARCHAR (50)  NULL,
    [CRegTime]                    DATETIME       NOT NULL,
    [CEditTime]                   DATETIME       NOT NULL,
    [CRegStaff]                   NVARCHAR (30)  NULL,
    [CEditStaff]                  NVARCHAR (30)  NULL,
    PRIMARY KEY CLUSTERED ([CNo] ASC),
    CONSTRAINT [FK_jm34wvor0majr6qav1og04www] FOREIGN KEY ([CEditStaff]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_kckd1lsj1wli6nx62kni8cu0v] FOREIGN KEY ([CRegStaff]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_og2s9tqus0qw7troaghqyd9ks] FOREIGN KEY ([CJobCodeGroupCode], [CJobCode]) REFERENCES [dbo].[TCommonCode] ([CCodeGroup], [CCode]),
    CONSTRAINT [FK_q4s4wyluna8aep4vxdhr1w4as] FOREIGN KEY ([CCognitivePathCodeGroupCode], [CCognitivePathCode]) REFERENCES [dbo].[TCommonCode] ([CCodeGroup], [CCode])
);


GO

CREATE TABLE [dbo].[TCommunityMembers] (
    [CCommunityId]    INT            NOT NULL,
    [CMemberId]       NVARCHAR (30)  NOT NULL,
    [CNickName]       NVARCHAR (50)  NULL,
    [CIsOpen]         BIT            NULL,
    [CIntroduce]      NVARCHAR (255) NULL,
    [CRequestDate]    DATETIME       NULL,
    [CApproveDate]    DATETIME       NULL,
    [COutDate]        DATETIME       NULL,
    [COutReason]      NVARCHAR (255) NULL,
    [COutApproveDate] DATETIME       NULL,
    [CLastJoinDate]   DATETIME       NULL,
    [CStatus]         NVARCHAR (255) NULL,
    PRIMARY KEY CLUSTERED ([CCommunityId] ASC, [CMemberId] ASC),
    CONSTRAINT [FKC5124564130388D6] FOREIGN KEY ([CMemberId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FKC51245641FF3A8A4] FOREIGN KEY ([CCommunityId]) REFERENCES [dbo].[TCommunity] ([CId])
);


GO

CREATE TABLE [dbo].[TBranchSendDocument] (
    [CNo]                      INT            IDENTITY (1, 1) NOT NULL,
    [CSendTime]                DATETIME       NULL,
    [CSubject]                 NVARCHAR (255) NULL,
    [CSendNo]                  NVARCHAR (255) NULL,
    [CBranchIdDepartCode]      NVARCHAR (20)  NULL,
    [CBranchIdDepartStartDate] DATETIME       NULL,
    [CSenderId]                NVARCHAR (30)  NULL,
    [CSendMethod]              NVARCHAR (255) NULL,
    [CPickupTime]              DATETIME       NULL,
    [CContent]                 NTEXT          NULL,
    [CComment]                 NVARCHAR (255) NULL,
    [CRegTime]                 DATETIME       NOT NULL,
    [CEditTime]                DATETIME       NOT NULL,
    [CRegStaffId]              NVARCHAR (30)  NULL,
    [CEditStaffId]             NVARCHAR (30)  NULL,
    PRIMARY KEY CLUSTERED ([CNo] ASC),
    CONSTRAINT [FKBE09E2F919E633C8] FOREIGN KEY ([CRegStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FKBE09E2F957DD0802] FOREIGN KEY ([CBranchIdDepartCode], [CBranchIdDepartStartDate]) REFERENCES [dbo].[TFacility] ([CDepartCode], [CDepartStartDate]),
    CONSTRAINT [FKBE09E2F978DF60AC] FOREIGN KEY ([CEditStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FKBE09E2F9841B9DB1] FOREIGN KEY ([CSenderId]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[TBoardForm] (
    [CBoardId]       NVARCHAR (20) NOT NULL,
    [CContentKindId] NVARCHAR (20) NOT NULL,
    [CFormHtml]      NTEXT         NULL,
    [CFormCss]       NTEXT         NULL,
    [CEnabled]       BIT           NOT NULL,
    PRIMARY KEY CLUSTERED ([CBoardId] ASC, [CContentKindId] ASC),
    CONSTRAINT [FK3FC7CAD635D89A81] FOREIGN KEY ([CBoardId]) REFERENCES [dbo].[TBoard] ([CBoardId])
);


GO

CREATE TABLE [dbo].[TEducationAdmin] (
    [CCourseNo] INT           NOT NULL,
    [CStaffId]  NVARCHAR (30) NOT NULL,
    [CType]     NVARCHAR (15) NULL,
    [CNo]       INT           NULL,
    PRIMARY KEY CLUSTERED ([CCourseNo] ASC, [CStaffId] ASC),
    CONSTRAINT [FKAA13DDFB9E3C3476] FOREIGN KEY ([CStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FKAA13DDFBFDC523B8] FOREIGN KEY ([CCourseNo]) REFERENCES [dbo].[TEducationCourse] ([CNo])
);


GO

CREATE TABLE [dbo].[TBranchSMS] (
    [CIdDepartCode]      NVARCHAR (20) NOT NULL,
    [CIdDepartStartDate] DATETIME      NOT NULL,
    [CEnabled]           BIT           NULL,
    [CAttendance]        BIT           NULL,
    [CPerPrice]          INT           NULL,
    PRIMARY KEY CLUSTERED ([CIdDepartCode] ASC, [CIdDepartStartDate] ASC),
    CONSTRAINT [FK7098DE631D3A9AC2] FOREIGN KEY ([CIdDepartCode], [CIdDepartStartDate]) REFERENCES [dbo].[TFacility] ([CDepartCode], [CDepartStartDate])
);


GO

CREATE TABLE [dbo].[TDepartment] (
    [CDepartCode]              NVARCHAR (20)  NOT NULL,
    [CDepartStartDate]         DATETIME       NOT NULL,
    [CEndDate]                 DATETIME       NOT NULL,
    [CName0]                   NVARCHAR (50)  NOT NULL,
    [CName1]                   NVARCHAR (50)  NULL,
    [CName2]                   NVARCHAR (50)  NULL,
    [CName3]                   NVARCHAR (50)  NULL,
    [CName4]                   NVARCHAR (50)  NULL,
    [CShortName0]              NVARCHAR (15)  NOT NULL,
    [CShortName1]              NVARCHAR (15)  NULL,
    [CShortName2]              NVARCHAR (15)  NULL,
    [CShortName3]              NVARCHAR (15)  NULL,
    [CShortName4]              NVARCHAR (15)  NULL,
    [CDepartType]              NVARCHAR (20)  NULL,
    [CHasSon]                  BIT            NOT NULL,
    [CHeadStaffId]             NVARCHAR (30)  NULL,
    [CGeneralStaffId]          NVARCHAR (30)  NULL,
    [CDepth]                   INT            NULL,
    [CDisplayIndex]            INT            NOT NULL,
    [CTemp1]                   NVARCHAR (100) NULL,
    [CTemp2]                   NVARCHAR (100) NULL,
    [CTemp3]                   NVARCHAR (100) NULL,
    [CTemp4]                   NVARCHAR (100) NULL,
    [CTemp5]                   NVARCHAR (100) NULL,
    [CParentFacilityCode]      NVARCHAR (20)  NULL,
    [CParentFacilityStartDate] DATETIME       NULL,
    [CParentDepartCode]        NVARCHAR (20)  NULL,
    [CParentDepartStartDate]   DATETIME       NULL,
    [CIsFacilityTree]          BIT            NULL,
    [CTmpDouble1]              FLOAT (53)     NULL,
    [CTmpDouble2]              FLOAT (53)     NULL,
    [CTmpDouble3]              FLOAT (53)     NULL,
    [CTmpDouble4]              FLOAT (53)     NULL,
    [CTmpDouble5]              FLOAT (53)     NULL,
    [CTmpDate1]                DATETIME       NULL,
    [CTmpDate2]                DATETIME       NULL,
    [CTmpDate3]                DATETIME       NULL,
    [CTmpDate4]                DATETIME       NULL,
    [CTmpDate5]                DATETIME       NULL,
    [CTmpText1]                NTEXT          NULL,
    [CTmpText2]                NTEXT          NULL,
    [CTmpText3]                NTEXT          NULL,
    [CTmpGroup1]               NVARCHAR (50)  NULL,
    [CTmpCode1]                NVARCHAR (50)  NULL,
    [CTmpGroup2]               NVARCHAR (50)  NULL,
    [CTmpCode2]                NVARCHAR (50)  NULL,
    [CTmpGroup3]               NVARCHAR (50)  NULL,
    [CTmpCode3]                NVARCHAR (50)  NULL,
    [CTmpGroup4]               NVARCHAR (50)  NULL,
    [CTmpCode4]                NVARCHAR (50)  NULL,
    [CTmpGroup5]               NVARCHAR (50)  NULL,
    [CTmpCode5]                NVARCHAR (50)  NULL,
    [CEmailAddress]            NVARCHAR (255) NULL,
    [CEmailPop3]               BIT            NULL,
    [CEmailPwd]                NVARCHAR (255) NULL,
    [CEmailShareSub]           BIT            NULL,
    [CZimbraId]                NVARCHAR (255) NULL,
    [CIsWorkUnit]              BIT            NULL,
    [CSealText]                NVARCHAR (255) NULL,
    [CSignDpName1]             NVARCHAR (50)  NULL,
    [CSignDpName2]             NVARCHAR (50)  NULL,
    [CAutoGen]                 BIT            NULL,
    [CSkipSync]                BIT            NULL,
    [CApprCode]                NVARCHAR (20)  NULL,
    PRIMARY KEY CLUSTERED ([CDepartCode] ASC, [CDepartStartDate] ASC),
    CONSTRAINT [FK_1t7qcq1ek9snuccqifcxfyq5f] FOREIGN KEY ([CTmpGroup1], [CTmpCode1]) REFERENCES [dbo].[TCommonCode] ([CCodeGroup], [CCode]),
    CONSTRAINT [FK_4gvr1ylymivy2fqbwm9iip18] FOREIGN KEY ([CTmpGroup2], [CTmpCode2]) REFERENCES [dbo].[TCommonCode] ([CCodeGroup], [CCode]),
    CONSTRAINT [FK_7dd5ixa5ahawo8n0h4yhl62x1] FOREIGN KEY ([CTmpGroup4], [CTmpCode4]) REFERENCES [dbo].[TCommonCode] ([CCodeGroup], [CCode]),
    CONSTRAINT [FK_hdtd044sp9edbjnc98sgy6fx] FOREIGN KEY ([CTmpGroup3], [CTmpCode3]) REFERENCES [dbo].[TCommonCode] ([CCodeGroup], [CCode]),
    CONSTRAINT [FK_l2q73ocjw2rffigsnmxa6uf8j] FOREIGN KEY ([CTmpGroup5], [CTmpCode5]) REFERENCES [dbo].[TCommonCode] ([CCodeGroup], [CCode]),
    CONSTRAINT [FK846AC6C62209374] FOREIGN KEY ([CGeneralStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK846AC6C6BA0A416] FOREIGN KEY ([CHeadStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK846AC6C6E63CB851] FOREIGN KEY ([CParentDepartCode], [CParentDepartStartDate]) REFERENCES [dbo].[TDepartment] ([CDepartCode], [CDepartStartDate]),
    CONSTRAINT [FK846AC6C6EBAEF182] FOREIGN KEY ([CParentFacilityCode], [CParentFacilityStartDate]) REFERENCES [dbo].[TFacility] ([CDepartCode], [CDepartStartDate])
);


GO

CREATE TABLE [dbo].[TEightIndicatorPeriod] (
    [CDepartCode]   NVARCHAR (20) NOT NULL,
    [CYearPeriod]   NVARCHAR (5)  NOT NULL,
    [CFlag]         NVARCHAR (1)  NOT NULL,
    [CValue]        FLOAT (53)    NULL,
    [CRegist_Count] BIGINT        NULL,
    [CTotal_Count]  BIGINT        NULL,
    [CClass]        NVARCHAR (5)  NULL,
    [CTotal_Avg]    FLOAT (53)    NULL,
    [CS_Avg]        FLOAT (53)    NULL,
    [CA_Avg]        FLOAT (53)    NULL,
    [CB_Avg]        FLOAT (53)    NULL,
    [CC_Avg]        FLOAT (53)    NULL,
    [CD_Avg]        FLOAT (53)    NULL,
    [CF_Avg]        FLOAT (53)    NULL,
    CONSTRAINT [PK_TEightIndicatorPeriod] PRIMARY KEY CLUSTERED ([CDepartCode] ASC, [CYearPeriod] ASC, [CFlag] ASC)
);


GO

CREATE TABLE [dbo].[TContent] (
    [CContentId]              BIGINT         IDENTITY (1, 1) NOT NULL,
    [CBoardId]                NVARCHAR (20)  NOT NULL,
    [CContentGroupTime]       DATETIME       NOT NULL,
    [CMainContentId]          BIGINT         NOT NULL,
    [CSeq]                    INT            NOT NULL,
    [CDepth]                  INT            NOT NULL,
    [CContentKindId]          NVARCHAR (50)  NULL,
    [CContentStatusId]        NVARCHAR (50)  NULL,
    [CContentType]            NVARCHAR (20)  NULL,
    [CTitle]                  NVARCHAR (255) NOT NULL,
    [CBody]                   NTEXT          NULL,
    [CReadCount]              INT            NOT NULL,
    [CFileCount]              INT            NOT NULL,
    [CTotalFileCount]         INT            NOT NULL,
    [CRegTime]                DATETIME       NOT NULL,
    [CLastModifiedTime]       DATETIME       NOT NULL,
    [CStartTime]              DATETIME       NOT NULL,
    [CEndTime]                DATETIME       NOT NULL,
    [CRegIp]                  NVARCHAR (255) NULL,
    [CLastIp]                 NVARCHAR (255) NULL,
    [CRegStaffId]             NVARCHAR (30)  NOT NULL,
    [CLastStaffId]            NVARCHAR (30)  NOT NULL,
    [CNoticeAll]              BIT            NULL,
    [CStringValue0]           NVARCHAR (100) NULL,
    [CStringValue1]           NVARCHAR (100) NULL,
    [CStringValue2]           NVARCHAR (100) NULL,
    [CStringValue3]           NVARCHAR (100) NULL,
    [CStringValue4]           NVARCHAR (100) NULL,
    [CLongValue0]             BIGINT         NULL,
    [CLongValue1]             BIGINT         NULL,
    [CLongValue2]             BIGINT         NULL,
    [CLongValue3]             BIGINT         NULL,
    [CLongValue4]             BIGINT         NULL,
    [CDone]                   BIT            NOT NULL,
    [CDeleterId]              NVARCHAR (30)  NULL,
    [CDeletedTime]            DATETIME       NOT NULL,
    [CProcessState]           NVARCHAR (15)  DEFAULT ('Open') NOT NULL,
    [CSumPoint]               INT            DEFAULT ((0)) NOT NULL,
    [CAveragePoint]           FLOAT (53)     DEFAULT ((0)) NOT NULL,
    [CMaxPointPerItem]        INT            DEFAULT ((5)) NOT NULL,
    [CEvalManCount]           INT            DEFAULT ((0)) NOT NULL,
    [CEvalTotalMan]           INT            DEFAULT ((0)) NOT NULL,
    [COpenedTime]             DATETIME       DEFAULT ('1900-01-01') NOT NULL,
    [CEvalLimitTime]          DATETIME       DEFAULT ('1900-01-01') NOT NULL,
    [CDeciderId]              NVARCHAR (30)  NULL,
    [CDismissTime]            DATETIME       DEFAULT ('1900-01-01') NOT NULL,
    [CHpMemberId]             BIGINT         NULL,
    [CHpMemberName]           NVARCHAR (100) NULL,
    [CFacilityCode]           NVARCHAR (20)  NULL,
    [CLastFacilityCode]       NVARCHAR (20)  NULL,
    [CLastFacilityStartDate]  DATETIME       NULL,
    [CTopContent]             BIT            NULL,
    [COrgContentId]           BIGINT         NULL,
    [CTopContentStart]        DATETIME       DEFAULT ('1900-01-01') NOT NULL,
    [CTopContentEnd]          DATETIME       DEFAULT ('2300-12-31') NOT NULL,
    [CContentNo]              NVARCHAR (100) NULL,
    [CPriority]               INT            DEFAULT ((5)) NOT NULL,
    [CProcessRatio]           INT            DEFAULT ((100)) NOT NULL,
    [CShowAll]                BIT            DEFAULT ((1)) NOT NULL,
    [CBizDiaryDate]           DATETIME       NULL,
    [CBizDiaryGroupId]        NVARCHAR (20)  NULL,
    [CDeadline]               DATETIME       NULL,
    [CDoneTime]               DATETIME       NULL,
    [CDoneStaffId]            NVARCHAR (30)  NULL,
    [CDateTimeValue0]         DATETIME       NULL,
    [CDateTimeValue1]         DATETIME       NULL,
    [CDateTimeValue2]         DATETIME       NULL,
    [CDateTimeValue3]         DATETIME       NULL,
    [CDateTimeValue4]         DATETIME       NULL,
    [CShowEndDate]            DATETIME       NULL,
    [CIsTemp]                 BIT            NULL,
    [CShowStartDate]          DATETIME       NULL,
    [CConductDepartCode]      NVARCHAR (20)  NULL,
    [CConductDepartStartDate] DATETIME       NULL,
    [COpenKey]                NVARCHAR (200) NULL,
    CONSTRAINT [PK__TContent__F4328CCE59C55456] PRIMARY KEY CLUSTERED ([CContentId] ASC),
    CONSTRAINT [FK_6hqxe2rflplv3xaxfk788vrdl] FOREIGN KEY ([CLastFacilityCode], [CLastFacilityStartDate]) REFERENCES [dbo].[TFacility] ([CDepartCode], [CDepartStartDate]),
    CONSTRAINT [FK_7kqg28liaq78bpdm4hkswpbej] FOREIGN KEY ([CConductDepartCode], [CConductDepartStartDate]) REFERENCES [dbo].[TDepartment] ([CDepartCode], [CDepartStartDate]),
    CONSTRAINT [FK_k0i9uy6x7h8p5257edbuxqobw] FOREIGN KEY ([CBizDiaryGroupId]) REFERENCES [dbo].[TStaffGroup] ([CGroupId]),
    CONSTRAINT [FK_o53o064wsts7d3cbhg7fmn9n3] FOREIGN KEY ([CDoneStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_pm4dcl7jf9dm285vks97gtcy8] FOREIGN KEY ([CBizDiaryDate]) REFERENCES [dbo].[TContentBizDiaryDate] ([CDate]),
    CONSTRAINT [FKB1D2858519E633C8] FOREIGN KEY ([CRegStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FKB1D285852673920B] FOREIGN KEY ([CContentStatusId]) REFERENCES [dbo].[TBoardContentStatus] ([CStatusId]),
    CONSTRAINT [FKB1D2858535D89A81] FOREIGN KEY ([CBoardId]) REFERENCES [dbo].[TBoard] ([CBoardId]),
    CONSTRAINT [FKB1D285854647D0BD] FOREIGN KEY ([CDeleterId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FKB1D285855CE0FBCF] FOREIGN KEY ([CContentKindId]) REFERENCES [dbo].[TBoardContentKind] ([CKindId]),
    CONSTRAINT [FKB1D285857021A5E0] FOREIGN KEY ([CDeciderId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FKB1D2858578F046A0] FOREIGN KEY ([CLastStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[TComponentLinks] (
    [CLinkNo]      BIGINT         NOT NULL,
    [CComponentNo] BIGINT         NOT NULL,
    [CUrl]         NVARCHAR (255) NULL,
    [CType]        NVARCHAR (50)  NULL,
    [CLinksNo]     BIGINT         NULL,
    PRIMARY KEY CLUSTERED ([CLinkNo] ASC, [CComponentNo] ASC),
    CONSTRAINT [FK90E2823044F3BF8] FOREIGN KEY ([CComponentNo]) REFERENCES [dbo].[TComponent] ([CComponentNo]),
    CONSTRAINT [FK90E282307C031634] FOREIGN KEY ([CLinksNo]) REFERENCES [dbo].[TComponent] ([CComponentNo])
);


GO

CREATE TABLE [dbo].[TManagementGoal] (
    [CStDepartCode]      NVARCHAR (20)  NOT NULL,
    [CStDepartStartDate] DATETIME       NOT NULL,
    [CStCode]            NVARCHAR (50)  NOT NULL,
    [CRegDate]           DATETIME       NOT NULL,
    [CGoal]              NVARCHAR (255) NULL,
    [CRegStaffId]        NVARCHAR (30)  NULL,
    [CMainGoal]          BIT            NULL,
    [CComplete]          BIT            NULL,
    [CCompleteDate]      DATETIME       NULL,
    [CCompleteStaffId]   NVARCHAR (30)  NULL,
    [CApprovalStatus]    NVARCHAR (15)  NULL,
    PRIMARY KEY CLUSTERED ([CStDepartCode] ASC, [CStDepartStartDate] ASC, [CStCode] ASC, [CRegDate] ASC),
    CONSTRAINT [FK28D23B6A19E633C8] FOREIGN KEY ([CRegStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK28D23B6A6F88FD24] FOREIGN KEY ([CStDepartCode], [CStDepartStartDate], [CStCode]) REFERENCES [dbo].[TStudent] ([CBranchCode], [CBranchStartDate], [CCode]),
    CONSTRAINT [FK28D23B6AA465541D] FOREIGN KEY ([CCompleteStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[TResourceGroup] (
    [CGroupId]      INT           IDENTITY (1, 1) NOT NULL,
    [CName0]        NVARCHAR (50) NOT NULL,
    [CName1]        NVARCHAR (50) NULL,
    [CName2]        NVARCHAR (50) NULL,
    [CName3]        NVARCHAR (50) NULL,
    [CName4]        NVARCHAR (50) NULL,
    [CShortName0]   NVARCHAR (10) NOT NULL,
    [CShortName1]   NVARCHAR (10) NULL,
    [CShortName2]   NVARCHAR (10) NULL,
    [CShortName3]   NVARCHAR (10) NULL,
    [CShortName4]   NVARCHAR (10) NULL,
    [CRemark]       NTEXT         NULL,
    [CFacilityCode] NVARCHAR (20) NULL,
    PRIMARY KEY CLUSTERED ([CGroupId] ASC)
);


GO

CREATE TABLE [dbo].[TSaleItem] (
    [CCode]     NVARCHAR (255) NOT NULL,
    [CName]     NVARCHAR (255) NULL,
    [CComment]  NVARCHAR (255) NULL,
    [CPhoto1Id] BIGINT         NULL,
    [CPhoto2Id] BIGINT         NULL,
    [CPrice]    FLOAT (53)     NULL,
    [CCount]    FLOAT (53)     NULL,
    [CMinCount] FLOAT (53)     NULL,
    [CEnable]   BIT            NULL,
    PRIMARY KEY CLUSTERED ([CCode] ASC),
    CONSTRAINT [FK1DB0046E37483697] FOREIGN KEY ([CPhoto1Id]) REFERENCES [dbo].[TFile] ([CFileId]),
    CONSTRAINT [FK1DB0046E37483A58] FOREIGN KEY ([CPhoto2Id]) REFERENCES [dbo].[TFile] ([CFileId])
);


GO

CREATE TABLE [dbo].[tb_RootHomework] (
    [it_RootHomeworkIdx]    INT            IDENTITY (1, 1) NOT NULL,
    [st_RootHomeworkCode]   NVARCHAR (50)  NULL,
    [st_RootHomeworkTitle]  NVARCHAR (225) NULL,
    [st_RootHomeworkMemo]   NVARCHAR (500) NULL,
    [st_StaffCode]          NVARCHAR (50)  NULL,
    [dt_RootHomeworkMake]   DATETIME       NULL,
    [dt_RootHomeworkDelete] DATETIME       NULL,
    CONSTRAINT [PK_tb_RootHomeworkTemplate] PRIMARY KEY CLUSTERED ([it_RootHomeworkIdx] ASC)
);


GO

CREATE TABLE [dbo].[TTutoringDayClose] (
    [CCloseMonth]         DATETIME      NOT NULL,
    [CDepartCode]         NVARCHAR (20) NOT NULL,
    [CDepartStartDate]    DATETIME      NOT NULL,
    [CCloseDate]          DATETIME      NOT NULL,
    [CCloseBranch]        BIT           NULL,
    [CBranchStaff]        NVARCHAR (30) NULL,
    [CBranchDateTime]     DATETIME      NULL,
    [CCloseHeadOffice]    BIT           NULL,
    [CHeadOfficeStaff]    NVARCHAR (30) NULL,
    [CHeadOfficeDateTime] DATETIME      NULL,
    PRIMARY KEY CLUSTERED ([CCloseMonth] ASC, [CDepartCode] ASC, [CDepartStartDate] ASC, [CCloseDate] ASC),
    CONSTRAINT [FK_4jt5wa2usa11v0sckn2v6ein8] FOREIGN KEY ([CBranchStaff]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_6tvpi8q2lbal21644tl7h4h4q] FOREIGN KEY ([CHeadOfficeStaff]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_9kcijtjf908rp6cw3qhjljhum] FOREIGN KEY ([CCloseMonth], [CDepartCode], [CDepartStartDate]) REFERENCES [dbo].[TAccountPeriodCloseFacility] ([CAccountPeriodClose], [CDepartCode], [CDepartStartDate])
);


GO

CREATE TABLE [dbo].[TActiveSession] (
    [CSessionId]          NVARCHAR (255) NOT NULL,
    [CStaffId]            NVARCHAR (30)  NULL,
    [CLoginDateTime]      DATETIME       NULL,
    [CLastAccessDateTime] DATETIME       NULL,
    [CLoginIP]            NVARCHAR (50)  NULL,
    [CLanguageCode]       NVARCHAR (5)   NULL,
    [CTimeZone]           NVARCHAR (50)  NULL,
    [CEnvUpdateDateTime]  DATETIME       NULL,
    [CThemeCode]          NVARCHAR (10)  NULL,
    [CConnectType]        NVARCHAR (15)  NOT NULL,
    [COtherInfo1]         NVARCHAR (50)  NULL,
    [COtherInfo2]         NVARCHAR (50)  NULL,
    [COtherInfo3]         NVARCHAR (50)  NULL,
    [COtherInfo4]         NVARCHAR (50)  NULL,
    [COtherInfo5]         NVARCHAR (50)  NULL,
    [COtherInfo6]         NVARCHAR (50)  NULL,
    [COtherInfo7]         NVARCHAR (50)  NULL,
    [COtherInfo8]         NVARCHAR (50)  NULL,
    [COtherInfo9]         NVARCHAR (50)  NULL,
    [CLoginLevelCode]     NVARCHAR (5)   NULL,
    [CFacilityCode]       NVARCHAR (20)  NULL,
    [CFacilityStartDate]  DATETIME       NULL,
    [CHidden]             BIT            NULL,
    [CMachineName]        NVARCHAR (100) NULL,
    [CAccessIpGroupId]    NVARCHAR (20)  NULL,
    CONSTRAINT [PK_TActiveSession] PRIMARY KEY NONCLUSTERED ([CSessionId] ASC),
    CONSTRAINT [FK7C6920BC9E3C3476] FOREIGN KEY ([CStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK7C6920BCB93F5F42] FOREIGN KEY ([CFacilityCode], [CFacilityStartDate]) REFERENCES [dbo].[TFacility] ([CDepartCode], [CDepartStartDate])
);


GO

CREATE TABLE [dbo].[TCommonCode] (
    [CCodeGroup] NVARCHAR (50)  NOT NULL,
    [CCode]      NVARCHAR (50)  NOT NULL,
    [CName]      NVARCHAR (255) NULL,
    [CComment]   NVARCHAR (255) NULL,
    [CEnabled]   BIT            NULL,
    [CSort]      INT            NULL,
    [CInfo1]     NVARCHAR (50)  NULL,
    [CInfo2]     NVARCHAR (50)  NULL,
    [CInfo3]     NVARCHAR (50)  NULL,
    [CInfo4]     NVARCHAR (50)  NULL,
    [CInfo5]     NVARCHAR (50)  NULL,
    [CInfo6]     NVARCHAR (50)  NULL,
    [CInfo7]     NVARCHAR (50)  NULL,
    [CInfo8]     NVARCHAR (50)  NULL,
    [CInfo9]     NVARCHAR (50)  NULL,
    PRIMARY KEY CLUSTERED ([CCodeGroup] ASC, [CCode] ASC),
    CONSTRAINT [FK986EE1ECE79F0E40] FOREIGN KEY ([CCodeGroup]) REFERENCES [dbo].[TCodeGroup] ([CCode])
);


GO

CREATE TABLE [dbo].[TTrial] (
    [CCoordKnowReMapDataMapId] INT NOT NULL,
    [CCoordMapSeq]             INT NOT NULL,
    [CTrialId]                 INT NOT NULL,
    PRIMARY KEY CLUSTERED ([CCoordKnowReMapDataMapId] ASC, [CCoordMapSeq] ASC, [CTrialId] ASC),
    CONSTRAINT [FK_1fj3gbdbrend62ryf7coa24h3] FOREIGN KEY ([CCoordKnowReMapDataMapId], [CCoordMapSeq]) REFERENCES [dbo].[TCoords] ([CKnowReMapData], [CMapSeq])
);


GO

CREATE TABLE [dbo].[TTradeBillCollect] (
    [CBranchCode]        NVARCHAR (20) NOT NULL,
    [CBranchStartDate]   DATETIME      NOT NULL,
    [CCollectNo]         INT           NOT NULL,
    [CPayDate]           DATETIME      NULL,
    [CScDepartCode]      NVARCHAR (20) NULL,
    [CScDepartStartDate] DATETIME      NULL,
    [CScCode]            NVARCHAR (50) NULL,
    [CScNo]              INT           NULL,
    [CStDepartCode]      NVARCHAR (20) NULL,
    [CStDepartStartDate] DATETIME      NULL,
    [CStCode]            NVARCHAR (50) NULL,
    [CStNo]              INT           NULL,
    [CCollecStatus]      NVARCHAR (15) NULL,
    [CPayPrice]          INT           NULL,
    [CCollecPrice]       INT           NULL,
    [CDefaultPrice]      INT           NULL,
    [CComment]           NTEXT         NULL,
    [CRegDate]           DATETIME      NULL,
    [CRegStaffId]        NVARCHAR (30) NULL,
    [CSiDepartCode]      NVARCHAR (20) NULL,
    [CSiDepartStartDate] DATETIME      NULL,
    [CSiCode]            NVARCHAR (50) NULL,
    [CSiNo]              INT           NULL,
    PRIMARY KEY CLUSTERED ([CBranchCode] ASC, [CBranchStartDate] ASC, [CCollectNo] ASC),
    CONSTRAINT [FK_l8v7j9g0otjr4ihrvfb9bq8om] FOREIGN KEY ([CSiDepartCode], [CSiDepartStartDate], [CSiCode], [CSiNo]) REFERENCES [dbo].[TTestInfo] ([CStdBranchCode], [CStdBranchStartDate], [CCode], [CNo]),
    CONSTRAINT [FK_TStudentTutoring_TTradeBillCollect] FOREIGN KEY ([CStDepartCode], [CStDepartStartDate], [CStCode], [CStNo]) REFERENCES [dbo].[TStudentTutoring] ([CStdDepartCode], [CStdDepartStartDate], [CStdCode], [CNo]),
    CONSTRAINT [FKD9605B9319E633C8] FOREIGN KEY ([CRegStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FKD9605B9348562EA2] FOREIGN KEY ([CBranchCode], [CBranchStartDate]) REFERENCES [dbo].[TFacility] ([CDepartCode], [CDepartStartDate]),
    CONSTRAINT [FKD9605B935A0759E8] FOREIGN KEY ([CScDepartCode], [CScDepartStartDate], [CScCode], [CScNo]) REFERENCES [dbo].[TStudentCounsel] ([CScDepartCode], [CScDepartStartDate], [CScCode], [CNo])
);


GO

CREATE TABLE [dbo].[TTradeCloseHistory] (
    [CBranchCode]      NVARCHAR (20)  NOT NULL,
    [CBranchStartDate] DATETIME       NOT NULL,
    [CCloseNo]         INT            NOT NULL,
    [CDefaultPrice]    INT            NULL,
    [CCloseComment]    NTEXT          NULL,
    [CCloseType]       NVARCHAR (15)  NULL,
    [COutstandingBond] NVARCHAR (255) NULL,
    [CRegDate]         DATETIME       NULL,
    [CRegStaffId]      NVARCHAR (30)  NULL,
    [CApprovalStatus]  NVARCHAR (15)  NULL,
    PRIMARY KEY CLUSTERED ([CBranchCode] ASC, [CBranchStartDate] ASC, [CCloseNo] ASC),
    CONSTRAINT [FKBBE6390C19E633C8] FOREIGN KEY ([CRegStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FKBBE6390C48562EA2] FOREIGN KEY ([CBranchCode], [CBranchStartDate]) REFERENCES [dbo].[TFacility] ([CDepartCode], [CDepartStartDate])
);


GO

CREATE TABLE [dbo].[TStudentSchool] (
    [CBranchCode]      NVARCHAR (20) NOT NULL,
    [CBranchStartDate] DATETIME      NOT NULL,
    [CStudentCode]     NVARCHAR (50) NOT NULL,
    [CSchoolCode]      NVARCHAR (50) NOT NULL,
    [CEntrance]        DATETIME      NULL,
    [CGraduate]        DATETIME      NULL,
    PRIMARY KEY CLUSTERED ([CBranchCode] ASC, [CBranchStartDate] ASC, [CStudentCode] ASC, [CSchoolCode] ASC),
    CONSTRAINT [FK_tbmjhhmq06l7snaoc23fyks4y] FOREIGN KEY ([CBranchCode], [CBranchStartDate], [CStudentCode]) REFERENCES [dbo].[TStudent] ([CBranchCode], [CBranchStartDate], [CCode]),
    CONSTRAINT [FK_TSchool_TStudentSchool] FOREIGN KEY ([CSchoolCode]) REFERENCES [dbo].[TSchool] ([CCode]),
    CONSTRAINT [FK1450499BD30F2DD9] FOREIGN KEY ([CSchoolCode]) REFERENCES [dbo].[TSchool] ([CCode])
);


GO

CREATE TABLE [dbo].[TStaffActionHistory] (
    [CActionDate] DATETIME       NOT NULL,
    [CStaffId]    NVARCHAR (30)  NOT NULL,
    [CActionType] NVARCHAR (255) NOT NULL,
    [CInfoStr1]   NVARCHAR (50)  NULL,
    [CInfoStr2]   NVARCHAR (50)  NULL,
    [CInfoStr3]   NVARCHAR (50)  NULL,
    [CInfoStr4]   NVARCHAR (50)  NULL,
    [CInfoStr5]   NVARCHAR (50)  NULL,
    [CInfoText]   NTEXT          NULL,
    [CIp]         NVARCHAR (100) NULL,
    PRIMARY KEY CLUSTERED ([CActionDate] ASC, [CStaffId] ASC, [CActionType] ASC),
    CONSTRAINT [FKC1DA9DF29E3C3476] FOREIGN KEY ([CStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[TComponentComment] (
    [CCommentNo]       BIGINT        NOT NULL,
    [CComponentNo]     BIGINT        NOT NULL,
    [CSeq]             INT           NOT NULL,
    [CDepth]           INT           NOT NULL,
    [CParentCommentNo] BIGINT        NULL,
    [CWriterId]        NVARCHAR (30) NULL,
    [CRegTime]         DATETIME      NULL,
    [CComment]         NTEXT         NULL,
    [CScore]           FLOAT (53)    NULL,
    PRIMARY KEY CLUSTERED ([CCommentNo] ASC, [CComponentNo] ASC),
    CONSTRAINT [FK10625F1644F3BF8] FOREIGN KEY ([CComponentNo]) REFERENCES [dbo].[TComponent] ([CComponentNo]),
    CONSTRAINT [FK10625F16CBAA906F] FOREIGN KEY ([CWriterId]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[TB_ATT_UNIQUE] (
    [CLASS_CODE]  NVARCHAR (20) NOT NULL,
    [USER_GUBN]   NVARCHAR (1)  NULL,
    [USER_SEQ]    NVARCHAR (20) NULL,
    [USER_CARDNO] NVARCHAR (50) NOT NULL,
    [ATT_STATE]   NVARCHAR (2)  NULL,
    [ATT_FLAG]    NVARCHAR (1)  NULL,
    [ATT_DATE]    DATETIME      NOT NULL,
    [PROC_FLAG]   BIT           NULL,
    CONSTRAINT [PK_TB_ATT_UNIQUE] PRIMARY KEY CLUSTERED ([CLASS_CODE] ASC, [USER_CARDNO] ASC, [ATT_DATE] ASC)
);


GO

CREATE TABLE [dbo].[otbl_Member_profile] (
    [profile_idx]         INT            IDENTITY (1, 1) NOT NULL,
    [staff_id]            NVARCHAR (30)  NULL,
    [outside_member_yn]   CHAR (1)       NULL,
    [outside_member_name] NVARCHAR (20)  NULL,
    [reg_date]            DATETIME       NULL,
    [mod_date]            DATETIME       NULL,
    [member_image]        IMAGE          NULL,
    [history]             NVARCHAR (500) NULL,
    [prize]               NVARCHAR (500) NULL,
    [certificate]         NVARCHAR (500) NULL,
    [education]           NVARCHAR (500) NULL,
    [major]               NVARCHAR (500) NULL,
    [graduation]          NVARCHAR (500) NULL,
    [del_yn]              CHAR (1)       CONSTRAINT [DF_otbl_Member_profile_del_yn] DEFAULT ('N') NULL,
    CONSTRAINT [PK_otbl_Member_profile] PRIMARY KEY CLUSTERED ([profile_idx] ASC)
);


GO

CREATE TABLE [dbo].[TSalaryRetirementFund] (
    [CBrDepartCode]      NVARCHAR (20) NOT NULL,
    [CBrDepartStartDate] DATETIME      NOT NULL,
    [CFundRate]          INT           NULL,
    PRIMARY KEY CLUSTERED ([CBrDepartCode] ASC, [CBrDepartStartDate] ASC),
    CONSTRAINT [FKB776013C2D35EBE2] FOREIGN KEY ([CBrDepartCode], [CBrDepartStartDate]) REFERENCES [dbo].[TFacility] ([CDepartCode], [CDepartStartDate])
);


GO

CREATE TABLE [dbo].[TApprStaffFolderDoc] (
    [CFolderId]        INT            NOT NULL,
    [CDocId]           BIGINT         NOT NULL,
    [CBaseTime]        DATETIME       NOT NULL,
    [CSecurityLevelId] INT            NULL,
    [CStatus]          NVARCHAR (15)  NOT NULL,
    [CRegStaffId]      NVARCHAR (30)  NULL,
    [CRegTime]         DATETIME       NOT NULL,
    [CHidden]          BIT            NOT NULL,
    [CTitle]           NVARCHAR (255) NOT NULL,
    [CDocNo]           NVARCHAR (200) NULL,
    [CWriterId]        NVARCHAR (30)  NULL,
    [CImplState]       NVARCHAR (255) NULL,
    [CByReference]     BIT            DEFAULT ((0)) NULL,
    [CProjectId]       NVARCHAR (40)  NULL,
    [CTemp1]           NVARCHAR (80)  NULL,
    [CTemp2]           NVARCHAR (80)  NULL,
    [CTemp3]           NVARCHAR (80)  NULL,
    [CTemp4]           NVARCHAR (80)  NULL,
    [CTemp5]           NVARCHAR (80)  NULL,
    [CTemp6]           NVARCHAR (80)  NULL,
    [CTemp7]           NVARCHAR (80)  NULL,
    [CTemp8]           NVARCHAR (80)  NULL,
    [CTemp9]           NVARCHAR (80)  NULL,
    [CTemp10]          NVARCHAR (80)  NULL,
    PRIMARY KEY CLUSTERED ([CFolderId] ASC, [CDocId] ASC),
    CONSTRAINT [FK_1ulxc1p69t18np5k386vw069e] FOREIGN KEY ([CSecurityLevelId]) REFERENCES [dbo].[TApprSecurityLevel] ([CLevelId]),
    CONSTRAINT [FK_2yk0tkjr1upsudl8em6t3xr8] FOREIGN KEY ([CFolderId]) REFERENCES [dbo].[TApprStaffFolder] ([CFolderId]),
    CONSTRAINT [FK_6fm2bv04kwt4k7kiajckm3drh] FOREIGN KEY ([CWriterId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_he4do3igook6b8y56bw3tqej4] FOREIGN KEY ([CProjectId]) REFERENCES [dbo].[TProject] ([CProjectId]),
    CONSTRAINT [FK_mhgs1p2or3gg05x9umre82u04] FOREIGN KEY ([CRegStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_phjkwbfgnwt65igmvfoy6i3lr] FOREIGN KEY ([CDocId]) REFERENCES [dbo].[TApprDoc] ([CDocId])
);


GO

CREATE TABLE [dbo].[tb_MktResult] (
    [it_MktResultIdx]                    INT  IDENTITY (1, 1) NOT NULL,
    [it_MediaIdx]                        INT  NOT NULL,
    [dt_MktResult]                       DATE NULL,
    [it_MktResultAdAmountAllArea]        INT  CONSTRAINT [DF_tb_MktResult_it_MktDbAdAmountAll] DEFAULT ((0)) NULL,
    [it_MktResultClickCountAllArea]      INT  CONSTRAINT [DF_tb_MktResult_it_MktDbClickCountAll] DEFAULT ((0)) NULL,
    [it_MktResultImpressionCountAllArea] INT  CONSTRAINT [DF_tb_MktResult_it_MktDbImpressionCountAll] DEFAULT ((0)) NULL,
    [it_MktResultAdAmountDiArea]         INT  CONSTRAINT [DF_tb_MktResult_it_MktDbAdAmountDi] DEFAULT ((0)) NULL,
    [it_MktResultClickCountDiArea]       INT  CONSTRAINT [DF_tb_MktResult_it_MktDbClickCountDi] DEFAULT ((0)) NULL,
    [it_MktResultImpressionCountDiArea]  INT  CONSTRAINT [DF_tb_MktResult_it_MktDbImpressionCountDi] DEFAULT ((0)) NULL,
    [it_MktResultAdAmountFcArea]         INT  CONSTRAINT [DF_tb_MktResult_it_MktDbAdAmountFc] DEFAULT ((0)) NULL,
    [it_MktResultClickCountFcArea]       INT  CONSTRAINT [DF_tb_MktResult_it_MktDbClickCountFc] DEFAULT ((0)) NULL,
    [it_MktResultImpressionCountFcArea]  INT  CONSTRAINT [DF_tb_MktResult_it_MktDbImpressionCountFc] DEFAULT ((0)) NULL,
    CONSTRAINT [PK_tb_MktDb] PRIMARY KEY CLUSTERED ([it_MktResultIdx] ASC),
    CONSTRAINT [FK_tb_MktResult_tb_Media] FOREIGN KEY ([it_MediaIdx]) REFERENCES [dbo].[tb_Media] ([it_MediaIdx])
);


GO

CREATE TABLE [dbo].[TKnowReset] (
    [CStudentBranchIdDepartCode]      NVARCHAR (20)  NOT NULL,
    [CStudentBranchIdDepartStartDate] DATETIME       NOT NULL,
    [CStudentCode]                    NVARCHAR (50)  NOT NULL,
    [CCurriculumId]                   NVARCHAR (50)  NOT NULL,
    [CCurriculumType]                 NVARCHAR (50)  NOT NULL,
    [CCoordsType]                     NVARCHAR (255) NOT NULL,
    [CLessonId]                       NVARCHAR (255) NOT NULL,
    [CResetCount]                     INT            NULL,
    [CRegDate]                        DATETIME       NOT NULL,
    [CRegStaff]                       NVARCHAR (30)  NULL,
    [CEditDate]                       DATETIME       NOT NULL,
    [CEditStaff]                      NVARCHAR (30)  NULL,
    PRIMARY KEY CLUSTERED ([CStudentBranchIdDepartCode] ASC, [CStudentBranchIdDepartStartDate] ASC, [CStudentCode] ASC, [CCurriculumId] ASC, [CCurriculumType] ASC, [CCoordsType] ASC, [CLessonId] ASC),
    CONSTRAINT [FK_2ifkx3u65kmslirptw1pcxdw2] FOREIGN KEY ([CEditStaff]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_k601mgxd558mqsoj294yv37sy] FOREIGN KEY ([CRegStaff]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_ldfrsigp9kcay5ykigkpswk6y] FOREIGN KEY ([CStudentBranchIdDepartCode], [CStudentBranchIdDepartStartDate], [CStudentCode]) REFERENCES [dbo].[TStudent] ([CBranchCode], [CBranchStartDate], [CCode])
);


GO

CREATE TABLE [dbo].[TMessageDetailDel] (
    [CCreaterId]   NVARCHAR (30) NOT NULL,
    [CCreateTime]  DATETIME      NOT NULL,
    [CMessageTime] DATETIME      NOT NULL,
    [CStaffId]     NVARCHAR (30) NOT NULL,
    [CDeleterId]   NVARCHAR (30) NOT NULL,
    [CDeleteTime]  DATETIME      NULL,
    PRIMARY KEY CLUSTERED ([CCreaterId] ASC, [CCreateTime] ASC, [CMessageTime] ASC, [CStaffId] ASC, [CDeleterId] ASC),
    CONSTRAINT [FK94CF1A274647D0BD] FOREIGN KEY ([CDeleterId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK94CF1A274ABDD9E6] FOREIGN KEY ([CCreaterId], [CCreateTime], [CMessageTime], [CStaffId]) REFERENCES [dbo].[TMessage] ([CStaffId], [CCreateTime], [CMessageTime], [CSenderId])
);


GO

CREATE TABLE [dbo].[TFile] (
    [CFileId]             BIGINT         IDENTITY (1, 1) NOT NULL,
    [CFileName]           NVARCHAR (255) NULL,
    [CExtName]            NVARCHAR (255) NULL,
    [CRelativeTable]      NVARCHAR (255) NULL,
    [CRelativeCodes]      NVARCHAR (255) NULL,
    [COwnerStaffId]       NVARCHAR (30)  NULL,
    [CSize]               BIGINT         NULL,
    [CContentID]          NVARCHAR (255) NULL,
    [CUploadedDate]       DATETIME       NULL,
    [CDeletedDate]        DATETIME       NULL,
    [CDeleterStaffId]     NVARCHAR (30)  NULL,
    [CFileStorageCode]    NVARCHAR (30)  NULL,
    [CFileStorageSubCode] NVARCHAR (30)  NULL,
    [CSubstitued]         BIT            NULL,
    [CDownCount]          INT            DEFAULT ((0)) NOT NULL,
    [CStaffCount]         INT            DEFAULT ((0)) NOT NULL,
    [CSkipSubFolder]      BIT            NULL,
    PRIMARY KEY CLUSTERED ([CFileId] ASC),
    CONSTRAINT [FK4C11FF0F3FD8C09] FOREIGN KEY ([COwnerStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK4C11FF0F60F9755] FOREIGN KEY ([CDeleterStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[TStudentCounselPayments] (
    [CStdDepartCode]      NVARCHAR (20) NOT NULL,
    [CStdDepartStartDate] DATETIME      NOT NULL,
    [CStdCode]            NVARCHAR (50) NOT NULL,
    [CNo]                 INT           NOT NULL,
    [CPayStartDate]       DATETIME      NOT NULL,
    [CPayEndDate]         DATETIME      NOT NULL,
    [CMonthPrice]         INT           NULL,
    [CDayPrice]           INT           NULL,
    [CManageDays]         INT           NULL,
    [CBillPrice]          INT           NULL,
    [CPayPrice]           INT           NULL,
    PRIMARY KEY CLUSTERED ([CStdDepartCode] ASC, [CStdDepartStartDate] ASC, [CStdCode] ASC, [CNo] ASC, [CPayStartDate] ASC, [CPayEndDate] ASC),
    CONSTRAINT [FK35C1CE3BB2645EE5] FOREIGN KEY ([CStdDepartCode], [CStdDepartStartDate], [CStdCode], [CNo]) REFERENCES [dbo].[TStudentCounsel] ([CScDepartCode], [CScDepartStartDate], [CScCode], [CNo])
);


GO

CREATE TABLE [dbo].[TParty] (
    [CPartySeq]          INT            IDENTITY (1, 1) NOT NULL,
    [CDepartCode]        NVARCHAR (20)  NULL,
    [CDepartStartDate]   DATETIME       NULL,
    [CPartyName]         NVARCHAR (255) NULL,
    [CMaxPeople]         INT            NULL,
    [CStartDate]         DATETIME       NULL,
    [CEndDate]           DATETIME       NULL,
    [CStartTime]         DATETIME       NULL,
    [CEndTime]           DATETIME       NULL,
    [CTimeSpace]         INT            NULL,
    [CTrainerAutoAssign] BIT            NULL,
    [CSortSeq]           INT            NULL,
    PRIMARY KEY CLUSTERED ([CPartySeq] ASC),
    CONSTRAINT [FK_3uhkrvvhmhrmrpy9mjsulwd9k] FOREIGN KEY ([CDepartCode], [CDepartStartDate]) REFERENCES [dbo].[TFacility] ([CDepartCode], [CDepartStartDate])
);


GO

CREATE TABLE [dbo].[tb_AttachFileDownloadHistory] (
    [it_AttachFileDownloadHistoryIdx] INT            IDENTITY (1, 1) NOT NULL,
    [it_AttachFileIdx]                INT            NOT NULL,
    [st_StaffCode]                    NVARCHAR (50)  NULL,
    [dt_DownLoad]                     DATETIME       NULL,
    [st_DownLoadIp]                   NVARCHAR (255) NULL,
    CONSTRAINT [PK_tb_AttachFileDownloadHistory] PRIMARY KEY CLUSTERED ([it_AttachFileDownloadHistoryIdx] ASC),
    CONSTRAINT [FK_tb_AttachFileDownloadHistory_tb_AttachFile] FOREIGN KEY ([it_AttachFileIdx]) REFERENCES [dbo].[tb_AttachFile] ([it_AttachFileIdx])
);


GO

CREATE TABLE [dbo].[TSalesPossibleAreaAttach] (
    [CPossibleArea] INT    NOT NULL,
    [CAttach]       BIGINT NOT NULL,
    [CFileNo]       INT    NULL,
    PRIMARY KEY CLUSTERED ([CPossibleArea] ASC, [CAttach] ASC),
    CONSTRAINT [FK_16trsbiahowjsjuejhfviws4y] FOREIGN KEY ([CPossibleArea]) REFERENCES [dbo].[TSalesPossibleArea] ([CNo]),
    CONSTRAINT [FK_51jjgif41a7gkj97nd89eay6n] FOREIGN KEY ([CAttach]) REFERENCES [dbo].[TFile] ([CFileId])
);


GO

CREATE TABLE [dbo].[DL_SMS_LOG] (
    [TR_NUM]          INT           NOT NULL,
    [TR_SENDDATE]     DATETIME      DEFAULT (getdate()) NOT NULL,
    [TR_SERIALNUM]    INT           NULL,
    [TR_ID]           VARCHAR (16)  NULL,
    [TR_SENDSTAT]     VARCHAR (1)   DEFAULT ('0') NOT NULL,
    [TR_RSLTSTAT]     VARCHAR (10)  DEFAULT ('00') NULL,
    [TR_MSGTYPE]      VARCHAR (1)   DEFAULT ('0') NOT NULL,
    [TR_PHONE]        VARCHAR (20)  NOT NULL,
    [TR_CALLBACK]     VARCHAR (20)  DEFAULT ('') NOT NULL,
    [TR_ORG_CALLBACK] VARCHAR (20)  DEFAULT ('') NULL,
    [TR_BILL_ID]      VARCHAR (20)  DEFAULT ('') NULL,
    [TR_RSLTDATE]     DATETIME      NULL,
    [TR_MODIFIED]     DATETIME      NULL,
    [TR_MSG]          VARCHAR (160) NULL,
    [TR_NET]          VARCHAR (4)   NULL,
    [TR_ETC1]         VARCHAR (34)  NULL,
    [TR_ETC2]         VARCHAR (34)  NULL,
    [TR_ETC3]         VARCHAR (34)  NULL,
    [TR_ETC4]         VARCHAR (34)  NULL,
    [TR_ETC5]         VARCHAR (34)  NULL,
    [TR_ETC6]         VARCHAR (34)  NULL,
    [TR_REALSENDDATE] DATETIME      NULL,
    [TR_ETC7]         VARCHAR (34)  NULL,
    [TR_ETC8]         VARCHAR (34)  NULL,
    [TR_ETC9]         VARCHAR (34)  NULL,
    [TR_ETC10]        VARCHAR (34)  NULL
);


GO

CREATE TABLE [dbo].[THrAbsence] (
    [CYear]          NVARCHAR (4)  NOT NULL,
    [CStaffId]       NVARCHAR (30) NOT NULL,
    [CAnnualCount]   INT           NOT NULL,
    [CRegularCount]  INT           NOT NULL,
    [CUsedAnnual]    FLOAT (53)    NOT NULL,
    [CUsedRegular]   FLOAT (53)    NOT NULL,
    [CUsedOther]     FLOAT (53)    NOT NULL,
    [CBookedAnnual]  FLOAT (53)    NOT NULL,
    [CBookedRegular] FLOAT (53)    NOT NULL,
    [CRemark]        NTEXT         NULL,
    PRIMARY KEY CLUSTERED ([CYear] ASC, [CStaffId] ASC),
    CONSTRAINT [FK_sdym05s254ypkvbx9hdgrqm9e] FOREIGN KEY ([CStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[TSmsAttach] (
    [CSmsId]  BIGINT NOT NULL,
    [CFileId] BIGINT NOT NULL,
    PRIMARY KEY CLUSTERED ([CSmsId] ASC, [CFileId] ASC),
    CONSTRAINT [FK_cbs2aq262idj6bo57aaebawfm] FOREIGN KEY ([CFileId]) REFERENCES [dbo].[TFile] ([CFileId]),
    CONSTRAINT [FK_fjnlh9jx57oorh2ro0ki9jcux] FOREIGN KEY ([CSmsId]) REFERENCES [dbo].[TSms] ([CId])
);


GO

CREATE TABLE [dbo].[THpRecruitPoolAppRemark] (
    [CApplicantId] BIGINT         NOT NULL,
    [CStaffId]     NVARCHAR (30)  NOT NULL,
    [CRegDateTime] DATETIME       NOT NULL,
    [CGwStaffId]   NVARCHAR (255) NULL,
    [CGwStaffName] NVARCHAR (255) NULL,
    [CRemark]      NTEXT          NULL,
    PRIMARY KEY CLUSTERED ([CApplicantId] ASC, [CStaffId] ASC, [CRegDateTime] ASC),
    CONSTRAINT [FK_2xgxynm12qp28asx7gbvkwqp1] FOREIGN KEY ([CStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_b7oex4uj5k0hqraq4g2k9a1fq] FOREIGN KEY ([CApplicantId]) REFERENCES [dbo].[THpRecruitPoolApp] ([CApplicantId])
);


GO

CREATE TABLE [dbo].[TPointHistory] (
    [CDepartCode]      NVARCHAR (20)  NOT NULL,
    [CDepartStartDate] DATETIME       NOT NULL,
    [CMemberCode]      NVARCHAR (50)  NOT NULL,
    [CHistoryDateTime] DATETIME       NOT NULL,
    [CPointType]       NVARCHAR (255) NULL,
    [CBeforePenalty]   FLOAT (53)     NULL,
    [CPenalty]         FLOAT (53)     NULL,
    [CBeforePoint]     INT            NULL,
    [CPoint]           INT            NULL,
    [CRemark]          NVARCHAR (255) NULL,
    PRIMARY KEY CLUSTERED ([CDepartCode] ASC, [CDepartStartDate] ASC, [CMemberCode] ASC, [CHistoryDateTime] ASC),
    CONSTRAINT [FK_pug2bisg9nego7mlojtrjqmbl] FOREIGN KEY ([CDepartCode], [CDepartStartDate], [CMemberCode]) REFERENCES [dbo].[TMember] ([CDepartCode], [CDepartStartDate], [CMemberCode])
);


GO

CREATE TABLE [dbo].[TBoardStaffGroup] (
    [CBoardId]          NVARCHAR (20)  NOT NULL,
    [CType]             NVARCHAR (255) NOT NULL,
    [CStaffGroupId]     NVARCHAR (20)  NOT NULL,
    [CNoticeNew]        BIT            NULL,
    [CNoticeModify]     BIT            NULL,
    [CNoticeReply]      BIT            NULL,
    [CNoticeDelete]     BIT            NULL,
    [CAllowNoticeAll]   BIT            NULL,
    [CNoticeSmsByState] BIT            NULL,
    [CPopup]            BIT            NULL,
    [CAllowModify]      BIT            DEFAULT ((1)) NOT NULL,
    [CAllowDelete]      BIT            DEFAULT ((1)) NOT NULL,
    [CManagerConfirm]   BIT            DEFAULT ((0)) NOT NULL,
    PRIMARY KEY CLUSTERED ([CBoardId] ASC, [CType] ASC, [CStaffGroupId] ASC),
    CONSTRAINT [FK98BB78112F4C85C4] FOREIGN KEY ([CStaffGroupId]) REFERENCES [dbo].[TStaffGroup] ([CGroupId]),
    CONSTRAINT [FK98BB781135D89A81] FOREIGN KEY ([CBoardId]) REFERENCES [dbo].[TBoard] ([CBoardId])
);


GO

CREATE TABLE [dbo].[TContentResource] (
    [CContentId]         BIGINT        NOT NULL,
    [CResourceId]        INT           NOT NULL,
    [CIndex]             INT           NULL,
    [CStartTime]         DATETIME      NULL,
    [CEndTime]           DATETIME      NULL,
    [COrgStartTime]      DATETIME      NULL,
    [COrgEndTime]        DATETIME      NULL,
    [CInManagerStaffId]  NVARCHAR (30) NULL,
    [COutManagerStaffId] NVARCHAR (30) NULL,
    PRIMARY KEY CLUSTERED ([CContentId] ASC, [CResourceId] ASC),
    CONSTRAINT [FK_ik6jhb5mccs7jj2qk2etctthj] FOREIGN KEY ([COutManagerStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_qu26rah8ny3p8l3y8f5tde8u5] FOREIGN KEY ([CInManagerStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK449158B39F2A2E67] FOREIGN KEY ([CContentId]) REFERENCES [dbo].[TContent] ([CContentId]),
    CONSTRAINT [FK449158B3F39E2A5D] FOREIGN KEY ([CResourceId]) REFERENCES [dbo].[TResource] ([CResourceId])
);


GO

CREATE TABLE [dbo].[TAccountBalance] (
    [CBaDepartCode]      NVARCHAR (20) NOT NULL,
    [CBaDepartStartDate] DATETIME      NOT NULL,
    [CCode]              NVARCHAR (50) NOT NULL,
    [CBalanceMonth]      DATETIME      NOT NULL,
    [CStartBalance]      BIGINT        NULL,
    [CEndBalance]        BIGINT        NULL,
    [CDecreaseCash]      BIGINT        NULL,
    PRIMARY KEY CLUSTERED ([CBaDepartCode] ASC, [CBaDepartStartDate] ASC, [CCode] ASC, [CBalanceMonth] ASC),
    CONSTRAINT [FK56D8C96387E87E33] FOREIGN KEY ([CBaDepartCode], [CBaDepartStartDate], [CCode]) REFERENCES [dbo].[TBankAccount] ([CBrDepartCode], [CBrDepartStartDate], [CCode])
);


GO

CREATE TABLE [dbo].[TManagementResult] (
    [CStDepartCode]      NVARCHAR (20)  NOT NULL,
    [CStDepartStartDate] DATETIME       NOT NULL,
    [CStCode]            NVARCHAR (50)  NOT NULL,
    [CManageDate]        DATETIME       NOT NULL,
    [CVltType]           INT            NOT NULL,
    [CCommonGroupCode]   NVARCHAR (50)  NULL,
    [CCommonCode]        NVARCHAR (50)  NULL,
    [CMangementComment]  NTEXT          NULL,
    [CTutoringComment]   NTEXT          NULL,
    [CComponentNo]       BIGINT         NULL,
    [CStartTime]         DATETIME       NULL,
    [CEndTime]           DATETIME       NULL,
    [CCounselComment]    NTEXT          NULL,
    [CComponentScore]    INT            NULL,
    [CParentMethod]      NVARCHAR (15)  NULL,
    [CParentSide]        NVARCHAR (15)  NULL,
    [CParentSubject]     NVARCHAR (255) NULL,
    [CParentComment]     NTEXT          NULL,
    [CComment]           NVARCHAR (255) NULL,
    [CRegDate]           DATETIME       NULL,
    [CRegStaffId]        NVARCHAR (30)  NULL,
    [CApprovalStatus]    NVARCHAR (15)  NULL,
    PRIMARY KEY CLUSTERED ([CStDepartCode] ASC, [CStDepartStartDate] ASC, [CStCode] ASC, [CManageDate] ASC),
    CONSTRAINT [FK4F71CAB419E633C8] FOREIGN KEY ([CRegStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK4F71CAB444F3BF8] FOREIGN KEY ([CComponentNo]) REFERENCES [dbo].[TComponent] ([CComponentNo]),
    CONSTRAINT [FK4F71CAB46F88FD24] FOREIGN KEY ([CStDepartCode], [CStDepartStartDate], [CStCode]) REFERENCES [dbo].[TStudent] ([CBranchCode], [CBranchStartDate], [CCode]),
    CONSTRAINT [FK4F71CAB4C74495AF] FOREIGN KEY ([CCommonGroupCode], [CCommonCode]) REFERENCES [dbo].[TCommonCode] ([CCodeGroup], [CCode])
);


GO

CREATE TABLE [dbo].[TApprAddedLine] (
    [CFormId]     NVARCHAR (15) NOT NULL,
    [CSeq]        INT           NOT NULL,
    [CPosition]   NVARCHAR (15) NULL,
    [CApplyOrder] INT           NULL,
    PRIMARY KEY CLUSTERED ([CFormId] ASC, [CSeq] ASC),
    CONSTRAINT [FK8BC961AF1FA9FD95] FOREIGN KEY ([CFormId]) REFERENCES [dbo].[TApprForm] ([CFormId])
);


GO

CREATE TABLE [dbo].[TComplaintSurveyType] (
    [CId]            BIGINT         IDENTITY (1, 1) NOT NULL,
    [CQuestion]      NVARCHAR (255) NULL,
    [CShortQuestion] NVARCHAR (255) NULL,
    [CDisplayIndex]  INT            NULL,
    [CEnabled]       BIT            NULL,
    [CAnswer1]       NVARCHAR (255) NULL,
    [CAnswer2]       NVARCHAR (255) NULL,
    [CAnswer3]       NVARCHAR (255) NULL,
    [CAnswer4]       NVARCHAR (255) NULL,
    [CAnswer5]       NVARCHAR (255) NULL,
    PRIMARY KEY CLUSTERED ([CId] ASC)
);


GO

CREATE TABLE [dbo].[TStaffSchool] (
    [CStaffId]           NVARCHAR (30)  NOT NULL,
    [CNo]                INT            NOT NULL,
    [CSchoolTypeGroup]   NVARCHAR (50)  NULL,
    [CSchoolTypeCode]    NVARCHAR (50)  NULL,
    [CStartDate]         DATETIME       NULL,
    [CEndDate]           DATETIME       NULL,
    [CName]              NVARCHAR (255) NULL,
    [CMajor]             NVARCHAR (50)  NULL,
    [CGraduateTypeGroup] NVARCHAR (50)  NULL,
    [CGraduateTypeCode]  NVARCHAR (50)  NULL,
    [CChk]               NVARCHAR (10)  NULL,
    PRIMARY KEY CLUSTERED ([CStaffId] ASC, [CNo] ASC),
    CONSTRAINT [FKB65F4D805C7160A2] FOREIGN KEY ([CSchoolTypeGroup], [CSchoolTypeCode]) REFERENCES [dbo].[TCommonCode] ([CCodeGroup], [CCode]),
    CONSTRAINT [FKB65F4D809E3C3476] FOREIGN KEY ([CStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FKB65F4D80C3D12382] FOREIGN KEY ([CGraduateTypeGroup], [CGraduateTypeCode]) REFERENCES [dbo].[TCommonCode] ([CCodeGroup], [CCode])
);


GO

CREATE TABLE [dbo].[TTimeSchedule] (
    [CId]               BIGINT        NOT NULL,
    [CTimeType]         NVARCHAR (10) NULL,
    [COriginScheduleId] BIGINT        NULL,
    [CRepeatable]       BIT           NULL,
    [CDate]             DATETIME      NOT NULL,
    [CLock]             BIT           NULL,
    [CDayId]            BIGINT        NULL,
    PRIMARY KEY CLUSTERED ([CId] ASC),
    CONSTRAINT [FK_9592jy1rokoe0wtbt0pqqkj9o] FOREIGN KEY ([CDayId]) REFERENCES [dbo].[TTimeScheduleDay] ([CId]),
    CONSTRAINT [FK379BA2F8EDB4C20E] FOREIGN KEY ([CId]) REFERENCES [dbo].[TSchedule] ([CId])
);


GO

CREATE TABLE [dbo].[TComplaintContentSub] (
    [CId]                  BIGINT        NOT NULL,
    [CSeq]                 INT           NOT NULL,
    [CTypeId1]             BIGINT        NULL,
    [CTypeId2]             BIGINT        NULL,
    [CTypeId3]             BIGINT        NULL,
    [CNo]                  NVARCHAR (50) NULL,
    [CManagerId]           NVARCHAR (30) NULL,
    [CMasterId]            NVARCHAR (30) NULL,
    [CChiefId]             NVARCHAR (30) NULL,
    [CState]               NVARCHAR (20) NULL,
    [CResult]              NTEXT         NULL,
    [CEndReason]           NTEXT         NULL,
    [CInboundTime]         DATETIME      NULL,
    [CFirstResultTime]     DATETIME      NULL,
    [CWaitTime4Master]     DATETIME      NULL,
    [CWaitTime4Chief]      DATETIME      NULL,
    [CConfirmTime4Manager] DATETIME      NULL,
    [CConfirmTime4Chief]   DATETIME      NULL,
    [CEndTime]             DATETIME      NULL,
    [CLeadMin]             INT           NULL,
    PRIMARY KEY CLUSTERED ([CId] ASC, [CSeq] ASC),
    CONSTRAINT [FK_2eatarkwhq25gneen955tmnc3] FOREIGN KEY ([CMasterId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_3xa7aouc9t0jfwmpc1v7ry0i4] FOREIGN KEY ([CManagerId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_6iu8sjkcp7xhcneov1k03nkdk] FOREIGN KEY ([CTypeId3]) REFERENCES [dbo].[TComplaintType] ([CId]),
    CONSTRAINT [FK_gt59rseskd5cm6qwoji3nugmk] FOREIGN KEY ([CTypeId2]) REFERENCES [dbo].[TComplaintType] ([CId]),
    CONSTRAINT [FK_j1q16yw80l3v29ci6wek09la5] FOREIGN KEY ([CId]) REFERENCES [dbo].[TComplaintContent] ([CId]),
    CONSTRAINT [FK_raylia2tn1js6mwfc5skroynk] FOREIGN KEY ([CChiefId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_rn1jt4bkyx00r9xg49x5nsf1i] FOREIGN KEY ([CTypeId1]) REFERENCES [dbo].[TComplaintType] ([CId])
);


GO

CREATE TABLE [dbo].[TReportStudentFeedback] (
    [CSeq]     BIGINT         IDENTITY (1, 1) NOT NULL,
    [CCode]    NVARCHAR (50)  NULL,
    [CWriter]  NVARCHAR (255) NULL,
    [CRegTime] DATETIME       NOT NULL,
    [CContent] NTEXT          NULL,
    PRIMARY KEY CLUSTERED ([CSeq] ASC),
    CONSTRAINT [FK4267C718352A00A5] FOREIGN KEY ([CCode]) REFERENCES [dbo].[TReportStudent] ([CCode])
);


GO

CREATE TABLE [dbo].[TTermScheduleHoliday] (
    [CTsDepartCode]      NVARCHAR (20)  NOT NULL,
    [CTsDepartStartDate] DATETIME       NOT NULL,
    [CTsStudentCode]     NVARCHAR (50)  NOT NULL,
    [CCode]              NVARCHAR (50)  NOT NULL,
    [CHollidayNo]        INT            NOT NULL,
    [CStartDate]         DATETIME       NULL,
    [CEndDate]           DATETIME       NULL,
    [CHollidayName]      NVARCHAR (255) NULL,
    PRIMARY KEY CLUSTERED ([CTsDepartCode] ASC, [CTsDepartStartDate] ASC, [CTsStudentCode] ASC, [CCode] ASC, [CHollidayNo] ASC),
    CONSTRAINT [FK667412C187601CEF] FOREIGN KEY ([CTsDepartCode], [CTsDepartStartDate], [CTsStudentCode], [CCode]) REFERENCES [dbo].[TTermSchedule] ([CStDepartCode], [CStDepartStartDate], [CStCode], [CCode])
);


GO

CREATE TABLE [dbo].[TAccountExpenseInputs] (
    [CAcDepartCode]      NVARCHAR (20)  NOT NULL,
    [CAcDepartStartDate] DATETIME       NOT NULL,
    [CNo]                INT            NOT NULL,
    [CAccountCode]       NVARCHAR (15)  NOT NULL,
    [CCommonGroupCode]   NVARCHAR (50)  NOT NULL,
    [CCommonCode]        NVARCHAR (50)  NOT NULL,
    [CInputValue]        NVARCHAR (255) NULL,
    [CInputComment]      NVARCHAR (255) NULL,
    [CInputEssential]    BIT            NULL,
    [CCodeValue]         NVARCHAR (255) NULL,
    PRIMARY KEY CLUSTERED ([CAcDepartCode] ASC, [CAcDepartStartDate] ASC, [CNo] ASC, [CAccountCode] ASC, [CCommonGroupCode] ASC, [CCommonCode] ASC),
    CONSTRAINT [FKB085CDA85883CC21] FOREIGN KEY ([CAccountCode], [CCommonGroupCode], [CCommonCode]) REFERENCES [dbo].[TAccountInputs] ([CAccountCode], [CCommonGroupCode], [CCommonCode]),
    CONSTRAINT [FKB085CDA895A42099] FOREIGN KEY ([CAcDepartCode], [CAcDepartStartDate], [CNo]) REFERENCES [dbo].[TAccountingExpense] ([CBrDepartCode], [CBrDepartStartDate], [CNo])
);


GO

CREATE TABLE [dbo].[TBizDaily4Depart] (
    [CBizDate]        DATETIME      NOT NULL,
    [CGroupId]        NVARCHAR (20) NOT NULL,
    [CLastRegStaffId] NVARCHAR (30) NULL,
    [CLastRegTime]    DATETIME      NULL,
    [CRemark]         NTEXT         NULL,
    [CVisitor]        NTEXT         NULL,
    [CApprDocId]      BIGINT        NULL,
    PRIMARY KEY CLUSTERED ([CBizDate] ASC, [CGroupId] ASC),
    CONSTRAINT [FK_k9lhhxw8tuhrtbxu26niytfe2] FOREIGN KEY ([CGroupId]) REFERENCES [dbo].[TDepartGroup] ([CGroupId]),
    CONSTRAINT [FK_qagvv73ylwnb7ok3m2eb7mf9b] FOREIGN KEY ([CLastRegStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[TContentStaffGroup] (
    [CContentId]    BIGINT         NOT NULL,
    [CType]         NVARCHAR (255) NOT NULL,
    [CStaffGroupId] NVARCHAR (20)  NOT NULL,
    [CSeq]          INT            NULL,
    PRIMARY KEY CLUSTERED ([CContentId] ASC, [CType] ASC, [CStaffGroupId] ASC),
    CONSTRAINT [FKC40D0EE42F4C85C4] FOREIGN KEY ([CStaffGroupId]) REFERENCES [dbo].[TStaffGroup] ([CGroupId]),
    CONSTRAINT [FKC40D0EE49F2A2E67] FOREIGN KEY ([CContentId]) REFERENCES [dbo].[TContent] ([CContentId])
);


GO

CREATE TABLE [dbo].[TExpert] (
    [CStaffId]    NVARCHAR (30) NOT NULL,
    [CTotalPoint] INT           NULL,
    PRIMARY KEY CLUSTERED ([CStaffId] ASC),
    CONSTRAINT [FKD8194B9E9E3C3476] FOREIGN KEY ([CStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[TAgreement] (
    [CAgreementCode]    INT            IDENTITY (1, 1) NOT NULL,
    [CAgreementTitle]   NVARCHAR (255) NULL,
    [CAgreementContent] NVARCHAR (255) NULL,
    [CRegStaff]         NVARCHAR (30)  NULL,
    [CRegDate]          DATETIME       NULL,
    PRIMARY KEY CLUSTERED ([CAgreementCode] ASC),
    CONSTRAINT [FK_s43p1ww0s9tg7seqe4ca2obyp] FOREIGN KEY ([CRegStaff]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[tb_Department] (
    [it_DepartmentIdx]       INT            IDENTITY (1, 1) NOT NULL,
    [it_RootDepartmentIdx]   INT            NOT NULL,
    [it_ParentDepartmentIdx] INT            NULL,
    [st_DepartmentName]      NVARCHAR (500) NOT NULL,
    [it_DepartmentOrder]     INT            NULL,
    [it_RootDepartmentLft]   INT            NULL,
    [it_RootDepartmentRgt]   INT            NULL,
    [dt_DepartmentMake]      DATETIME       NULL,
    [dt_DepartmentDelete]    DATETIME       NULL,
    CONSTRAINT [PK_tb_Department] PRIMARY KEY CLUSTERED ([it_DepartmentIdx] ASC)
);


GO

CREATE TABLE [dbo].[TAccountingFixedCost] (
    [CBrDepartCode]      NVARCHAR (20)  NOT NULL,
    [CBrDepartStartDate] DATETIME       NOT NULL,
    [CNo]                INT            NOT NULL,
    [CFixedDay]          INT            NULL,
    [CSubject]           NVARCHAR (255) NULL,
    [CCash]              BIGINT         NULL,
    [CCard]              BIGINT         NULL,
    [CBaDepartCode]      NVARCHAR (20)  NULL,
    [CBaDepartStartDate] DATETIME       NULL,
    [CCode]              NVARCHAR (50)  NULL,
    [CCcDepartCode]      NVARCHAR (20)  NULL,
    [CCcDepartStartDate] DATETIME       NULL,
    [CCcCode]            NVARCHAR (50)  NULL,
    [CAccountCode]       NVARCHAR (15)  NULL,
    [CTag]               NVARCHAR (255) NULL,
    [CRegTime]           DATETIME       NULL,
    [CStaffId]           NVARCHAR (30)  NULL,
    PRIMARY KEY CLUSTERED ([CBrDepartCode] ASC, [CBrDepartStartDate] ASC, [CNo] ASC),
    CONSTRAINT [FK7F5145582D35EBE2] FOREIGN KEY ([CBrDepartCode], [CBrDepartStartDate]) REFERENCES [dbo].[TFacility] ([CDepartCode], [CDepartStartDate]),
    CONSTRAINT [FK7F51455887E87E33] FOREIGN KEY ([CBaDepartCode], [CBaDepartStartDate], [CCode]) REFERENCES [dbo].[TBankAccount] ([CBrDepartCode], [CBrDepartStartDate], [CCode]),
    CONSTRAINT [FK7F5145589E3C3476] FOREIGN KEY ([CStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK7F514558AFB5968C] FOREIGN KEY ([CAccountCode]) REFERENCES [dbo].[TAccountCode] ([CCode]),
    CONSTRAINT [FK7F514558FBF7A481] FOREIGN KEY ([CCcDepartCode], [CCcDepartStartDate], [CCcCode]) REFERENCES [dbo].[TCreditCard] ([CBrDepartCode], [CBrDepartStartDate], [CCode])
);


GO

CREATE TABLE [dbo].[TStudentTypeHistory] (
    [CStDepartCode]      NVARCHAR (20)  NOT NULL,
    [CStDepartStartDate] DATETIME       NOT NULL,
    [CStCode]            NVARCHAR (50)  NOT NULL,
    [CRegDate]           DATETIME       NOT NULL,
    [CVltType]           INT            NULL,
    [CRegStaffId]        NVARCHAR (30)  NULL,
    [CCommnet]           NVARCHAR (255) NULL,
    PRIMARY KEY CLUSTERED ([CStDepartCode] ASC, [CStDepartStartDate] ASC, [CStCode] ASC, [CRegDate] ASC),
    CONSTRAINT [FKD0DA0A3319E633C8] FOREIGN KEY ([CRegStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FKD0DA0A336F88FD24] FOREIGN KEY ([CStDepartCode], [CStDepartStartDate], [CStCode]) REFERENCES [dbo].[TStudent] ([CBranchCode], [CBranchStartDate], [CCode])
);


GO

CREATE TABLE [dbo].[THpRecruitPoolApp] (
    [CApplicantId]        BIGINT         NOT NULL,
    [CAppDateTime]        DATETIME       NOT NULL,
    [CModiDateTime]       DATETIME       NOT NULL,
    [CIncomeCurrency]     NVARCHAR (30)  NOT NULL,
    [CAnnualIncome]       INT            NOT NULL,
    [CCarrerYears]        INT            NULL,
    [CState]              NVARCHAR (255) NOT NULL,
    [CAppliccationFileId] BIGINT         NULL,
    [CPortfolioFileId]    BIGINT         NULL,
    [COtherFileId]        BIGINT         NULL,
    PRIMARY KEY CLUSTERED ([CApplicantId] ASC),
    CONSTRAINT [FK_d727jxwa5ipkg214lc6rl499p] FOREIGN KEY ([CAppliccationFileId]) REFERENCES [dbo].[THpFile] ([CFileId]),
    CONSTRAINT [FK_i74kjiqqc7m5oxu33u12qf77a] FOREIGN KEY ([CApplicantId]) REFERENCES [dbo].[THpMember] ([CMemberId]),
    CONSTRAINT [FK_j8k3mwdopa0hgeaoqcx51avi7] FOREIGN KEY ([CPortfolioFileId]) REFERENCES [dbo].[THpFile] ([CFileId]),
    CONSTRAINT [FK_rfwoj3b7l1p3aa6ka4e7coaxl] FOREIGN KEY ([COtherFileId]) REFERENCES [dbo].[THpFile] ([CFileId])
);


GO

CREATE TABLE [dbo].[TResourceGroupMember] (
    [CGroupId]    INT NOT NULL,
    [CResourceId] INT NOT NULL,
    [COrder]      INT NOT NULL,
    PRIMARY KEY CLUSTERED ([CGroupId] ASC, [CResourceId] ASC),
    CONSTRAINT [FKEB2FE017CFF29F05] FOREIGN KEY ([CGroupId]) REFERENCES [dbo].[TResourceGroup] ([CGroupId]),
    CONSTRAINT [FKEB2FE017F39E2A5D] FOREIGN KEY ([CResourceId]) REFERENCES [dbo].[TResource] ([CResourceId])
);


GO

CREATE TABLE [dbo].[TFacilityBizMngRole] (
    [CId]                        BIGINT         IDENTITY (1, 1) NOT NULL,
    [CFacilityIdDepartCode]      NVARCHAR (20)  NULL,
    [CFacilityIdDepartStartDate] DATETIME       NULL,
    [CType]                      NVARCHAR (255) NOT NULL,
    [CManager]                   NVARCHAR (30)  NULL,
    [CEnabled]                   BIT            NULL,
    [CRegTime]                   DATETIME       NOT NULL,
    [CRegStaff]                  NVARCHAR (30)  NULL,
    PRIMARY KEY CLUSTERED ([CId] ASC),
    CONSTRAINT [FK_4c36tw5w12ytdlre0q0o3nvlm] FOREIGN KEY ([CManager]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_56lr3ep8mybeq0fwotu61f953] FOREIGN KEY ([CRegStaff]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_ko7ar3t6gtdahdjq2eapa5ejk] FOREIGN KEY ([CFacilityIdDepartCode], [CFacilityIdDepartStartDate]) REFERENCES [dbo].[TFacility] ([CDepartCode], [CDepartStartDate])
);


GO

CREATE TABLE [dbo].[TCoords] (
    [CKnowReMapData]  INT            NOT NULL,
    [CMapSeq]         INT            NOT NULL,
    [CCoordsType]     NVARCHAR (255) NULL,
    [CCurriculumId]   INT            NULL,
    [CCurriculumType] NVARCHAR (255) NULL,
    [CLessonId]       INT            NULL,
    [CName]           NVARCHAR (255) NULL,
    [CChapterName]    NVARCHAR (255) NULL,
    [CLessonName]     NVARCHAR (255) NULL,
    [CChapterSeq]     INT            NULL,
    [CLessonSeq]      INT            NULL,
    [CVideo]          NVARCHAR (255) NULL,
    [CSubId]          INT            NULL,
    [CLastFlag]       BIT            NULL,
    [CChapterId]      INT            NULL,
    PRIMARY KEY CLUSTERED ([CKnowReMapData] ASC, [CMapSeq] ASC),
    CONSTRAINT [FK_paaq6t2mfje28xkb42ng75q1y] FOREIGN KEY ([CKnowReMapData]) REFERENCES [dbo].[TKnowReMapData] ([CMapId])
);


GO

CREATE TABLE [dbo].[TOpenWeatherForcast3h] (
    [CCity]            INT           NOT NULL,
    [CForcastTime]     DATETIME      NOT NULL,
    [CForcastTemp]     FLOAT (53)    NULL,
    [CMinTemp]         FLOAT (53)    NULL,
    [CMaxTemp]         FLOAT (53)    NULL,
    [CHumidity]        INT           NULL,
    [CPressure]        FLOAT (53)    NULL,
    [CClouds]          INT           NULL,
    [CWindSpeed]       FLOAT (53)    NULL,
    [CWindDirect]      NVARCHAR (4)  NULL,
    [CPrecipitation]   FLOAT (53)    NULL,
    [CPrecipitUnit]    NVARCHAR (10) NULL,
    [CPrecipitMode]    NVARCHAR (10) NULL,
    [CWeatherCondName] NVARCHAR (20) NULL,
    [CWeatherCondIcon] NVARCHAR (10) NULL,
    [CLastUpdateTime]  DATETIME      NULL,
    [CLon]             FLOAT (53)    NULL,
    [CLat]             FLOAT (53)    NULL,
    PRIMARY KEY CLUSTERED ([CCity] ASC, [CForcastTime] ASC),
    CONSTRAINT [FK_7ymgqb3h2pjnoy4pw81ei7ven] FOREIGN KEY ([CCity]) REFERENCES [dbo].[TOpenWeatherCity] ([CId])
);


GO

CREATE TABLE [dbo].[THrAbsenceHistory] (
    [CHistoryId]      BIGINT        IDENTITY (1, 1) NOT NULL,
    [CAbsenceYear]    NVARCHAR (4)  NULL,
    [CAbsenceStaffId] NVARCHAR (30) NULL,
    [CType]           NVARCHAR (10) NOT NULL,
    [CFromDate]       DATETIME      NOT NULL,
    [CToDate]         DATETIME      NOT NULL,
    [CDayCount]       FLOAT (53)    NOT NULL,
    [CRemark]         NTEXT         NULL,
    [CScheduleId]     BIGINT        NULL,
    [CFileId]         BIGINT        NULL,
    PRIMARY KEY CLUSTERED ([CHistoryId] ASC),
    CONSTRAINT [FK_24yy0gbkeak72rsf467o265od] FOREIGN KEY ([CFileId]) REFERENCES [dbo].[TFile] ([CFileId]),
    CONSTRAINT [FK_6iv2mtj0xvf4rpsp38aten8xg] FOREIGN KEY ([CAbsenceYear], [CAbsenceStaffId]) REFERENCES [dbo].[THrAbsence] ([CYear], [CStaffId]),
    CONSTRAINT [FK_o8gh3mpm9re1fl9rw6d5ks6na] FOREIGN KEY ([CScheduleId]) REFERENCES [dbo].[TSchedule] ([CId])
);


GO

CREATE TABLE [dbo].[TTutoringDelete] (
    [CStdDepartCode]      NVARCHAR (20)  NOT NULL,
    [CStdDepartStartDate] DATETIME       NOT NULL,
    [CStdCode]            NVARCHAR (50)  NOT NULL,
    [CNo]                 INT            NOT NULL,
    [CRegistType]         NVARCHAR (50)  NULL,
    [CManageCommas]       INT            NULL,
    [CFreeCommas]         INT            NULL,
    [CFreeComment]        NVARCHAR (255) NULL,
    [CPayCommas]          INT            NULL,
    [CCommaPerWeek]       INT            NULL,
    [CDeaultStartDate]    DATETIME       NULL,
    [CDeaultEndDate]      DATETIME       NULL,
    [CStartDate]          DATETIME       NULL,
    [CEndDate]            DATETIME       NULL,
    [CManager]            NVARCHAR (30)  NULL,
    [CMonday]             BIT            NULL,
    [CTuesday]            BIT            NULL,
    [CWednesday]          BIT            NULL,
    [CThursday]           BIT            NULL,
    [CFriday]             BIT            NULL,
    [CSaturday]           BIT            NULL,
    [CSunday]             BIT            NULL,
    [CTutoringCourse]     NVARCHAR (255) NULL,
    [CBillPrice]          INT            NULL,
    [CPayPrice]           INT            NULL,
    [CChangePriceReason]  NVARCHAR (255) NULL,
    [CPayDate]            DATETIME       NULL,
    [CRoyaltyRate]        FLOAT (53)     NULL,
    [CRoyalty]            INT            NULL,
    [CFixRoyalty]         INT            NULL,
    [CRoyaltyPayDate]     DATETIME       NULL,
    [CBookedCommas]       INT            NULL,
    [CRemainCommas]       INT            NULL,
    [CChildren]           BIT            NULL,
    [CSaleProof]          BIGINT         NULL,
    [CModifiedCommas]     INT            NULL,
    [CGrade]              NVARCHAR (50)  NULL,
    [CDeleteDate]         DATETIME       NULL,
    [CDeleteStaff]        NVARCHAR (30)  NULL,
    PRIMARY KEY CLUSTERED ([CStdDepartCode] ASC, [CStdDepartStartDate] ASC, [CStdCode] ASC, [CNo] ASC),
    CONSTRAINT [FK_17r2p4habg67cfi9latv7secq] FOREIGN KEY ([CDeleteStaff]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_1fmogoh2bbsxtdeiht11bf4] FOREIGN KEY ([CManager]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_5ge3v84kam1ib8rtvc1hpmo7v] FOREIGN KEY ([CSaleProof]) REFERENCES [dbo].[TSaleProof] ([CProofSeq]),
    CONSTRAINT [FK_klwla47vtml06hpyemhdyjddb] FOREIGN KEY ([CStdDepartCode], [CStdDepartStartDate], [CStdCode]) REFERENCES [dbo].[TStudent] ([CBranchCode], [CBranchStartDate], [CCode])
);


GO

CREATE TABLE [dbo].[tb_RootLecture] (
    [it_RootLectureIdx]            INT             IDENTITY (1, 1) NOT NULL,
    [st_RootLectureCode]           NVARCHAR (10)   NULL,
    [st_RootLectureKind]           NVARCHAR (10)   NULL,
    [st_RootLectureMember]         NVARCHAR (10)   NULL,
    [st_RootLectureTitle]          NVARCHAR (255)  NULL,
    [st_RootLectureTeacher]        NVARCHAR (100)  NULL,
    [st_RootLectureEbookLink]      NVARCHAR (1000) NULL,
    [st_RootLectureVideoLink]      NVARCHAR (1000) NULL,
    [st_RootLectureUbobRepository] NVARCHAR (255)  NULL,
    [it_RootLectureSec]            INT             NULL,
    [it_CornellSubmit]             INT             NULL,
    [it_HomeworkSubmit]            INT             NULL,
    [st_RootLectureMemo]           NVARCHAR (500)  NULL,
    [st_StaffCode]                 NVARCHAR (50)   NULL,
    [dt_RootLectureMake]           DATETIME        NULL,
    [dt_RootLectureDelete]         DATETIME        NULL,
    CONSTRAINT [PK_tb_RootCourse] PRIMARY KEY CLUSTERED ([it_RootLectureIdx] ASC)
);


GO

CREATE TABLE [dbo].[TMenuPermIpGroup] (
    [CMenuId]     NVARCHAR (50) NOT NULL,
    [CIpGroupId]  NVARCHAR (20) NOT NULL,
    [CAccessAll]  BIT           NULL,
    [CAccessMine] BIT           NULL,
    [CCreateAll]  BIT           NULL,
    [CCreateMine] BIT           NULL,
    [CModifyAll]  BIT           NULL,
    [CModifyMine] BIT           NULL,
    [CDeleteAll]  BIT           NULL,
    [CDeleteMine] BIT           NULL,
    [CApplyOrder] INT           NULL,
    PRIMARY KEY CLUSTERED ([CMenuId] ASC, [CIpGroupId] ASC),
    CONSTRAINT [FK2A8866B57A10C900] FOREIGN KEY ([CIpGroupId]) REFERENCES [dbo].[TIpGroup] ([CGroupId]),
    CONSTRAINT [FK2A8866B5E3BB6C4A] FOREIGN KEY ([CMenuId]) REFERENCES [dbo].[TMenu] ([CMenuId])
);


GO

CREATE TABLE [dbo].[Ttext] (
    [id]   INT           NULL,
    [data] VARCHAR (100) NULL
);


GO

CREATE TABLE [dbo].[TScheduleReminder] (
    [CSchedule]        BIGINT NOT NULL,
    [CReminderMinutes] INT    NOT NULL,
    PRIMARY KEY CLUSTERED ([CSchedule] ASC, [CReminderMinutes] ASC),
    CONSTRAINT [FKB6844C9D1A90C14A] FOREIGN KEY ([CSchedule]) REFERENCES [dbo].[TSchedule] ([CId])
);


GO

CREATE TABLE [dbo].[TLoginPageInfo] (
    [CId]                INT            IDENTITY (1, 1) NOT NULL,
    [CIsDefault]         BIT            NOT NULL,
    [CEnabled]           BIT            NULL,
    [COrder]             INT            NOT NULL,
    [CLoginTitle]        NVARCHAR (50)  NULL,
    [CLogoutTitle]       NVARCHAR (50)  NULL,
    [CUrlPart]           NVARCHAR (50)  NULL,
    [CPharseSaveId]      NVARCHAR (255) NULL,
    [CSslFullUrl]        NVARCHAR (255) NULL,
    [CTailHtml]          NTEXT          NULL,
    [CLoginImage]        BIGINT         NULL,
    [CLogoutImage]       BIGINT         NULL,
    [CBgColor]           NVARCHAR (10)  NULL,
    [CLoginButtonImage1] BIGINT         NULL,
    [CLoginButtonImage2] BIGINT         NULL,
    [CLoginButtonImage3] BIGINT         NULL,
    [CRemark]            NTEXT          NULL,
    [CUpdStaff]          NVARCHAR (30)  NULL,
    [CUpdDate]           DATETIME       NULL,
    [CFacilityCode]      NVARCHAR (255) NULL,
    PRIMARY KEY CLUSTERED ([CId] ASC),
    CONSTRAINT [FK_4hgtt2f8835uwq74lfaptiubo] FOREIGN KEY ([CLogoutImage]) REFERENCES [dbo].[TFile] ([CFileId]),
    CONSTRAINT [FK_7h4um3hvr3un3xdwpxyrlu4ci] FOREIGN KEY ([CLoginImage]) REFERENCES [dbo].[TFile] ([CFileId]),
    CONSTRAINT [FK_eurq9do74qpu30nq4vehc1pnc] FOREIGN KEY ([CUpdStaff]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_j7vr44uk96r7ik9tgagupe163] FOREIGN KEY ([CLoginButtonImage2]) REFERENCES [dbo].[TFile] ([CFileId]),
    CONSTRAINT [FK_qnt2ay2066uu953yfpokqsacr] FOREIGN KEY ([CLoginButtonImage1]) REFERENCES [dbo].[TFile] ([CFileId]),
    CONSTRAINT [FK_samq0ffex8ph3tdgxhhjp7lxh] FOREIGN KEY ([CLoginButtonImage3]) REFERENCES [dbo].[TFile] ([CFileId])
);


GO

CREATE TABLE [dbo].[TTestComCode] (
    [CVseq]    INT            NOT NULL,
    [CSeq]     INT            IDENTITY (1, 1) NOT NULL,
    [CVseqNm]  VARCHAR (100)  NULL,
    [CBasic1]  VARCHAR (100)  NULL,
    [CBasic2]  VARCHAR (100)  NULL,
    [CBasic3]  VARCHAR (100)  NULL,
    [CComment] VARCHAR (1000) NULL,
    CONSTRAINT [PK_TTestComCode] PRIMARY KEY CLUSTERED ([CVseq] ASC, [CSeq] ASC)
);


GO

CREATE TABLE [dbo].[TAccountingBudget] (
    [CBrDepartCode]      NVARCHAR (20) NOT NULL,
    [CBrDepartStartDate] DATETIME      NOT NULL,
    [CBugdetMonth]       DATETIME      NOT NULL,
    [CAccountCode]       NVARCHAR (15) NOT NULL,
    [CBugdetSum]         BIGINT        NULL,
    [CBugdetPaid]        BIGINT        NULL,
    [CBugdetBalance]     BIGINT        NULL,
    PRIMARY KEY CLUSTERED ([CBrDepartCode] ASC, [CBrDepartStartDate] ASC, [CBugdetMonth] ASC, [CAccountCode] ASC),
    CONSTRAINT [FKA3A5F6AE2D35EBE2] FOREIGN KEY ([CBrDepartCode], [CBrDepartStartDate]) REFERENCES [dbo].[TFacility] ([CDepartCode], [CDepartStartDate]),
    CONSTRAINT [FKA3A5F6AEAFB5968C] FOREIGN KEY ([CAccountCode]) REFERENCES [dbo].[TAccountCode] ([CCode])
);


GO

CREATE TABLE [dbo].[TKnowreTimeTable] (
    [CDepartCode]      NVARCHAR (20) NOT NULL,
    [CDepartStartDate] DATETIME      NOT NULL,
    [CStudentCode]     NVARCHAR (50) NOT NULL,
    [CTutor]           INT           NOT NULL,
    [CDate]            DATETIME      NOT NULL,
    [CUserId]          INT           NOT NULL,
    PRIMARY KEY CLUSTERED ([CDepartCode] ASC, [CDepartStartDate] ASC, [CStudentCode] ASC, [CTutor] ASC, [CDate] ASC),
    CONSTRAINT [FK_2jwj7qd8hrkj9odq0697sbo3v] FOREIGN KEY ([CTutor]) REFERENCES [dbo].[TTutorInfo] ([CTutorSeq]),
    CONSTRAINT [FK_aqmk05beqbi7t9ayoafi8qepi] FOREIGN KEY ([CDepartCode], [CDepartStartDate], [CStudentCode]) REFERENCES [dbo].[TStudent] ([CBranchCode], [CBranchStartDate], [CCode])
);


GO

CREATE TABLE [dbo].[THpCompanyProduct] (
    [CCompanyId] BIGINT        NOT NULL,
    [CProductId] NVARCHAR (30) NOT NULL,
    PRIMARY KEY CLUSTERED ([CCompanyId] ASC, [CProductId] ASC),
    CONSTRAINT [FK_auimdt6nqw63ot1skrg46t65p] FOREIGN KEY ([CCompanyId]) REFERENCES [dbo].[THpCompany] ([CCompanyId]),
    CONSTRAINT [FK_gqmkl862vj6oqbpimp3o0g6tb] FOREIGN KEY ([CProductId]) REFERENCES [dbo].[THpProduct] ([CProductId])
);


GO

CREATE TABLE [dbo].[TBoardDepartKind] (
    [CBoardId]      NVARCHAR (20) NOT NULL,
    [CKindId]       NVARCHAR (20) NOT NULL,
    [COrder]        INT           NULL,
    [CEnabled]      BIT           NULL,
    [CName0]        NVARCHAR (50) NOT NULL,
    [CName1]        NVARCHAR (50) NULL,
    [CName2]        NVARCHAR (50) NULL,
    [CName3]        NVARCHAR (50) NULL,
    [CName4]        NVARCHAR (50) NULL,
    [CNoticeNew]    BIT           NULL,
    [CNoticeModify] BIT           NULL,
    [CNoticeReply]  BIT           NULL,
    [CNoticeDelete] BIT           NULL,
    [CSkipSms]      BIT           NULL,
    [CNoticeUpper]  BIT           NULL,
    [CNoticeLower]  BIT           NULL,
    PRIMARY KEY CLUSTERED ([CBoardId] ASC, [CKindId] ASC),
    CONSTRAINT [FK_217gwqglvct4ribga99vi4g1i] FOREIGN KEY ([CBoardId]) REFERENCES [dbo].[TBoard] ([CBoardId])
);


GO

CREATE TABLE [dbo].[TSalesContract] (
    [CId]         BIGINT         IDENTITY (1, 1) NOT NULL,
    [CSignDate]   DATETIME       NULL,
    [CStartDate]  DATETIME       NULL,
    [CEndDate]    DATETIME       NULL,
    [CEndUserId]  BIGINT         NULL,
    [CChannelId]  BIGINT         NULL,
    [CName]       NVARCHAR (200) NOT NULL,
    [CSalesman]   NVARCHAR (30)  NULL,
    [CRegStaffId] NVARCHAR (30)  NULL,
    [CRegTime]    DATETIME       NULL,
    [CUpdStaffId] NVARCHAR (30)  NULL,
    [CUpdTime]    DATETIME       NULL,
    [CPrice]      BIGINT         NULL,
    [CTax]        BIGINT         NULL,
    [CTotalPrice] BIGINT         NULL,
    [CRemark]     NTEXT          NULL,
    [CSecMemo]    NTEXT          NULL,
    [CContractId] BIGINT         NULL,
    PRIMARY KEY CLUSTERED ([CId] ASC),
    CONSTRAINT [FK_1633f3jcueujsubqj9tetb1n9] FOREIGN KEY ([CSalesman]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_29redmwt9o311w2qj8e0n1jag] FOREIGN KEY ([CUpdStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_5u1ceyyw8pnq2edtrtb6ke59v] FOREIGN KEY ([CChannelId]) REFERENCES [dbo].[TPartener] ([CId]),
    CONSTRAINT [FK_e7o0eciwrvg5aa97uekkm365v] FOREIGN KEY ([CEndUserId]) REFERENCES [dbo].[TPartener] ([CId]),
    CONSTRAINT [FK_eoxmltpwcxrim2gnrlfkb20qq] FOREIGN KEY ([CContractId]) REFERENCES [dbo].[TFile] ([CFileId]),
    CONSTRAINT [FK_pmfnh2u4q817ob4y24k6ugxov] FOREIGN KEY ([CRegStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[TOpenWeatherCity] (
    [CId]              INT           IDENTITY (1, 1) NOT NULL,
    [CCityName0]       NVARCHAR (50) NULL,
    [CCityName1]       NVARCHAR (50) NULL,
    [CCityName2]       NVARCHAR (50) NULL,
    [CCityName3]       NVARCHAR (50) NULL,
    [CCityName4]       NVARCHAR (50) NULL,
    [CCallCityName]    NVARCHAR (30) NOT NULL,
    [CCallCountryCode] NVARCHAR (5)  NOT NULL,
    [CDisplayIndex]    INT           NOT NULL,
    [CEnabled]         BIT           NOT NULL,
    [CIsDefault]       BIT           NOT NULL,
    PRIMARY KEY CLUSTERED ([CId] ASC)
);


GO

CREATE TABLE [dbo].[TStaffDailyAttend] (
    [CStaffId]         NVARCHAR (30) NOT NULL,
    [CDate]            DATETIME      NOT NULL,
    [CBranchCode]      NVARCHAR (20) NOT NULL,
    [CBranchStartDate] DATETIME      NOT NULL,
    [CStartPlanTime]   DATETIME      NULL,
    [CEndPlanTime]     DATETIME      NULL,
    [CPlanHours]       FLOAT (53)    NULL,
    [CStartTime]       DATETIME      NULL,
    [CEndTime]         DATETIME      NULL,
    [CHours]           FLOAT (53)    NULL,
    [CAttendStatus]    NVARCHAR (15) NULL,
    PRIMARY KEY CLUSTERED ([CStaffId] ASC, [CDate] ASC),
    CONSTRAINT [FK3573878748562EA2] FOREIGN KEY ([CBranchCode], [CBranchStartDate]) REFERENCES [dbo].[TFacility] ([CDepartCode], [CDepartStartDate]),
    CONSTRAINT [FK357387879E3C3476] FOREIGN KEY ([CStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[TProjectMember] (
    [CProjectId]    NVARCHAR (40) NOT NULL,
    [CMemberId]     NVARCHAR (30) NOT NULL,
    [CType]         NVARCHAR (50) NULL,
    [CDisplayIndex] INT           NULL,
    [CJoinTime]     DATETIME      NOT NULL,
    [COutTime]      DATETIME      NOT NULL,
    PRIMARY KEY CLUSTERED ([CProjectId] ASC, [CMemberId] ASC),
    CONSTRAINT [FK_9kdnuh8x99sfedx75h37ftn84] FOREIGN KEY ([CMemberId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_ei3o3c8ei44yiqr5jawa8m74v] FOREIGN KEY ([CProjectId]) REFERENCES [dbo].[TProject] ([CProjectId])
);


GO

CREATE TABLE [dbo].[TTradeDetail] (
    [CRequireDate]       DATETIME       NOT NULL,
    [CTiDepartCode]      NVARCHAR (20)  NOT NULL,
    [CTiDepartStartDate] DATETIME       NOT NULL,
    [CTradeNo]           INT            NOT NULL,
    [CBranchCode]        NVARCHAR (20)  NOT NULL,
    [CBranchStartDate]   DATETIME       NOT NULL,
    [CDetailNo]          INT            NOT NULL,
    [CTradeStatus]       NVARCHAR (15)  NULL,
    [CCommonGroupCode]   NVARCHAR (50)  NULL,
    [CCommonCode]        NVARCHAR (50)  NULL,
    [CTradeName]         NVARCHAR (255) NULL,
    [CDueDatePayment]    DATETIME       NULL,
    [CChargePrice]       INT            NULL,
    [CPaidPrice]         INT            NULL,
    [CChargeInterest]    INT            NULL,
    [CPaidInterest]      INT            NULL,
    [CRegDate]           DATETIME       NULL,
    [CRegStaffId]        NVARCHAR (30)  NULL,
    PRIMARY KEY CLUSTERED ([CRequireDate] ASC, [CTiDepartCode] ASC, [CTiDepartStartDate] ASC, [CTradeNo] ASC, [CBranchCode] ASC, [CBranchStartDate] ASC, [CDetailNo] ASC),
    CONSTRAINT [FK449145E119E633C8] FOREIGN KEY ([CRegStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK449145E148562EA2] FOREIGN KEY ([CBranchCode], [CBranchStartDate]) REFERENCES [dbo].[TFacility] ([CDepartCode], [CDepartStartDate]),
    CONSTRAINT [FK449145E15B4303FB] FOREIGN KEY ([CRequireDate], [CTiDepartCode], [CTiDepartStartDate], [CTradeNo]) REFERENCES [dbo].[TTradeInfo] ([CRequireDate], [CBranchCode], [CBranchStartDate], [CTradeNo]),
    CONSTRAINT [FK449145E1C74495AF] FOREIGN KEY ([CCommonGroupCode], [CCommonCode]) REFERENCES [dbo].[TCommonCode] ([CCodeGroup], [CCode])
);


GO

CREATE TABLE [dbo].[TSalesPossibleArea] (
    [CNo]                         INT            IDENTITY (1, 1) NOT NULL,
    [CSalesAreaCodeGroupCode]     NVARCHAR (50)  NULL,
    [CSalesAreaCode]              NVARCHAR (50)  NULL,
    [CAreaName]                   NVARCHAR (255) NULL,
    [CCenterAddress]              NVARCHAR (255) NULL,
    [CPopulationTotal]            INT            NULL,
    [CPopulationElementarySchool] INT            NULL,
    [CPopulationMidSchool]        INT            NULL,
    [CPopulationHighSchool]       INT            NULL,
    [CPriceAPT109m2]              INT            NULL,
    [CBussinessValue]             NVARCHAR (1)   NULL,
    [CRegTime]                    DATETIME       NOT NULL,
    [CEditTime]                   DATETIME       NOT NULL,
    [CRegStaff]                   NVARCHAR (30)  NULL,
    [CEditStaff]                  NVARCHAR (30)  NULL,
    PRIMARY KEY CLUSTERED ([CNo] ASC),
    CONSTRAINT [FK_b0xx28wvt7c5p1lasdud01bvr] FOREIGN KEY ([CRegStaff]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_n9i5arsmhgu89i94x1worw5pb] FOREIGN KEY ([CSalesAreaCodeGroupCode], [CSalesAreaCode]) REFERENCES [dbo].[TCommonCode] ([CCodeGroup], [CCode]),
    CONSTRAINT [FK_tqldh9fex7b6uelyl2sxlw2ff] FOREIGN KEY ([CEditStaff]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[TSiteDbUsage] (
    [COptionId]   NVARCHAR (255) NOT NULL,
    [CNow]        BIGINT         NOT NULL,
    [CMax]        BIGINT         NOT NULL,
    [CLastUpdate] DATETIME       NULL,
    PRIMARY KEY CLUSTERED ([COptionId] ASC)
);


GO

CREATE TABLE [dbo].[TStaffFamily] (
    [CStaffId]        NVARCHAR (30) NOT NULL,
    [CNo]             INT           NOT NULL,
    [CCodeGroup]      NVARCHAR (50) NULL,
    [CCommonCode]     NVARCHAR (50) NULL,
    [CName]           NVARCHAR (50) NULL,
    [CResidentNumber] NVARCHAR (50) NULL,
    [CPartner]        BIT           NULL,
    [CDependent]      BIT           NULL,
    [CSenior]         BIT           NULL,
    [CDisabled]       BIT           NULL,
    [CChk]            NCHAR (10)    NULL,
    PRIMARY KEY CLUSTERED ([CStaffId] ASC, [CNo] ASC),
    CONSTRAINT [FKA0164D709E3C3476] FOREIGN KEY ([CStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FKA0164D70FB960C0] FOREIGN KEY ([CCodeGroup], [CCommonCode]) REFERENCES [dbo].[TCommonCode] ([CCodeGroup], [CCode])
);


GO

CREATE TABLE [dbo].[tbl_BusinessIncomeItems] (
    [income_id]            INT            NULL,
    [tutor_code]           INT            NULL,
    [name]                 NVARCHAR (255) NULL,
    [social_security_code] NVARCHAR (255) NULL,
    [address]              NVARCHAR (255) NULL,
    [bank_account]         NVARCHAR (255) NULL,
    [total_amount]         INT            NULL,
    [soduc_tax]            INT            NULL,
    [jumin_tax]            INT            NULL,
    [real_amount]          INT            NULL,
    [comma_accrued]        INT            NULL,
    [comma_this_month]     INT            NULL,
    [dc_accrued]           INT            NULL,
    [dc_this_month]        INT            NULL,
    [tutoring_pay_lv1]     INT            NULL,
    [tutoring_pay_lv2]     INT            NULL,
    [tutoring_pay_lv3]     INT            NULL,
    [tutoring_pay_lv4]     INT            NULL,
    [tutoring_pay_lv5]     INT            NULL,
    [dc_pay_lv1]           INT            NULL,
    [dc_pay_lv2]           INT            NULL,
    [dc_pay_lv3]           INT            NULL,
    [dc_pay_lv4]           INT            NULL,
    [dc_pay_lv5]           INT            NULL,
    [high_amount_pay]      INT            NULL,
    [tutoring_prepare_pay] INT            NULL,
    [night_pay]            INT            NULL,
    [week_pay]             INT            NULL,
    [etc_pay]              INT            NULL,
    [del_yn]               CHAR (1)       CONSTRAINT [DF_tbl_BusinessIncomeItems_del_yn] DEFAULT ('N') NULL,
    CONSTRAINT [FK_tbl_BusinessIncomeItems_tbl_BusinessIncome] FOREIGN KEY ([income_id]) REFERENCES [dbo].[tbl_BusinessIncome] ([income_seq])
);


GO

CREATE TABLE [dbo].[TProductCharge] (
    [CChargeSeq]         INT            IDENTITY (1, 1) NOT NULL,
    [CChargeName]        NVARCHAR (255) NULL,
    [CProduct]           NVARCHAR (50)  NULL,
    [CMonth]             INT            NOT NULL,
    [CContinueCountFrom] INT            NULL,
    [CContinueCountTo]   INT            NULL,
    [CMonthCount]        INT            NULL,
    [CWeekCount]         INT            NULL,
    [CMonthAmt]          INT            NULL,
    [CDiscountAmt]       INT            NULL,
    [CStartDate]         DATETIME       NOT NULL,
    [CEndDate]           DATETIME       NOT NULL,
    PRIMARY KEY CLUSTERED ([CChargeSeq] ASC),
    CONSTRAINT [FK_hvwnx3p0fsi4es7pn5yc4echg] FOREIGN KEY ([CProduct]) REFERENCES [dbo].[TProduct] ([CProductCode])
);


GO

CREATE TABLE [dbo].[tb_RootTestRecord] (
    [it_RootTestRecordIdx]    INT             IDENTITY (1, 1) NOT NULL,
    [it_RootTestIdx]          INT             NOT NULL,
    [st_StaffCode]            NVARCHAR (50)   NOT NULL,
    [st_RootTestAnswer]       TEXT            NULL,
    [st_RootTestAnswerText]   NVARCHAR (1000) NULL,
    [dt_RootTestRecordSubmit] DATETIME        NULL,
    [dt_RootTestRecordMake]   DATETIME        NOT NULL,
    CONSTRAINT [PK_tb_RootTestRecord] PRIMARY KEY CLUSTERED ([it_RootTestRecordIdx] ASC),
    CONSTRAINT [FK_tb_RootTestRecord_tb_RootTest] FOREIGN KEY ([it_RootTestIdx]) REFERENCES [dbo].[tb_RootTest] ([it_RootTestIdx])
);


GO

CREATE TABLE [dbo].[SC_LOG_BAKCUP] (
    [TR_NUM]          BIGINT        NOT NULL,
    [TR_SENDDATE]     DATETIME      NULL,
    [TR_ID]           VARCHAR (16)  NULL,
    [TR_SENDSTAT]     VARCHAR (1)   DEFAULT ('0') NOT NULL,
    [TR_RSLTSTAT]     VARCHAR (2)   DEFAULT ('00') NULL,
    [TR_MSGTYPE]      VARCHAR (1)   DEFAULT ('0') NOT NULL,
    [TR_PHONE]        VARCHAR (20)  DEFAULT ('') NOT NULL,
    [TR_CALLBACK]     VARCHAR (20)  NULL,
    [TR_RSLTDATE]     DATETIME      NULL,
    [TR_MODIFIED]     DATETIME      NULL,
    [TR_MSG]          VARCHAR (160) NULL,
    [TR_NET]          VARCHAR (4)   NULL,
    [TR_ETC1]         VARCHAR (160) NULL,
    [TR_ETC2]         VARCHAR (160) NULL,
    [TR_ETC3]         VARCHAR (160) NULL,
    [TR_ETC4]         VARCHAR (160) NULL,
    [TR_ETC5]         VARCHAR (160) NULL,
    [TR_ETC6]         VARCHAR (160) NULL,
    [TR_ROUTEID]      VARCHAR (20)  NULL,
    [TR_REALSENDDATE] DATETIME      NULL,
    CONSTRAINT [PK_SC_LOG_BAKCUP] PRIMARY KEY NONCLUSTERED ([TR_NUM] ASC)
);


GO

CREATE TABLE [dbo].[TMailReadLog] (
    [CMailId]   BIGINT        NOT NULL,
    [CReaderId] NVARCHAR (30) NOT NULL,
    [CReadTime] DATETIME      NULL,
    PRIMARY KEY CLUSTERED ([CMailId] ASC, [CReaderId] ASC),
    CONSTRAINT [FK_9aedflfw25or8fwv4ryec7cyy] FOREIGN KEY ([CMailId]) REFERENCES [dbo].[TMail] ([CMailId]),
    CONSTRAINT [FK_nwh8bwq94lfytuhrklvpyma9d] FOREIGN KEY ([CReaderId]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[THoliday] (
    [CYear] INT            NOT NULL,
    [CDate] DATETIME       NOT NULL,
    [CName] NVARCHAR (255) NULL,
    PRIMARY KEY CLUSTERED ([CYear] ASC, [CDate] ASC)
);


GO

CREATE TABLE [dbo].[TCourseLeave] (
    [CCourseRegister] INT            NOT NULL,
    [CLeaveStartDate] DATETIME       NOT NULL,
    [CLeaveEndDate]   DATETIME       NULL,
    [CEndDatePayment] DATETIME       NULL,
    [CEndDateLeave]   DATETIME       NULL,
    [CLeaveDay]       INT            NULL,
    [CComment]        NVARCHAR (255) NULL,
    PRIMARY KEY CLUSTERED ([CCourseRegister] ASC, [CLeaveStartDate] ASC),
    CONSTRAINT [FK_8w0iaag9c11mva23crfakqg7v] FOREIGN KEY ([CCourseRegister]) REFERENCES [dbo].[TCourseRegister] ([CCourseSeq])
);


GO

CREATE TABLE [dbo].[THpRequestType] (
    [CTypeId]  NVARCHAR (20) NOT NULL,
    [CName0]   NVARCHAR (30) NULL,
    [CName1]   NVARCHAR (30) NULL,
    [CName2]   NVARCHAR (30) NULL,
    [CName3]   NVARCHAR (30) NULL,
    [CName4]   NVARCHAR (30) NULL,
    [CEnabled] BIT           NOT NULL,
    PRIMARY KEY CLUSTERED ([CTypeId] ASC)
);


GO

CREATE TABLE [dbo].[tb_RootCourse] (
    [it_RootCourseIdx]     INT             IDENTITY (1, 1) NOT NULL,
    [st_RootCourseCode]    NVARCHAR (10)   NULL,
    [st_RootCourseTitle]   NVARCHAR (255)  NULL,
    [dt_RootCourseStart]   DATE            NULL,
    [st_RootCourseMemo]    NVARCHAR (1000) NULL,
    [st_RootCourseMember]  NVARCHAR (50)   NULL,
    [it_RootCourseOpen]    INT             NULL,
    [st_StaffCode]         NVARCHAR (50)   NULL,
    [dt_RootCourseMake]    DATETIME        NULL,
    [dt_RootCourseDelete]  DATETIME        NULL,
    [it_RootCourseVersion] INT             NULL,
    CONSTRAINT [PK_tb_RootGroup] PRIMARY KEY CLUSTERED ([it_RootCourseIdx] ASC)
);


GO

CREATE TABLE [dbo].[TAccountingIncome] (
    [CBrDepartCode]      NVARCHAR (20)  NOT NULL,
    [CBrDepartStartDate] DATETIME       NOT NULL,
    [CNo]                INT            NOT NULL,
    [CAccountingDate]    DATETIME       NULL,
    [CSubject]           NVARCHAR (255) NULL,
    [CCash]              BIGINT         NULL,
    [CBaDepartCode]      NVARCHAR (20)  NULL,
    [CBaDepartStartDate] DATETIME       NULL,
    [CCode]              NVARCHAR (50)  NULL,
    [CAccountCode]       NVARCHAR (15)  NULL,
    [CTag]               NVARCHAR (255) NULL,
    [CAutoStatement]     BIT            NULL,
    [CStatementCode]     NVARCHAR (255) NULL,
    [CStatementComment]  NVARCHAR (255) NULL,
    [CRegTime]           DATETIME       NULL,
    [CStaffId]           NVARCHAR (30)  NULL,
    [CDomainName]        NVARCHAR (255) NULL,
    PRIMARY KEY CLUSTERED ([CBrDepartCode] ASC, [CBrDepartStartDate] ASC, [CNo] ASC),
    CONSTRAINT [FKAF34E9122D35EBE2] FOREIGN KEY ([CBrDepartCode], [CBrDepartStartDate]) REFERENCES [dbo].[TFacility] ([CDepartCode], [CDepartStartDate]),
    CONSTRAINT [FKAF34E91287E87E33] FOREIGN KEY ([CBaDepartCode], [CBaDepartStartDate], [CCode]) REFERENCES [dbo].[TBankAccount] ([CBrDepartCode], [CBrDepartStartDate], [CCode]),
    CONSTRAINT [FKAF34E9129E3C3476] FOREIGN KEY ([CStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FKAF34E912AFB5968C] FOREIGN KEY ([CAccountCode]) REFERENCES [dbo].[TAccountCode] ([CCode])
);


GO

CREATE TABLE [dbo].[tbl_etongBranchPref] (
    [idx]               INT            IDENTITY (1, 1) NOT NULL,
    [branchCode]        NVARCHAR (20)  CONSTRAINT [DF__tbl_etong__branc__25896FF1] DEFAULT (NULL) NULL,
    [payStartDate]      INT            CONSTRAINT [DF_tbl_etongBranchPref_payStartDate] DEFAULT (NULL) NULL,
    [payEndDate]        INT            CONSTRAINT [DF__tbl_etong__payEn__267D942A] DEFAULT (NULL) NULL,
    [payDate]           INT            CONSTRAINT [DF__tbl_etong__payDa__2771B863] DEFAULT (NULL) NULL,
    [preparePayYn]      BIT            CONSTRAINT [DF__tbl_etong__prepa__2865DC9C] DEFAULT (NULL) NULL,
    [prepareAmount]     INT            CONSTRAINT [DF__tbl_etong__prepa__295A00D5] DEFAULT (NULL) NULL,
    [highSubjectPayYn]  BIT            CONSTRAINT [DF__tbl_etong__highS__2A4E250E] DEFAULT (NULL) NULL,
    [highSubjectAmount] INT            CONSTRAINT [DF__tbl_etong__highS__2B424947] DEFAULT (NULL) NULL,
    [highSubjects]      NVARCHAR (255) CONSTRAINT [DF__tbl_etong__highS__2C366D80] DEFAULT (NULL) NULL,
    [nightPayYn]        BIT            CONSTRAINT [DF__tbl_etong__night__2D2A91B9] DEFAULT (NULL) NULL,
    [weekRestPayYn]     BIT            CONSTRAINT [DF__tbl_etong__weekR__2E1EB5F2] DEFAULT (NULL) NULL,
    [weekRestDays]      INT            CONSTRAINT [DF__tbl_etong__weekR__2F12DA2B] DEFAULT (NULL) NULL,
    [calCommaStartDate] DATETIME       CONSTRAINT [DF__tbl_etong__calCo__3006FE64] DEFAULT (NULL) NULL,
    [insertDate]        DATETIME       CONSTRAINT [DF__tbl_etong__inser__30FB229D] DEFAULT (NULL) NULL,
    [updateDate]        DATETIME       CONSTRAINT [DF__tbl_etong__updat__31EF46D6] DEFAULT (NULL) NULL,
    [isNotTutor]        NVARCHAR (255) CONSTRAINT [DF__tbl_etong__isNot__3270323B] DEFAULT (NULL) NULL,
    CONSTRAINT [PK_tbl_etongBranchPref] PRIMARY KEY CLUSTERED ([idx] ASC)
);


GO

CREATE TABLE [dbo].[TStaffLevelHistory] (
    [CStaffId]             NVARCHAR (30) NOT NULL,
    [CMain]                BIT           NOT NULL,
    [CLevelType]           NVARCHAR (10) NOT NULL,
    [CLevelCode]           NVARCHAR (10) NOT NULL,
    [CLevelSeq]            INT           NOT NULL,
    [CStartDate]           DATETIME      NOT NULL,
    [CEndDate]             DATETIME      NOT NULL,
    [CRelativeDepartIndex] INT           NULL,
    [CAutoGen]             BIT           NULL,
    PRIMARY KEY CLUSTERED ([CStaffId] ASC, [CMain] ASC, [CLevelType] ASC, [CLevelCode] ASC, [CLevelSeq] ASC, [CStartDate] ASC),
    CONSTRAINT [FK7D08DD7C9E3C3476] FOREIGN KEY ([CStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK7D08DD7CE6DE7DCD] FOREIGN KEY ([CLevelType], [CLevelCode], [CLevelSeq]) REFERENCES [dbo].[TStaffLevel] ([CLevelType], [CLevelCode], [CLevelSeq])
);


GO

CREATE TABLE [dbo].[tbl_hrm_staff] (
    [hrm_staff_idx]   INT             IDENTITY (1, 1) NOT NULL,
    [year]            INT             NULL,
    [half_year]       CHAR (1)        NULL,
    [branch_id]       NVARCHAR (20)   NULL,
    [staff_id]        NVARCHAR (30)   NOT NULL,
    [level_code]      NVARCHAR (10)   NULL,
    [join_date]       DATETIME        NULL,
    [job_status]      CHAR (1)        NULL,
    [job_period]      INT             CONSTRAINT [DF_tbl_hrm_staff_job_period] DEFAULT ((0)) NULL,
    [subjective_type] CHAR (1)        NULL,
    [valuation_type]  INT             NULL,
    [fixed_yn]        CHAR (1)        CONSTRAINT [DF_tbl_hrm_staff_fixed_yn] DEFAULT ('N') NULL,
    [added_point]     DECIMAL (18, 2) NULL,
    CONSTRAINT [PK_tbl_hrm_staff] PRIMARY KEY CLUSTERED ([hrm_staff_idx] ASC)
);


GO

CREATE TABLE [dbo].[TSchedule] (
    [CId]                BIGINT         IDENTITY (1, 1) NOT NULL,
    [CStaffId]           NVARCHAR (30)  NOT NULL,
    [CTitle]             NVARCHAR (200) NULL,
    [CDepartCode]        NVARCHAR (20)  NULL,
    [CDepartStartDate]   DATETIME       NULL,
    [CRegDate]           DATETIME       NULL,
    [CStartDateTime]     DATETIME       NOT NULL,
    [CEndDateTime]       DATETIME       NOT NULL,
    [CIsAllDay]          BIT            NOT NULL,
    [COpened]            BIT            NOT NULL,
    [CScheduleType]      NVARCHAR (10)  NOT NULL,
    [CWorkType]          NVARCHAR (10)  NULL,
    [CRemark]            NVARCHAR (255) NULL,
    [CRegStaff]          NVARCHAR (30)  NULL,
    [CUpdStaff]          NVARCHAR (30)  NULL,
    [CUpdDate]           DATETIME       NULL,
    [CToDoId]            BIGINT         NULL,
    [CToDoStaffId]       NVARCHAR (30)  NULL,
    [CFacilityCode]      NVARCHAR (20)  NULL,
    [CFacilityStartDate] DATETIME       NULL,
    [CGoogleEventId]     NVARCHAR (255) NULL,
    [CTargetLocation]    NVARCHAR (255) NULL,
    [CTargetString]      NVARCHAR (255) NULL,
    [CIsSpecial]         BIT            NULL,
    [CDocId]             BIGINT         NULL,
    CONSTRAINT [PK__TSchedul__C1F8DC39370627FE] PRIMARY KEY CLUSTERED ([CId] ASC),
    CONSTRAINT [FK_adi3u15i6wabrpah6s9lpam9] FOREIGN KEY ([CDocId]) REFERENCES [dbo].[TApprDoc] ([CDocId]),
    CONSTRAINT [FK80B5630B1122766D] FOREIGN KEY ([CRegStaff]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK80B5630B48D9611] FOREIGN KEY ([CDepartCode], [CDepartStartDate]) REFERENCES [dbo].[TDepartment] ([CDepartCode], [CDepartStartDate]),
    CONSTRAINT [FK80B5630B4BE6E1AF] FOREIGN KEY ([CToDoId], [CToDoStaffId]) REFERENCES [dbo].[TToDoStaff] ([CToDoId], [CStaffId]),
    CONSTRAINT [FK80B5630B898BFEF8] FOREIGN KEY ([CUpdStaff]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK80B5630B9E3C3476] FOREIGN KEY ([CStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK80B5630BB93F5F42] FOREIGN KEY ([CFacilityCode], [CFacilityStartDate]) REFERENCES [dbo].[TFacility] ([CDepartCode], [CDepartStartDate]),
    CONSTRAINT [FK80B5630BF6B99EDE] FOREIGN KEY ([CScheduleType]) REFERENCES [dbo].[TScheduleType] ([CId])
);


GO

CREATE TABLE [dbo].[TStaffLevel] (
    [CLevelType]       NVARCHAR (10)  NOT NULL,
    [CLevelCode]       NVARCHAR (10)  NOT NULL,
    [CLevelSeq]        INT            NOT NULL,
    [CName0]           NVARCHAR (30)  NOT NULL,
    [CName1]           NVARCHAR (30)  NULL,
    [CName2]           NVARCHAR (30)  NULL,
    [CName3]           NVARCHAR (30)  NULL,
    [CName4]           NVARCHAR (30)  NULL,
    [CShortName0]      NVARCHAR (30)  NOT NULL,
    [CShortName1]      NVARCHAR (30)  NULL,
    [CShortName2]      NVARCHAR (30)  NULL,
    [CShortName3]      NVARCHAR (30)  NULL,
    [CShortName4]      NVARCHAR (30)  NULL,
    [CEnabled]         BIT            NOT NULL,
    [CDisplayIndex]    INT            NOT NULL,
    [CReplacePosition] BIT            NOT NULL,
    [CTemp1]           NVARCHAR (100) NULL,
    [CTemp2]           NVARCHAR (100) NULL,
    [CTemp3]           NVARCHAR (100) NULL,
    [CTemp4]           NVARCHAR (100) NULL,
    [CTemp5]           NVARCHAR (100) NULL,
    PRIMARY KEY CLUSTERED ([CLevelType] ASC, [CLevelCode] ASC, [CLevelSeq] ASC)
);


GO

CREATE TABLE [dbo].[TTradeInfo] (
    [CRequireDate]     DATETIME       NOT NULL,
    [CBranchCode]      NVARCHAR (20)  NOT NULL,
    [CBranchStartDate] DATETIME       NOT NULL,
    [CTradeNo]         INT            NOT NULL,
    [CTradeStatus]     NVARCHAR (15)  NULL,
    [CCommonGroupCode] NVARCHAR (50)  NULL,
    [CCommonCode]      NVARCHAR (50)  NULL,
    [CTradeName]       NVARCHAR (255) NULL,
    [CDueDatePayment]  DATETIME       NULL,
    [CCloseReason]     NVARCHAR (255) NULL,
    [CChargeType]      NVARCHAR (15)  NULL,
    [CChargePrice]     INT            NULL,
    [CInterestRate]    INT            NULL,
    [CInterestDate]    DATETIME       NULL,
    [CInterestType]    NVARCHAR (15)  NULL,
    [CRegDate]         DATETIME       NULL,
    [CRegStaffId]      NVARCHAR (30)  NULL,
    [CApprovalStatus]  NVARCHAR (15)  NULL,
    PRIMARY KEY CLUSTERED ([CRequireDate] ASC, [CBranchCode] ASC, [CBranchStartDate] ASC, [CTradeNo] ASC),
    CONSTRAINT [FKCC66B63E19E633C8] FOREIGN KEY ([CRegStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FKCC66B63E48562EA2] FOREIGN KEY ([CBranchCode], [CBranchStartDate]) REFERENCES [dbo].[TFacility] ([CDepartCode], [CDepartStartDate]),
    CONSTRAINT [FKCC66B63EC74495AF] FOREIGN KEY ([CCommonGroupCode], [CCommonCode]) REFERENCES [dbo].[TCommonCode] ([CCodeGroup], [CCode])
);


GO

CREATE TABLE [dbo].[tbl_marketing_member] (
    [marketing_member_idx] INT           IDENTITY (1, 1) NOT NULL,
    [member_name]          VARCHAR (100) NULL,
    [ins_date]             DATETIME      NULL,
    [use_yn]               CHAR (1)      CONSTRAINT [DF_tbl_marketing_member_use_yn] DEFAULT ('Y') NULL,
    [del_yn]               CHAR (1)      CONSTRAINT [DF_tbl_marketing_member_del_yn] DEFAULT ('N') NULL,
    CONSTRAINT [PK_tbl_marketing_member] PRIMARY KEY CLUSTERED ([marketing_member_idx] ASC)
);


GO

CREATE TABLE [dbo].[TApprFormHtml] (
    [CFormId]             NVARCHAR (15)  NOT NULL,
    [CFormVer]            INT            NOT NULL,
    [CEnabled]            BIT            NOT NULL,
    [CCreatorId]          NVARCHAR (30)  NULL,
    [CCreateTime]         DATETIME       NOT NULL,
    [CModifierId]         NVARCHAR (30)  NULL,
    [CModifiedTime]       DATETIME       NOT NULL,
    [CWriteHtml]          NTEXT          NULL,
    [CWriteCss]           NTEXT          NULL,
    [CWriteScript]        NTEXT          NULL,
    [CBody1Html]          NTEXT          NULL,
    [CBody2Html]          NTEXT          NULL,
    [CBody3Html]          NTEXT          NULL,
    [CBody4Html]          NTEXT          NULL,
    [CViewHtml]           NTEXT          NULL,
    [CViewCss]            NTEXT          NULL,
    [CViewScript]         NTEXT          NULL,
    [CPrintHtml]          NTEXT          NULL,
    [CPrintCss]           NTEXT          NULL,
    [CPrintScript]        NTEXT          NULL,
    [CPaperType]          NVARCHAR (20)  NOT NULL,
    [CMarginTop]          FLOAT (53)     NOT NULL,
    [CMarginBottom]       FLOAT (53)     NOT NULL,
    [CMarginLeft]         FLOAT (53)     NOT NULL,
    [CMarginRight]        FLOAT (53)     NOT NULL,
    [CIsLandscape]        BIT            NOT NULL,
    [CHeaderText]         NVARCHAR (255) NULL,
    [CFooterText]         NVARCHAR (255) NULL,
    [CWriteUrl]           NVARCHAR (255) NULL,
    [CViewUrl]            NVARCHAR (255) NULL,
    [CProcessBeanId]      NVARCHAR (255) NULL,
    [CToDoBeanId]         NVARCHAR (255) NULL,
    [CDocFormFileId]      BIGINT         NULL,
    [CViewCss4Recept]     NTEXT          NULL,
    [CViewScript4Recept]  NTEXT          NULL,
    [CViewHtml4Recept]    NTEXT          NULL,
    [CPrintCss4Recept]    NTEXT          NULL,
    [CPrintScript4Recept] NTEXT          NULL,
    [CPrintHtml4Recept]   NTEXT          NULL,
    [CPrintTitle]         NVARCHAR (255) NULL,
    [CAdditionalHtml1]    NTEXT          NULL,
    [CAdditionalHtml2]    NTEXT          NULL,
    [CAdditionalHtml3]    NTEXT          NULL,
    [CAdditionalHtml4]    NTEXT          NULL,
    [CAdditionalHtml5]    NTEXT          NULL,
    [CAdditionalHtml6]    NTEXT          NULL,
    [CAdditionalHtml7]    NTEXT          NULL,
    [CAdditionalHtml8]    NTEXT          NULL,
    [CAdditionalHtml9]    NTEXT          NULL,
    PRIMARY KEY CLUSTERED ([CFormId] ASC, [CFormVer] ASC),
    CONSTRAINT [FK_i3pl5m7iyyrt9bkg0w6ofnwwh] FOREIGN KEY ([CDocFormFileId]) REFERENCES [dbo].[TFile] ([CFileId]),
    CONSTRAINT [FK61D32A941FA9FD95] FOREIGN KEY ([CFormId]) REFERENCES [dbo].[TApprForm] ([CFormId]),
    CONSTRAINT [FK61D32A947F583382] FOREIGN KEY ([CCreatorId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK61D32A94BF0E1913] FOREIGN KEY ([CModifierId]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[TPushSubscription] (
    [CDepartCode]      NVARCHAR (20) NOT NULL,
    [CDepartStartDate] DATETIME      NOT NULL,
    [CMemberCode]      NVARCHAR (50) NOT NULL,
    [CPushType]        NVARCHAR (10) NOT NULL,
    [CPushEnabled]     BIT           NULL,
    PRIMARY KEY CLUSTERED ([CDepartCode] ASC, [CDepartStartDate] ASC, [CMemberCode] ASC, [CPushType] ASC),
    CONSTRAINT [FK_48tcejhuwx6pahx8ikmyw0miw] FOREIGN KEY ([CDepartCode], [CDepartStartDate], [CMemberCode]) REFERENCES [dbo].[TMember] ([CDepartCode], [CDepartStartDate], [CMemberCode])
);


GO

CREATE TABLE [dbo].[THpMenu] (
    [CMenuId]               NVARCHAR (50)  NOT NULL,
    [CLanguageIndex]        INT            NOT NULL,
    [CDepth]                INT            NULL,
    [CDisplayIndex]         INT            NULL,
    [CName]                 NVARCHAR (100) NOT NULL,
    [CImageTop]             NVARCHAR (255) NULL,
    [CImageTopHover]        NVARCHAR (255) NULL,
    [CImageTopSub]          NVARCHAR (255) NULL,
    [CImageTopSubHover]     NVARCHAR (255) NULL,
    [CImageMenuTop]         NVARCHAR (255) NULL,
    [CImageMenuSub]         NVARCHAR (255) NULL,
    [CImageMenuSubHover]    NVARCHAR (255) NULL,
    [CImageMenuSubSelected] NVARCHAR (255) NULL,
    [CImageBodyTop]         NVARCHAR (255) NULL,
    [CRequestBaseUrl]       NVARCHAR (255) NULL,
    [CRequestUrl]           NVARCHAR (255) NULL,
    [CViewUrl]              NVARCHAR (255) NULL,
    [CParentId]             NVARCHAR (50)  NULL,
    PRIMARY KEY CLUSTERED ([CMenuId] ASC),
    CONSTRAINT [FK_6fw9iblm4xsj29vcpoui65gr0] FOREIGN KEY ([CParentId]) REFERENCES [dbo].[THpMenu] ([CMenuId])
);


GO

CREATE TABLE [dbo].[THpRequest] (
    [CRequestId]       BIGINT         NOT NULL,
    [CSubSeq]          INT            NOT NULL,
    [CRequestType]     NVARCHAR (20)  NULL,
    [CRequestDateTime] DATETIME       NULL,
    [CTitle]           NVARCHAR (255) NOT NULL,
    [CRequesterName]   NVARCHAR (50)  NOT NULL,
    [CRequesterId]     BIGINT         NULL,
    [CBody]            NTEXT          NULL,
    [CPhoneNumber]     NVARCHAR (255) NULL,
    [CEmail]           NVARCHAR (255) NULL,
    [CState]           NVARCHAR (255) NULL,
    PRIMARY KEY CLUSTERED ([CRequestId] ASC, [CSubSeq] ASC),
    CONSTRAINT [FK_10q9gekofyt7jd427g82megut] FOREIGN KEY ([CRequestType]) REFERENCES [dbo].[THpRequestType] ([CTypeId]),
    CONSTRAINT [FK_8kch779o66jxd6ehnnoetf4y6] FOREIGN KEY ([CRequesterId]) REFERENCES [dbo].[THpMember] ([CMemberId])
);


GO

CREATE TABLE [dbo].[TPriceStudentTutoringDiscount] (
    [CDiscountSeq]                  BIGINT        IDENTITY (1, 1) NOT NULL,
    [CPriceBranchIdDepartCode]      NVARCHAR (20) NULL,
    [CPriceBranchIdDepartStartDate] DATETIME      NULL,
    [CGrade]                        NVARCHAR (50) NOT NULL,
    [CComma]                        INT           NOT NULL,
    [CPriceComma]                   INT           NULL,
    [CRegDate]                      DATETIME      NULL,
    [CRegStaff]                     NVARCHAR (30) NULL,
    PRIMARY KEY CLUSTERED ([CDiscountSeq] ASC),
    CONSTRAINT [FK_nl88yq31p38x51m3vw93djvm3] FOREIGN KEY ([CPriceBranchIdDepartCode], [CPriceBranchIdDepartStartDate]) REFERENCES [dbo].[TFacility] ([CDepartCode], [CDepartStartDate]),
    CONSTRAINT [FK_ryx86hfmla5fwgsn8e1cojse6] FOREIGN KEY ([CRegStaff]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[TApprDocSignerHistory] (
    [CDocId]              BIGINT         NOT NULL,
    [CHistorySeq]         INT            NOT NULL,
    [CSeq]                INT            NOT NULL,
    [CInstead]            BIT            NOT NULL,
    [CSignOrder]          INT            NULL,
    [CGroupNo]            INT            NULL,
    [CHidden]             BIT            NULL,
    [CSignerId]           NVARCHAR (30)  NULL,
    [CLevelType]          NVARCHAR (10)  NULL,
    [CLevelCode]          NVARCHAR (10)  NULL,
    [CLevelSeq]           INT            NULL,
    [CDepartCode]         NVARCHAR (20)  NULL,
    [CDepartStartDate]    DATETIME       NULL,
    [CSignerType]         NVARCHAR (15)  NULL,
    [CWait]               BIT            NULL,
    [CDeferred]           BIT            NULL,
    [CBaseTime]           DATETIME       NULL,
    [CReadyTime]          DATETIME       NULL,
    [CReadyReadTime]      DATETIME       NULL,
    [CProcessTime]        DATETIME       NULL,
    [CAfterReadTime]      DATETIME       NULL,
    [CPassedTime]         DATETIME       NULL,
    [CPassByStaffId]      NVARCHAR (30)  NULL,
    [CSignType]           NVARCHAR (255) NULL,
    [CApplySignFileIndex] INT            NULL,
    [CImplType]           NVARCHAR (15)  NULL,
    [CImplTime]           DATETIME       NULL,
    [CReceptState]        NVARCHAR (10)  NULL,
    [CSecondDocId]        BIGINT         NULL,
    [CFixed]              BIT            NULL,
    [CPosition]           INT            NULL,
    [CTmpString1]         NVARCHAR (255) NULL,
    PRIMARY KEY CLUSTERED ([CDocId] ASC, [CHistorySeq] ASC, [CSeq] ASC, [CInstead] ASC),
    CONSTRAINT [FK_5aq9oy4o3hktdh79umj87rqnk] FOREIGN KEY ([CDocId]) REFERENCES [dbo].[TApprDoc] ([CDocId]),
    CONSTRAINT [FK_c69wt5knsxlkj5a19y42skr4e] FOREIGN KEY ([CPassByStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_jo1fxldd131pjfrmps3of8vwm] FOREIGN KEY ([CSignerId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_lg70n6gb170vcxqibb80sfee8] FOREIGN KEY ([CSecondDocId]) REFERENCES [dbo].[TApprDoc] ([CDocId]),
    CONSTRAINT [FK_ryn9ec30yu6fuf7g8tq6j6l5b] FOREIGN KEY ([CDepartCode], [CDepartStartDate]) REFERENCES [dbo].[TDepartment] ([CDepartCode], [CDepartStartDate]),
    CONSTRAINT [FK_sg86l5c1bey4l55mrfaiusg4x] FOREIGN KEY ([CLevelType], [CLevelCode], [CLevelSeq]) REFERENCES [dbo].[TStaffLevel] ([CLevelType], [CLevelCode], [CLevelSeq])
);


GO

CREATE TABLE [dbo].[TAssignment] (
    [CCourseNo]       INT            NOT NULL,
    [CEduNo]          INT            NOT NULL,
    [CNo]             INT            NOT NULL,
    [CGroupCourseNo]  INT            NULL,
    [CGroupEduNo]     INT            NULL,
    [CGroupNo]        INT            NULL,
    [CName]           NVARCHAR (255) NULL,
    [CStartDate]      DATETIME       NULL,
    [CEndDate]        DATETIME       NULL,
    [CAssignType]     NVARCHAR (15)  NULL,
    [CScoreTypeGroup] NVARCHAR (50)  NULL,
    [CScoreTypeCode]  NVARCHAR (50)  NULL,
    PRIMARY KEY CLUSTERED ([CCourseNo] ASC, [CEduNo] ASC, [CNo] ASC),
    CONSTRAINT [FK8F080A41207506F1] FOREIGN KEY ([CGroupCourseNo], [CGroupEduNo], [CGroupNo]) REFERENCES [dbo].[TEducationGroup] ([CCourseNo], [CEduNo], [CNo]),
    CONSTRAINT [FK8F080A412FB03371] FOREIGN KEY ([CCourseNo], [CEduNo]) REFERENCES [dbo].[TEducation] ([CCourseNo], [CNo]),
    CONSTRAINT [FK8F080A41BC4A2FA2] FOREIGN KEY ([CScoreTypeGroup], [CScoreTypeCode]) REFERENCES [dbo].[TCommonCode] ([CCodeGroup], [CCode])
);


GO

CREATE TABLE [dbo].[TChapter] (
    [CChapterId]      INT            NOT NULL,
    [CCurriculumId]   INT            NULL,
    [CCurriculumType] NVARCHAR (255) NULL,
    [CSeq]            INT            NULL,
    [CName]           NVARCHAR (255) NULL,
    [CObjective]      NVARCHAR (255) NULL,
    [CDbTNo]          INT            NULL,
    PRIMARY KEY CLUSTERED ([CChapterId] ASC)
);


GO

CREATE TABLE [dbo].[tbl_TutoringSC_xlsx] (
    [xlsx_seq]    BIGINT          IDENTITY (1, 1) NOT NULL,
    [branch_code] NCHAR (10)      NULL,
    [start_date]  DATETIME        NULL,
    [ins_date]    DATETIME        NULL,
    [upd_date]    DATETIME        NULL,
    [xlsx_data]   VARBINARY (MAX) NULL,
    CONSTRAINT [PK_tbl_TutoringSC_xlsx] PRIMARY KEY CLUSTERED ([xlsx_seq] ASC)
);


GO

CREATE TABLE [dbo].[TStudentSaleHistory] (
    [CNo]                INT            IDENTITY (1, 1) NOT NULL,
    [CDepartCode]        NVARCHAR (20)  NULL,
    [CDepartStartDate]   DATETIME       NULL,
    [CCode]              NVARCHAR (50)  NULL,
    [CRegType]           NVARCHAR (50)  NULL,
    [CDtlNo]             INT            NULL,
    [CPayMonthCount]     INT            NULL,
    [CSaleFlagGroupCode] NVARCHAR (50)  NULL,
    [CSaleFlagCode]      NVARCHAR (50)  NULL,
    [CSaleDate]          DATETIME       NULL,
    [CPayFlagGroupCode]  NVARCHAR (50)  NULL,
    [CPayFlagCode]       NVARCHAR (50)  NULL,
    [CPayPrice]          INT            NULL,
    [CPayNo]             NVARCHAR (255) NULL,
    [CSaleMemo]          NVARCHAR (255) NULL,
    [CRtnDate]           DATETIME       NULL,
    [CRtnPrice]          INT            NULL,
    [CRtnMemo]           NVARCHAR (255) NULL,
    [CRtnNo]             NVARCHAR (255) NULL,
    [CStartDate]         DATETIME       NULL,
    [CEndDate]           DATETIME       NULL,
    [CPayCommas]         INT            NULL,
    [CInsDate]           DATETIME       NULL,
    PRIMARY KEY CLUSTERED ([CNo] ASC),
    CONSTRAINT [FK_5xfrcatf2e3yw2watvhf0ya5v] FOREIGN KEY ([CSaleFlagGroupCode], [CSaleFlagCode]) REFERENCES [dbo].[TCommonCode] ([CCodeGroup], [CCode]),
    CONSTRAINT [FK_a0q9mtc6uydp2k80q6bedrr2j] FOREIGN KEY ([CDepartCode], [CDepartStartDate], [CCode]) REFERENCES [dbo].[TStudent] ([CBranchCode], [CBranchStartDate], [CCode]),
    CONSTRAINT [FK_jn83a3fdwcq7n77aqunmf7ych] FOREIGN KEY ([CPayFlagGroupCode], [CPayFlagCode]) REFERENCES [dbo].[TCommonCode] ([CCodeGroup], [CCode])
);


GO

CREATE TABLE [dbo].[TStaffEmailAddress] (
    [CEmailAddress]   NVARCHAR (100) NOT NULL,
    [CStaffId]        NVARCHAR (30)  NOT NULL,
    [CType]           NVARCHAR (20)  NULL,
    [CRemoteHost]     NVARCHAR (100) NULL,
    [CRemotePort]     INT            NULL,
    [CRemoteId]       NVARCHAR (30)  NULL,
    [CRemotePw]       NVARCHAR (100) NULL,
    [CRemoteSecurity] BIT            NULL,
    [CAllowPOP3]      BIT            NULL,
    [CLocalMain]      BIT            NULL,
    [CSkipParsing]    BIT            NULL,
    PRIMARY KEY CLUSTERED ([CEmailAddress] ASC, [CStaffId] ASC),
    CONSTRAINT [FKB9B619C49E3C3476] FOREIGN KEY ([CStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[TServerAccount] (
    [CAccountId]     BIGINT        IDENTITY (1, 1) NOT NULL,
    [CServerId]      BIGINT        NULL,
    [CName]          NVARCHAR (50) NULL,
    [CType]          NVARCHAR (10) NULL,
    [CLoginId]       NVARCHAR (50) NULL,
    [CPassword]      NVARCHAR (50) NULL,
    [CDefaultSchema] NVARCHAR (50) NULL,
    [CRemark]        NTEXT         NULL,
    [CRegStaffId]    NVARCHAR (30) NULL,
    [CRegTime]       DATETIME      NOT NULL,
    [CUpdStaffId]    NVARCHAR (30) NULL,
    [CUpdTime]       DATETIME      NULL,
    [CRmPortNo]      INT           NULL,
    [COwnerId]       NVARCHAR (30) NULL,
    PRIMARY KEY CLUSTERED ([CAccountId] ASC),
    CONSTRAINT [FK_5c0vmh2q3ukfmy6kmjd73n2i7] FOREIGN KEY ([COwnerId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_6qj8naqvgrb25f05e5yg9h2fl] FOREIGN KEY ([CUpdStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_bhic3sjy05sskt95ghg18st04] FOREIGN KEY ([CServerId]) REFERENCES [dbo].[TPartnerServer] ([CServerId]),
    CONSTRAINT [FK_oenp87j0b6h43pdo8lvxcijca] FOREIGN KEY ([CRegStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[TStudentManagement] (
    [CDepartCode]      NVARCHAR (20) NOT NULL,
    [CDepartStartDate] DATETIME      NOT NULL,
    [CStudentCode]     NVARCHAR (50) NOT NULL,
    [CRegTime]         DATETIME      NOT NULL,
    [CWriterId]        NVARCHAR (30) NULL,
    [CContent]         NTEXT         NULL,
    PRIMARY KEY CLUSTERED ([CDepartCode] ASC, [CDepartStartDate] ASC, [CStudentCode] ASC, [CRegTime] ASC),
    CONSTRAINT [FK1423FAEACBAA906F] FOREIGN KEY ([CWriterId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK1423FAEAE5AE68F8] FOREIGN KEY ([CDepartCode], [CDepartStartDate], [CStudentCode]) REFERENCES [dbo].[TStudent] ([CBranchCode], [CBranchStartDate], [CCode])
);


GO

CREATE TABLE [dbo].[TReportPatternItem] (
    [CReportPattern] NVARCHAR (50) NOT NULL,
    [CItemType]      NVARCHAR (50) NOT NULL,
    [CItemIndex]     INT           NULL,
    [CMustField]     BIT           NULL,
    [CPageBreak]     BIT           NULL,
    PRIMARY KEY CLUSTERED ([CReportPattern] ASC, [CItemType] ASC),
    CONSTRAINT [FK46B9CEFB1D7B183] FOREIGN KEY ([CReportPattern]) REFERENCES [dbo].[TReportPattern] ([CCode])
);


GO

CREATE TABLE [dbo].[TMailAddressAllowLink] (
    [CStaffId]      NVARCHAR (255) NOT NULL,
    [CEmailAddress] NVARCHAR (200) NOT NULL,
    [CIsAllow]      BIT            NOT NULL,
    PRIMARY KEY CLUSTERED ([CStaffId] ASC, [CEmailAddress] ASC)
);


GO

CREATE TABLE [dbo].[TTestComment] (
    [Ckey1]    VARCHAR (50)   NOT NULL,
    [Ckey2]    VARCHAR (50)   NOT NULL,
    [Ccomment] VARCHAR (1000) NOT NULL,
    [bigo]     VARCHAR (200)  NULL
);


GO

CREATE TABLE [dbo].[TPollQuestion] (
    [CId]              BIGINT         IDENTITY (1, 1) NOT NULL,
    [CMain]            BIT            NULL,
    [CType]            NVARCHAR (10)  NOT NULL,
    [CQuestion]        NTEXT          NULL,
    [CJoinType]        NVARCHAR (255) NULL,
    [CAllowComment]    BIT            NULL,
    [CEvalMinPoint]    INT            NULL,
    [CEvalMaxPoint]    INT            NULL,
    [CParticipantType] NVARCHAR (255) NULL,
    [CJoinCount]       INT            NULL,
    [CTargetCount]     INT            NULL,
    [CStartTime]       DATETIME       NOT NULL,
    [CEndTime]         DATETIME       NOT NULL,
    [CForceEndTime]    DATETIME       NULL,
    [CAttchFileId]     BIGINT         NULL,
    [CParentId]        BIGINT         NULL,
    [CIsViewName]      BIT            NULL,
    [CAttchFileId2]    BIGINT         NULL,
    [CAttchFileId3]    BIGINT         NULL,
    [CAttchFileId4]    BIGINT         NULL,
    PRIMARY KEY CLUSTERED ([CId] ASC),
    CONSTRAINT [FK_3g7kmxvqidx3sisbj417wjtea] FOREIGN KEY ([CAttchFileId3]) REFERENCES [dbo].[TFile] ([CFileId]),
    CONSTRAINT [FK_81wmhuxf3ouhk902hae4reyva] FOREIGN KEY ([CAttchFileId2]) REFERENCES [dbo].[TFile] ([CFileId]),
    CONSTRAINT [FK_c17pur135rg0llypfa9lslcji] FOREIGN KEY ([CAttchFileId4]) REFERENCES [dbo].[TFile] ([CFileId]),
    CONSTRAINT [FK93E27F39CF0F0534] FOREIGN KEY ([CAttchFileId]) REFERENCES [dbo].[TFile] ([CFileId]),
    CONSTRAINT [FK93E27F39FD4A4D27] FOREIGN KEY ([CParentId]) REFERENCES [dbo].[TPollQuestion] ([CId])
);


GO

CREATE TABLE [dbo].[TAutoSmsSetting] (
    [CBranchCode]      NVARCHAR (20) NOT NULL,
    [CBranchStartDate] DATETIME      NOT NULL,
    [CIsUse]           BIT           NULL,
    [CIsCounsel]       BIT           NULL,
    [CIsTutoring]      BIT           NULL,
    [CBefore5days]     BIT           NULL,
    [CBefore4days]     BIT           NULL,
    [CBefore3days]     BIT           NULL,
    [CBefore2days]     BIT           NULL,
    [CBefore1day]      BIT           NULL,
    [CBefore0day]      BIT           NULL,
    [CAfter2days]      BIT           NULL,
    [CAfter3days]      BIT           NULL,
    [CAfter4days]      BIT           NULL,
    [CAfter5days]      BIT           NULL,
    [CAfter6days]      BIT           NULL,
    [CAfter7days]      BIT           NULL,
    [CGreeting]        NTEXT         NULL,
    [CClosing]         NTEXT         NULL,
    PRIMARY KEY CLUSTERED ([CBranchCode] ASC, [CBranchStartDate] ASC),
    CONSTRAINT [FK_esnkg526b74ysyr9wtvnnis33] FOREIGN KEY ([CBranchCode], [CBranchStartDate]) REFERENCES [dbo].[TFacility] ([CDepartCode], [CDepartStartDate])
);


GO

CREATE TABLE [dbo].[Inbox] (
    [message_name]       VARCHAR (200)   NOT NULL,
    [repository_name]    VARCHAR (255)   NOT NULL,
    [message_state]      VARCHAR (30)    NOT NULL,
    [error_message]      VARCHAR (1000)  NULL,
    [sender]             VARCHAR (255)   NULL,
    [recipients]         TEXT            NOT NULL,
    [remote_host]        VARCHAR (255)   NOT NULL,
    [remote_addr]        VARCHAR (20)    NOT NULL,
    [message_body]       VARBINARY (MAX) NOT NULL,
    [message_attributes] VARBINARY (MAX) NULL,
    [last_updated]       DATETIME        NOT NULL,
    [ubi_status]         NVARCHAR (30)   CONSTRAINT [DF__Inbox__ubi_statu__7F6342D1] DEFAULT ('READY') NOT NULL,
    [create_timestamp]   DATETIME        CONSTRAINT [DF__Inbox__create_ti__0057670A] DEFAULT (getdate()) NOT NULL,
    [ubi_remark]         NTEXT           NULL,
    CONSTRAINT [PK__inbox__C627BA0708C4DEA4] PRIMARY KEY CLUSTERED ([repository_name] ASC, [message_name] ASC)
);


GO

CREATE TABLE [dbo].[TComponentCategory] (
    [CComponentNo] BIGINT        NOT NULL,
    [CType]        NVARCHAR (50) NOT NULL,
    PRIMARY KEY CLUSTERED ([CComponentNo] ASC, [CType] ASC),
    CONSTRAINT [FK22D4632744F3BF8] FOREIGN KEY ([CComponentNo]) REFERENCES [dbo].[TComponent] ([CComponentNo])
);


GO

CREATE TABLE [dbo].[tb_Media] (
    [it_MediaIdx]      INT            IDENTITY (1, 1) NOT NULL,
    [st_MediaCategory] NVARCHAR (50)  NOT NULL,
    [st_MediaName]     NVARCHAR (50)  NOT NULL,
    [st_MediaMemo]     NVARCHAR (500) NULL,
    [it_MediaActive]   INT            CONSTRAINT [DF_tb_Media_it_MediaActive] DEFAULT ((1)) NULL,
    [it_MediaOrder]    INT            CONSTRAINT [DF__tb_Media__it_Med__623E6CCF] DEFAULT ((1)) NULL,
    [dt_MediaMake]     DATETIME       NULL,
    [dt_MediaDelete]   DATETIME       NULL,
    CONSTRAINT [PK_tb_Media] PRIMARY KEY CLUSTERED ([it_MediaIdx] ASC)
);


GO

CREATE TABLE [dbo].[TSmsFare] (
    [CDepartCode]             NVARCHAR (20)  NOT NULL,
    [CDepartStartDate]        DATETIME       NOT NULL,
    [CDate]                   DATETIME       NOT NULL,
    [CCounselCode]            NVARCHAR (255) NULL,
    [CInstituteCode]          NVARCHAR (255) NULL,
    [CLmsCount]               INT            NULL,
    [CLmsFare]                INT            NULL,
    [CSmsCount]               INT            NULL,
    [CSmsFare]                INT            NULL,
    [CSmsBelongCounsel]       INT            NULL,
    [CSmsBelongInstitute]     INT            NULL,
    [CSmsBelongCounselFare]   INT            NULL,
    [CSmsBelongInstituteFare] INT            NULL,
    [CTotalFare]              INT            NULL,
    [CConfirmDate]            DATETIME       NOT NULL,
    [CConfirmStaff]           NVARCHAR (30)  NULL,
    PRIMARY KEY CLUSTERED ([CDepartCode] ASC, [CDepartStartDate] ASC, [CDate] ASC),
    CONSTRAINT [FK_bk9w770jjntvrj85vciime69f] FOREIGN KEY ([CConfirmStaff]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_jhoa9pm16tdb6w2f7pne2emos] FOREIGN KEY ([CDepartCode], [CDepartStartDate]) REFERENCES [dbo].[TFacility] ([CDepartCode], [CDepartStartDate])
);


GO

CREATE TABLE [dbo].[TStudentTutoring] (
    [CStdDepartCode]      NVARCHAR (20)  NOT NULL,
    [CStdDepartStartDate] DATETIME       NOT NULL,
    [CStdCode]            NVARCHAR (50)  NOT NULL,
    [CNo]                 INT            NOT NULL,
    [CRegistType]         NVARCHAR (50)  NULL,
    [CManageCommas]       INT            NULL,
    [CFreeCommas]         INT            NULL,
    [CFreeComment]        NVARCHAR (255) NULL,
    [CPayCommas]          INT            NULL,
    [CCommaPerWeek]       INT            NULL,
    [CDeaultStartDate]    DATETIME       NULL,
    [CDeaultEndDate]      DATETIME       NULL,
    [CStartDate]          DATETIME       NULL,
    [CEndDate]            DATETIME       NULL,
    [CManager]            NVARCHAR (30)  NULL,
    [CMonday]             BIT            NULL,
    [CTuesday]            BIT            NULL,
    [CWednesday]          BIT            NULL,
    [CThursday]           BIT            NULL,
    [CFriday]             BIT            NULL,
    [CSaturday]           BIT            NULL,
    [CSunday]             BIT            NULL,
    [CGrade]              NVARCHAR (255) NULL,
    [CTutoringCourse]     NVARCHAR (255) NULL,
    [CBillPrice]          INT            NULL,
    [CPayPrice]           INT            NULL,
    [CChangePriceReason]  NVARCHAR (255) NULL,
    [CPayDate]            DATETIME       NULL,
    [CRoyaltyRate]        FLOAT (53)     NULL,
    [CRoyalty]            INT            NULL,
    [CRoyaltyPayDate]     DATETIME       NULL,
    [CBookedCommas]       INT            NULL,
    [CRemainCommas]       INT            NULL,
    [CFixRoyalty]         INT            NULL,
    [CChildren]           BIT            NULL,
    [CSaleProof]          BIGINT         NULL,
    [CModifiedCommas]     INT            CONSTRAINT [DF_TStudentTutoring_CModifiedCommas] DEFAULT ((0)) NULL,
    [CAttributionPrice]   INT            NULL,
    [CAttributionMemo]    NVARCHAR (255) NULL,
    [TranYn]              VARCHAR (1)    CONSTRAINT [DF_TStudentTutoring_TranYn] DEFAULT ('N') NULL,
    [CInsDate]            DATETIME       CONSTRAINT [DF_TStudentTutoring_CInsDate] DEFAULT (CONVERT([varchar],getdate(),(23))) NULL,
    CONSTRAINT [PK__TStudent__16FD861C06C2E356] PRIMARY KEY CLUSTERED ([CStdDepartCode] ASC, [CStdDepartStartDate] ASC, [CStdCode] ASC, [CNo] ASC),
    CONSTRAINT [FK_la4bnvvtx6ba6b8nol7omn5xj] FOREIGN KEY ([CSaleProof]) REFERENCES [dbo].[TSaleProof] ([CProofSeq]),
    CONSTRAINT [FK_TStudent_TStudentTutoring] FOREIGN KEY ([CStdDepartCode], [CStdDepartStartDate], [CStdCode]) REFERENCES [dbo].[TStudent] ([CBranchCode], [CBranchStartDate], [CCode]),
    CONSTRAINT [FK75F12D53411FAC28] FOREIGN KEY ([CManager]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[TGlobalPostNo4Korea] (
    [CRoadNameCode]       NVARCHAR (20) NOT NULL,
    [CBuildingMngNo]      NVARCHAR (50) NOT NULL,
    [CBupJungCode]        NVARCHAR (10) NULL,
    [CSiDo]               NVARCHAR (30) NULL,
    [CSiGunGu]            NVARCHAR (30) NULL,
    [CEupMyunDong]        NVARCHAR (30) NULL,
    [CRi]                 NVARCHAR (30) NULL,
    [CSan]                NVARCHAR (1)  NULL,
    [CJiBunMain]          INT           NULL,
    [CJiBunSub]           INT           NULL,
    [CRoadName]           NVARCHAR (50) NULL,
    [CJiHa]               NVARCHAR (1)  NULL,
    [CBuildingNoMain]     INT           NULL,
    [CBuildingNoSub]      INT           NULL,
    [CBuildingName]       NVARCHAR (50) NULL,
    [CBuildingDetailName] NVARCHAR (50) NULL,
    [CEupMyunDongSeq]     NVARCHAR (10) NULL,
    [CHaengJungDongCode]  NVARCHAR (20) NULL,
    [CHaengJungDongName]  NVARCHAR (50) NULL,
    [CPostNo]             NVARCHAR (6)  NULL,
    [CPostSeq]            NVARCHAR (3)  NULL,
    [CManyDeliveryName]   NVARCHAR (50) NULL,
    PRIMARY KEY CLUSTERED ([CRoadNameCode] ASC, [CBuildingMngNo] ASC)
);


GO

CREATE TABLE [dbo].[otbl_App_notice] (
    [app_notice_idx] INT           IDENTITY (1, 1) NOT NULL,
    [category]       NVARCHAR (10) NULL,
    [title]          NVARCHAR (50) NULL,
    [contents]       NTEXT         NULL,
    [reg_date]       DATETIME      NULL,
    [mod_date]       DATETIME      NULL,
    [del_yn]         CHAR (1)      CONSTRAINT [DF_otbl_App_notice_del_yn] DEFAULT ('N') NULL,
    CONSTRAINT [PK_otbl_App_notice] PRIMARY KEY CLUSTERED ([app_notice_idx] ASC)
);


GO

CREATE TABLE [dbo].[TSalesExpense] (
    [CContractId]        BIGINT         NOT NULL,
    [CSeq]               INT            NOT NULL,
    [CTitle]             NVARCHAR (200) NOT NULL,
    [CPlanDate]          DATETIME       NOT NULL,
    [CBillDate]          DATETIME       NOT NULL,
    [CCollectDate]       DATETIME       NULL,
    [CEndUserId]         BIGINT         NULL,
    [CChannelId]         BIGINT         NULL,
    [CSalesmanId]        NVARCHAR (30)  NULL,
    [CRegStaffId]        NVARCHAR (30)  NULL,
    [CRegTime]           DATETIME       NULL,
    [CUpdStaffId]        NVARCHAR (30)  NULL,
    [CUpdTime]           DATETIME       NULL,
    [CPlanPrice]         BIGINT         NULL,
    [CPlanTax]           BIGINT         NULL,
    [CPlanTotalPrice]    BIGINT         NULL,
    [CPrice]             BIGINT         NULL,
    [CTax]               BIGINT         NULL,
    [CTotalPrice]        BIGINT         NULL,
    [CReason]            NTEXT          NULL,
    [CRemark]            NTEXT          NULL,
    [CSecMemo]           NTEXT          NULL,
    [CPlanScheduleId]    BIGINT         NULL,
    [CExpenseScheduleId] BIGINT         NULL,
    PRIMARY KEY CLUSTERED ([CContractId] ASC, [CSeq] ASC),
    CONSTRAINT [FK_1j5732u4oyelrt7c4xhnfo99s] FOREIGN KEY ([CRegStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_1j94logsxrnq4dvmibh0y12mp] FOREIGN KEY ([CChannelId]) REFERENCES [dbo].[TPartner] ([CId]),
    CONSTRAINT [FK_40297f5yahb4ee54ayeh52w4k] FOREIGN KEY ([CPlanScheduleId]) REFERENCES [dbo].[TSchedule] ([CId]),
    CONSTRAINT [FK_fu69fqj5uiakpdrnbl1phtjyk] FOREIGN KEY ([CContractId]) REFERENCES [dbo].[TSalesContract] ([CId]),
    CONSTRAINT [FK_g1xdupnhm2o7qm0j6li3q9x9p] FOREIGN KEY ([CEndUserId]) REFERENCES [dbo].[TPartner] ([CId]),
    CONSTRAINT [FK_gyoip016do8ivk2o5v7f799d8] FOREIGN KEY ([CSalesmanId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_hyb2mtq2h44d9x4chpcbkdebs] FOREIGN KEY ([CExpenseScheduleId]) REFERENCES [dbo].[TSchedule] ([CId]),
    CONSTRAINT [FK_pbsxdr5rwv5o5w3ojyl0gjt1b] FOREIGN KEY ([CUpdStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[TStudent] (
    [CBranchCode]         NVARCHAR (20)  NOT NULL,
    [CBranchStartDate]    DATETIME       NOT NULL,
    [CCode]               NVARCHAR (50)  NOT NULL,
    [CManagerId]          NVARCHAR (30)  NULL,
    [CName]               NVARCHAR (255) NULL,
    [CSex]                NVARCHAR (50)  NULL,
    [CSchoolCode]         NVARCHAR (50)  NULL,
    [CGrade]              NVARCHAR (255) NULL,
    [CEnterSchoolType]    NVARCHAR (255) NULL,
    [CPinNumber]          NVARCHAR (255) NULL,
    [CEmailStudent]       NVARCHAR (255) NULL,
    [CPhoneStudent]       NVARCHAR (255) NULL,
    [CStudentStatus]      NVARCHAR (50)  NULL,
    [CNameFather]         NVARCHAR (255) NULL,
    [CPhoneFather]        NVARCHAR (255) NULL,
    [CSmsSendFather]      BIT            NULL,
    [CNameMother]         NVARCHAR (255) NULL,
    [CPhoneMother]        NVARCHAR (255) NULL,
    [CSmsSendMother]      BIT            NULL,
    [CPhoneHome]          NVARCHAR (255) NULL,
    [CZipaHome]           NVARCHAR (255) NULL,
    [CAddress1Home]       NVARCHAR (255) NULL,
    [CAddress2Home]       NVARCHAR (255) NULL,
    [CComment]            NVARCHAR (255) NULL,
    [CAttachNo]           BIGINT         NULL,
    [CDefaultStartDay]    DATETIME       NULL,
    [CCommonGroupCode]    NVARCHAR (50)  NULL,
    [CCommonCode]         NVARCHAR (50)  NULL,
    [CVltType]            INT            NULL,
    [CLastCounselNo]      INT            NULL,
    [CLastTutoringNo]     INT            NULL,
    [CMbtiType]           NVARCHAR (10)  NULL,
    [CParentsMbtiType]    NVARCHAR (10)  NULL,
    [CReentryPossibility] NVARCHAR (15)  NULL,
    [CEndStatus]          NVARCHAR (15)  NULL,
    [CEndDay]             DATETIME       NULL,
    [COldBranchCode]      NVARCHAR (20)  NULL,
    [COldBranchStartDate] DATETIME       NULL,
    [COldCode]            NVARCHAR (50)  NULL,
    [CTutorEndDay]        DATETIME       NULL,
    [CTutorEndStatus]     NVARCHAR (15)  NULL,
    [CKnowReAccount]      NVARCHAR (255) NULL,
    [CKnowRePwd]          NVARCHAR (255) NULL,
    [CKnowReUserId]       INT            NULL,
    [CAraCode]            NVARCHAR (255) NULL,
    CONSTRAINT [PK__TStudent__BE7A14050B47A151] PRIMARY KEY CLUSTERED ([CBranchCode] ASC, [CBranchStartDate] ASC, [CCode] ASC),
    CONSTRAINT [FK_9ekwhenbv1qg985aspp1hktag] FOREIGN KEY ([COldBranchCode], [COldBranchStartDate]) REFERENCES [dbo].[TFacility] ([CDepartCode], [CDepartStartDate]),
    CONSTRAINT [FK919D3473F6CE6C3] FOREIGN KEY ([CManagerId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK919D34748562EA2] FOREIGN KEY ([CBranchCode], [CBranchStartDate]) REFERENCES [dbo].[TFacility] ([CDepartCode], [CDepartStartDate]),
    CONSTRAINT [FK919D347A35933C3] FOREIGN KEY ([CAttachNo]) REFERENCES [dbo].[TFile] ([CFileId]),
    CONSTRAINT [FK919D347C74495AF] FOREIGN KEY ([CCommonGroupCode], [CCommonCode]) REFERENCES [dbo].[TCommonCode] ([CCodeGroup], [CCode]),
    CONSTRAINT [FK919D347D30F2DD9] FOREIGN KEY ([CSchoolCode]) REFERENCES [dbo].[TSchool] ([CCode])
);


GO

CREATE TABLE [dbo].[TCodeGroup] (
    [CCode]    NVARCHAR (50)  NOT NULL,
    [CName]    NVARCHAR (255) NULL,
    [CComment] NVARCHAR (255) NULL,
    [CEnabled] BIT            NULL,
    [CInfo1]   NVARCHAR (50)  NULL,
    [CInfo2]   NVARCHAR (50)  NULL,
    [CInfo3]   NVARCHAR (50)  NULL,
    [CInfo4]   NVARCHAR (50)  NULL,
    [CInfo5]   NVARCHAR (50)  NULL,
    [CInfo6]   NVARCHAR (50)  NULL,
    [CInfo7]   NVARCHAR (50)  NULL,
    [CInfo8]   NVARCHAR (50)  NULL,
    [CInfo9]   NVARCHAR (50)  NULL,
    PRIMARY KEY CLUSTERED ([CCode] ASC)
);


GO

CREATE TABLE [dbo].[tb_QnaRead] (
    [it_QnaReadIdx]      INT           IDENTITY (1, 1) NOT NULL,
    [st_CStaffId]        NVARCHAR (30) NOT NULL,
    [it_QnaIdx]          INT           NOT NULL,
    [dt_QnaReadLastRead] DATETIME      NOT NULL,
    CONSTRAINT [PK_tb_QnaRead] PRIMARY KEY CLUSTERED ([it_QnaReadIdx] ASC),
    CONSTRAINT [FK_tb_QnaRead_tb_Qna] FOREIGN KEY ([it_QnaIdx]) REFERENCES [dbo].[tb_Qna] ([it_QnaIdx])
);


GO

CREATE TABLE [dbo].[TContentComment] (
    [CContentId] BIGINT         NOT NULL,
    [CRegTime]   DATETIME       NOT NULL,
    [CWriter]    NVARCHAR (30)  NOT NULL,
    [CRegIp]     NVARCHAR (255) NULL,
    [CType]      NVARCHAR (15)  DEFAULT ('Normal') NOT NULL,
    [CComment]   NTEXT          NULL,
    [CModTime]   DATETIME       NULL,
    [CSeq]       INT            DEFAULT ((1)) NOT NULL,
    [CDepth]     INT            DEFAULT ((0)) NOT NULL,
    [CStatusId]  NVARCHAR (50)  NULL,
    PRIMARY KEY CLUSTERED ([CContentId] ASC, [CRegTime] ASC, [CWriter] ASC),
    CONSTRAINT [FK_1xhlaahmh3nx4ljevu1w82ljf] FOREIGN KEY ([CStatusId]) REFERENCES [dbo].[TBoardContentStatus] ([CStatusId]),
    CONSTRAINT [FK8E18B11A29D3D0D4] FOREIGN KEY ([CWriter]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK8E18B11A9F2A2E67] FOREIGN KEY ([CContentId]) REFERENCES [dbo].[TContent] ([CContentId])
);


GO

CREATE TABLE [dbo].[TWebFaxFile] (
    [CId]        INT            IDENTITY (1, 1) NOT NULL,
    [CFaxType]   NVARCHAR (100) NULL,
    [CIntFaxId]  INT            NULL,
    [CStrFaxId]  NVARCHAR (255) NULL,
    [CLongFaxId] NVARCHAR (255) NULL,
    [CFileId]    BIGINT         NULL,
    PRIMARY KEY CLUSTERED ([CId] ASC),
    CONSTRAINT [FK_cs2304tvmq4w3g1lk5qxlxiqg] FOREIGN KEY ([CFileId]) REFERENCES [dbo].[TFile] ([CFileId])
);


GO

CREATE TABLE [dbo].[TToDoFile] (
    [CToDoId]   BIGINT NOT NULL,
    [CFileId]   BIGINT NOT NULL,
    [CAddedSeq] INT    NOT NULL,
    [CHidden]   BIT    NULL,
    PRIMARY KEY CLUSTERED ([CToDoId] ASC, [CFileId] ASC),
    CONSTRAINT [FK2671FB7636C2262B] FOREIGN KEY ([CToDoId]) REFERENCES [dbo].[TToDo] ([CId]),
    CONSTRAINT [FK2671FB7655D74554] FOREIGN KEY ([CFileId]) REFERENCES [dbo].[TFile] ([CFileId])
);


GO

CREATE TABLE [dbo].[TBizWeekly4DptFileC] (
    [CBizDate]  DATETIME      NOT NULL,
    [CGroupId]  NVARCHAR (20) NOT NULL,
    [CAttachId] BIGINT        NOT NULL,
    [CSeq]      INT           NULL,
    PRIMARY KEY CLUSTERED ([CBizDate] ASC, [CGroupId] ASC, [CAttachId] ASC),
    CONSTRAINT [FK_gk94382ojjytfqkobl4u84keg] FOREIGN KEY ([CAttachId]) REFERENCES [dbo].[TFile] ([CFileId]),
    CONSTRAINT [FK_l27qcj074oy54byaa8rav1and] FOREIGN KEY ([CBizDate], [CGroupId]) REFERENCES [dbo].[TBizWeekly4DptC] ([CBizDate], [CGroupId])
);


GO

CREATE TABLE [dbo].[TComponentErrorReport] (
    [CComponentNo] BIGINT         NOT NULL,
    [CReportType]  NVARCHAR (50)  NOT NULL,
    [CErrorNo]     INT            NOT NULL,
    [CStaffId]     NVARCHAR (30)  NULL,
    [CReportTime]  DATETIME       NULL,
    [CComment]     NVARCHAR (255) NULL,
    [CStatus]      NVARCHAR (50)  NULL,
    PRIMARY KEY CLUSTERED ([CComponentNo] ASC, [CReportType] ASC, [CErrorNo] ASC),
    CONSTRAINT [FK8659AA9344F3BF8] FOREIGN KEY ([CComponentNo]) REFERENCES [dbo].[TComponent] ([CComponentNo]),
    CONSTRAINT [FK8659AA939E3C3476] FOREIGN KEY ([CStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[TTest] (
    [col01] VARCHAR (500) NULL,
    [col02] VARCHAR (500) NULL
);


GO

CREATE TABLE [dbo].[TLogSMS] (
    [CId]                      BIGINT          IDENTITY (1, 1) NOT NULL,
    [CBranchIdDepartCode]      NVARCHAR (20)   NULL,
    [CBranchIdDepartStartDate] DATETIME        NULL,
    [CType]                    NVARCHAR (255)  NOT NULL,
    [CSenderName]              NVARCHAR (50)   NULL,
    [CSenderPhone]             NVARCHAR (50)   NULL,
    [CReceiverName]            NVARCHAR (50)   NULL,
    [CReceiverPhone]           NVARCHAR (50)   NULL,
    [CContent]                 NVARCHAR (4000) NULL,
    [CSendTime]                DATETIME        NULL,
    [CIsSend]                  NVARCHAR (50)   NULL,
    [CRealSendTime]            DATETIME        NULL,
    [CTradeDate]               DATETIME        NULL,
    [CTradeNo]                 INT             NULL,
    [CDetailNo]                INT             NULL,
    [CIsLong]                  BIT             CONSTRAINT [DF_TLogSMS_CIsLong] DEFAULT ((0)) NULL,
    [CSmsReturnCode]           NVARCHAR (50)   NULL,
    [CSmsReturnName]           NVARCHAR (255)  NULL,
    CONSTRAINT [PK__TLogSMS__C1F8DC3917043817] PRIMARY KEY CLUSTERED ([CId] ASC),
    CONSTRAINT [FKE38804E957DD0802] FOREIGN KEY ([CBranchIdDepartCode], [CBranchIdDepartStartDate]) REFERENCES [dbo].[TFacility] ([CDepartCode], [CDepartStartDate])
);


GO

CREATE TABLE [dbo].[TStaffSalaryMonthDetail] (
    [CSalaryMonth]       DATETIME       NOT NULL,
    [CStaffId]           NVARCHAR (30)  NOT NULL,
    [CNo]                INT            NULL,
    [CBrDepartCode]      NVARCHAR (20)  NULL,
    [CBrDepartStartDate] DATETIME       NULL,
    [CDeductMonth]       DATETIME       NULL,
    [CBrNo]              INT            NULL,
    [CDeductType]        NVARCHAR (50)  NULL,
    [CDeductName]        NVARCHAR (255) NULL,
    [CMoney]             BIGINT         NULL,
    [CWorkTime]          INT            NULL,
    PRIMARY KEY CLUSTERED ([CSalaryMonth] ASC, [CStaffId] ASC),
    CONSTRAINT [FK1CF1913BAE0DC523] FOREIGN KEY ([CBrDepartCode], [CBrDepartStartDate], [CDeductMonth], [CBrNo]) REFERENCES [dbo].[TSalaryDeduct] ([CBrDepartCode], [CBrDepartStartDate], [CDeductMonth], [CNo]),
    CONSTRAINT [FK1CF1913BFA2B778C] FOREIGN KEY ([CSalaryMonth], [CStaffId]) REFERENCES [dbo].[TStaffSalaryMonth] ([CSalaryMonth], [CStaffId])
);


GO

CREATE TABLE [dbo].[TPdsFolder] (
    [COwnerStaffId]        NVARCHAR (30)  NOT NULL,
    [CFolderId]            INT            NOT NULL,
    [CDepth]               INT            NULL,
    [CName0]               NVARCHAR (255) NOT NULL,
    [CName1]               NVARCHAR (255) NULL,
    [CName2]               NVARCHAR (255) NULL,
    [CName3]               NVARCHAR (255) NULL,
    [CName4]               NVARCHAR (255) NULL,
    [CDisplayIndex]        INT            NULL,
    [CRemark]              NTEXT          NULL,
    [CAllowInherit]        BIT            NULL,
    [CAllowAccessFolder]   BIT            NULL,
    [CAllowCreateFile]     BIT            NULL,
    [CAllowModifyFileMine] BIT            NULL,
    [CAllowModifyFileAll]  BIT            NULL,
    [CAllowDeleteFileMine] BIT            NULL,
    [CAllowDeleteFileAll]  BIT            NULL,
    [CAllowViewLog]        BIT            NULL,
    [CParentOwnerStaffId]  NVARCHAR (30)  NULL,
    [CParentFolderId]      INT            NULL,
    PRIMARY KEY CLUSTERED ([COwnerStaffId] ASC, [CFolderId] ASC),
    CONSTRAINT [FK529FFC59C9F7D67C] FOREIGN KEY ([CParentOwnerStaffId], [CParentFolderId]) REFERENCES [dbo].[TPdsFolder] ([COwnerStaffId], [CFolderId])
);


GO

CREATE TABLE [dbo].[TMailFolder] (
    [CStaffId]        NVARCHAR (30)  NOT NULL,
    [CFolderId]       INT            NOT NULL,
    [CDepth]          INT            NOT NULL,
    [CName]           NVARCHAR (100) NOT NULL,
    [CDisplayIndex]   INT            NOT NULL,
    [CFolderType]     NVARCHAR (10)  NOT NULL,
    [CIsNotAlaram]    BIT            NOT NULL,
    [CIsHidden]       BIT            NOT NULL,
    [CRemark]         NTEXT          NULL,
    [CParentStaffId]  NVARCHAR (30)  NULL,
    [CParentFolderId] INT            NULL,
    [CIsShared]       BIT            NULL,
    [CPassword]       NVARCHAR (100) NULL,
    [CTmpString1]     NVARCHAR (255) NULL,
    [CTmpString2]     NVARCHAR (255) NULL,
    PRIMARY KEY CLUSTERED ([CStaffId] ASC, [CFolderId] ASC),
    CONSTRAINT [FKED4E2C793642E39B] FOREIGN KEY ([CParentStaffId], [CParentFolderId]) REFERENCES [dbo].[TMailFolder] ([CStaffId], [CFolderId])
);


GO

CREATE TABLE [dbo].[TToDoRefContent] (
    [CToDoId]    BIGINT NOT NULL,
    [CContentId] BIGINT NOT NULL,
    [CAddedSeq]  INT    NOT NULL,
    PRIMARY KEY CLUSTERED ([CToDoId] ASC, [CContentId] ASC),
    CONSTRAINT [FK5C1BFAE036C2262B] FOREIGN KEY ([CToDoId]) REFERENCES [dbo].[TToDo] ([CId]),
    CONSTRAINT [FK5C1BFAE09F2A2E67] FOREIGN KEY ([CContentId]) REFERENCES [dbo].[TContent] ([CContentId])
);


GO

CREATE TABLE [dbo].[TTestRate] (
    [CStdScore] INT NOT NULL,
    [CValue]    INT NOT NULL,
    CONSTRAINT [PK_TTestRate] PRIMARY KEY CLUSTERED ([CStdScore] ASC)
);


GO

CREATE TABLE [dbo].[THpProduct] (
    [CProductId]    NVARCHAR (30) NOT NULL,
    [CName0]        NVARCHAR (50) NULL,
    [CName1]        NVARCHAR (50) NULL,
    [CName2]        NVARCHAR (50) NULL,
    [CName3]        NVARCHAR (50) NULL,
    [CName4]        NVARCHAR (50) NULL,
    [CDisplayIndex] INT           NOT NULL,
    [CRemark]       NTEXT         NULL,
    PRIMARY KEY CLUSTERED ([CProductId] ASC)
);


GO

CREATE TABLE [dbo].[TTutorSalaryBillDetail] (
    [CTsbDepartCode]      NVARCHAR (20) NOT NULL,
    [CTsbDepartStartDate] DATETIME      NOT NULL,
    [CTsbStaffId]         NVARCHAR (30) NOT NULL,
    [CTsbBillBegin]       DATETIME      NOT NULL,
    [CTsbBillEnd]         DATETIME      NOT NULL,
    [CWorkDate]           DATETIME      NOT NULL,
    [CWorkTimeNormal]     FLOAT (53)    NULL,
    [CWorkCountTutoring]  FLOAT (53)    NULL,
    [CWorkCountPrepare]   FLOAT (53)    NULL,
    [CWorkTimeDailyCheck] FLOAT (53)    NULL,
    [CWorkTimeManual]     FLOAT (53)    NULL,
    PRIMARY KEY CLUSTERED ([CTsbDepartCode] ASC, [CTsbDepartStartDate] ASC, [CTsbStaffId] ASC, [CTsbBillBegin] ASC, [CTsbBillEnd] ASC, [CWorkDate] ASC),
    CONSTRAINT [FK88EB7404D2FB999C] FOREIGN KEY ([CTsbDepartCode], [CTsbDepartStartDate], [CTsbStaffId], [CTsbBillBegin], [CTsbBillEnd]) REFERENCES [dbo].[TTutorSalaryBill] ([CDepartCode], [CDepartStartDate], [CStaffId], [CBillBegin], [CBillEnd])
);


GO

CREATE TABLE [dbo].[TStaffConnectStatus] (
    [CStaffId]      NVARCHAR (30) NOT NULL,
    [CIsMessenger]  BIT           NULL,
    [CIsWebBrowser] BIT           NULL,
    [CIsMobile]     BIT           NULL,
    [CStatus]       NVARCHAR (20) NULL,
    PRIMARY KEY CLUSTERED ([CStaffId] ASC),
    CONSTRAINT [FKF3FB45F09E3C3476] FOREIGN KEY ([CStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[TManagementExamRecordDetail] (
    [CMerDepartCode]      NVARCHAR (20) NOT NULL,
    [CMerDepartStartDate] DATETIME      NOT NULL,
    [CMerStudentCode]     NVARCHAR (50) NOT NULL,
    [CMerNo]              INT           NOT NULL,
    [CDetailNo]           INT           NOT NULL,
    [CCommonGroupCode]    NVARCHAR (50) NULL,
    [CCommonCode]         NVARCHAR (50) NULL,
    [CExamScore]          FLOAT (53)    NULL,
    [CRankClass]          INT           NULL,
    [CRankSchool]         INT           NULL,
    [CScoreAverage]       INT           NULL,
    [CScoreDeviation]     INT           NULL,
    [CNemberClass]        INT           NULL,
    [CNemberSchool]       INT           NULL,
    [CRegDate]            DATETIME      NULL,
    [CRegStaffId]         NVARCHAR (30) NULL,
    PRIMARY KEY CLUSTERED ([CMerDepartCode] ASC, [CMerDepartStartDate] ASC, [CMerStudentCode] ASC, [CMerNo] ASC, [CDetailNo] ASC),
    CONSTRAINT [FK23E0F79819E633C8] FOREIGN KEY ([CRegStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK23E0F798C27C8E12] FOREIGN KEY ([CMerDepartCode], [CMerDepartStartDate], [CMerStudentCode], [CMerNo]) REFERENCES [dbo].[TManagementExamRecord] ([CStDepartCode], [CStDepartStartDate], [CStCode], [CNo]),
    CONSTRAINT [FK23E0F798C74495AF] FOREIGN KEY ([CCommonGroupCode], [CCommonCode]) REFERENCES [dbo].[TCommonCode] ([CCodeGroup], [CCode])
);


GO

CREATE TABLE [dbo].[TSurveyQuestion] (
    [CNo]          INT            IDENTITY (1, 1) NOT NULL,
    [CDirection]   BIT            NULL,
    [CQuestion]    NVARCHAR (255) NULL,
    [CComment]     NVARCHAR (255) NULL,
    [CAnswerType]  NVARCHAR (15)  NULL,
    [CChoide1]     NVARCHAR (255) NULL,
    [CChoide2]     NVARCHAR (255) NULL,
    [CChoide3]     NVARCHAR (255) NULL,
    [CChoide4]     NVARCHAR (255) NULL,
    [CChoide5]     NVARCHAR (255) NULL,
    [CChoide6]     NVARCHAR (255) NULL,
    [CPageNo]      INT            NULL,
    [CStarNo]      INT            NULL,
    [CSortNo]      INT            NULL,
    [CTestVersion] NVARCHAR (20)  NULL,
    CONSTRAINT [PK__TSurveyQ__C1FF675B1B68FA81] PRIMARY KEY CLUSTERED ([CNo] ASC)
);


GO

CREATE TABLE [dbo].[TSalesRequestDetail] (
    [CSalesRequest] INT            NOT NULL,
    [CDetailNo]     INT            NOT NULL,
    [CDetailStatus] NVARCHAR (255) NULL,
    [CAriseTime]    DATETIME       NULL,
    [CSubject]      NVARCHAR (255) NULL,
    [CArea]         NVARCHAR (255) NULL,
    [CContent]      NTEXT          NULL,
    [CManager]      NVARCHAR (30)  NULL,
    [CRegTime]      DATETIME       NOT NULL,
    [CEditTime]     DATETIME       NOT NULL,
    [CRegStaff]     NVARCHAR (30)  NULL,
    [CEditStaff]    NVARCHAR (30)  NULL,
    PRIMARY KEY CLUSTERED ([CSalesRequest] ASC, [CDetailNo] ASC),
    CONSTRAINT [FK_4xkaufcodq7l1qq8hohgnkmr5] FOREIGN KEY ([CManager]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_bkicvj1895rfn0u4eiwj3l6w5] FOREIGN KEY ([CSalesRequest]) REFERENCES [dbo].[TSalesRequest] ([CNo]),
    CONSTRAINT [FK_gdfiiar5jm924ufdnvk2k5gg1] FOREIGN KEY ([CRegStaff]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK_mh5sap4tuc4gextly7s13w033] FOREIGN KEY ([CEditStaff]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[TApprFolderStaffGrp] (
    [CFolderId]     INT           NOT NULL,
    [CStaffGroupId] NVARCHAR (20) NOT NULL,
    [COrder]        INT           NOT NULL,
    [CMaster]       BIT           NOT NULL,
    PRIMARY KEY CLUSTERED ([CFolderId] ASC, [CStaffGroupId] ASC),
    CONSTRAINT [FKB1A0E8B82F4C85C4] FOREIGN KEY ([CStaffGroupId]) REFERENCES [dbo].[TStaffGroup] ([CGroupId]),
    CONSTRAINT [FKB1A0E8B8D260A5E9] FOREIGN KEY ([CFolderId]) REFERENCES [dbo].[TApprFolder] ([CFolderId])
);


GO

CREATE TABLE [dbo].[TPenaltyReword] (
    [CPenaltyNo]          INT            IDENTITY (1, 1) NOT NULL,
    [CPenaltyType]        NVARCHAR (255) NULL,
    [CPenaltyName]        NVARCHAR (255) NULL,
    [CFromTime]           INT            NULL,
    [CToTime]             INT            NULL,
    [CBeforModify]        BIT            NULL,
    [CSubtractHelthCount] FLOAT (53)     NULL,
    [CPoint]              INT            NULL,
    [CProduct]            NVARCHAR (50)  NULL,
    PRIMARY KEY CLUSTERED ([CPenaltyNo] ASC),
    CONSTRAINT [FK_60339757lr0qys0rdmuaeiyad] FOREIGN KEY ([CProduct]) REFERENCES [dbo].[TProduct] ([CProductCode])
);


GO

CREATE TABLE [dbo].[TApprDocKind] (
    [CKindId]       INT            IDENTITY (1, 1) NOT NULL,
    [CAlias]        NVARCHAR (100) NULL,
    [CName0]        NVARCHAR (50)  NOT NULL,
    [CName1]        NVARCHAR (50)  NULL,
    [CName2]        NVARCHAR (50)  NULL,
    [CName3]        NVARCHAR (50)  NULL,
    [CName4]        NVARCHAR (50)  NULL,
    [CDepth]        INT            NOT NULL,
    [CDisplayIndex] INT            NULL,
    [CEnabled]      BIT            NOT NULL,
    [CRemark]       NTEXT          NULL,
    [CParentKindId] INT            NULL,
    PRIMARY KEY CLUSTERED ([CKindId] ASC),
    CONSTRAINT [FK_38nm63cpcl67toipp96u7u6pt] FOREIGN KEY ([CParentKindId]) REFERENCES [dbo].[TApprDocKind] ([CKindId])
);


GO

CREATE TABLE [dbo].[TPdsFileKeyword] (
    [CFileId]  BIGINT         NOT NULL,
    [CKeyword] NVARCHAR (100) NOT NULL,
    PRIMARY KEY CLUSTERED ([CFileId] ASC, [CKeyword] ASC),
    CONSTRAINT [FK555537C2179F08F9] FOREIGN KEY ([CFileId]) REFERENCES [dbo].[TPdsFile] ([CFileId])
);


GO

CREATE TABLE [dbo].[tb_Qna] (
    [it_QnaIdx]          INT            IDENTITY (1, 1) NOT NULL,
    [st_QnaTitle]        NVARCHAR (100) NOT NULL,
    [st_QnaContent]      NTEXT          NULL,
    [it_QnaCatIdx]       INT            NULL,
    [st_CStaffId]        NVARCHAR (30)  NOT NULL,
    [st_CFacilityCode]   NVARCHAR (20)  NULL,
    [it_QnaShare]        TINYINT        CONSTRAINT [DF_tb_Qna_int_QnaShare] DEFAULT ((0)) NOT NULL,
    [st_QnaStatus]       NVARCHAR (20)  NOT NULL,
    [dt_QnaMake]         DATETIME       NOT NULL,
    [dt_QnaDelete]       DATETIME       NULL,
    [dt_QnaUpdate]       DATETIME       NULL,
    [dt_QnaReplayUpdate] DATETIME       NULL,
    CONSTRAINT [PK_tb_Qna] PRIMARY KEY CLUSTERED ([it_QnaIdx] ASC),
    CONSTRAINT [FK_tb_Qna_tb_QnaCat] FOREIGN KEY ([it_QnaCatIdx]) REFERENCES [dbo].[tb_QnaCat] ([it_QnaCatIdx])
);


GO

CREATE TABLE [dbo].[TProjectCoop] (
    [CProjectId]   NVARCHAR (40) NOT NULL,
    [CType]        NVARCHAR (10) NOT NULL,
    [CCoCompanyId] BIGINT        NOT NULL,
    PRIMARY KEY CLUSTERED ([CProjectId] ASC, [CType] ASC, [CCoCompanyId] ASC),
    CONSTRAINT [FK_7i2ddwk1f5vy86wkosnmc6tl7] FOREIGN KEY ([CProjectId]) REFERENCES [dbo].[TProject] ([CProjectId]),
    CONSTRAINT [FK_gkekbuwhhjnpc6ha7liw2hq5s] FOREIGN KEY ([CCoCompanyId]) REFERENCES [dbo].[TPartener] ([CId])
);


GO

CREATE TABLE [dbo].[TDepartNowMember] (
    [CDepartCode]       NVARCHAR (20)  NOT NULL,
    [CDepartStartDate]  DATETIME       NOT NULL,
    [CStaffId]          NVARCHAR (30)  NOT NULL,
    [CMasterLevelType]  NVARCHAR (10)  NULL,
    [CMasterLevelCode]  NVARCHAR (10)  NULL,
    [CMasterLevelSeq]   INT            NULL,
    [CPositionType]     NVARCHAR (10)  NULL,
    [CPositionCode]     NVARCHAR (10)  NULL,
    [CPositionSeq]      INT            NULL,
    [CDutyType]         NVARCHAR (10)  NULL,
    [CDutyCode]         NVARCHAR (10)  NULL,
    [CDutySeq]          INT            NULL,
    [CRankType]         NVARCHAR (10)  NULL,
    [CRankCode]         NVARCHAR (10)  NULL,
    [CRankSeq]          INT            NULL,
    [CDutyOrder]        INT            NOT NULL,
    [CPositionOrder]    INT            NOT NULL,
    [CRankOrder]        INT            NOT NULL,
    [CMain]             BIT            NULL,
    [CMasterEmail]      NVARCHAR (255) NULL,
    [CDisplayOrder]     INT            NULL,
    [CBaseDate]         DATETIME       NULL,
    [CBaseTime]         DATETIME       NULL,
    [CCheckTime]        DATETIME       NULL,
    [CNotCntCheckTime]  DATETIME       NULL,
    [CNotMailCnt]       INT            NULL,
    [CNotMsgCnt]        INT            NULL,
    [CNotNewContentCnt] INT            NULL,
    [CNotToDoCnt]       INT            NULL,
    [CNotApprCnt]       INT            NULL,
    [CPayGradeOrder]    INT            NULL,
    PRIMARY KEY CLUSTERED ([CDepartCode] ASC, [CDepartStartDate] ASC, [CStaffId] ASC),
    CONSTRAINT [FK9910388815ED2F1B] FOREIGN KEY ([CRankType], [CRankCode], [CRankSeq]) REFERENCES [dbo].[TStaffLevel] ([CLevelType], [CLevelCode], [CLevelSeq]),
    CONSTRAINT [FK9910388848D9611] FOREIGN KEY ([CDepartCode], [CDepartStartDate]) REFERENCES [dbo].[TDepartment] ([CDepartCode], [CDepartStartDate]),
    CONSTRAINT [FK99103888512EDB85] FOREIGN KEY ([CDutyType], [CDutyCode], [CDutySeq]) REFERENCES [dbo].[TStaffLevel] ([CLevelType], [CLevelCode], [CLevelSeq]),
    CONSTRAINT [FK9910388853003878] FOREIGN KEY ([CPositionType], [CPositionCode], [CPositionSeq]) REFERENCES [dbo].[TStaffLevel] ([CLevelType], [CLevelCode], [CLevelSeq]),
    CONSTRAINT [FK991038889E3C3476] FOREIGN KEY ([CStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId]),
    CONSTRAINT [FK99103888B4BA342B] FOREIGN KEY ([CMasterLevelType], [CMasterLevelCode], [CMasterLevelSeq]) REFERENCES [dbo].[TStaffLevel] ([CLevelType], [CLevelCode], [CLevelSeq])
);


GO

CREATE TABLE [dbo].[TApprDocLog4Del] (
    [CId]            BIGINT        NOT NULL,
    [CApprDocId]     BIGINT        NOT NULL,
    [CStaffId]       NVARCHAR (30) NULL,
    [CActionType]    NVARCHAR (30) NOT NULL,
    [CActionTime]    DATETIME      NOT NULL,
    [CRemark]        NTEXT         NULL,
    [CPrevDocFileId] BIGINT        NULL,
    PRIMARY KEY CLUSTERED ([CId] ASC),
    CONSTRAINT [FK_4rgxgj5voq9l1i25av6xohrh] FOREIGN KEY ([CStaffId]) REFERENCES [dbo].[TStaff] ([CStaffId])
);


GO

CREATE TABLE [dbo].[tbl_new_mkt_db_notice] (
    [new_mkt_db_notice_idx] INT           IDENTITY (1, 1) NOT NULL,
    [branch_code]           NVARCHAR (20) NULL,
    [staff_code]            NVARCHAR (30) NULL,
    [phone]                 NVARCHAR (20) NULL,
    [ins_staff_code]        NVARCHAR (30) NULL,
    [ins_date]              DATETIME      NULL
);


GO

CREATE TABLE [dbo].[otbl_Lecture] (
    [lecture_idx]             INT            IDENTITY (1, 1) NOT NULL,
    [staff_id]                NVARCHAR (30)  NOT NULL,
    [main_teacher_id]         INT            NULL,
    [title]                   NVARCHAR (100) NULL,
    [target_director_yn]      CHAR (1)       NULL,
    [target_tmanager_yn]      CHAR (1)       NULL,
    [target_cmanager_yn]      NCHAR (10)     NULL,
    [lecture_mager_id]        INT            NULL,
    [lecture_category_id]     INT            NULL,
    [lecture_sub_category_id] INT            NULL,
    [lecture_type]            INT            NULL,
    [area_id]                 INT            NULL,
    [place_name]              NVARCHAR (50)  NULL,
    [place_address]           NVARCHAR (100) NULL,
    [limit_student]           INT            NULL,
    [charge_yn]               CHAR (1)       CONSTRAINT [DF_otbl_Lecture_charge_yn] DEFAULT ('N') NULL,
    [charge_amount]           INT            NULL,
    [reg_date]                DATETIME       NULL,
    [mod_date]                DATETIME       NULL,
    [lecture_startdate]       DATETIME       NULL,
    [lecture_enddate]         DATETIME       NULL,
    [total_credit]            FLOAT (53)     NULL,
    [lecture_closed_yn]       CHAR (1)       NULL,
    [curriculum]              NTEXT          NULL,
    [passCondition]           NVARCHAR (300) NULL,
    [recommend]               NVARCHAR (300) NULL,
    [head_recommend_yn]       CHAR (1)       NULL,
    [temp_save_yn]            CHAR (1)       NULL,
    [lecture_reg_yn]          CHAR (1)       NULL,
    [lecture_image]           IMAGE          NULL,
    [star_evg]                FLOAT (53)     NULL,
    [hit_count]               INT            CONSTRAINT [DF__otbl_Lect__hit_c__424CFDDA] DEFAULT ((0)) NULL,
    [del_yn]                  CHAR (1)       CONSTRAINT [DF_otbl_Lecture_del_yn] DEFAULT ('N') NULL,
    CONSTRAINT [PK_otbl_Lecture] PRIMARY KEY CLUSTERED ([lecture_idx] ASC),
    CONSTRAINT [FK_otbl_Lecture_otbl_Area] FOREIGN KEY ([area_id]) REFERENCES [dbo].[otbl_Area] ([area_idx]),
    CONSTRAINT [FK_otbl_Lecture_otbl_Category] FOREIGN KEY ([lecture_category_id]) REFERENCES [dbo].[otbl_Category] ([category_idx]),
    CONSTRAINT [FK_otbl_Lecture_otbl_Mager] FOREIGN KEY ([lecture_mager_id]) REFERENCES [dbo].[otbl_Mager] ([mager_idx])
);


GO

CREATE TABLE [dbo].[TEducationGroup] (
    [CCourseNo] INT            NOT NULL,
    [CEduNo]    INT            NOT NULL,
    [CNo]       INT            NOT NULL,
    [CName]     NVARCHAR (255) NULL,
    PRIMARY KEY CLUSTERED ([CCourseNo] ASC, [CEduNo] ASC, [CNo] ASC),
    CONSTRAINT [FKAA6ED12B2FB03371] FOREIGN KEY ([CCourseNo], [CEduNo]) REFERENCES [dbo].[TEducation] ([CCourseNo], [CNo])
);


GO

CREATE TABLE [dbo].[tb_QnaCat] (
    [it_QnaCatIdx]       INT            IDENTITY (1, 1) NOT NULL,
    [it_ParentQnaCatIdx] INT            NOT NULL,
    [st_QnaCatName]      NVARCHAR (30)  NOT NULL,
    [st_QnaKeyword]      NVARCHAR (100) NULL,
    [st_CStaffId]        NVARCHAR (30)  NULL,
    [it_QnaCatActive]    TINYINT        NULL,
    [dt_QnaCatMake]      DATETIME       NULL,
    [dt_QnaCatDelete]    DATETIME       NULL,
    CONSTRAINT [PK_tb_QnaCat] PRIMARY KEY CLUSTERED ([it_QnaCatIdx] ASC)
);


GO

CREATE TABLE [dbo].[TPdsStaffPerm] (
    [COwnerStaffId]        NVARCHAR (30) NOT NULL,
    [CFolderId]            INT           NOT NULL,
    [CStaffGroupId]        NVARCHAR (20) NOT NULL,
    [CAllowAccessFolder]   BIT           NULL,
    [CAllowCreateFile]     BIT           NULL,
    [CAllowModifyFileMine] BIT           NULL,
    [CAllowModifyFileAll]  BIT           NULL,
    [CAllowDeleteFileMine] BIT           NULL,
    [CAllowDeleteFileAll]  BIT           NULL,
    [CApplyOrder]          INT           NULL,
    [CAllowViewLog]        BIT           NULL,
    PRIMARY KEY CLUSTERED ([COwnerStaffId] ASC, [CFolderId] ASC, [CStaffGroupId] ASC),
    CONSTRAINT [FK741BCE252F4C85C4] FOREIGN KEY ([CStaffGroupId]) REFERENCES [dbo].[TStaffGroup] ([CGroupId]),
    CONSTRAINT [FK741BCE25FA664AA8] FOREIGN KEY ([COwnerStaffId], [CFolderId]) REFERENCES [dbo].[TPdsFolder] ([COwnerStaffId], [CFolderId])
);


GO

CREATE TABLE [dbo].[TTermScheduleTask] (
    [CTsDepartCode]      NVARCHAR (20)  NOT NULL,
    [CTsDepartStartDate] DATETIME       NOT NULL,
    [CTsStudentCode]     NVARCHAR (50)  NOT NULL,
    [CTsCode]            NVARCHAR (50)  NOT NULL,
    [CTaskNo]            INT            NOT NULL,
    [CSubject]           NVARCHAR (255) NULL,
    [CBookName]          NVARCHAR (255) NULL,
    [CStudyContent]      NVARCHAR (255) NULL,
    [CDivideType]        NVARCHAR (15)  NULL,
    [CTaskAmountPer]     INT            NULL,
    [CTaskAmountFrom]    INT            NULL,
    [CTaskAmountTo]      INT            NULL,
    [CTaskUnit]          NVARCHAR (255) NULL,
    [CRepeatType]        NVARCHAR (15)  NULL,
    PRIMARY KEY CLUSTERED ([CTsDepartCode] ASC, [CTsDepartStartDate] ASC, [CTsStudentCode] ASC, [CTsCode] ASC, [CTaskNo] ASC),
    CONSTRAINT [FK60C88BBCC33CA72E] FOREIGN KEY ([CTsDepartCode], [CTsDepartStartDate], [CTsStudentCode], [CTsCode]) REFERENCES [dbo].[TTermSchedule] ([CStDepartCode], [CStDepartStartDate], [CStCode], [CCode])
);


GO

CREATE TABLE [dbo].[TStudentTutoringLeave] (
    [CStdBrcDptCode]      NVARCHAR (20)  NOT NULL,
    [CStdBrcDptStartDate] DATETIME       NOT NULL,
    [CStdCode]            NVARCHAR (50)  NOT NULL,
    [CNo]                 INT            NOT NULL,
    [CEndDatePayment]     DATETIME       NULL,
    [CEndDateLeave]       DATETIME       NULL,
    [CRemainCommas]       INT            NULL,
    [CLeaveDate]          DATETIME       NULL,
    [CLeaveStatus]        NVARCHAR (50)  NULL,
    [CLeaveStartDate]     DATETIME       NULL,
    [CLeaveEndDate]       DATETIME       NULL,
    [CComment]            NVARCHAR (255) NULL,
    PRIMARY KEY CLUSTERED ([CStdBrcDptCode] ASC, [CStdBrcDptStartDate] ASC, [CStdCode] ASC, [CNo] ASC),
    CONSTRAINT [FKF4C38D24E901E078] FOREIGN KEY ([CStdBrcDptCode], [CStdBrcDptStartDate], [CStdCode], [CNo]) REFERENCES [dbo].[TStudentTutoring] ([CStdDepartCode], [CStdDepartStartDate], [CStdCode], [CNo])
);


GO

CREATE TABLE [dbo].[TLessons] (
    [CLessonsId] INT            NOT NULL,
    [CChapterId] INT            NULL,
    [CSeq]       INT            NULL,
    [CName]      NVARCHAR (255) NULL,
    [CVideo]     NVARCHAR (255) NULL,
    [CTno]       INT            NULL,
    [CLastFlag]  BIT            NULL,
    PRIMARY KEY CLUSTERED ([CLessonsId] ASC)
);


GO

CREATE VIEW dbo.VSMSUseage
AS
SELECT  CBranchIdDepartCode, CBranchIdDepartStartDate, CBranchName, CSendDate, SUM(CSMSCnt) AS CSMSCnt
FROM     (SELECT  X.CBranchIdDepartCode, X.CBranchIdDepartStartDate, Y.COpenName0 AS CBranchName, CONVERT(varchar(10), X.CSendTime, 23) AS CSendDate, 
                               CEILING(DATALENGTH(X.CContent) / 80.0) AS CSMSCnt
                FROM     dbo.TLogSMS AS X LEFT OUTER JOIN
                               dbo.TFacility AS Y ON X.CBranchIdDepartCode = Y.CDepartCode AND X.CBranchIdDepartStartDate = Y.CDepartStartDate) AS A
GROUP BY CBranchIdDepartCode, CBranchIdDepartStartDate, CBranchName, CSendDate

GO

/* =============================================
 Author:		김동우
 Create date: 2014-02-26
 Description:	RFID 연동 지점 출결 카드정보 뷰
 =============================================*/
CREATE VIEW dbo.VW_ATT_ATTEND
AS
SELECT  CLASS_CODE, USER_CARDNO, USER_SEQ, USER_NAME, ATT_FLAG, ATT_STATE, CASE WHEN ATB.ATT_STATE = 'I' AND 
               ATB.ATT_FLAG = '1' THEN CASE ATB.USER_GUBN WHEN 'P' THEN '일반|등원' ELSE '일반|출근' END WHEN ATB.ATT_STATE = 'I' AND 
               ATB.ATT_FLAG = '2' THEN CASE ATB.USER_GUBN WHEN 'P' THEN '자유|등원' ELSE '자유|출근' END WHEN ATB.ATT_STATE = 'I' AND 
               ATB.ATT_FLAG = '3' THEN '일반|지각' WHEN ATB.ATT_STATE = 'I' AND ATB.ATT_FLAG = '6' THEN '개별지도|등원' WHEN ATB.ATT_STATE = 'I' AND 
               ATB.ATT_FLAG = '8' THEN '개별지도|지각' WHEN ATB.ATT_STATE = 'I' AND 
               ATB.ATT_FLAG = '5' THEN CASE ATB.USER_GUBN WHEN 'P' THEN '재등원' ELSE '재출근' END WHEN ATB.ATT_STATE = 'O' AND 
               ATB.ATT_FLAG = '1' THEN CASE ATB.USER_GUBN WHEN 'P' THEN '일반|하원' ELSE '일반|퇴근' END WHEN ATB.ATT_STATE = 'O' AND 
               ATB.ATT_FLAG = '2' THEN CASE ATB.USER_GUBN WHEN 'P' THEN '자유|하원' ELSE '자유|퇴근' END WHEN ATB.ATT_STATE = 'O' AND 
               ATB.ATT_FLAG = '4' THEN '조퇴' WHEN ATB.ATT_STATE = 'O' AND ATB.ATT_FLAG = '6' THEN '개별지도|하원' WHEN ATB.ATT_STATE = 'O' AND 
               ATB.ATT_FLAG = '9' THEN '개별지도|조퇴' END AS ATT_FLAGNAME, USER_GUBN, StartPlanTime, EndPlanTime, StartTime, EndTime, LogStartTime, LogEndTime
FROM     (SELECT  CLASS_CODE, USER_CARDNO, USER_SEQ, USER_NAME, CASE WHEN ATA.RCT_STATE IS NOT NULL THEN ATA.RCT_STATE WHEN ATA.LST_STATE = 'I' OR
                               ATA.EndPlanTime < DATEADD(MI, + 10, GETDATE()) THEN 'O' ELSE 'I' END AS ATT_STATE, CASE WHEN ATA.RCT_FLAG IS NOT NULL 
                               THEN ATA.RCT_FLAG WHEN ATA.LST_STATE = 'I' OR
                               ATA.EndPlanTime < DATEADD(MI, + 10, GETDATE()) THEN CASE WHEN ATA.ATT_TYPE = 'FreeATD' THEN '2' WHEN ATA.EndPlanTime < DATEADD(MI, + 10, GETDATE()) 
                               THEN CASE WHEN ATA.ATT_TYPE = 'TTOnly' THEN '6' ELSE '1' END ELSE CASE WHEN ATA.ATT_TYPE = 'TTOnly' THEN '9' ELSE '4' END END ELSE CASE WHEN ATA.StartTime IS NOT
                                NULL THEN '5' WHEN ATA.ATT_TYPE = 'FreeATD' THEN '2' WHEN ATA.StartPlanTime > DATEADD(MI, - 5, GETDATE()) 
                               THEN CASE WHEN ATA.ATT_TYPE = 'TTOnly' THEN '6' ELSE '1' END ELSE CASE WHEN ATA.ATT_TYPE = 'TTOnly' THEN '8' ELSE '3' END END END AS ATT_FLAG, USER_GUBN, 
                               StartPlanTime, EndPlanTime, StartTime, EndTime, LogStartTime, LogEndTime
                FROM     (SELECT  ATD.CLASS_CODE, ATD.USER_CARDNO, CASE ATD.USER_GUBN WHEN 'P' THEN StudentCode ELSE StaffId END AS USER_SEQ, 
                                               CASE ATD.USER_GUBN WHEN 'P' THEN ST.CName ELSE SF.CName0 END AS USER_NAME, 
                                               CASE ATD.USER_GUBN WHEN 'P' THEN (CASE WHEN STP.StartPlanTime IS NOT NULL THEN STP.StartPlanTime ELSE STA.CStartPlanTime END) 
                                               ELSE SFA.CStartPlanTime END AS StartPlanTime, CASE ATD.USER_GUBN WHEN 'P' THEN (CASE WHEN STP.EndPlanTime IS NOT NULL 
                                               THEN STP.EndPlanTime ELSE STA.CEndPlanTime END) ELSE SFA.CEndPlanTime END AS EndPlanTime, 
                                               CASE ATD.USER_GUBN WHEN 'P' THEN CASE WHEN (CASE WHEN STP.StartPlanTime IS NOT NULL THEN STP.StartPlanTime ELSE STA.CStartPlanTime END) 
                                               IS NOT NULL THEN STA.CStartTime ELSE RLG.LogStartTime END ELSE CASE WHEN SFA.CStartPlanTime IS NOT NULL 
                                               THEN SFA.CStartTime ELSE RLG.LogStartTime END END AS StartTime, CASE ATD.USER_GUBN WHEN 'P' THEN CASE WHEN (CASE WHEN STP.EndPlanTime IS NOT NULL
                                                THEN STP.EndPlanTime ELSE STA.CEndPlanTime END) IS NOT NULL 
                                               THEN STA.CEndTime ELSE RLG.LogEndTime END ELSE CASE WHEN SFA.CEndPlanTime IS NOT NULL 
                                               THEN SFA.CEndTime ELSE RLG.LogEndTime END END AS EndTime, ATD.USER_GUBN, RLG.LogStartTime, RLG.LogEndTime, RCT.RCT_STATE, RCT.RCT_FLAG,
                                                   (SELECT  TOP (1) ATT_STATE
                                                    FROM     dbo.TB_ATT_UNIQUE WITH (nolock)
                                                    WHERE  (USER_CARDNO = ATD.USER_CARDNO) AND (CLASS_CODE = ATD.CLASS_CODE) AND (ATT_DATE > CONVERT(DATETIME, CONVERT(VARCHAR(20), 
                                                                   DATEADD(HH, - 3, GETDATE()), 23) + ' 03:00:00'))
                                                    ORDER BY ATT_DATE DESC) AS LST_STATE,
                                                   (SELECT  TOP (1) ATT_FLAG
                                                    FROM     dbo.TB_ATT_UNIQUE AS TB_ATT_UNIQUE_3 WITH (nolock)
                                                    WHERE  (USER_CARDNO = ATD.USER_CARDNO) AND (CLASS_CODE = ATD.CLASS_CODE) AND (ATT_DATE > CONVERT(DATETIME, CONVERT(VARCHAR(20), 
                                                                   DATEADD(HH, - 3, GETDATE()), 23) + ' 03:00:00'))
                                                    ORDER BY ATT_DATE DESC) AS LST_FLAG, CASE ATD.USER_GUBN WHEN 'P' THEN CASE WHEN ISNULL(STC.CounselCnt, 0) = 0 AND ISNULL(STT.TutoringCnt, 0) 
                                               > 0 AND (CASE WHEN STP.StartPlanTime IS NOT NULL THEN STP.StartPlanTime ELSE STA.CStartPlanTime END) IS NOT NULL 
                                               THEN 'TTOnly' WHEN (CASE WHEN STP.StartPlanTime IS NOT NULL THEN STP.StartPlanTime ELSE STA.CStartPlanTime END) IS NULL 
                                               THEN 'FreeATD' ELSE 'Normal' END ELSE CASE WHEN SFA.CStartPlanTime IS NULL THEN 'FreeATD' ELSE 'Normal' END END AS ATT_TYPE
                                FROM     (SELECT  REPLACE(REPLACE(REPLACE(FC.CFacilityCode, 'PX', ''), 'ECH', 'C'), 'EHM', 'H') AS CLASS_CODE, RF.CCardNumber AS USER_CARDNO, 
                                                               CASE RF.CCardType WHEN 'Student' THEN 'P' ELSE 'T' END AS USER_GUBN, RF.CBranchCode AS BranchCode, RF.CBranchStartDate AS BranchStartDate, 
                                                               RF.CStaffId AS StaffId, RF.CStudentBranchCode AS StudentBranchCode, RF.CStudentBranchStartDate AS StudentBranchStartDate, 
                                                               RF.CStudentCode AS StudentCode, RF.CSendType AS SendType
                                                FROM     dbo.TRFID AS RF WITH (nolock) LEFT OUTER JOIN
                                                               dbo.TRFIDAttend AS RA ON RF.CBranchCode = RF.CBranchCode AND RF.CBranchStartDate = RA.CBranchStartDate AND 
                                                               RF.CCardNumber = RA.CCardNumber LEFT OUTER JOIN
                                                               dbo.TFacility AS FC ON RF.CBranchCode = FC.CDepartCode AND RF.CBranchStartDate = FC.CDepartStartDate
                                                WHERE  (RF.CEnabled = '1') AND (RA.CChkAttend = '1')) AS ATD LEFT OUTER JOIN
                                               dbo.TStaff AS SF ON ATD.StaffId = SF.CStaffId LEFT OUTER JOIN
                                               dbo.TStudent AS ST ON ATD.StudentBranchCode = ST.CBranchCode AND ATD.StudentBranchStartDate = ST.CBranchStartDate AND 
                                               ATD.StudentCode = ST.CCode LEFT OUTER JOIN
                                                   (SELECT  CStduentBranchCode, CStduentBranchStartDate, CStduentcode, CDate, CStartPlanTime, CEndPlanTime, CPlanHours, CAttendType, CStartTime, CEndTime, 
                                                                   CHours, CAttendStatus, CSentLateMsg, CSentNotLeaveMsg
                                                    FROM     dbo.TStudentDailyAttend WITH (nolock)
                                                    WHERE  (CDate = CONVERT(VARCHAR(20), DATEADD(HH, - 3, GETDATE()), 23))) AS STA ON ATD.StudentBranchCode = STA.CStduentBranchCode AND 
                                               ATD.StudentBranchStartDate = STA.CStduentBranchStartDate AND ATD.StudentCode = STA.CStduentcode LEFT OUTER JOIN
                                                   (SELECT  CBranchCode, CBranchStartDate, CStudentCode, MIN(CStartTime) AS StartPlanTime, MAX(CEndTime) AS EndPlanTime
                                                    FROM     dbo.TTimeScheduleStudent WITH (nolock)
                                                    WHERE  (CDate = CONVERT(VARCHAR(20), DATEADD(HH, - 3, GETDATE()), 23)) AND (CScheduleType IN ('EdMt', 'EdSt'))
                                                    GROUP BY CBranchCode, CBranchStartDate, CStudentCode) AS STP ON ATD.StudentBranchCode = STP.CBranchCode AND 
                                               ATD.StudentBranchStartDate = STP.CBranchStartDate AND ATD.StudentCode = STP.CStudentCode LEFT OUTER JOIN
                                                   (SELECT  CBranchCode, CBranchStartDate, CStudentCode, COUNT(*) AS CounselCnt
                                                    FROM     dbo.TTimeScheduleStudent AS TTimeScheduleStudent_2 WITH (nolock)
                                                    WHERE  (CDate = CONVERT(VARCHAR(20), DATEADD(HH, - 3, GETDATE()), 23)) AND (CScheduleType <> 'EdSt')
                                                    GROUP BY CBranchCode, CBranchStartDate, CStudentCode) AS STC ON ATD.StudentBranchCode = STC.CBranchCode AND 
                                               ATD.StudentBranchStartDate = STC.CBranchStartDate AND ATD.StudentCode = STC.CStudentCode LEFT OUTER JOIN
                                                   (SELECT  CBranchCode, CBranchStartDate, CStudentCode, COUNT(*) AS TutoringCnt
                                                    FROM     dbo.TTimeScheduleStudent AS TTimeScheduleStudent_1 WITH (nolock)
                                                    WHERE  (CDate = CONVERT(VARCHAR(20), DATEADD(HH, - 3, GETDATE()), 23)) AND (CScheduleType = 'EdSt')
                                                    GROUP BY CBranchCode, CBranchStartDate, CStudentCode) AS STT ON ATD.StudentBranchCode = STT.CBranchCode AND 
                                               ATD.StudentBranchStartDate = STT.CBranchStartDate AND ATD.StudentCode = STT.CStudentCode LEFT OUTER JOIN
                                                   (SELECT  CStaffId, CDate, CBranchCode, CBranchStartDate, CStartPlanTime, CEndPlanTime, CPlanHours, CStartTime, CEndTime, CHours, CAttendStatus
                                                    FROM     dbo.TStaffDailyAttend WITH (nolock)
                                                    WHERE  (CDate = CONVERT(VARCHAR(20), DATEADD(HH, - 3, GETDATE()), 23))) AS SFA ON ATD.StaffId = SFA.CStaffId LEFT OUTER JOIN
                                                   (SELECT  CLASS_CODE, USER_CARDNO, MIN(ATT_DATE) AS LogStartTime, MAX(ATT_DATE) AS LogEndTime
                                                    FROM     dbo.TB_ATT_UNIQUE AS TB_ATT_UNIQUE_2 WITH (nolock)
                                                    WHERE  (ATT_DATE > CONVERT(DATETIME, CONVERT(VARCHAR(20), DATEADD(HH, - 3, GETDATE()), 23) + ' 03:00:00'))
                                                    GROUP BY CLASS_CODE, USER_CARDNO) AS RLG ON ATD.USER_CARDNO = RLG.USER_CARDNO AND ATD.CLASS_CODE = RLG.CLASS_CODE LEFT OUTER JOIN
                                                   (SELECT  CLASS_CODE, USER_CARDNO, ATT_STATE AS RCT_STATE, ATT_FLAG AS RCT_FLAG
                                                    FROM     dbo.TB_ATT_UNIQUE AS TB_ATT_UNIQUE_1 WITH (nolock)
                                                    WHERE  (ATT_DATE > DATEADD(MI, - 10, GETDATE()))) AS RCT ON ATD.USER_CARDNO = RCT.USER_CARDNO AND ATD.CLASS_CODE = RCT.CLASS_CODE) AS ATA) 
               AS ATB

GO

CREATE NONCLUSTERED INDEX [IX_TStudentCounsel]
    ON [dbo].[TStudentCounsel]([CScCode] ASC, [CNo] DESC);


GO

CREATE NONCLUSTERED INDEX [IDXStaffDepartHistory]
    ON [dbo].[TStaffDepartHistory]([CStaffId] ASC, [CHistoryStartDate] ASC, [CHistoryEndDate] ASC, [CMain] ASC, [CDepartCode] ASC, [CDepartStartDate] ASC);


GO

CREATE NONCLUSTERED INDEX [IX_CManager]
    ON [dbo].[TStudentTutoring]([CManager] ASC);


GO

CREATE NONCLUSTERED INDEX [IX_TStudentCounsel_1]
    ON [dbo].[TStudentCounsel]([CScDepartCode] ASC, [CScDepartStartDate] ASC, [CScCode] ASC, [CStartDate] ASC, [CEndDate] ASC);


GO

CREATE NONCLUSTERED INDEX [IDXStaffLoginID]
    ON [dbo].[TStaff]([CLoginId] ASC, [CStaffId] ASC, [CLoginPw] ASC, [CLoginType] ASC);


GO

CREATE NONCLUSTERED INDEX [IDXMessageParticipant2]
    ON [dbo].[TMessageParticipant]([CStaffId] ASC, [CCreateTime] ASC, [CParticipantId] ASC, [CInTime] ASC, [COutTime] ASC, [CDeletedTime] ASC);


GO

CREATE NONCLUSTERED INDEX [IDXTMenuCachedStaff]
    ON [dbo].[TMenuCachedStaff]([CStaffId] ASC, [CCheckedDateTime] ASC, [CIpGroupId] ASC);


GO

CREATE NONCLUSTERED INDEX [IX_TB_ATT_UNIQUE_1]
    ON [dbo].[TB_ATT_UNIQUE]([ATT_DATE] ASC);


GO

CREATE NONCLUSTERED INDEX [IX_TStudentTutoring_BillCollect]
    ON [dbo].[TStudentTutoring]([CPayDate] ASC)
    INCLUDE([CStdDepartCode], [CStdDepartStartDate], [CStdCode], [CNo], [CPayCommas], [CStartDate], [CEndDate], [CBillPrice], [CPayPrice], [CChangePriceReason]);


GO

CREATE NONCLUSTERED INDEX [IX_TManagementResult]
    ON [dbo].[TManagementResult]([CStCode] ASC, [CManageDate] ASC);


GO

CREATE NONCLUSTERED INDEX [IX_TLogSMS]
    ON [dbo].[TLogSMS]([CSendTime] ASC);


GO

CREATE NONCLUSTERED INDEX [IX_TLogSMS_1]
    ON [dbo].[TLogSMS]([CReceiverPhone] ASC, [CSendTime] ASC);


GO

CREATE NONCLUSTERED INDEX [IDX_LoginType_CutDate]
    ON [dbo].[TStaff]([CLoginType] ASC, [COutDate] ASC)
    INCLUDE([CStaffId]);


GO

CREATE NONCLUSTERED INDEX [IDXStaffDepartHistoryDuration]
    ON [dbo].[TStaffDepartHistory]([CHistoryStartDate] ASC, [CHistoryEndDate] ASC, [CDepartCode] ASC, [CDepartStartDate] ASC, [CStaffId] ASC, [CMain] ASC);


GO

CREATE NONCLUSTERED INDEX [IX_CManager]
    ON [dbo].[TStudentCounsel]([CManager] ASC);


GO

CREATE NONCLUSTERED INDEX [MMS_LOG_IDX2]
    ON [dbo].[MMS_LOG]([REQDATE] ASC);


GO

CREATE NONCLUSTERED INDEX [IDXMessagePush]
    ON [dbo].[TMessageParticipant]([CPushRemainCount] ASC, [CLastTime] ASC, [CParticipantId] ASC, [CStaffId] ASC, [CCreateTime] ASC, [CInTime] ASC, [CConnOutTime] ASC);


GO

CREATE NONCLUSTERED INDEX [IX_TStudentCounsel_BillCollect]
    ON [dbo].[TStudentCounsel]([CPayDate] ASC)
    INCLUDE([CScDepartCode], [CScDepartStartDate], [CScCode], [CNo], [CAttendType], [CStartDate], [CEndDate], [CBillPrice], [CTotalPrice], [CChangePriceReason]);


GO

CREATE NONCLUSTERED INDEX [IDX_StartDate_EndDate]
    ON [dbo].[TStudentTutoring]([CStartDate] ASC, [CEndDate] ASC)
    INCLUDE([CStdDepartCode], [CStdCode]);


GO

CREATE NONCLUSTERED INDEX [IDXContentFacility]
    ON [dbo].[TContent]([CLastFacilityCode] ASC, [CLastFacilityStartDate] ASC, [CRegTime] DESC, [CContentId] ASC);


GO

CREATE NONCLUSTERED INDEX [IX_TStudent_TstudentCounsel]
    ON [dbo].[TStudent]([CBranchCode] ASC, [CBranchStartDate] ASC, [CCode] ASC, [CLastCounselNo] ASC);


GO

CREATE NONCLUSTERED INDEX [IX_TTradeBillCollect_CCollecPrice]
    ON [dbo].[TTradeBillCollect]([CCollecPrice] ASC)
    INCLUDE([CCollectNo], [CCollecStatus], [CDefaultPrice], [CSiDepartCode], [CSiDepartStartDate], [CSiCode], [CSiNo]);


GO

CREATE NONCLUSTERED INDEX [DL_MMS_LOG_IDX1]
    ON [dbo].[DL_MMS_LOG]([REQDATE] ASC);


GO

CREATE NONCLUSTERED INDEX [IX_TStudent_TstudentTutoring]
    ON [dbo].[TStudent]([CBranchCode] ASC, [CBranchStartDate] ASC, [CCode] ASC, [CLastTutoringNo] ASC);


GO

CREATE NONCLUSTERED INDEX [IX_SC_TRAN]
    ON [dbo].[SC_TRAN]([TR_SendDate] ASC);


GO

CREATE NONCLUSTERED INDEX [DL_MMS_LOG_IDX2]
    ON [dbo].[DL_MMS_LOG]([STATUS] ASC);


GO

CREATE NONCLUSTERED INDEX [MMS_MSG_IDX4]
    ON [dbo].[MMS_MSG]([STATUS] ASC);


GO

CREATE NONCLUSTERED INDEX [IDX_TTutoringDayClose_DeptCloseDate]
    ON [dbo].[TTutoringDayClose]([CDepartCode] ASC, [CDepartStartDate] ASC, [CCloseDate] ASC)
    INCLUDE([CCloseBranch], [CCloseHeadOffice]);


GO

CREATE NONCLUSTERED INDEX [IDXTimeScheduleDayId]
    ON [dbo].[TTimeSchedule]([CDayId] ASC);


GO

CREATE NONCLUSTERED INDEX [IDXMailAddress]
    ON [dbo].[TMailAddress]([CMailUniqueId] ASC, [CMailId] ASC, [CSeq] ASC, [CRollbackDateTime] ASC);


GO

CREATE NONCLUSTERED INDEX [DL_KAKAO_MSG_IDX1]
    ON [dbo].[DL_KAKAO_MSG]([STATUS] ASC, [REQDATE] ASC);


GO

CREATE NONCLUSTERED INDEX [IDXVirtualUserTableUbiCode]
    ON [dbo].[VirtualUserTable]([staff_code] ASC, [staff_type] ASC);


GO

CREATE NONCLUSTERED INDEX [NonClusteredIndex-20160114-191308]
    ON [dbo].[SC_LOG_BAKCUP]([TR_ETC1] ASC, [TR_ETC2] ASC, [TR_ETC3] ASC);


GO

CREATE NONCLUSTERED INDEX [IX_TStudentTutoring]
    ON [dbo].[TStudentTutoring]([CStdCode] ASC, [CNo] DESC);


GO

CREATE NONCLUSTERED INDEX [IDX_TMenuCachedStaff_Time]
    ON [dbo].[TMenuCachedStaff]([CCheckedDateTime] ASC, [CStaffId] ASC, [CIpGroupId] ASC, [CMenuId] ASC);


GO

CREATE NONCLUSTERED INDEX [IX_SC_TRAN_1]
    ON [dbo].[SC_TRAN]([TR_Phone] ASC, [TR_SendDate] ASC);


GO

CREATE NONCLUSTERED INDEX [IDX_TMenuCachedStaff_MenuId]
    ON [dbo].[TMenuCachedStaff]([CMenuId] ASC, [CStaffId] ASC, [CIpGroupId] ASC);


GO

CREATE NONCLUSTERED INDEX [IDXStaffOption]
    ON [dbo].[TStaffOption]([COptionCode] ASC, [CStaffId] ASC);


GO

CREATE NONCLUSTERED INDEX [IX_SC_LOG_BAKUP_2]
    ON [dbo].[SC_LOG_BAKCUP]([TR_SENDDATE] ASC);


GO

CREATE NONCLUSTERED INDEX [DL_MMS_LOG_IDX3]
    ON [dbo].[DL_MMS_LOG]([PHONE] ASC);


GO

CREATE NONCLUSTERED INDEX [IDXMessageParticipant]
    ON [dbo].[TMessageParticipant]([CParticipantId] ASC, [CLastTime] ASC, [CIsLock] ASC, [CStaffId] ASC, [CCreateTime] ASC, [CInTime] ASC);


GO

CREATE NONCLUSTERED INDEX [IX_TB_ATT_UNIQUE]
    ON [dbo].[TB_ATT_UNIQUE]([USER_CARDNO] ASC, [ATT_DATE] ASC, [ATT_STATE] ASC);


GO

CREATE NONCLUSTERED INDEX [IDXContentRegTime]
    ON [dbo].[TContent]([CRegTime] DESC, [CLastFacilityCode] ASC, [CLastFacilityStartDate] ASC, [CContentId] ASC);


GO

CREATE NONCLUSTERED INDEX [IX_TTradeBillCollect_Counsel]
    ON [dbo].[TTradeBillCollect]([CScDepartCode] ASC, [CScDepartStartDate] ASC, [CScCode] ASC, [CScNo] ASC);


GO

CREATE NONCLUSTERED INDEX [IX_TTimeScheduleStudent]
    ON [dbo].[TTimeScheduleStudent]([CDate] ASC, [CScheduleType] ASC);


GO

CREATE NONCLUSTERED INDEX [IDX_CQuestionNo_TestInfo]
    ON [dbo].[TTestSurvey]([CQuestionNo] ASC)
    INCLUDE([CBranchCode], [CBranchStartDate], [CCode], [CNo]);


GO

CREATE NONCLUSTERED INDEX [IDXMailBook]
    ON [dbo].[TMail]([CType] ASC, [CSentDateTime] ASC, [CDelDateTimeByStaff] ASC, [CBookedDateTime] ASC, [CMailId] ASC);


GO

CREATE NONCLUSTERED INDEX [IDXMailDeleted]
    ON [dbo].[TMail]([CDelDateTimeByStaff] ASC, [CIsBigMail] ASC, [CMailId] ASC);


GO

CREATE NONCLUSTERED INDEX [IDX_TContentPopup]
    ON [dbo].[TContentPopup]([CStartDate] ASC, [CEndDate] ASC, [CContentId] ASC);


GO

CREATE NONCLUSTERED INDEX [IDXToDoStaffTargetTime]
    ON [dbo].[TToDoStaff]([CStaffId] ASC, [CTargetTime] DESC, [CState] ASC, [CToDoId] ASC);


GO

CREATE NONCLUSTERED INDEX [IDXContentDeletedTime]
    ON [dbo].[TContent]([CBoardId] ASC, [CDeletedTime] DESC, [CContentId] DESC);


GO

CREATE NONCLUSTERED INDEX [IDXActiveSessionStaff]
    ON [dbo].[TActiveSession]([CStaffId] ASC, [CConnectType] ASC, [CLastAccessDateTime] ASC);


GO

CREATE NONCLUSTERED INDEX [IDXPdsFolder]
    ON [dbo].[TPdsFolder]([COwnerStaffId] ASC, [CParentFolderId] ASC, [CFolderId] ASC);


GO

CREATE NONCLUSTERED INDEX [IDXPostNoKoreaDongName2]
    ON [dbo].[TGlobalPostNo4Korea]([CSiDo] ASC, [CEupMyunDong] ASC);


GO

CREATE NONCLUSTERED INDEX [IDXTAnniversary]
    ON [dbo].[TAnniversary]([CStartDate] ASC, [CEndDate] ASC, [CStartYear] ASC, [CEndYear] ASC, [CIsComAnni] ASC, [CStaffId] ASC);


GO

CREATE NONCLUSTERED INDEX [IDXContentWritenTime]
    ON [dbo].[TContent]([CBoardId] ASC, [CLastModifiedTime] DESC, [CContentId] DESC, [CDeletedTime] ASC);


GO

CREATE NONCLUSTERED INDEX [IDXDepartEmail]
    ON [dbo].[TDepartment]([CEmailAddress] ASC);


GO

CREATE NONCLUSTERED INDEX [IX_CFirst_CCalDate]
    ON [dbo].[TAnalytics_Student_Count]([CFirstDate] ASC, [CCalcDate] ASC);


GO

CREATE NONCLUSTERED INDEX [IDXPostNoKoreaDongName]
    ON [dbo].[TGlobalPostNo4Korea]([CSiDo] ASC, [CHaengJungDongName] ASC);


GO

CREATE NONCLUSTERED INDEX [IDXMailNotRead]
    ON [dbo].[TMail]([CStaffId] ASC, [CDelDateTimeByStaff] ASC, [CType] ASC, [CReadState] ASC, [CFolderId] ASC);


GO

CREATE NONCLUSTERED INDEX [IDXSsewComplaintCntRetSub]
    ON [dbo].[TComplaintContentResult]([CContentId] ASC, [CContentSeq] ASC);


GO

CREATE NONCLUSTERED INDEX [IX_TTimeScheduleStudent_1]
    ON [dbo].[TTimeScheduleStudent]([CBranchCode] ASC, [CBranchStartDate] ASC, [CStudentCode] ASC, [CDate] ASC, [CScheduleType] ASC);


GO

CREATE NONCLUSTERED INDEX [IDXMailFolder]
    ON [dbo].[TMail]([CStaffId] ASC, [CFolderId] ASC, [CDelDateTimeByStaff] ASC, [CBasicDateTime] ASC, [CMailId] ASC);


GO

CREATE NONCLUSTERED INDEX [IX_TActiveSession]
    ON [dbo].[TActiveSession]([CSessionId] ASC, [CStaffId] ASC, [CConnectType] ASC);


GO

CREATE NONCLUSTERED INDEX [DL_SMS_LOG_IDX3]
    ON [dbo].[DL_SMS_LOG]([TR_PHONE] ASC);


GO

CREATE NONCLUSTERED INDEX [DL_SMS_MSG_IDX1]
    ON [dbo].[DL_SMS_MSG]([TR_SENDSTAT] ASC);


GO

CREATE NONCLUSTERED INDEX [IDX_StaffId]
    ON [dbo].[TDepartNowMember]([CStaffId] ASC);


GO

CREATE NONCLUSTERED INDEX [DL_GMS_MSG_IDX1]
    ON [dbo].[DL_GMS_MSG]([TR_SENDSTAT] ASC);


GO

CREATE NONCLUSTERED INDEX [IDXContentTopContent]
    ON [dbo].[TContent]([CBoardId] ASC, [CTopContent] ASC);


GO

CREATE NONCLUSTERED INDEX [IX_TRFIDAttend]
    ON [dbo].[TRFIDAttend]([CBranchStartDate] ASC, [CCardNumber] ASC, [CChkAttend] ASC);


GO

CREATE NONCLUSTERED INDEX [IX_TTradeBillCollect_Test]
    ON [dbo].[TTradeBillCollect]([CSiDepartCode] ASC, [CSiDepartStartDate] ASC, [CSiCode] ASC, [CSiNo] ASC);


GO

CREATE NONCLUSTERED INDEX [IDXSsewComplaintCommentFK]
    ON [dbo].[TComplaintComment]([CContentId] ASC, [CContentSeq] ASC);


GO

CREATE NONCLUSTERED INDEX [IDXToDoStaffEndTime]
    ON [dbo].[TToDoStaff]([CStaffId] ASC, [CEndTime] DESC, [CState] ASC, [CToDoId] ASC);


GO

CREATE NONCLUSTERED INDEX [DL_MMS_MSG_IDX1]
    ON [dbo].[DL_MMS_MSG]([STATUS] ASC);


GO

CREATE NONCLUSTERED INDEX [IDXMailParent]
    ON [dbo].[TMail]([CParentMailId] ASC, [CMailId] ASC);


GO

CREATE NONCLUSTERED INDEX [MMS_MSG_IDX3]
    ON [dbo].[MMS_MSG]([PHONE] ASC);


GO

CREATE NONCLUSTERED INDEX [DL_SMS_LOG_IDX1]
    ON [dbo].[DL_SMS_LOG]([TR_SENDDATE] ASC);


GO

CREATE NONCLUSTERED INDEX [IX_TRFID]
    ON [dbo].[TRFID]([CCardNumber] ASC, [CEnabled] ASC);


GO

CREATE NONCLUSTERED INDEX [IX_TTradeBillCollect_Tutoring]
    ON [dbo].[TTradeBillCollect]([CStDepartCode] ASC, [CStDepartStartDate] ASC, [CStCode] ASC, [CStNo] ASC);


GO

CREATE NONCLUSTERED INDEX [IX_TStudentDailyAttend]
    ON [dbo].[TStudentDailyAttend]([CDate] ASC);


GO

CREATE NONCLUSTERED INDEX [IDXTimeScheduleDay1]
    ON [dbo].[TTimeScheduleDay]([CFacilityCode] ASC, [CFacilityStartDate] ASC, [CStudyDate] ASC);


GO

CREATE NONCLUSTERED INDEX [DL_SMS_LOG_IDX2]
    ON [dbo].[DL_SMS_LOG]([TR_SENDSTAT] ASC);


GO

CREATE NONCLUSTERED INDEX [IDXApprDocBaseTime]
    ON [dbo].[TApprDoc]([CBaseTime] DESC, [CDocId] DESC, [CStatus] ASC, [CWriterId] ASC);


GO

CREATE NONCLUSTERED INDEX [IDXPdsFile]
    ON [dbo].[TPdsFile]([COwnerStaffId] ASC, [CFolderId] ASC, [CFileId] ASC);


GO

CREATE NONCLUSTERED INDEX [IDXToDoOrigin]
    ON [dbo].[TToDo]([COriginId] ASC, [CId] ASC);


GO

CREATE NONCLUSTERED INDEX [IDXMessageFile]
    ON [dbo].[TMessage]([CFile] ASC, [CStaffId] ASC, [CCreateTime] ASC, [CMessageTime] ASC);


GO

CREATE NONCLUSTERED INDEX [IDXToDoWrittenTIme]
    ON [dbo].[TToDo]([CId] ASC, [CWrittenTime] ASC, [CState] ASC);


GO

CREATE NONCLUSTERED INDEX [MMS_LOG_IDX3]
    ON [dbo].[MMS_LOG]([PHONE] ASC);


GO

CREATE NONCLUSTERED INDEX [IDX_StartDate_EndDate]
    ON [dbo].[TStudentCounsel]([CStartDate] ASC, [CEndDate] ASC)
    INCLUDE([CScDepartCode], [CScCode]);


GO

CREATE NONCLUSTERED INDEX [IDXContentDefault]
    ON [dbo].[TContent]([CBoardId] ASC, [CMainContentId] DESC, [CSeq] ASC, [CContentGroupTime] DESC, [CDeletedTime] ASC);


GO

CREATE NONCLUSTERED INDEX [IDXStaffLevelHistory]
    ON [dbo].[TStaffLevelHistory]([CStaffId] ASC, [CStartDate] ASC, [CEndDate] ASC, [CMain] ASC, [CLevelType] ASC, [CLevelCode] ASC, [CLevelSeq] ASC);


GO

CREATE NONCLUSTERED INDEX [IDXStaffLevelHistoryDuration]
    ON [dbo].[TStaffLevelHistory]([CStartDate] ASC, [CEndDate] ASC, [CLevelType] ASC, [CLevelCode] ASC, [CLevelSeq] ASC, [CStaffId] ASC);


GO

CREATE NONCLUSTERED INDEX [IDX_TutoringPlan_Week_02]
    ON [dbo].[TTutoringPlan]([CDepartCode] ASC, [CDepartStartDate] ASC, [CStCode] ASC);


GO

CREATE NONCLUSTERED INDEX [IDX_TTutoringPlan_PlanDateStCode]
    ON [dbo].[TTutoringPlan]([CStDepartCode] ASC, [CPlanDate] ASC, [CStCode] ASC);


GO

CREATE NONCLUSTERED INDEX [IDX_TutoringPlan_Week]
    ON [dbo].[TTutoringPlan]([CDepartCode] ASC, [CDepartStartDate] ASC, [CPlanDate] ASC);


GO

CREATE NONCLUSTERED INDEX [IDXPerpetualCalendarLunar]
    ON [dbo].[TPerpetualCalendar]([CLunar] ASC, [CLeap] ASC, [CSolar] ASC);


GO

CREATE NONCLUSTERED INDEX [IDXSchedule]
    ON [dbo].[TSchedule]([CStartDateTime] ASC, [CEndDateTime] ASC, [CIsAllDay] ASC, [CId] ASC);


GO

CREATE NONCLUSTERED INDEX [IX_TManagementComponent]
    ON [dbo].[TManagementComponent]([CStCode] ASC, [CNo] DESC);


GO

CREATE NONCLUSTERED INDEX [IX_SC_LOG]
    ON [dbo].[SC_LOG]([TR_SENDDATE] ASC);


GO

CREATE NONCLUSTERED INDEX [IDX_Schedule_Type]
    ON [dbo].[TSchedule]([CScheduleType] ASC)
    INCLUDE([CId]);


GO

CREATE NONCLUSTERED INDEX [IDXScheduleToDoStaff]
    ON [dbo].[TSchedule]([CToDoId] ASC, [CToDoStaffId] ASC, [CId] ASC);


GO

CREATE NONCLUSTERED INDEX [IX_SC_LOG_1]
    ON [dbo].[SC_LOG]([TR_PHONE] ASC, [TR_SENDDATE] ASC);


GO

CREATE NONCLUSTERED INDEX [IDXDepartmentDuration]
    ON [dbo].[TDepartment]([CDepartStartDate] ASC, [CEndDate] ASC, [CDepartCode] ASC);


GO

CREATE NONCLUSTERED INDEX [IDXApprDocByDocNo]
    ON [dbo].[TApprDoc]([CDocNo] ASC, [CDocId] ASC);


GO

CREATE NONCLUSTERED INDEX [IDXToDoStaffBaseTime]
    ON [dbo].[TToDoStaff]([CStaffId] ASC, [CBaseTime] DESC, [CState] ASC, [CToDoId] ASC);


GO

CREATE NONCLUSTERED INDEX [MMS_MSG_IDX2]
    ON [dbo].[MMS_MSG]([REQDATE] ASC);


GO

CREATE NONCLUSTERED INDEX [IDXContentResource]
    ON [dbo].[TContentResource]([CResourceId] ASC, [CStartTime] ASC, [CEndTime] ASC);


GO

CREATE NONCLUSTERED INDEX [IDXPostNoKoreaRoadName]
    ON [dbo].[TGlobalPostNo4Korea]([CSiDo] ASC, [CRoadName] ASC);


GO

CREATE NONCLUSTERED INDEX [IDXPostNoKoreaBuildingName]
    ON [dbo].[TGlobalPostNo4Korea]([CSiDo] ASC, [CBuildingName] ASC);


GO

CREATE NONCLUSTERED INDEX [IDXToDoParentToDo]
    ON [dbo].[TToDo]([CParentToDoId] ASC, [CId] ASC);


GO

CREATE NONCLUSTERED INDEX [IDXApprDocByParent]
    ON [dbo].[TApprDoc]([CParentDocId] ASC, [CDocId] ASC);


GO

CREATE NONCLUSTERED INDEX [IDXToDoStaffState]
    ON [dbo].[TToDoStaff]([CStaffId] ASC, [CState] ASC, [CToDoId] ASC);


GO

CREATE NONCLUSTERED INDEX [IDXContentGroup]
    ON [dbo].[TContent]([CMainContentId] ASC, [CContentId] ASC, [CContentGroupTime] ASC);


GO

CREATE NONCLUSTERED INDEX [IDXToDoApprovedDoc]
    ON [dbo].[TToDo]([CApprovedDocId] ASC, [CId] ASC);


GO

CREATE NONCLUSTERED INDEX [IDXApprDocByReWriteOrg]
    ON [dbo].[TApprDoc]([CReWriteOrgId] ASC, [CDocId] ASC);


GO

CREATE FULLTEXT CATALOG [ubiFts]
    WITH ACCENT_SENSITIVITY = ON
    AS DEFAULT
    AUTHORIZATION [dbo];


GO

CREATE FULLTEXT INDEX ON [dbo].[TContent]
    ([CBody] LANGUAGE 1042)
    KEY INDEX [PK__TContent__F4328CCE59C55456]
    ON [ubiFts];


GO

CREATE FULLTEXT INDEX ON [dbo].[TMail]
    ([CContentBody] LANGUAGE 1042)
    KEY INDEX [PK__TMail__F94351A129E1370A]
    ON [ubiFts];


GO

CREATE FULLTEXT INDEX ON [dbo].[TApprDoc]
    ([CBody1] LANGUAGE 1042, [CTmpBody2] LANGUAGE 1042, [CTmpBody3] LANGUAGE 1042, [CTmpBody4] LANGUAGE 1042, [CTmpAdMText1] LANGUAGE 1042, [CTmpAdMText2] LANGUAGE 1042, [CTmpAdMText3] LANGUAGE 1042, [CTmpAdMText4] LANGUAGE 1042, [CTmpAdMText5] LANGUAGE 1042)
    KEY INDEX [PK__TApprDoc__33A9D9B1398D8EEE]
    ON [ubiFts];


GO

CREATE USER [emsadmin];


GO

ALTER ROLE [db_owner] ADD MEMBER [emsadmin];


GO

create FUNCTION [dbo].[FN_splitValue](@pTarget NVARCHAR(MAX), @pDelim CHAR(1), @pIdxGet SMALLINT, @pFlag NVARCHAR(10) = '')
RETURNS NVARCHAR(255)
AS
BEGIN
    ------------------------------------------------------------------------------
    -- 작성자   : 김길명
    -- 작성시작 : 2014-08-20
    -- 최종수정 : 
    ------------------------------------------------------------------------------
    -- 용도     : 특정 구분자로 구분된 문자열 자르기
    -- 사용파일 : 다수
    --=========================================================================
    -- dbo.FN_splitValue 함수 사용법 SELECT dbo.FN_splitValue('2014.8.7', '.', 3, 'D')
    ---------------------------------------------------------------------------
    -- '017-215-5065' 라는 문자열을 '-' 기준으로 자르고자 할 때,
    ---------------------------------------------------------------------------
    -- dbo.FN_splitValue('[원본문자열]','[구분자(1자리)]',[위치], [옵션]("."으로 구분된 날자의 경우 2,3번째 월과 일의 자릿수 체크해서 0을 붙혀주기))
    ---------------------------------------------------------------------------
    -- dbo.FN_splitValue('017-215-5065', '-', 1) ------- output -----> '017'
    -- dbo.FN_splitValue('017-215-5065', '-', 2) ------- output -----> '215'
    -- dbo.FN_splitValue('017-215-5065', '-', 3) ------- output -----> '5065'
    --=========================================================================
 
    DECLARE
        @dIdxCurr    SMALLINT,
        @dCutLen     INT,
        @dCut       NVARCHAR(255),
        @dFindSuccess CHAR(1)
 
    SET @dIdxCurr = 1
    SET @dCutLen = charindex(@pDelim, @pTarget)
    SET @dFindSuccess = '0'
 
    IF @dCutLen = 0
        BEGIN
 
            IF @pIdxGet = 1
                SET @dCut = @pTarget
            ELSE
                SET @dCut = ''
 
            SET @dFindSuccess = '1'
 
        END
 
    ELSE
        BEGIN
 
            WHILE @dCutLen <> 0
            BEGIN
 
                SET @dCut = substring(@pTarget, 1, @dCutLen)                        -- 문자열 잘라내기
                SET @dCut = ltrim(rtrim(left(@dCut, len(@dCut)-len(@pDelim))))      -- Delimiter 제거
 
                SET @pTarget = ltrim(rtrim(right(@pTarget, len(@pTarget)-@dCutLen))) -- 원본 문자열에서 잘래낸 문자열을 제거
 
                IF @dIdxCurr = @pIdxGet
                    BEGIN
                        SET @dFindSuccess = '1'
						
						IF @pFlag = 'D' AND @pIdxGet > 1 -- 날자구분에 1번째(년도)이상 인 경우(월, 일)자릿수 체크해서 1이면 0 붙히기
							IF LEN(@dCut) = 1
								SET @dCut = '0' + @dCut

						BREAK
                    END
 
                SET @dCutLen = charindex(@pDelim, @pTarget)                           -- 다음 문자열을 가져옴
                SET @dIdxCurr = @dIdxCurr + 1                                           -- 인덱스 증가
 
            END
 
        END
 
 
    IF @dFindSuccess = '0'
		BEGIN
			IF @dIdxCurr = @pIdxGet
				IF @pFlag = 'D' AND @pIdxGet > 1 -- 날자구분에 1번째(년도)이상 인 경우(월, 일)자릿수 체크해서 1이면 0 붙히기
					IF LEN(@pTarget) = 1
						SET @dCut = '0' + @pTarget
			ELSE
				SET @dCut = ''
		END

    RETURN @dCut
 
END

GO

CREATE FUNCTION [dbo].[udf_StripHTML]
	(@HTMLText VARCHAR(MAX))
	RETURNS VARCHAR(MAX)
 AS
 BEGIN
	 DECLARE @Start INT;
	 DECLARE @End INT;
	 DECLARE @Length INT;
	 
	 SET @Start = CHARINDEX('<',@HTMLText);
	 SET @End = CHARINDEX('>',@HTMLText,CHARINDEX('<',@HTMLText));
	 SET @Length = (@End - @Start) + 1;
	 WHILE @Start > 0 AND @End > 0 AND @Length > 0
	 BEGIN
		 SET @HTMLText = STUFF(@HTMLText,@Start,@Length,'');
		 SET @Start = CHARINDEX('<',@HTMLText);
		 SET @End = CHARINDEX('>',@HTMLText,CHARINDEX('<',@HTMLText));
		 SET @Length = (@End - @Start) + 1;
	 END
	 
	 RETURN LTRIM(RTRIM(@HTMLText));
 END

GO

CREATE FUNCTION [dbo].[FN_SPLIT]
(
 @fList      VARCHAR(MAX)   -- 리스트
,@fSEPARATE  VARCHAR(10)	-- 분리자
)
RETURNS @TB TABLE
( 
POS int IDENTITY PRIMARY KEY,
VAL1 varchar(200)
)
AS
/*
- '' 값도 반환한다
- 마지막은 분리자로 끝낸다
SELECT * FROM  dbo.[FN_SPLIT]('^1^^333^2^222^3^333^4^444^5^555^6^666^7^777^8^888^9^999','^') A
SELECT VAL1 FROM  dbo.[FN_SPLIT]('1^^22^^^^^^444444','^^') A

SELECT VAL1 FROM  dbo.[FN_SPLIT]('2,3',',') A
*/
BEGIN
 DECLARE
  @StartPos   SMALLINT   -- 시작위치
 ,@EndPos     SMALLINT   -- 마지막위치
 ,@Cnt        SMALLINT   -- 카운터
 ,@Size       SMALLINT   -- 분리자크기

 SELECT @Size = LEN(@fSEPARATE)
 
 IF RIGHT(@fList, @Size) != @fSEPARATE
 BEGIN
  SET @fList = @fList + @fSEPARATE
 END
 SET @fList = @fSEPARATE + @fList
  
 SET @StartPos = 1
 SELECT @EndPos = CHARINDEX (@fSEPARATE ,@fList ,@StartPos + @Size)
 SET @Cnt = 0
 WHILE (1=1)
 BEGIN
  SET @StartPos = CHARINDEX (@fSEPARATE, @fList )
  SELECT @EndPos = CHARINDEX (@fSEPARATE, @fList ,@StartPos + @Size)
        IF @EndPos <= 0 BREAK
  INSERT INTO @TB(VAL1) VALUES (SUBSTRING(@fList, @StartPos  +@Size, @EndPos - @StartPos - @Size))
  SELECT @fList = STUFF(@fList, @StartPos, @Size, '')
  SET @Cnt = @Cnt + 1
 END
 RETURN
END

GO

-- ==================================================================
-- Author:		김길명
-- Create date: 2014-05-22
-- Description:	지점운영현황 > 지점별 상세지표
-- exec SP_EIGHT_INDICATOR_DETAIL @pTYPE = 'S3', @P_FACILITY = 'EPX0001', @P_FACILITY_FLAG = '1', @P_FACILITY_TYPE = 'GROUP', @P_GROUP_FLAG ='2', @P_YEAR = '2014', @P_COMPARE = '1', @P_CStaffId = '00632'
-- Modify date: 2014.08.01
-- Description: 지점이 아닌 그룹을 선택한 경우 그룹계산기준에 따른 처리(합산, 평균)
-- exec SP_EIGHT_INDICATOR_DETAIL @pTYPE = 'S1', @P_FACILITY = 'EPXBRANCH', @P_FACILITY_FLAG = '1', @P_FACILITY_TYPE = 'GROUP', @P_GROUP_FLAG ='2', @P_YEAR = '2014', @P_COMPARE = '1', @P_CStaffId = '00632'
-- Modify date: 2014.08.07
-- Description: 매니저 종합성과 추가(S18)
-- Modify date: 2014.09.12
-- Description: 지점별학생수 합산테이블의 집계데이터 변경으로 쿼리 수정(TAnalytics_Student_Count사용하는 쿼리들 몽땅)
-- ==================================================================
CREATE PROCEDURE [dbo].[SP_EIGHT_INDICATOR_DETAIL] 
	@pTYPE				VARCHAR(3)  = '',	-- 구분
	@P_FACILITY			VARCHAR(20) = '',	-- 지점(정렬기준에 따라 지점, 브랜드, 지역, 권역, 담당자)
	@P_FACILITY_FLAG	VARCHAR(1)  = '',	-- 정렬기준(1-조직, 2-브랜드, 3-지역, 4-권역, 5-담당자)
	@P_FACILITY_TYPE	VARCHAR(20) = '',	-- 정렬그룹(DIRECT-직영, BRANCH-지점, HEAD-본사, GROUP-그룹) : 그룹일때 하위지점에 대한 처리(합산, 평균)
	@P_GROUP_FLAG		VARCHAR(1)  = '',	-- 그룹계산기준(1-합산, 2-평균)
	@P_YEAR				VARCHAR(4)  = '',	-- 기준년도
	@P_COMPARE			VARCHAR(1)  = '',	-- 비교항목(각 지표마다 다르지만 순번으로 처리되도록 함) : (전년값-기준년값) ÷ 전년값의 % (소수2자리)
	@P_LEAVE			VARCHAR(1)  = '',	-- 이탈율 유형(2, 8번 사용 : 1-반영안함, 2-복회반영)
	@P_GRADE			VARCHAR(3)  = '',	-- 학년구분(전체 "", 초등 : g6, 중1~3 : g7~g9, 고1~3 : g10~12, 기타 : g13)
	@P_START_DATE		VARCHAR(10)  = '', -- 검색시작일(YYYY/MM/DD)
	@P_END_DATE			VARCHAR(10)  = ''  -- 검색종료일(YYYY/MM/DD)
	-- 2차개선분 추가
   ,@P_CStaffId         VARCHAR(30)  = ''  -- 로그인유저ID
   ,@P_WORK             VARCHAR(1)   = ''  -- 재직기준(1-재직중, 2-퇴직포함)
   ,@P_PERIOD           VARCHAR(1)   = ''  -- 기간기준(1-월간, 2-6개월누적)
   ,@P_BAS_MONTH        VARCHAR(7)   = ''  -- 기준월(YYYY/MM)
   ,@P_CAuth_CStaffId   VARCHAR(30)  = ''  -- 권한에 따른 지정
AS

DECLARE @dLoop	INT
DECLARE @dLoopDate  DATETIME
DECLARE @dBasDate   DATETIME -- 기준월(변환하여 일자)
DECLARE @dLastDate  DATETIME -- 마지막일자
DECLARE @dLastDate2 DATETIME -- 전월 마지막일자
DECLARE @dConvertYear	INT

DECLARE @dStrTmp	VARCHAR(10)

DECLARE @TEMPTABLE TABLE
(
    CFirstDate    DATETIME		-- 월
  , CScDepartCode NVARCHAR(20)	-- 지점코드
  , CScCode	      NVARCHAR(50)	-- 학생코드
  , CGrade	      NVARCHAR(50)	-- 학년코드
  , CStartDate	  DATETIME		-- 상담/개별시작일
  , CEndDate	  DATETIME		-- 상담/개별종료일
  , CEndDay	      DATETIME		-- 종료일
  , CCHGGrade	  NVARCHAR(50)	-- 기준연도학년
  , CAttendType	  NVARCHAR(50)	-- 상담관리일정타입
  , CStdCount	  INT			-- 기준연도학생수(/상담관리학생수)
  , CTutoring	  INT			-- 기준연도개별지도콤마수
  , CBeStdCount	  INT			-- 이전연도학생수
  , CBeTutoring	  INT			-- 이전연도개별지도콤마수
  , CInquire	  INT			-- 기준연도문의자
  , CVisit		  INT			-- 기준연도방문자
  , CRegist		  INT			-- 기준연도등록자
  , CBeInquire	  INT			-- 이전연도문의자
  , CBeVisit	  INT			-- 이전연도방문자
  , CBeRegist	  INT			-- 이전연도성공자
  , CValue		  BIGINT		-- 광고투입비
  , CSalesAmt      BIGINT		-- 매출
  , CBeSalesAmt	   BIGINT		-- 매출(이전년도)
  , CExpenseAmt    BIGINT		-- 지출
  , CBeExpenseAmt  BIGINT		-- 지출(이전년도)
  , CCounselAmt    BIGINT		-- 상담관리
  , CBeCounselAmt  BIGINT		-- 상담관리(이전년도)
  , CTutoringAmt   BIGINT		-- 개별지도
  , CBeTutoringAmt BIGINT		-- 개별지도(이전년도)
)

-- 2014.08.01 정렬기준에 따른 그룹선택시 합산 또는 평균을 구하기 적용
-- 임시테이블을 이용하여 처리. 아래 프로세스는 몽땅 변경 ㅜㅜ
declare @FACILITY TABLE
(
	CFACILITY NVARCHAR(20)	-- 지점코드
)

-- 2014.08.07 속도등을 위해서 임시테이블이 아닌 변수테이블 선언(재직, 퇴직 매니저)
DECLARE @TMP_MANAGER TABLE
(
    CFirstDate       DATETIME		-- 월
  , CDepartCode      NVARCHAR(20)	-- 지점코드
  , CManager         NVARCHAR(30)	-- 매니저코드
  , CName0           NVARCHAR(50)	-- 매니저명
  , CJoinDate	     DATETIME	    -- 입사일자
  , CEndDate	     DATETIME	    -- 기준일자(근속개월구하기)
  , CBeCounselCount	 INT			-- 월초상담관리학생수
  , CAfCounselCount	 INT			-- 월말상담관리학생수
  , CCounselRetire	 INT			-- 상담관리이탈수
  , CCounselRate	 FLOAT			-- 상담관리이탈율
  , CBeTutoringCount INT			-- 월초개별지도학생수
  , CAfTutoringCount INT			-- 월말개별지도학생수
  , CTutoringRetire	 INT			-- 개별지도이탈수
  , CCounselTutoringCount  INT			-- 담당중개별지도수업학생수
  , CCounselTutoringCommas INT			-- 담당중개별지도수업콤마수
  , CCounselPrice	 INT			-- 상담관리매출액
  , CTutoringPrice	 INT			-- 개별지도매출액
)

CREATE TABLE #TMP1
(
    CFirstDate       DATETIME		-- 월
  , CDepartCode      NVARCHAR(20)	-- 지점코드
  , CManager         NVARCHAR(30)	-- 매니저코드
  , CBeCounselCount	 INT			-- 월초상담관리학생수
  , CAfCounselCount	 INT			-- 월말상담관리학생수
  , CBeTutoringCount INT			-- 월초개별지도학생수
  , CAfTutoringCount INT			-- 월말개별지도학생수
  , CCounselTutoringCount  INT			-- 담당중개별지도수업학생수
  , CCounselTutoringCommas INT			-- 담당중개별지도수업콤마수
  , CCounselPrice	 INT			-- 상담관리매출액
  , CTutoringPrice	 INT			-- 개별지도매출액
)

SET NOCOUNT ON

--*****************************
-- 지점임시테이블에 데이터 생성
-- 정렬기준 2(브랜드), 3(지역), 4(권역)의 경우 권한별일 경우 쿼리 다시 보정해야 함
--*****************************
-- 정렬기준이 조직인 경우
IF      @P_FACILITY_FLAG = '1'
	BEGIN			
		-- 정렬기준이 GROUP(그룹)인경우 재귀호출로(Common Table Expression)사용
		BEGIN
			-- 사용자별 지점권한 테이블에서 하위지점리스트 찾아서 생성
			with cte (CName0, CParentFacilityCode, CFacilityCode, LEV, CFacilityType)
			as
			(
			SELECT T2.CName0, T2.CParentFacilityCode, T1.CFacilityCode, 1 AS LEV, T1.CFacilityType
				FROM TFacilityNowStaffPerm T1(NOLOCK)
				INNER JOIN TDepartment T2(NOLOCK)
				ON T1.CFacilityCode = T2.CDepartCode
				WHERE T1.CStaffId = @P_CStaffId
				AND T1.CFacilityCode = @P_FACILITY
			UNION ALL
			SELECT a.CName0, a.CParentFacilityCode, a.CFacilityCode, LEV + 1, a.CFacilityType
				FROM
					(
					SELECT T2.CName0, T2.CParentFacilityCode, T1.CFacilityCode, T1.CFacilityType
					  FROM TFacilityNowStaffPerm T1(NOLOCK)
					 INNER JOIN TDepartment T2(NOLOCK)
						ON T1.CFacilityCode = T2.CDepartCode
					 WHERE T1.CStaffId = @P_CStaffId
					   AND T1.CAccessPerm = '1' -- 접근가능한 지점만 처리
					) a, cte b
				WHERE a.CParentFacilityCode = b.CFacilityCode
			)
			INSERT INTO @FACILITY
			SELECT CFacilityCode
				FROM cte
				WHERE CFacilityType <> 'GROUP' -- 그룹용지점은 제외시킨다.(본사의 제외여부는 확인 후 수정)
		END
	END
-- 정렬기준이 브랜드인 경우
ELSE IF @P_FACILITY_FLAG = '2'
	BEGIN
		IF @P_FACILITY_TYPE = 'GROUP' 
			-- 선택한 지점이 그룹인경우
			BEGIN
				-- 지점테이블에서 브랜드에 해당하는 지점리스트를 넣어준다.
				INSERT INTO @FACILITY
				SELECT T1.CFacilityCode
				  FROM TFacility T1(NOLOCK)
--				 INNER JOIN TFacilityNowStaffPerm T2(NOLOCK)
--				    ON T1.CFacilityCode = T2.CFacilityCode AND CStaffId = @P_CStaffId
				 WHERE T1.CTmpGroup1 = 'BRANCHINFO01'
				   AND T1.CTmpCode1  = @P_FACILITY
			END
		ELSE
			-- 그룹이 아닌경우 지점정보가 넘어오므로 그냥 넣어주기
			BEGIN
				INSERT INTO @FACILITY SELECT @P_FACILITY
			END
	END
-- 정렬기준이 지역인 경우
ELSE IF @P_FACILITY_FLAG = '3'
	BEGIN
		IF @P_FACILITY_TYPE = 'GROUP' 
			-- 선택한 지점이 그룹인경우
			BEGIN
				-- 지점테이블에서 브랜드에 해당하는 지점리스트를 넣어준다.
				INSERT INTO @FACILITY
				SELECT CFacilityCode
				  FROM TFacility(NOLOCK)
				 WHERE CTmpGroup2 = 'BRANCHINFO02'
				   AND CTmpCode2  = @P_FACILITY
			END
		ELSE
			-- 그룹이 아닌경우 지점정보가 넘어오므로 그냥 넣어주기
			BEGIN
				INSERT INTO @FACILITY SELECT @P_FACILITY
			END
	END
-- 정렬기준이 권역인 경우
ELSE IF @P_FACILITY_FLAG = '4'
	BEGIN
		IF @P_FACILITY_TYPE = 'GROUP' 
			-- 선택한 지점이 그룹인경우
			BEGIN
				-- 지점테이블에서 브랜드에 해당하는 지점리스트를 넣어준다.
				INSERT INTO @FACILITY
				SELECT CFacilityCode
				  FROM TFacility(NOLOCK)
				 WHERE CTmpGroup3 = 'BRANCHINFO03'
				   AND CTmpCode3  = @P_FACILITY
			END
		ELSE
			-- 그룹이 아닌경우 지점정보가 넘어오므로 그냥 넣어주기
			BEGIN
				INSERT INTO @FACILITY SELECT @P_FACILITY
			END
	END
-- 정렬기준이 담당자인 경우
ELSE IF @P_FACILITY_FLAG = '5'
	BEGIN
		IF @P_FACILITY_TYPE = 'GROUP' 
			-- 선택한 지점이 그룹인경우
			BEGIN
				-- 지점테이블에서 소속원의 지점리스트를 넣어준다.
				INSERT INTO @FACILITY
				SELECT CFacilityCode
				  FROM TFacility(NOLOCK)
				 WHERE CManagerId = @P_FACILITY
			END
		ELSE
			-- 그룹이 아닌경우 지점정보가 넘어오므로 그냥 넣어주기
			BEGIN
				INSERT INTO @FACILITY SELECT @P_FACILITY
			END
	END

IF      @pTYPE = 'S1' GOTO S1_RTN   -- 1.매출순이익 지표    
ELSE IF @pTYPE = 'S2' GOTO S2_RTN   -- 2.상담관리 신규복회종료 학생수
ELSE IF @pTYPE = 'S3' GOTO S3_RTN   -- 3.상담관리 학년별 학생수
ELSE IF @pTYPE = 'S4' GOTO S4_RTN   -- 4.상담관리 서비스별 학생수
ELSE IF @pTYPE = 'S5' GOTO S5_RTN   -- 5.상담관리 유입 학년별 평균등원개월
ELSE IF @pTYPE = 'S6' GOTO S6_RTN   -- 6.상담관리 타입별 평균등원개월
ELSE IF @pTYPE = 'S7' GOTO S7_RTN   -- 7.개별지도 콤마수
ELSE IF @pTYPE = 'S8' GOTO S8_RTN   -- 8.개별지도 신규복회종료 학생수
ELSE IF @pTYPE = 'S9' GOTO S9_RTN   -- 9.개별지도 학년별 학생수
ELSE IF @pTYPE = 'S10' GOTO S10_RTN   -- 10.개별지도 콤마별 학생수
ELSE IF @pTYPE = 'S11' GOTO S11_RTN   -- 11.개별지도 유입 학년별 평균등원개월
ELSE IF @pTYPE = 'S12' GOTO S12_RTN   -- 12.문의/방문상담/등록성공율 지표
ELSE IF @pTYPE = 'S13' GOTO S13_RTN   -- 13.광고투입비용 지표
ELSE IF @pTYPE = 'S14' GOTO S14_RTN   -- 14.매니저 근속 개월
ELSE IF @pTYPE = 'S15' GOTO S15_RTN   -- 15.매니저 학년별 관리 학생수
ELSE IF @pTYPE = 'S16' GOTO S16_RTN   -- 16.매니저 등원개월별 관리 학생수
ELSE IF @pTYPE = 'S17' GOTO S17_RTN   -- 17.매니저 평균 학생 유지개월
ELSE IF @pTYPE = 'S18' GOTO S18_RTN   -- 18.매니저 종합성과
ELSE RETURN
/**
** 지점별 상세지표 조회
**/
-- 1.매출순이익 지표  
-- 긴지...아닌지...일단은 지점운영현황과 동일하게 처리를 해둔다.(수입에서 상담, 개별빼고 조히(구람 검사비만 있는데). 지출에서 몽땅 조회, 상담, 개별 각각 금액 구해서 처리)
S1_RTN:
BEGIN
	DECLARE @START_DATE DATETIME
	DECLARE @END_DATE DATETIME
	DECLARE @BF_START_DATE DATETIME
	DECLARE @BF_END_DATE DATETIME
	-- 12개월을 돌려가면서 해당데이터 수집
	SELECT @dLoopDate  = CONVERT(DATETIME, CONVERT(VARCHAR, CONVERT(INT, @P_YEAR) - 1) + '-12-01') ,@dLoop = 1
	WHILE @dLoop <= 12
		BEGIN
			-- 기준(이전)년도 검색일 셋팅
			SELECT @START_DATE = @dLoopDate, -- 월초
			       @END_DATE   = DATEADD(d,-1,DATEADD(m,1,DATEADD(dd,1,DATEADD(dd,-DATEPART(dd,@dLoopDate),@dLoopDate)))), -- 월말
				   @BF_START_DATE = DATEADD(Month, -12, @dLoopDate), -- 월초
				   @BF_END_DATE   = DATEADD(d,-1,DATEADD(m,1,DATEADD(dd,1,DATEADD(dd,-DATEPART(dd,DATEADD(Month, -12, @dLoopDate)),DATEADD(Month, -12, @dLoopDate))))) -- 월말
			-- 그룹계산기준에 따라 별도 처리한다.
			IF @P_GROUP_FLAG = '1' 
				-- 합산
				BEGIN 
					INSERT INTO @TEMPTABLE (CFirstDate, CScDepartCode, CSalesAmt, CBeSalesAmt, CExpenseAmt, CBeExpenseAmt, CCounselAmt, CBeCounselAmt, CTutoringAmt, CBeTutoringAmt)
					SELECT @dLoopDate, @P_FACILITY
						  ,isnull((select sum(CCash) from TAccountingIncome a(nolock) where exists (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CBrDepartCode)  and CSubject not like '%/개별지도%' and CSubject not like '%/상담관리%'  and CAccountingDate between @START_DATE and @END_DATE), 0)
						  ,isnull((select sum(CCash) from TAccountingIncome a(nolock) where exists (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CBrDepartCode)  and CSubject not like '%/개별지도%'  and CSubject not like '%/상담관리%'  and CAccountingDate between @BF_START_DATE and @BF_END_DATE), 0)
						  ,isnull((select sum(CCash) from TAccountingExpense a(nolock) where exists (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CBrDepartCode)  and CAccountingDate between @START_DATE and @END_DATE), 0)
						  ,isnull((select sum(CCash) from TAccountingExpense a(nolock) where exists (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CBrDepartCode)  and CAccountingDate between @BF_START_DATE and @BF_END_DATE), 0)
						  ,isnull((select sum(CPayPrice) from TStudentCounsel a(nolock) where exists (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CScDepartCode) and CStartDate between @START_DATE and @END_DATE)
							- (select sum(CRefundPrice) from TStudentCounselRefund a(nolock) where exists (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CStdBrcDptCode) and CEndDateRefund between @START_DATE and @END_DATE), 0)
						  ,isnull((select sum(CPayPrice) from TStudentCounsel a(nolock) where exists (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CScDepartCode) and CStartDate between @BF_START_DATE and @BF_END_DATE)
							- (select sum(CRefundPrice) from TStudentCounselRefund a(nolock) where exists (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CStdBrcDptCode) and CEndDateRefund between @BF_START_DATE and @BF_END_DATE), 0)
						  ,isnull((select sum(CPayPrice) from TStudentTutoring a(nolock) where exists (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CStdDepartCode) and CStartDate between @START_DATE and @END_DATE)
							- (select sum(CRefundPrice) from TStudentTutoringRefund a(nolock) where exists (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CStdBrcDptCode) and CEndDateRefund between @START_DATE and @END_DATE), 0)
						  ,isnull((select sum(CPayPrice) from TStudentTutoring a(nolock) where exists (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CStdDepartCode) and CStartDate between @BF_START_DATE and @BF_END_DATE)
							- (select sum(CRefundPrice) from TStudentTutoringRefund a(nolock) where exists (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CStdBrcDptCode) and CEndDateRefund between @BF_START_DATE and @BF_END_DATE), 0)
				END
			ELSE
				-- 평균
				BEGIN
					INSERT INTO @TEMPTABLE (CFirstDate, CScDepartCode, CSalesAmt, CBeSalesAmt, CExpenseAmt, CBeExpenseAmt, CCounselAmt, CBeCounselAmt, CTutoringAmt, CBeTutoringAmt)
					SELECT @dLoopDate, @P_FACILITY
						  ,isnull((select avg(CCash) from (select CBrDepartCode, sum(CCash) as CCash from TAccountingIncome a(nolock) where exists (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CBrDepartCode)  and CSubject not like '%/개별지도%' and CSubject not like '%/상담관리%' and CAccountingDate between @START_DATE and @END_DATE group by CBrDepartCode) sub1), 0)
						  ,isnull((select avg(CCash) from (select CBrDepartCode, sum(CCash) as CCash from TAccountingIncome a(nolock) where exists (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CBrDepartCode)  and CSubject not like '%/개별지도%'  and CSubject not like '%/상담관리%'  and CAccountingDate between @BF_START_DATE and @BF_END_DATE group by CBrDepartCode) sub1), 0)
						  ,isnull((select avg(CCash) from (select CBrDepartCode, sum(CCash) as CCash from TAccountingExpense a(nolock) where exists (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CBrDepartCode)  and CAccountingDate between @START_DATE and @END_DATE group by CBrDepartCode) sub1), 0)
						  ,isnull((select avg(CCash) from (select CBrDepartCode, sum(CCash) as CCash from TAccountingExpense a(nolock) where exists (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CBrDepartCode)  and CAccountingDate between @BF_START_DATE and @BF_END_DATE group by CBrDepartCode) sub1), 0)
						  ,isnull((select avg(CPayPrice) from (select CScDepartCode, sum(CPayPrice) as CPayPrice from TStudentCounsel a(nolock) where exists (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CScDepartCode) and CStartDate between @START_DATE and @END_DATE group by CScDepartCode) sub1)
							- (select avg(CRefundPrice) from (select CStdBrcDptCode, sum(CRefundPrice) as CRefundPrice from TStudentCounselRefund a(nolock) where exists (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CStdBrcDptCode) and CEndDateRefund between @START_DATE and @END_DATE group by CStdBrcDptCode) sub2), 0)
						  ,isnull((select avg(CPayPrice) from (select CScDepartCode, sum(CPayPrice) as CPayPrice from TStudentCounsel a(nolock) where exists (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CScDepartCode) and CStartDate between @BF_START_DATE and @BF_END_DATE group by CScDepartCode) sub1)
							- (select avg(CRefundPrice) from (select CStdBrcDptCode, sum(CRefundPrice) as CRefundPrice from TStudentCounselRefund a(nolock) where exists (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CStdBrcDptCode) and CEndDateRefund between @BF_START_DATE and @BF_END_DATE group by CStdBrcDptCode) sub2), 0)
						  ,isnull((select avg(CPayPrice) from (select CStdDepartCode, sum(CPayPrice) as CPayPrice from TStudentTutoring a(nolock) where exists (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CStdDepartCode) and CStartDate between @START_DATE and @END_DATE group by CStdDepartCode) sub1)
							- (select avg(CRefundPrice) from (select CStdBrcDptCode, sum(CRefundPrice) as CRefundPrice from TStudentTutoringRefund a(nolock) where exists (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CStdBrcDptCode) and CEndDateRefund between @START_DATE and @END_DATE group by CStdBrcDptCode) sub2), 0)
						  ,isnull((select avg(CPayPrice) from (select CStdDepartCode, sum(CPayPrice) as CPayPrice from TStudentTutoring a(nolock) where exists (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CStdDepartCode) and CStartDate between @BF_START_DATE and @BF_END_DATE group by CStdDepartCode) sub1)
							- (select avg(CRefundPrice) from (select CStdBrcDptCode, sum(CRefundPrice) as CRefundPrice from TStudentTutoringRefund a(nolock) where exists (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CStdBrcDptCode) and CEndDateRefund between @BF_START_DATE and @BF_END_DATE group by CStdBrcDptCode) sub2), 0)
				END

			SELECT @dLoopDate = DATEADD(Month, 1, @dLoopDate), @dLoop = @dLoop + 1
		END

	SELECT CFirstDate, CONVERT(VARCHAR, datepart(mm, CFirstDate)) AS CCOLS01, 
	       CSalesAmt - CExpenseAmt AS CProfitAmt, 
		   CSalesAmt + CCounselAmt + CTutoringAmt AS CTotalSalesAmt,
		   CCounselAmt, CTutoringAmt, 
		   CBeSalesAmt - CBeExpenseAmt AS CBeProfitAmt,
		   CBeSalesAmt + CBeCounselAmt + CBeTutoringAmt AS CBeTotalSalesAmt,
		   CBeCounselAmt, CBeTutoringAmt
	  FROM @TEMPTABLE
	-- 누적합계
	UNION
	SELECT '2099-12-30' AS CFirstDate, '누적합계' AS CCOLS01,
		   SUM(CSalesAmt - CExpenseAmt),
		   SUM(CSalesAmt + CCounselAmt + CTutoringAmt),
		   SUM(CCounselAmt), SUM(CTutoringAmt),
		   SUM(CBeSalesAmt - CBeExpenseAmt),
		   SUM(CBeSalesAmt + CBeCounselAmt + CBeTutoringAmt),
		   SUM(CBeCounselAmt), SUM(CBeTutoringAmt)
	  FROM @TEMPTABLE
	-- 평균
	UNION
	SELECT '2099-12-31' AS CFirstDate, '평균' AS CCOLS01,
			ROUND(AVG((CASE WHEN CSalesAmt - CExpenseAmt = 0 THEN NULL ELSE CSalesAmt - CExpenseAmt END) * 1.0), 2),
			ROUND(AVG((CASE WHEN CSalesAmt + CCounselAmt + CTutoringAmt = 0 THEN NULL ELSE CSalesAmt + CCounselAmt + CTutoringAmt END) * 1.0), 2),
			ROUND(AVG(CASE WHEN CCounselAmt = 0 THEN NULL ELSE CCounselAmt END * 1.0), 2), 
			ROUND(AVG(CASE WHEN CTutoringAmt = 0 THEN NULL ELSE CTutoringAmt END * 1.0), 2),
			ROUND(AVG((CASE WHEN CBeSalesAmt - CBeExpenseAmt = 0 THEN NULL ELSE CBeSalesAmt - CBeExpenseAmt END) * 1.0), 2),
			ROUND(AVG((CASE WHEN CBeSalesAmt + CBeCounselAmt + CBeTutoringAmt = 0 THEN NULL ELSE CBeSalesAmt + CBeCounselAmt + CBeTutoringAmt END) * 1.0), 2),
			ROUND(AVG(CASE WHEN CBeCounselAmt = 0 THEN NULL ELSE CBeCounselAmt END * 1.0), 2), 
			ROUND(AVG(CASE WHEN CBeTutoringAmt = 0 THEN NULL ELSE CBeTutoringAmt END * 1.0), 2)
		FROM @TEMPTABLE
		   
	RETURN

END
-- 2.상담관리 신규복회종료 학생수(8번의 개별지도 신규복회종료 학생수와 동일한 로직 : 변경이 있을 경우 영향이 있다면 같이 고치삼)
S2_RTN:
BEGIN
	
	SELECT ISNULL(A.CFirstDate, B.CFirstDate) AS CFirstDate, -- 정렬을위한 일자
		   ISNULL(A.CCOLS01, B.CCOLS01) AS CMonth,			 -- 월
		   A.CNowFirst, A.CNowNew, A.CNowReturn, A.CNowEnd, A.CNowLast, -- 기준년도 월초, 신규, 복회, 종료, 월말
		   CASE WHEN ISNULL(A.CNowFirst, 0) <> 0 THEN
			   ROUND(
				   CASE WHEN @P_LEAVE = '1' -- 반영안함
						THEN A.CNowEnd * 1.0 / A.CNowFirst * 100
						ELSE (A.CNowEnd - A.CNowReturn) * 1.0 / A.CNowFirst * 100
				   END
			   , 1)
		   ELSE 0.0
		   END AS CNowLeaveRate, -- 기준년도이탈율
		   CASE WHEN @P_LEAVE = '1' 
				THEN A.CDetail_Leave_Rate
				ELSE A.CValue
		   END AS CNowAccrueLeaveRate, -- 기준년도 6개월누적이탈율
		   B.CPastFirst, B.CPastNew, B.CPastReturn, B.CPastEnd, B.CPastLast, -- 이전년도 월초, 신규, 복회, 종료, 월말
		   CASE WHEN ISNULL(B.CPastFirst, 0) <> 0 THEN
			   ROUND(
				   CASE WHEN @P_LEAVE = '1' 
						THEN B.CPastEnd * 1.0 / B.CPastFirst * 100
						ELSE (B.CPastEnd - B.CPastReturn) * 1.0 / B.CPastFirst * 100
				   END
			   , 1)
		   ELSE 0.0
		   END AS CPastLeaveRate, -- 이전년도이탈율
		   CASE WHEN @P_LEAVE = '1' 
				THEN B.CDetail_Leave_Rate
				ELSE B.CValue
		   END AS CPastAccrueLeaveRate -- 이전년도 6개월누적이탈율
		  -- 비교항목(월초/신규/복회/종료/월말/이탈율/6개월누적이탈율)
		  ,CASE WHEN @P_COMPARE = '1' THEN 
					CASE WHEN ISNULL(B.CPastFirst, 0) <> 0 THEN ROUND((B.CPastFirst - A.CNowFirst) * 1.0 / B.CPastFirst * 100, 2) ELSE 0.00 END
				WHEN @P_COMPARE = '2' THEN 
					CASE WHEN ISNULL(B.CPastNew, 0) <> 0 THEN ROUND((B.CPastNew - A.CNowNew) * 1.0 / B.CPastNew * 100, 2) ELSE 0.00 END
				WHEN @P_COMPARE = '3' THEN 
					CASE WHEN ISNULL(B.CPastReturn, 0) <> 0 THEN ROUND((B.CPastReturn - A.CNowReturn) * 1.0 / B.CPastReturn * 100, 2) ELSE 0.00 END
				WHEN @P_COMPARE = '4' THEN 
					CASE WHEN ISNULL(B.CPastEnd, 0) <> 0 THEN ROUND((B.CPastEnd - A.CNowEnd) * 1.0 / B.CPastEnd * 100, 2) ELSE 0.00 END
				WHEN @P_COMPARE = '5' THEN 
					CASE WHEN ISNULL(B.CPastLast, 0) <> 0 THEN ROUND((B.CPastLast - A.CNowLast) * 1.0 / B.CPastLast * 100, 2) ELSE 0.00 END
				WHEN @P_COMPARE = '6' THEN -- 이탈율
					CASE WHEN 
						(CASE WHEN @P_LEAVE = '1' THEN -- 복회반영여부
							  (B.CPastEnd * 1.0 / B.CPastFirst * 100)
							  ELSE (B.CPastEnd - B.CPastReturn) * 1.0 / B.CPastFirst * 100 END) <> 0 THEN -- 나눌값이 0이 아니면
							ROUND(
								CASE WHEN @P_LEAVE = '1' THEN 
										   ( (B.CPastEnd * 1.0 / B.CPastFirst * 100) - (A.CNowEnd * 1.0 / A.CNowFirst * 100) ) /  (B.CPastEnd * 1.0 / B.CPastFirst * 100)
									 ELSE ( ((B.CPastEnd - B.CPastReturn) * 1.0 / B.CPastFirst * 100) - ((A.CNowEnd - A.CNowReturn) * 1.0 / A.CNowFirst * 100)) / ((B.CPastEnd - B.CPastReturn) * 1.0 / B.CPastFirst * 100) END
							, 2)
					ELSE 0.00 END
				WHEN @P_COMPARE = '7' THEN -- 6개월누적이탈율
					CASE WHEN (CASE WHEN @P_LEAVE = '1' THEN ISNULL(B.CDetail_Leave_Rate, 0) ELSE ISNULL(B.CValue, 0) END) <> 0 THEN
						ROUND(
							CASE WHEN @P_LEAVE = '1' THEN (B.CDetail_Leave_Rate - A.CDetail_Leave_Rate) / B.CDetail_Leave_Rate * 100
								 ELSE (B.CValue - A.CValue) / B.CValue * 100 END
						, 2)
					ELSE 0.00 END
		   END AS CCOMPARE
	  INTO #TEMP0
	  FROM
			(	
				--CASE문을 이용하여 합산 또는 평균을 구한다.
				SELECT datepart(mm, T1.CFirstDate) AS CCOLS01,
					   CASE WHEN @P_GROUP_FLAG = '1' 
								THEN SUM([상담관리(월초)] + [상담관리(월초누락연장)])
								ELSE AVG(([상담관리(월초)] + [상담관리(월초누락연장)])*1.0)
					   END AS CNowFirst,
					   CASE WHEN @P_GROUP_FLAG = '1' 
								THEN SUM([상담관리(신규)])
								ELSE AVG([상담관리(신규)]*1.0)
					   END AS CNowNew,
					   CASE WHEN @P_GROUP_FLAG = '1' 
								THEN SUM([상담관리(복회)])
								ELSE AVG([상담관리(복회)]*1.0)
					   END AS CNowReturn,
					   CASE WHEN @P_GROUP_FLAG = '1' 
								THEN SUM([상담관리(월초)] + [상담관리(월초누락연장)] - [상담관리(월말)] - [상담관리(월말누락연장)] + [상담관리(신규)] + [상담관리(복회)]) 
								ELSE AVG(([상담관리(월초)] + [상담관리(월초누락연장)] - [상담관리(월말)] - [상담관리(월말누락연장)] + [상담관리(신규)] + [상담관리(복회)])*1.0) 
					   END AS CNowEnd,
					   CASE WHEN @P_GROUP_FLAG = '1' 
								THEN SUM([상담관리(월말)]  + [상담관리(월말누락연장)])
								ELSE AVG(([상담관리(월말)]  + [상담관리(월말누락연장)])*1.0)
					   END AS CNowLast,
					   T1.CFirstDate,
					   CASE WHEN @P_GROUP_FLAG = '1' 
								THEN SUM(T2.CValue)
								ELSE AVG(T2.CValue*1.0)
					   END AS CValue, 
					   CASE WHEN @P_GROUP_FLAG = '1'
								THEN SUM(T2.CDetail_Leave_Rate)
								ELSE AVG(T2.CDetail_Leave_Rate*1.0)
					   END AS CDetail_Leave_Rate
				  FROM (SELECT a.* 
				          FROM TAnalytics_Student_Count a(NOLOCK)
						 INNER JOIN (SELECT CDepartCode, CFirstDate, MAX(CCalcDate) as CCalcDate FROM TAnalytics_Student_Count(NOLOCK) GROUP BY CDepartCode, CFirstDate) b
						    ON a.CDepartCode = b.CDepartCode AND a.CFirstDate = b.CFirstDate AND a.CCalcDate = b.CCalcDate
						  ) T1 -- 2014.9.12 수정 : TAnalytics_Student_Count의 데이터 집계변경으로 인한 쿼리 변경
				  LEFT OUTER JOIN TEIGHTINDICATOR T2 
						ON T1.CDepartCode = T2.CDepartCode AND T1.CFirstDate = T2.CFirstDate AND T2.CFlag = '5'
				 WHERE EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = T1.CDepartCode) 
				   AND T1.CFirstDate >= CONVERT(DATETIME, CONVERT(VARCHAR, CONVERT(INT, @P_YEAR) - 1) + '-12-01')
				   AND T1.CFirstDate <= CONVERT(DATETIME, @P_YEAR+'-11-01')
				 GROUP BY T1.CFirstDate
			) A
	  FULL OUTER JOIN
			(	
				--CASE문을 이용하여 합산 또는 평균을 구한다.
				SELECT datepart(mm, T1.CFirstDate) AS CCOLS01,
					   CASE WHEN @P_GROUP_FLAG = '1'
								THEN SUM([상담관리(월초)] + [상담관리(월초누락연장)])
								ELSE AVG(([상담관리(월초)] + [상담관리(월초누락연장)])*1.0)
					   END AS CPastFirst,
					   CASE WHEN @P_GROUP_FLAG = '1' 
								THEN SUM([상담관리(신규)])
								ELSE AVG([상담관리(신규)]*1.0)
					   END AS CPastNew,
					   CASE WHEN @P_GROUP_FLAG = '1' 
								THEN SUM([상담관리(복회)])
								ELSE AVG([상담관리(복회)]*1.0)
					   END AS CPastReturn,
					   CASE WHEN @P_GROUP_FLAG = '1' 
								THEN SUM([상담관리(월초)] + [상담관리(월초누락연장)] - [상담관리(월말)] - [상담관리(월말누락연장)] + [상담관리(신규)] + [상담관리(복회)]) 
								ELSE AVG(([상담관리(월초)] + [상담관리(월초누락연장)] - [상담관리(월말)] - [상담관리(월말누락연장)] + [상담관리(신규)] + [상담관리(복회)])*1.0)
					   END AS CPastEnd,
					   CASE WHEN @P_GROUP_FLAG = '1' 
								THEN SUM([상담관리(월말)] + [상담관리(월말누락연장)])
								ELSE AVG(([상담관리(월말)] + [상담관리(월말누락연장)])*1.0)
					   END AS CPastLast,
					   dateadd(month,-1, T1.CFirstDate)-(day(T1.CFirstDate)-1) AS CFirstDate,
					   CASE WHEN @P_GROUP_FLAG = '1' 
								THEN SUM(T2.CValue)
								ELSE AVG(T2.CValue*1.0)
					   END AS CValue, 
					   CASE WHEN @P_GROUP_FLAG = '1'
								THEN SUM(T2.CDetail_Leave_Rate)
								ELSE AVG(T2.CDetail_Leave_Rate*1.0)
					   END AS CDetail_Leave_Rate
				  FROM (SELECT a.* 
				          FROM TAnalytics_Student_Count a(NOLOCK)
						 INNER JOIN (SELECT CDepartCode, CFirstDate, MAX(CCalcDate) as CCalcDate FROM TAnalytics_Student_Count(NOLOCK) GROUP BY CDepartCode, CFirstDate) b
						    ON a.CDepartCode = b.CDepartCode AND a.CFirstDate = b.CFirstDate AND a.CCalcDate = b.CCalcDate
						  ) T1 -- 2014.9.12 수정 : TAnalytics_Student_Count의 데이터 집계변경으로 인한 쿼리 변경
				  LEFT OUTER JOIN TEIGHTINDICATOR T2 (NOLOCK)
						ON T1.CDepartCode = T2.CDepartCode AND T1.CFirstDate = T2.CFirstDate AND T2.CFlag = '5'
				 WHERE EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = T1.CDepartCode) 
				   AND T1.CFirstDate >= CONVERT(DATETIME, CONVERT(VARCHAR, CONVERT(INT, @P_YEAR) - 2) + '-12-01')
				   AND T1.CFirstDate <= CONVERT(DATETIME, CONVERT(VARCHAR, CONVERT(INT, @P_YEAR) - 1) + '-11-01')
				 GROUP BY T1.CFirstDate
			) B ON A.CCOLS01=B.CCOLS01
	ORDER BY ISNULL(A.CFirstDate, B.CFirstDate)

	-- 12개월을 돌려가면서 해당데이터 추가
	SELECT @dLoopDate  = CONVERT(DATETIME, CONVERT(VARCHAR, CONVERT(INT, @P_YEAR) - 1) + '-12-01') ,@dLoop = 1
	WHILE @dLoop <= 12
		BEGIN
			IF (SELECT COUNT(1)
			      FROM #TEMP0
			     WHERE CFirstDate = @dLoopDate) = 0
				BEGIN
					INSERT INTO #TEMP0(CFirstDate, CMonth)
					SELECT @dLoopDate, datepart(mm, @dLoopDate)
				END

			SELECT @dLoopDate = DATEADD(Month, 1, @dLoopDate), @dLoop = @dLoop + 1
		END	
	
	SELECT CFirstDate, CONVERT(VARCHAR, CMonth) AS CMonth, CNowFirst, CNowNew, CNowReturn, CNowEnd, CNowLast, CNowLeaveRate, CNowAccrueLeaveRate, 
	       CPastFirst, CPastNew, CPastReturn, CPastEnd, CPastLast, CPastLeaveRate, CPastAccrueLeaveRate, CCOMPARE
	  FROM #TEMP0 
	-- 누적합계
	UNION
	SELECT '2099-12-30' AS CFirstDate, '누적합계' AS CMonth,
	       SUM(CNowFirst), SUM(CNowNew), SUM(CNowReturn), SUM(CNowEnd), SUM(CNowLast), NULL, NULL,
		   SUM(CPastFirst), SUM(CPastNew), SUM(CPastReturn), SUM(CPastEnd), SUM(CPastLast), NULL, NULL, NULL
	  FROM #TEMP0 
	-- 평균
	UNION
	SELECT '2099-12-31' AS CFirstDate, '평균' AS CMonth,
	       AVG(CNowFirst), AVG(CNowNew), AVG(CNowReturn), AVG(CNowEnd), AVG(CNowLast), AVG(CNowLeaveRate), AVG(CNowAccrueLeaveRate),
		   AVG(CPastFirst), AVG(CPastNew), AVG(CPastReturn), AVG(CPastEnd), AVG(CPastLast), AVG(CPastLeaveRate), AVG(CPastAccrueLeaveRate), AVG(CCOMPARE)
	  FROM #TEMP0 
	 ORDER BY CFirstDate

	RETURN
END
-- 3.상담관리 학년별 학생수(9번의 개별지도와 동일한 로직 : 변경이 있을 경우 영향이 있다면 같이 고치삼)
-- 기간의 간격이 1개월을 넘어가는 경우도 있고 해서리 쿼리로 우야 해볼라켔는데 방법 없음..
-- 학년의 변경 등등이 필요한 관계로 결국 임시테이블에 담아서리 리턴하는걸로 처리
S3_RTN:
BEGIN
	
	-- dateadd(d,-1,dateadd(m,1,dateadd(dd,1,dateadd(dd,-datepart(dd,@dLoopDate),@dLoopDate))))
	-- 12개월을 돌려가면서 해당데이터 수집
	SELECT @dLoopDate  = CONVERT(DATETIME, CONVERT(VARCHAR, CONVERT(INT, @P_YEAR) - 1) + '-12-01') ,@dLoop = 1
	WHILE @dLoop <= 12
		BEGIN
			-- 합산인 경우
			INSERT INTO @TEMPTABLE (CFirstDate, CScDepartCode, CScCode, CGrade, CStartDate, CEndDate, CEndDay, CCHGGrade)
			SELECT @dLoopDate, a.CScDepartCode, a.CScCode, b.CGrade, a.CStartDate, a.CEndDate, b.CEndDay, b.CGrade
				FROM TStudentCounsel a(NOLOCK)
				LEFT JOIN TStudent b(NOLOCK) ON a.CScDepartCode = b.CBranchCode AND a.CScCode = b.CCode
				WHERE EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CScDepartCode)
				-- 시작일이 다음달1일보다 작고 종료일이 마지막일보다 크거나 같은거
				-- 1.30일 이전 ~ 1.31 : O
				AND a.CStartDate < DATEADD(Month, 1, @dLoopDate) AND a.CEndDate >= dateadd(d,-1,dateadd(m,1,dateadd(dd,1,dateadd(dd,-datepart(dd,@dLoopDate),@dLoopDate))))

			-- 저장값이 없는 경우 껍떼기 하나 생성(조회 시 전체 월을 나오게 하기위함)
			IF @@ROWCOUNT = 0
				BEGIN
					INSERT INTO @TEMPTABLE (CFirstDate, CScDepartCode)
					SELECT @dLoopDate, @P_FACILITY
				END

			SELECT @dLoopDate = DATEADD(Month, 1, @dLoopDate), @dLoop = @dLoop + 1

		END
	
	-- 일단 생성 시 학생정보의 학년을 적용했는데...
	-- 해가 넘어간 경우 우야해야되남? 계속 댕기는거면 올해기준으로 뺴지만 종료된 경우는 거시기 하네..하나씩 보정해봅시다.
	
	-- 1.기준년도가 해당연도보다 작으면 보정(같을경우 그냥 두면 되지 않을까?학년이 다 정리되었다는 전제로 해야하니깐)
	IF @P_YEAR < datepart(year, GETDATE())
		BEGIN
			-- 현재년도와 차이구하기
			SET @dConvertYear = datepart(year, GETDATE()) - @P_YEAR

			-- 재원중인 학생은(종료일이 NULL인 학생) 기간만큼 학년을 다운시킨다.
			UPDATE @TEMPTABLE SET 
					CCHGGrade = 
							 CASE WHEN CONVERT(INT, SUBSTRING(CGrade, 2, 2)) - @dConvertYear > 0 AND CONVERT(INT, SUBSTRING(CGrade, 2, 2)) <= 12 -- 년도차이보다 학년이 크고 고3 보다 작은거
							 THEN 'g' + CONVERT(VARCHAR, CONVERT(INT, SUBSTRING(CGrade, 2, 2)) - @dConvertYear)
						     ELSE CGrade -- 현 학생 상태가 재수, 검정은 시작이 언제인지 모르는 상황에서 빼기가 애매해서리 구하기 애매모호~~
							 END
			 WHERE CEndDay IS NULL
			   AND CScCode IS NOT NULL -- 위에 넣은 임시데이터 까지 변하는거 막기

			-- 종료된 학생은 종료연도에 따라 계산
			UPDATE @TEMPTABLE SET 
					CCHGGrade = 
							 CASE WHEN CONVERT(INT, SUBSTRING(CGrade, 2, 2)) <= 12 -- 고3 보다 작은거
							 THEN 'g'  + CONVERT(VARCHAR, CONVERT(INT, SUBSTRING(CGrade, 2, 2)) - (datepart(year, CEndDay) - @P_YEAR)) -- 기준년도에서 종료년도를 뺀다
						     ELSE CGrade -- 현 학생 상태가 재수, 검정은 시작이 언제인지 모르는 상황에서 빼기가 애매해서리 구하기 애매모호~~
							 END
			 WHERE CEndDay IS NOT NULL
			   AND CScCode IS NOT NULL -- 위에 넣은 임시데이터 까지 변하는거 막기
		END

	-- 상담관리 학년별 학생수(합산)
	IF @P_GROUP_FLAG = '1' 
		BEGIN
			SELECT CFirstDate, CONVERT(VARCHAR, datepart(mm, CFirstDate)) AS CCOLS01,
				   SUM(CASE WHEN CONVERT(INT, SUBSTRING(CCHGGrade, 2, 2)) <=  6 THEN 1 ELSE NULL END) AS CG6,
				   SUM(CASE WHEN CCHGGrade =  'g7' THEN 1 ELSE NULL END) AS CG7,
				   SUM(CASE WHEN CCHGGrade =  'g8' THEN 1 ELSE NULL END) AS CG8,
				   SUM(CASE WHEN CCHGGrade =  'g9' THEN 1 ELSE NULL END) AS CG9,
				   SUM(CASE WHEN CCHGGrade = 'g10' THEN 1 ELSE NULL END) AS CG10,
				   SUM(CASE WHEN CCHGGrade = 'g11' THEN 1 ELSE NULL END) AS CG11,
				   SUM(CASE WHEN CCHGGrade = 'g12' THEN 1 ELSE NULL END) AS CG12,
				   SUM(CASE WHEN CONVERT(INT, SUBSTRING(CCHGGrade, 2, 2)) >= 13 THEN 1 ELSE NULL END) AS CG13,
				   COUNT(CCHGGrade) AS CTotal,
				   CASE WHEN COUNT(CCHGGrade) <> 0 THEN 
						ROUND(ISNULL(SUM(CASE WHEN CONVERT(INT, SUBSTRING(CCHGGrade, 2, 2)) <=  6 THEN 1 ELSE NULL END), 0) * 1.0 / COUNT(CCHGGrade) * 100, 2)
				   ELSE 0.0 END AS CG6_RATE,
				   CASE WHEN COUNT(CCHGGrade) <> 0 THEN 
						ROUND(ISNULL(SUM(CASE WHEN CCHGGrade =  'g7' OR CCHGGrade =  'g8' OR CCHGGrade =  'g9' THEN 1 ELSE NULL END), 0) * 1.0 / COUNT(CCHGGrade) * 100, 2)
				   ELSE 0.0 END AS CG7_RATE,
				   CASE WHEN COUNT(CCHGGrade) <> 0 THEN 
						ROUND(ISNULL(SUM(CASE WHEN CCHGGrade =  'g10' OR CCHGGrade =  'g11' OR CCHGGrade =  'g12' THEN 1 ELSE NULL END), 0) * 1.0 / COUNT(CCHGGrade) * 100, 2)
				   ELSE 0.0 END AS CG10_RATE,
				   CASE WHEN COUNT(CCHGGrade) <> 0 THEN 
						ROUND(ISNULL(SUM(CASE WHEN CONVERT(INT, SUBSTRING(CCHGGrade, 2, 2)) >= 13 THEN 1 ELSE NULL END), 0) * 1.0 / COUNT(CCHGGrade) * 100, 2)
				   ELSE 0.0 END AS CG13_RATE
			  FROM @TEMPTABLE
			 GROUP BY CFirstDate
		 --  jsp에서 처리한다면 아래를 막는다
			UNION ALL
			SELECT '2099-12-31' AS CFirstDate, '평균' AS CCOLS01,
					ROUND(AVG(CG6*1.0), 2) AS CG6, 
					ROUND(AVG(CG7*1.0), 2) AS CG7, ROUND(AVG(CG8*1.0), 2) AS CG8, ROUND(AVG(CG9*1.0), 2) AS CG9, 
					ROUND(AVG(CG10*1.0), 2) AS CG10, ROUND(AVG(CG11*1.0), 2) AS CG11, ROUND(AVG(CG12*1.0), 2) AS CG12,
					ROUND(AVG(CG13*1.0), 2) AS CG13, SUM(CTotal) AS CTotal,
					CASE WHEN SUM(CTotal) <> 0 THEN ROUND(SUM(CG6) * 1.0 / SUM(CTotal) * 100, 2) ELSE 0.0 END AS CG6_RATE,
					CASE WHEN SUM(CTotal) <> 0 THEN ROUND((SUM(CG7)+SUM(CG8)+SUM(CG9)) * 1.0 / SUM(CTotal) * 100, 2) ELSE 0.0 END AS CG6_RATE,
					CASE WHEN SUM(CTotal) <> 0 THEN ROUND((SUM(CG10)+SUM(CG11)+SUM(CG12)) * 1.0 / SUM(CTotal) * 100, 2) ELSE 0.0 END AS CG10_RATE,
					CASE WHEN SUM(CTotal) <> 0 THEN ROUND(SUM(CG13) * 1.0 / SUM(CTotal) * 100, 2) ELSE 0.0 END AS CG13_RATE
					--ROUND(AVG(CG6_RATE), 2) AS CG6_RATE, ROUND(AVG(CG7_RATE), 2) AS CG7_RATE, ROUND(AVG(CG10_RATE), 2) AS CG10_RATE, ROUND(AVG(CG13_RATE), 2) AS CG13_RATE
			  FROM (
					SELECT CFirstDate, CONVERT(VARCHAR, datepart(mm, CFirstDate)) AS CCOLS01,
						   SUM(CASE WHEN CONVERT(INT, SUBSTRING(CCHGGrade, 2, 2)) <=  6 THEN 1.0 ELSE NULL END) AS CG6,
						   SUM(CASE WHEN CCHGGrade =  'g7' THEN 1.0 ELSE NULL END) AS CG7,
						   SUM(CASE WHEN CCHGGrade =  'g8' THEN 1.0 ELSE NULL END) AS CG8,
						   SUM(CASE WHEN CCHGGrade =  'g9' THEN 1.0 ELSE NULL END) AS CG9,
						   SUM(CASE WHEN CCHGGrade = 'g10' THEN 1.0 ELSE NULL END) AS CG10,
						   SUM(CASE WHEN CCHGGrade = 'g11' THEN 1.0 ELSE NULL END) AS CG11,
						   SUM(CASE WHEN CCHGGrade = 'g12' THEN 1.0 ELSE NULL END) AS CG12,
						   SUM(CASE WHEN CONVERT(INT, SUBSTRING(CCHGGrade, 2, 2)) >= 13 THEN 1.0 ELSE NULL END) AS CG13,
						   COUNT(CCHGGrade) AS CTotal,
						   CASE WHEN COUNT(CCHGGrade) <> 0 THEN
								ROUND(ISNULL(SUM(CASE WHEN CONVERT(INT, SUBSTRING(CCHGGrade, 2, 2)) <=  6 THEN 1 ELSE NULL END), 0) * 1.0 / COUNT(CCHGGrade) * 100, 2) 
						   ELSE 0.0 END AS CG6_RATE,
						   CASE WHEN COUNT(CCHGGrade) <> 0 THEN
								ROUND(ISNULL(SUM(CASE WHEN CCHGGrade =  'g7' OR CCHGGrade =  'g8' OR CCHGGrade =  'g9' THEN 1 ELSE NULL END), 0) * 1.0 / COUNT(CCHGGrade) * 100, 2) 
						   ELSE 0.0 END AS CG7_RATE,
						   CASE WHEN COUNT(CCHGGrade) <> 0 THEN
								ROUND(ISNULL(SUM(CASE WHEN CCHGGrade =  'g10' OR CCHGGrade =  'g11' OR CCHGGrade =  'g12' THEN 1 ELSE NULL END), 0) * 1.0 / COUNT(CCHGGrade) * 100, 2) 
						   ELSE 0.0 END AS CG10_RATE,
						   CASE WHEN COUNT(CCHGGrade) <> 0 THEN
								ROUND(ISNULL(SUM(CASE WHEN CONVERT(INT, SUBSTRING(CCHGGrade, 2, 2)) >= 13 THEN 1 ELSE NULL END), 0) * 1.0 / COUNT(CCHGGrade) * 100, 2)
						   ELSE 0.0 END AS CG13_RATE
					  FROM @TEMPTABLE
					 GROUP BY CFirstDate
				   ) T1
		END
	-- 상담관리 학년별 학생수(평균)
	ELSE
		BEGIN
			SELECT CFirstDate, CONVERT(VARCHAR, datepart(mm, CFirstDate)) AS CCOLS01,
			       AVG(CG6*1.0) AS CG6,			       AVG(CG7*1.0) AS CG7,
			       AVG(CG8*1.0) AS CG8,			       AVG(CG9*1.0) AS CG9,
			       AVG(CG10*1.0) AS CG10,		       AVG(CG11*1.0) AS CG11,
			       AVG(CG12*1.0) AS CG12,		       AVG(CG13*1.0) AS CG13,
			       SUM(CTotal) AS CTotal,
			       AVG(CG6_RATE*1.0) AS CG6_RATE,
			       AVG(CG7_RATE*1.0) AS CG7_RATE,
			       AVG(CG10_RATE*1.0) AS CG10_RATE,
			       AVG(CG13_RATE*1.0) AS CG13_RATE
			  FROM (
					SELECT CFirstDate, CScDepartCode,
						   SUM(CASE WHEN CONVERT(INT, SUBSTRING(CCHGGrade, 2, 2)) <=  6 THEN 1 ELSE NULL END) AS CG6,
						   SUM(CASE WHEN CCHGGrade =  'g7' THEN 1 ELSE NULL END) AS CG7,
						   SUM(CASE WHEN CCHGGrade =  'g8' THEN 1 ELSE NULL END) AS CG8,
						   SUM(CASE WHEN CCHGGrade =  'g9' THEN 1 ELSE NULL END) AS CG9,
						   SUM(CASE WHEN CCHGGrade = 'g10' THEN 1 ELSE NULL END) AS CG10,
						   SUM(CASE WHEN CCHGGrade = 'g11' THEN 1 ELSE NULL END) AS CG11,
						   SUM(CASE WHEN CCHGGrade = 'g12' THEN 1 ELSE NULL END) AS CG12,
						   SUM(CASE WHEN CONVERT(INT, SUBSTRING(CCHGGrade, 2, 2)) >= 13 THEN 1 ELSE NULL END) AS CG13,
						   COUNT(CCHGGrade) AS CTotal,
						   CASE WHEN COUNT(CCHGGrade) <> 0 THEN 
								ROUND(ISNULL(SUM(CASE WHEN CONVERT(INT, SUBSTRING(CCHGGrade, 2, 2)) <=  6 THEN 1 ELSE NULL END), 0) * 1.0 / COUNT(CCHGGrade) * 100, 2)
						   ELSE 0.0 END AS CG6_RATE,
						   CASE WHEN COUNT(CCHGGrade) <> 0 THEN 
								ROUND(ISNULL(SUM(CASE WHEN CCHGGrade =  'g7' OR CCHGGrade =  'g8' OR CCHGGrade =  'g9' THEN 1 ELSE NULL END), 0) * 1.0 / COUNT(CCHGGrade) * 100, 2)
						   ELSE 0.0 END AS CG7_RATE,
						   CASE WHEN COUNT(CCHGGrade) <> 0 THEN 
								ROUND(ISNULL(SUM(CASE WHEN CCHGGrade =  'g10' OR CCHGGrade =  'g11' OR CCHGGrade =  'g12' THEN 1 ELSE NULL END), 0) * 1.0 / COUNT(CCHGGrade) * 100, 2)
						   ELSE 0.0 END AS CG10_RATE,
						   CASE WHEN COUNT(CCHGGrade) <> 0 THEN 
								ROUND(ISNULL(SUM(CASE WHEN CONVERT(INT, SUBSTRING(CCHGGrade, 2, 2)) >= 13 THEN 1 ELSE NULL END), 0) * 1.0 / COUNT(CCHGGrade) * 100, 2)
						   ELSE 0.0 END AS CG13_RATE
					  FROM @TEMPTABLE
					 GROUP BY CFirstDate, CScDepartCode
			       ) T1 GROUP BY CFirstDate
			UNION ALL
			SELECT '2099-12-31' AS CFirstDate, '평균' AS CCOLS01,
					ROUND(AVG(CG6*1.0), 2) AS CG6, 
					ROUND(AVG(CG7*1.0), 2) AS CG7, ROUND(AVG(CG8*1.0), 2) AS CG8, ROUND(AVG(CG9*1.0), 2) AS CG9, 
					ROUND(AVG(CG10*1.0), 2) AS CG10, ROUND(AVG(CG11*1.0), 2) AS CG11, ROUND(AVG(CG12*1.0), 2) AS CG12,
					ROUND(AVG(CG13*1.0), 2) AS CG13, SUM(CTotal) AS CTotal,
					CASE WHEN SUM(CTotal) <> 0 THEN ROUND(SUM(CG6) * 1.0 / SUM(CTotal) * 100, 2) ELSE 0.0 END AS CG6_RATE,
					CASE WHEN SUM(CTotal) <> 0 THEN ROUND((SUM(CG7)+SUM(CG8)+SUM(CG9)) * 1.0 / SUM(CTotal) * 100, 2) ELSE 0.0 END AS CG6_RATE,
					CASE WHEN SUM(CTotal) <> 0 THEN ROUND((SUM(CG10)+SUM(CG11)+SUM(CG12)) * 1.0 / SUM(CTotal) * 100, 2) ELSE 0.0 END AS CG10_RATE,
					CASE WHEN SUM(CTotal) <> 0 THEN ROUND(SUM(CG13) * 1.0 / SUM(CTotal) * 100, 2) ELSE 0.0 END AS CG13_RATE
					--ROUND(AVG(CG6_RATE), 2) AS CG6_RATE, ROUND(AVG(CG7_RATE), 2) AS CG7_RATE, ROUND(AVG(CG10_RATE), 2) AS CG10_RATE, ROUND(AVG(CG13_RATE), 2) AS CG13_RATE
			  FROM (
					SELECT CFirstDate,
						   AVG(CG6*1.0) AS CG6,			       AVG(CG7*1.0) AS CG7,
						   AVG(CG8*1.0) AS CG8,			       AVG(CG9*1.0) AS CG9,
						   AVG(CG10*1.0) AS CG10,		       AVG(CG11*1.0) AS CG11,
						   AVG(CG12*1.0) AS CG12,		       AVG(CG13*1.0) AS CG13,
						   SUM(CTotal) AS CTotal,
						   AVG(CG6_RATE*1.0) AS CG6_RATE,	   AVG(CG7_RATE*1.0) AS CG7_RATE,
						   AVG(CG10_RATE*1.0) AS CG10_RATE,	   AVG(CG13_RATE*1.0) AS CG13_RATE
					  FROM (
							SELECT CFirstDate, CScDepartCode,
								   SUM(CASE WHEN CONVERT(INT, SUBSTRING(CCHGGrade, 2, 2)) <=  6 THEN 1 ELSE NULL END) AS CG6,
								   SUM(CASE WHEN CCHGGrade =  'g7' THEN 1 ELSE NULL END) AS CG7,
								   SUM(CASE WHEN CCHGGrade =  'g8' THEN 1 ELSE NULL END) AS CG8,
								   SUM(CASE WHEN CCHGGrade =  'g9' THEN 1 ELSE NULL END) AS CG9,
								   SUM(CASE WHEN CCHGGrade = 'g10' THEN 1 ELSE NULL END) AS CG10,
								   SUM(CASE WHEN CCHGGrade = 'g11' THEN 1 ELSE NULL END) AS CG11,
								   SUM(CASE WHEN CCHGGrade = 'g12' THEN 1 ELSE NULL END) AS CG12,
								   SUM(CASE WHEN CONVERT(INT, SUBSTRING(CCHGGrade, 2, 2)) >= 13 THEN 1 ELSE NULL END) AS CG13,
								   COUNT(CCHGGrade) AS CTotal,
								   CASE WHEN COUNT(CCHGGrade) <> 0 THEN 
										ROUND(ISNULL(SUM(CASE WHEN CONVERT(INT, SUBSTRING(CCHGGrade, 2, 2)) <=  6 THEN 1 ELSE NULL END), 0) * 1.0 / COUNT(CCHGGrade) * 100, 2)
								   ELSE 0.0 END AS CG6_RATE,
								   CASE WHEN COUNT(CCHGGrade) <> 0 THEN 
										ROUND(ISNULL(SUM(CASE WHEN CCHGGrade =  'g7' OR CCHGGrade =  'g8' OR CCHGGrade =  'g9' THEN 1 ELSE NULL END), 0) * 1.0 / COUNT(CCHGGrade) * 100, 2)
								   ELSE 0.0 END AS CG7_RATE,
								   CASE WHEN COUNT(CCHGGrade) <> 0 THEN 
										ROUND(ISNULL(SUM(CASE WHEN CCHGGrade =  'g10' OR CCHGGrade =  'g11' OR CCHGGrade =  'g12' THEN 1 ELSE NULL END), 0) * 1.0 / COUNT(CCHGGrade) * 100, 2)
								   ELSE 0.0 END AS CG10_RATE,
								   CASE WHEN COUNT(CCHGGrade) <> 0 THEN 
										ROUND(ISNULL(SUM(CASE WHEN CONVERT(INT, SUBSTRING(CCHGGrade, 2, 2)) >= 13 THEN 1 ELSE NULL END), 0) * 1.0 / COUNT(CCHGGrade) * 100, 2)
								   ELSE 0.0 END AS CG13_RATE
							  FROM @TEMPTABLE
							 GROUP BY CFirstDate, CScDepartCode
						   ) T1 GROUP BY CFirstDate
			       ) SUB

		END

	RETURN
END
-- 4.상담관리 서비스별 학생수(3번꺼 컬럼만 추가해서 활용)
--   3번과의 차이는 학년이 검색조건으로 들어감
S4_RTN:
BEGIN
	-- 12개월을 돌려가면서 해당데이터 수집
	SELECT @dLoopDate  = CONVERT(DATETIME, CONVERT(VARCHAR, CONVERT(INT, @P_YEAR) - 1) + '-12-01') ,@dLoop = 1
	WHILE @dLoop <= 12
		BEGIN
			INSERT INTO @TEMPTABLE (CFirstDate, CScDepartCode, CScCode, CGrade, CStartDate, CEndDate, CEndDay, CCHGGrade, CAttendType)
			SELECT @dLoopDate, a.CScDepartCode, a.CScCode, b.CGrade, a.CStartDate, a.CEndDate, b.CEndDay, b.CGrade, a.CAttendType
			  FROM TStudentCounsel a(NOLOCK)
			  LEFT JOIN TStudent b(NOLOCK) ON a.CScDepartCode = b.CBranchCode AND a.CScCode = b.CCode
			 WHERE EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CScDepartCode)
				-- 시작일이 다음달1일보다 작고 종료일이 마지막일보다 크거나 같은거
				-- 1.30일 이전 ~ 1.31 : O
			   AND a.CStartDate < DATEADD(Month, 1, @dLoopDate) AND a.CEndDate >= dateadd(d,-1,dateadd(m,1,dateadd(dd,1,dateadd(dd,-datepart(dd,@dLoopDate),@dLoopDate))))
			
			-- 저장값이 없는 경우 껍떼기 하나 생성(조회 시 전체 월을 나오게 하기위함)
			IF @@ROWCOUNT = 0
				BEGIN
					-- 학년별 검색조건이 있기 때문에 학년별로 넣어준다
					INSERT INTO @TEMPTABLE (CFirstDate, CScDepartCode, CGrade, CCHGGrade)
					SELECT @dLoopDate, @P_FACILITY, 'g6', 'g6'
					UNION 
					SELECT @dLoopDate, @P_FACILITY, 'g7', 'g7'
					UNION 
					SELECT @dLoopDate, @P_FACILITY, 'g8', 'g8'
					UNION 
					SELECT @dLoopDate, @P_FACILITY, 'g9', 'g9'
					UNION 
					SELECT @dLoopDate, @P_FACILITY, 'g10', 'g10'
					UNION 
					SELECT @dLoopDate, @P_FACILITY, 'g11', 'g11'
					UNION 
					SELECT @dLoopDate, @P_FACILITY, 'g12', 'g12'
					UNION 
					SELECT @dLoopDate, @P_FACILITY, 'g13', 'g13'
				END

			SELECT @dLoopDate = DATEADD(Month, 1, @dLoopDate), @dLoop = @dLoop + 1

		END
	
	-- 1.기준년도가 해당연도보다 작으면 보정(같을경우 그냥 두면 되지 않을까?학년이 다 정리되었다는 전제로 해야하니깐)
	IF @P_YEAR < datepart(year, GETDATE())
		BEGIN
			-- 현재년도와 차이구하기
			SET @dConvertYear = datepart(year, GETDATE()) - @P_YEAR

			-- 재원중인 학생은(종료일이 NULL인 학생) 기간만큼 학년을 다운시킨다.
			UPDATE @TEMPTABLE SET 
					CCHGGrade = 
							 CASE WHEN CONVERT(INT, SUBSTRING(CGrade, 2, 2)) - @dConvertYear > 0 AND CONVERT(INT, SUBSTRING(CGrade, 2, 2)) <= 12 -- 년도차이보다 학년이 크고 고3 보다 작은거
							 THEN 'g' + CONVERT(VARCHAR, CONVERT(INT, SUBSTRING(CGrade, 2, 2)) - @dConvertYear)
						     ELSE CGrade -- 현 학생 상태가 재수, 검정은 시작이 언제인지 모르는 상황에서 빼기가 애매해서리 구하기 애매모호~~
							 END
			 WHERE CEndDay IS NULL
			   AND CScCode IS NOT NULL -- 위에 넣은 임시데이터 까지 변하는거 막기

			-- 종료된 학생은 종료연도에 따라 계산
			UPDATE @TEMPTABLE SET 
					CCHGGrade =
							 CASE WHEN CONVERT(INT, SUBSTRING(CGrade, 2, 2)) <= 12 -- 고3 보다 작은거
							 THEN 'g'  + CONVERT(VARCHAR, CONVERT(INT, SUBSTRING(CGrade, 2, 2)) - (datepart(year, CEndDay) - @P_YEAR)) -- 기준년도에서 종료년도를 뺀다
						     ELSE CGrade -- 현 학생 상태가 재수, 검정은 시작이 언제인지 모르는 상황에서 빼기가 애매해서리 구하기 애매모호~~
							 END
			 WHERE CEndDay IS NOT NULL
			   AND CScCode IS NOT NULL -- 위에 넣은 임시데이터 까지 변하는거 막기
		END
	
	-- 검색을 위해 학년 보정(g6이하는 몽땅 g6으로 g13이상은 몽땅 g13)
	UPDATE @TEMPTABLE SET
		CCHGGrade = 
					CASE WHEN CONVERT(INT, SUBSTRING(CCHGGrade, 2, 2)) <= 6  THEN 'g6'  -- 초등6학년 이하
					     WHEN CONVERT(INT, SUBSTRING(CCHGGrade, 2, 2)) >= 13 THEN 'g13' -- 증/고(검정, 재수)
					ELSE CCHGGrade -- 그냥 지금 꺼
					END

	-- 상담관리 서비스별 학생수 합산(W1day W2days W3days W4days W5days W6days W7days)
	IF @P_GROUP_FLAG = '1' 
		BEGIN
			SELECT CFirstDate, CONVERT(VARCHAR, datepart(mm, CFirstDate)) AS CCOLS01,
				   SUM(CASE WHEN CAttendType = 'W1day' THEN 1 ELSE NULL END) AS CW1day,
				   SUM(CASE WHEN CAttendType = 'W2days' THEN 1 ELSE NULL END) AS CW2days,
				   SUM(CASE WHEN CAttendType = 'W3days' THEN 1 ELSE NULL END) AS CW3days,
				   SUM(CASE WHEN CAttendType = 'W4days' THEN 1 ELSE NULL END) AS CW4days,
				   SUM(CASE WHEN CAttendType = 'W5days' THEN 1 ELSE NULL END) AS CW5days,
				   SUM(CASE WHEN CAttendType = 'W6days' THEN 1 ELSE NULL END) AS CW6days,
				   SUM(CASE WHEN CAttendType = 'W7days' THEN 1 ELSE NULL END) AS CW7days,
				   COUNT(CAttendType) * 1.0 AS CTotal
			  FROM @TEMPTABLE
			 WHERE CASE WHEN @P_GRADE = '' THEN '1' ELSE CCHGGrade END = CASE WHEN @P_GRADE = '' THEN '1' ELSE @P_GRADE END
			 GROUP BY CFirstDate
		 --  jsp에서 처리하려면 아래를 막기
			UNION ALL
			SELECT '2099-12-31' AS CFirstDate, '평균' AS CCOLS01,
					ROUND(AVG(CW1day), 2) AS CW1day,
					ROUND(AVG(CW2days), 2) AS CW2days,
					ROUND(AVG(CW3days), 2) AS CW3days,
					ROUND(AVG(CW4days), 2) AS CW4days,
					ROUND(AVG(CW5days), 2) AS CW5days,
					ROUND(AVG(CW6days), 2) AS CW6days,
					ROUND(AVG(CW7days), 2) AS CW7days,
					ROUND(AVG(CTotal), 2) AS CTotal
			  FROM (
					SELECT CFirstDate, CONVERT(VARCHAR, datepart(mm, CFirstDate)) AS CCOLS01,
						   SUM(CASE WHEN CAttendType = 'W1day' THEN 1.0 ELSE NULL END) AS CW1day,
						   SUM(CASE WHEN CAttendType = 'W2days' THEN 1.0 ELSE NULL END) AS CW2days,
						   SUM(CASE WHEN CAttendType = 'W3days' THEN 1.0 ELSE NULL END) AS CW3days,
						   SUM(CASE WHEN CAttendType = 'W4days' THEN 1.0 ELSE NULL END) AS CW4days,
						   SUM(CASE WHEN CAttendType = 'W5days' THEN 1.0 ELSE NULL END) AS CW5days,
						   SUM(CASE WHEN CAttendType = 'W6days' THEN 1.0 ELSE NULL END) AS CW6days,
						   SUM(CASE WHEN CAttendType = 'W7days' THEN 1.0 ELSE NULL END) AS CW7days,
						   COUNT(CAttendType) * 1.0 AS CTotal
					  FROM @TEMPTABLE
					 WHERE CASE WHEN @P_GRADE = '' THEN '1' ELSE CCHGGrade END = CASE WHEN @P_GRADE = '' THEN '1' ELSE @P_GRADE END
					 GROUP BY CFirstDate
				   ) T1
		END
	-- 상담관리 서비스별 학생수 평균(W1day W2days W3days W4days W5days W6days W7days)
	ELSE
		BEGIN
			SELECT CFirstDate, CONVERT(VARCHAR, datepart(mm, CFirstDate)) AS CCOLS01,
			       AVG(CW1day*1.0) AS CW1day,   AVG(CW2days*1.0) AS CW2days,
				   AVG(CW3days*1.0) AS CW3days, AVG(CW4days*1.0) AS CW4days,
				   AVG(CW5days*1.0) AS CW5days, AVG(CW6days*1.0) AS CW6days,
				   AVG(CW7days*1.0) AS CW7days, SUM(CTotal)  AS CTotal
			  FROM (
					SELECT CFirstDate, CScDepartCode,
						   SUM(CASE WHEN CAttendType = 'W1day'  THEN 1 ELSE NULL END) AS CW1day,
						   SUM(CASE WHEN CAttendType = 'W2days' THEN 1 ELSE NULL END) AS CW2days,
						   SUM(CASE WHEN CAttendType = 'W3days' THEN 1 ELSE NULL END) AS CW3days,
						   SUM(CASE WHEN CAttendType = 'W4days' THEN 1 ELSE NULL END) AS CW4days,
						   SUM(CASE WHEN CAttendType = 'W5days' THEN 1 ELSE NULL END) AS CW5days,
						   SUM(CASE WHEN CAttendType = 'W6days' THEN 1 ELSE NULL END) AS CW6days,
						   SUM(CASE WHEN CAttendType = 'W7days' THEN 1 ELSE NULL END) AS CW7days,
						   COUNT(CAttendType) * 1.0 AS CTotal
					  FROM @TEMPTABLE
					 WHERE CASE WHEN @P_GRADE = '' THEN '1' ELSE CCHGGrade END = CASE WHEN @P_GRADE = '' THEN '1' ELSE @P_GRADE END
					 GROUP BY CFirstDate, CScDepartCode
			       ) SUB1 GROUP BY CFirstDate
		 --  jsp에서 처리하려면 아래를 막기
			UNION ALL
			SELECT '2099-12-31' AS CFirstDate, '평균' AS CCOLS01,
					ROUND(AVG(CW1day), 2) AS CW1day,
					ROUND(AVG(CW2days), 2) AS CW2days,
					ROUND(AVG(CW3days), 2) AS CW3days,
					ROUND(AVG(CW4days), 2) AS CW4days,
					ROUND(AVG(CW5days), 2) AS CW5days,
					ROUND(AVG(CW6days), 2) AS CW6days,
					ROUND(AVG(CW7days), 2) AS CW7days,
					ROUND(AVG(CTotal), 2) AS CTotal
			  FROM (
					SELECT CFirstDate,
						   AVG(CW1day*1.0)  AS CW1day,  AVG(CW2days*1.0) AS CW2days,
						   AVG(CW3days*1.0) AS CW3days, AVG(CW4days*1.0) AS CW4days,
						   AVG(CW5days*1.0) AS CW5days, AVG(CW6days*1.0) AS CW6days,
						   AVG(CW7days*1.0) AS CW7days, SUM(CTotal)  AS CTotal
					  FROM (
							SELECT CFirstDate, CScDepartCode,
								   SUM(CASE WHEN CAttendType = 'W1day'  THEN 1 ELSE NULL END) AS CW1day,
								   SUM(CASE WHEN CAttendType = 'W2days' THEN 1 ELSE NULL END) AS CW2days,
								   SUM(CASE WHEN CAttendType = 'W3days' THEN 1 ELSE NULL END) AS CW3days,
								   SUM(CASE WHEN CAttendType = 'W4days' THEN 1 ELSE NULL END) AS CW4days,
								   SUM(CASE WHEN CAttendType = 'W5days' THEN 1 ELSE NULL END) AS CW5days,
								   SUM(CASE WHEN CAttendType = 'W6days' THEN 1 ELSE NULL END) AS CW6days,
								   SUM(CASE WHEN CAttendType = 'W7days' THEN 1 ELSE NULL END) AS CW7days,
								   COUNT(CAttendType) * 1.0 AS CTotal
							  FROM @TEMPTABLE
							 WHERE CASE WHEN @P_GRADE = '' THEN '1' ELSE CCHGGrade END = CASE WHEN @P_GRADE = '' THEN '1' ELSE @P_GRADE END
							 GROUP BY CFirstDate, CScDepartCode
						   ) SUB1 GROUP BY CFirstDate
				   ) T1
		END

	RETURN
END
-- 5.상담관리 유입 학년별 평균등원개월
-- 여기서는 평균의 평균을 구하는건 의미없으므로 무시
S5_RTN:
BEGIN
	IF @P_COMPARE = '1' -- 초, 중, 고
		BEGIN
			SELECT ROUND(AVG(CGapDay), 2) AS CTotal,
				   ROUND(AVG(CASE WHEN CONVERT(INT, SUBSTRING(CGrade, 2, 2))  <  7 THEN CGapDay ELSE NULL END), 2) AS CG6,
				   ROUND(AVG(CASE WHEN CONVERT(INT, SUBSTRING(CGrade, 2, 2))  >= 7  AND CONVERT(INT, SUBSTRING(CGrade, 2, 2))  <=  9 THEN CGapDay ELSE NULL END), 2) AS CG7,
				   ROUND(AVG(CASE WHEN CONVERT(INT, SUBSTRING(CGrade, 2, 2))  >= 10 AND CONVERT(INT, SUBSTRING(CGrade, 2, 2))  <= 12 THEN CGapDay ELSE NULL END), 2) AS CG10,
				   ROUND(AVG(CASE WHEN CONVERT(INT, SUBSTRING(CGrade, 2, 2))  > 12 THEN CGapDay ELSE NULL END), 2) AS CG13
			  FROM (
					SELECT CASE WHEN CONVERT(INT, SUBSTRING(CGrade, 2, 2)) <= 12 THEN
						   'g'+CONVERT(VARCHAR, CONVERT(INT, SUBSTRING(CGrade, 2, 2)) -
									   (CASE WHEN CEndDay IS NULL THEN datepart(year, GETDATE())
											 ELSE datepart(year, CEndDay)  END - datepart(year, CMinDate)))
						   ELSE CGrade END AS CGrade,
						   ROUND(CGapDay * 1.0 / 365 * 12, 2) AS CGapDay
					  FROM
							(
							SELECT a.ccode, a.CGrade, MIN(b.CStartDate) AS CMinDate, a.CEndDay, 
								   SUM(DATEDIFF(DD, b.CStartDate,isnull(c.CLeaveEndDate, b.CEndDate))) + 1 AS CGapDay
							  FROM TStudent a(NOLOCK)
							 INNER JOIN TStudentCounsel b(NOLOCK)
								ON a.CBranchCode = b.CScDepartCode and a.CCode = b.CScCode
							  LEFT JOIN TStudentCounselLeave c
								ON b.CScDepartCode = c.CStdBrcDptCode and b.CScCode = c.CStdCode and b.cno = c.CNo
							 WHERE EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CBranchCode)
							 GROUP BY a.ccode, a.CGrade, a.CEndDay
							) T1
					) T2
		END
	ELSE
		BEGIN
			SELECT ROUND(AVG(CGapDay), 2) AS CTotal,
				   ROUND(AVG(CASE WHEN CONVERT(INT, SUBSTRING(CGrade, 2, 2))  <  7 THEN CGapDay ELSE NULL END), 2) AS CG6,
				   ROUND(AVG(CASE WHEN CONVERT(INT, SUBSTRING(CGrade, 2, 2))  =  7 THEN CGapDay ELSE NULL END), 2) AS CG7,
				   ROUND(AVG(CASE WHEN CONVERT(INT, SUBSTRING(CGrade, 2, 2))  =  8 THEN CGapDay ELSE NULL END), 2) AS CG8,
				   ROUND(AVG(CASE WHEN CONVERT(INT, SUBSTRING(CGrade, 2, 2))  =  9 THEN CGapDay ELSE NULL END), 2) AS CG9,
				   ROUND(AVG(CASE WHEN CONVERT(INT, SUBSTRING(CGrade, 2, 2))  = 10 THEN CGapDay ELSE NULL END), 2) AS CG10,
				   ROUND(AVG(CASE WHEN CONVERT(INT, SUBSTRING(CGrade, 2, 2))  = 11 THEN CGapDay ELSE NULL END), 2) AS CG11,
				   ROUND(AVG(CASE WHEN CONVERT(INT, SUBSTRING(CGrade, 2, 2))  = 12 THEN CGapDay ELSE NULL END), 2) AS CG12,
				   ROUND(AVG(CASE WHEN CONVERT(INT, SUBSTRING(CGrade, 2, 2))  > 12 THEN CGapDay ELSE NULL END), 2) AS CG13
			  FROM (
					SELECT CASE WHEN CONVERT(INT, SUBSTRING(CGrade, 2, 2)) <= 12 THEN
						   'g'+CONVERT(VARCHAR, CONVERT(INT, SUBSTRING(CGrade, 2, 2)) -
									   (CASE WHEN CEndDay IS NULL THEN datepart(year, GETDATE())
											 ELSE datepart(year, CEndDay)  END - datepart(year, CMinDate)))
						   ELSE CGrade END AS CGrade,
						   ROUND(CGapDay * 1.0 / 365 * 12, 2) AS CGapDay
					  FROM
							(
							SELECT a.ccode, a.CGrade, MIN(b.CStartDate) AS CMinDate, a.CEndDay, 
								   SUM(DATEDIFF(DD, b.CStartDate,isnull(c.CLeaveEndDate, b.CEndDate))) + 1 AS CGapDay
							  FROM TStudent a(NOLOCK)
							 INNER JOIN TStudentCounsel b(NOLOCK)
								ON a.CBranchCode = b.CScDepartCode and a.CCode = b.CScCode
							  LEFT JOIN TStudentCounselLeave c(NOLOCK)
								ON b.CScDepartCode = c.CStdBrcDptCode and b.CScCode = c.CStdCode and b.cno = c.CNo
							 WHERE EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CBranchCode)
							 GROUP BY a.ccode, a.CGrade, a.CEndDay
							) T1
					) T2
		END

	RETURN
END
-- 6.상담관리 타입별 평균등원개월
-- 여기서는 평균의 평균을 구하는건 의미없으므로 무시
S6_RTN:
BEGIN
	SELECT	ROUND(AVG(CGapDay), 2) AS CTotal,
			ROUND(AVG(CASE WHEN CVltType =  0 THEN CGapDay ELSE NULL END), 2) AS CVltType0,
			ROUND(AVG(CASE WHEN CVltType =  1 THEN CGapDay ELSE NULL END), 2) AS CVltType1,
			ROUND(AVG(CASE WHEN CVltType =  2 THEN CGapDay ELSE NULL END), 2) AS CVltType2,
			ROUND(AVG(CASE WHEN CVltType =  3 THEN CGapDay ELSE NULL END), 2) AS CVltType3,
			ROUND(AVG(CASE WHEN CVltType =  4 THEN CGapDay ELSE NULL END), 2) AS CVltType4,
			ROUND(AVG(CASE WHEN CVltType =  5 THEN CGapDay ELSE NULL END), 2) AS CVltType5,
			ROUND(AVG(CASE WHEN CVltType =  6 THEN CGapDay ELSE NULL END), 2) AS CVltType6,
			ROUND(AVG(CASE WHEN CVltType =  7 THEN CGapDay ELSE NULL END), 2) AS CVltType7,
			ROUND(AVG(CASE WHEN CVltType =  8 THEN CGapDay ELSE NULL END), 2) AS CVltType8,
			ROUND(AVG(CASE WHEN CVltType =  9 THEN CGapDay ELSE NULL END), 2) AS CVltType9,
			ROUND(AVG(CASE WHEN CVltType = 10 THEN CGapDay ELSE NULL END), 2) AS CVltType10,
			ROUND(AVG(CASE WHEN CVltType = 11 THEN CGapDay ELSE NULL END), 2) AS CVltType11,
			ROUND(AVG(CASE WHEN CVltType = 12 THEN CGapDay ELSE NULL END), 2) AS CVltType12,
			ROUND(AVG(CASE WHEN CVltType = 13 THEN CGapDay ELSE NULL END), 2) AS CVltType13,
			ROUND(AVG(CASE WHEN CVltType = 14 THEN CGapDay ELSE NULL END), 2) AS CVltType14,
			ROUND(AVG(CASE WHEN CVltType = 15 THEN CGapDay ELSE NULL END), 2) AS CVltType15,
			ROUND(AVG(CASE WHEN CVltType = 16 THEN CGapDay ELSE NULL END), 2) AS CVltType16,
			ROUND(AVG(CASE WHEN CVltType = 99 THEN CGapDay ELSE NULL END), 2) AS CVltType99
		FROM 
			(
			SELECT  CVltType,
					ROUND(CGapDay * 1.0 / 365 * 12, 2) AS CGapDay
				FROM
					(
					SELECT a.ccode, a.CVltType, 
							SUM(DATEDIFF(DD, b.CStartDate,isnull(c.CLeaveEndDate, b.CEndDate))) + 1 AS CGapDay
					  FROM TStudent a(NOLOCK)
					 INNER JOIN TStudentCounsel b(NOLOCK)
						ON a.CBranchCode = b.CScDepartCode and a.CCode = b.CScCode
					  LEFT JOIN TStudentCounselLeave c(NOLOCK)
						ON b.CScDepartCode = c.CStdBrcDptCode and b.CScCode = c.CStdCode and b.cno = c.CNo
					 WHERE EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CBranchCode)
					 GROUP BY a.ccode, a.CVltType
					) T1
			) T2

	RETURN
END
-- 7.개별지도 콤마수(기준년도 이전년도 대비)
S7_RTN:
BEGIN
	-- 12개월을 돌려가면서 해당데이터 수집
	SELECT @dLoopDate  = CONVERT(DATETIME, CONVERT(VARCHAR, CONVERT(INT, @P_YEAR) - 1) + '-12-01') ,@dLoop = 1
	WHILE @dLoop <= 12
		BEGIN
			-- 스케쥴만 가지고 처리하게되면 실제 스케쥴 없는 경우 개별지도 학생수와 맞지 않으므로 조인 걸어준다.
			INSERT INTO @TEMPTABLE (CFirstDate, CScDepartCode, CStdCount, CTutoring)
			SELECT @dLoopDate, a.CStdDepartCode, COUNT(a.CStdCode), ISNULL(c.CNT, 0)
			  FROM TStudentTutoring a(NOLOCK)
			  LEFT JOIN (	-- 개별지도 스케쥴
							SELECT a.CBranchCode, COUNT(DATEADD(Day, -(Day(a.CDate)-1), a.CDate)) AS CNT
							  FROM TTimeScheduleStudent a(NOLOCK)
							 WHERE a.CScheduleType = 'EdSt'
							   AND EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CBranchCode)
							   AND DATEADD(Day, -(Day(a.CDate)-1), a.CDate) = @dLoopDate -- 일자변환
							 GROUP BY a.CBranchCode
						) c ON a.CStdDepartCode = c.CBranchCode
			 WHERE a.CStdDepartCode  = @P_FACILITY
				-- 시작일이 다음달1일보다 작고 종료일이 마지막일보다 크거나 같은거
				-- 1.30일 이전 ~ 1.31 : O
			   AND a.CStartDate < DATEADD(Month, 1, @dLoopDate) AND a.CEndDate >= dateadd(d,-1,dateadd(m,1,dateadd(dd,1,dateadd(dd,-datepart(dd,@dLoopDate),@dLoopDate))))
			 GROUP BY a.CStdDepartCode, c.CNT

			-- 저장값이 없는 경우 껍떼기 하나 생성(조회 시 전체 월을 나오게 하기위함)
			-- 2014.08.05 : 전년도의 업데이트를 위해 지점별로 모두 생성 시킨다.
			IF @@ROWCOUNT = 0
				BEGIN
					INSERT INTO @TEMPTABLE (CFirstDate, CScDepartCode)
					SELECT @dLoopDate, CFACILITY
					  FROM @FACILITY
				END

			-- 이전년도 업데이트 하기
			UPDATE A SET
				A.CBeStdCount = B.CBeStdCount,
				A.CBeTutoring = B.CBeTutoring
			  FROM @TEMPTABLE A
			  LEFT JOIN (
						SELECT @dLoopDate AS CFirstDate, a.CStdDepartCode, COUNT(a.CStdCode) AS CBeStdCount, ISNULL(c.CNT, 0) AS CBeTutoring
							FROM TStudentTutoring a(NOLOCK)
							LEFT JOIN (	-- 개별지도 스케쥴
										SELECT CBranchCode, COUNT(DATEADD(Day, -(Day(CDate)-1), CDate)) AS CNT
											FROM TTimeScheduleStudent a(NOLOCK)
											WHERE CScheduleType = 'EdSt'
											AND EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CBranchCode)  
											AND DATEADD(Day, -(Day(CDate)-1), CDate) = DATEADD(Month, -12, @dLoopDate) - (day(@dLoopDate)-1) -- 일자변환(12개월 이전)
											GROUP BY CBranchCode
									) c ON a.CStdDepartCode = c.CBranchCode
							WHERE EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CStdDepartCode)
							-- 시작일이 다음달1일보다 작고 종료일이 마지막일보다 크거나 같은거
							-- 1.30일 이전 ~ 1.31 : O
							AND a.CStartDate < DATEADD(Month, 1, DATEADD(Month, -12, @dLoopDate) - (day(@dLoopDate)-1)) AND a.CEndDate >= dateadd(d,-1,dateadd(m,1,dateadd(dd,1,dateadd(dd,-datepart(dd,DATEADD(Month, -12, @dLoopDate) - (day(@dLoopDate)-1)),DATEADD(Month, -12, @dLoopDate) - (day(@dLoopDate)-1)))))
							GROUP BY a.CStdDepartCode, c.CNT
						) B ON A.CFirstDate = B.CFirstDate AND  A.CScDepartCode = B.CStdDepartCode
			 WHERE A.CFirstDate = @dLoopDate

			SELECT @dLoopDate = DATEADD(Month, 1, @dLoopDate), @dLoop = @dLoop + 1
		END

	--개별지도 콤마수(합산)
	IF @P_GROUP_FLAG = '1' 
		BEGIN
			--비교항목을 처리하기 위해 한번 더 SELECT로 감싼다
			SELECT *,
				   -- 비교항목(콤마수/1인당콤마수) : (전년값-기준년값) ÷ 전년값 
				   CASE WHEN @P_COMPARE = '1' THEN
							CASE WHEN ISNULL(CBeTutoring, 0) <> 0 THEN ROUND((CBeTutoring - CTutoring) * 1.0 / CBeTutoring * 100, 2) ELSE 0.0 END
						WHEN @P_COMPARE = '2' THEN
							CASE WHEN CBeCommas <> 0 THEN ROUND((CCommas - CBeCommas) * 1.0 / CBeCommas * 100, 2) ELSE 0.0 END
				   END AS CCOMPARE
			  FROM
					(
					SELECT CFirstDate, CONVERT(VARCHAR, datepart(mm, CFirstDate)) AS CCOLS01,
						   SUM(CBeStdCount) AS CBeStdCount, SUM(CBeTutoring) AS CBeTutoring,
						   -- 1인당콤마수 : 콤마수 ÷ 학생수
						   CASE WHEN ISNULL(SUM(CBeTutoring), 0) <> 0 THEN ROUND(SUM(CBeTutoring) * 1.0 / SUM(CBeStdCount), 2) ELSE 0.0 END AS CBeCommas,
						   SUM(CStdCount) AS CStdCount, SUM(CTutoring) AS CTutoring,
						   -- 1인당콤마수 : 콤마수 ÷ 학생수
						   CASE WHEN ISNULL(SUM(CTutoring), 0) <> 0 THEN ROUND(SUM(CTutoring) * 1.0 / SUM(CStdCount), 2) ELSE 0.0 END AS CCommas
					  FROM @TEMPTABLE	
					 GROUP BY CFirstDate
		 --  jsp에서 처리하려면 아래 막기
					-- 누적합계
					UNION
					SELECT '2099-12-30' AS CFirstDate, '누적합계' AS CCOLS01,
						   SUM(CBeStdCount), SUM(CBeTutoring), 
						   -- 1인당콤마수 : 콤마수 ÷ 학생수
						   CASE WHEN ISNULL(SUM(CBeTutoring), 0) <> 0 THEN ROUND(SUM(CBeTutoring) * 1.0 / SUM(CBeStdCount), 2) ELSE 0.0 END AS CBeCommas,
						   SUM(CStdCount), SUM(CTutoring),
						   -- 1인당콤마수 : 콤마수 ÷ 학생수
						   CASE WHEN ISNULL(SUM(CTutoring), 0) <> 0 THEN ROUND(SUM(CTutoring) * 1.0 / SUM(CStdCount), 2) ELSE 0.0 END AS CCommas
					  FROM @TEMPTABLE
					-- 평균
					UNION
					SELECT '2099-12-31' AS CFirstDate, '평균' AS CCOLS01,
						   ROUND(AVG(CASE WHEN CBeStdCount = 0 THEN NULL ELSE CBeStdCount END * 1.0), 2), 
						   ROUND(AVG(CASE WHEN CBeTutoring = 0 THEN NULL ELSE CBeTutoring END * 1.0), 2), 
						   -- 1인당콤마수 : 콤마수 ÷ 학생수
						   CASE WHEN ISNULL(SUM(CBeTutoring), 0) <> 0 THEN ROUND(SUM(CBeTutoring) * 1.0 / SUM(CBeStdCount), 2) ELSE 0.0 END AS CBeCommas,
						   ROUND(AVG(CASE WHEN CStdCount = 0 THEN NULL ELSE CStdCount END * 1.0), 2), 
						   ROUND(AVG(CASE WHEN CTutoring = 0 THEN NULL ELSE CTutoring END * 1.0), 2),
						   -- 1인당콤마수 : 콤마수 ÷ 학생수
						   CASE WHEN ISNULL(SUM(CTutoring), 0) <> 0 THEN ROUND(SUM(CTutoring) * 1.0 / SUM(CStdCount), 2) ELSE 0.0 END AS CCommas
					  FROM @TEMPTABLE
					) T1
			 ORDER BY CFirstDate
		END
	--개별지도 콤마수(평균)
	ELSE
		BEGIN
			--비교항목을 처리하기 위해 한번 더 SELECT로 감싼다
			SELECT *,
				   -- 비교항목(콤마수/1인당콤마수) : (전년값-기준년값) ÷ 전년값 
				   CASE WHEN @P_COMPARE = '1' THEN
							CASE WHEN ISNULL(CBeTutoring, 0) <> 0 THEN ROUND((CBeTutoring - CTutoring) * 1.0 / CBeTutoring * 100, 2) ELSE 0.0 END
						WHEN @P_COMPARE = '2' THEN
							CASE WHEN CBeCommas <> 0 THEN ROUND((CCommas - CBeCommas) * 1.0 / CBeCommas * 100, 2) ELSE 0.0 END
				   END AS CCOMPARE
			  FROM
					(
					SELECT CFirstDate, CONVERT(VARCHAR, datepart(mm, CFirstDate)) AS CCOLS01,
						   AVG(CBeStdCount * 1.0) AS CBeStdCount,
						   AVG(CBeTutoring * 1.0) AS CBeTutoring,
						   -- 1인당콤마수 : 콤마수 ÷ 학생수
						   CASE WHEN ISNULL(SUM(CBeTutoring), 0) <> 0 THEN ROUND(SUM(CBeTutoring) * 1.0 / SUM(CBeStdCount), 2) ELSE 0.0 END AS CBeCommas,
						   AVG(CStdCount * 1.0) AS CStdCount,
						   AVG(CTutoring * 1.0) AS CTutoring,
						   -- 1인당콤마수 : 콤마수 ÷ 학생수
						   CASE WHEN ISNULL(SUM(CTutoring), 0) <> 0 THEN ROUND(SUM(CTutoring) * 1.0 / SUM(CStdCount), 2) ELSE 0.0 END AS CCommas
					  FROM
							(
							SELECT CFirstDate, CScDepartCode,
								   SUM(CBeStdCount) AS CBeStdCount, SUM(CBeTutoring) AS CBeTutoring,
								   SUM(CStdCount) AS CStdCount, SUM(CTutoring) AS CTutoring
							  FROM @TEMPTABLE	
							 GROUP BY CFirstDate, CScDepartCode
							) SUB1
					 GROUP BY CFirstDate
		 --  jsp에서 처리하려면 아래 막기
					-- 누적합계
					UNION
					SELECT '2099-12-30' AS CFirstDate, '누적합계' AS CCOLS01,
						   SUM(CBeStdCount), SUM(CBeTutoring), 
						   -- 1인당콤마수 : 콤마수 ÷ 학생수
						   CASE WHEN ISNULL(SUM(CBeTutoring), 0) <> 0 THEN ROUND(SUM(CBeTutoring) * 1.0 / SUM(CBeStdCount), 2) ELSE 0.0 END AS CBeCommas,
						   SUM(CStdCount), SUM(CTutoring),
						   -- 1인당콤마수 : 콤마수 ÷ 학생수
						   CASE WHEN ISNULL(SUM(CTutoring), 0) <> 0 THEN ROUND(SUM(CTutoring) * 1.0 / SUM(CStdCount), 2) ELSE 0.0 END AS CCommas
					  FROM @TEMPTABLE
					-- 평균
					UNION
					SELECT '2099-12-31' AS CFirstDate, '평균' AS CCOLS01,
						   ROUND(AVG(CASE WHEN CBeStdCount = 0 THEN NULL ELSE CBeStdCount END * 1.0), 2), 
						   ROUND(AVG(CASE WHEN CBeTutoring = 0 THEN NULL ELSE CBeTutoring END * 1.0), 2), 
						   -- 1인당콤마수 : 콤마수 ÷ 학생수
						   CASE WHEN ISNULL(SUM(CBeTutoring), 0) <> 0 THEN ROUND(SUM(CBeTutoring) * 1.0 / SUM(CBeStdCount), 2) ELSE 0.0 END AS CBeCommas,
						   ROUND(AVG(CASE WHEN CStdCount = 0 THEN NULL ELSE CStdCount END * 1.0), 2), 
						   ROUND(AVG(CASE WHEN CTutoring = 0 THEN NULL ELSE CTutoring END * 1.0), 2),
						   -- 1인당콤마수 : 콤마수 ÷ 학생수
						   CASE WHEN ISNULL(SUM(CTutoring), 0) <> 0 THEN ROUND(SUM(CTutoring) * 1.0 / SUM(CStdCount), 2) ELSE 0.0 END AS CCommas
					  FROM @TEMPTABLE
					) T1
			 ORDER BY CFirstDate
		END

	RETURN
END
-- 8.개별지도 신규복회종료 학생수
S8_RTN:
BEGIN

	SELECT ISNULL(A.CFirstDate, B.CFirstDate) AS CFirstDate, -- 정렬을위한 일자
		   ISNULL(A.CCOLS01, B.CCOLS01) AS CMonth,			 -- 월
		   A.CNowFirst, A.CNowNew, A.CNowReturn, A.CNowEnd, A.CNowLast, -- 기준년도 월초, 신규, 복회, 종료, 월말
		   CASE WHEN ISNULL(A.CNowFirst, 0) <> 0 THEN
			   ROUND(
				   CASE WHEN @P_LEAVE = '1' -- 반영안함
						THEN A.CNowEnd * 1.0 / A.CNowFirst * 100
						ELSE (A.CNowEnd - A.CNowReturn) * 1.0 / A.CNowFirst * 100
				   END
			   , 1)
		   ELSE 0.0
		   END AS CNowLeaveRate, -- 기준년도이탈율
		   CASE WHEN @P_LEAVE = '1' 
				THEN A.CDetail_Leave_Rate
				ELSE A.CValue
		   END AS CNowAccrueLeaveRate, -- 기준년도 6개월누적이탈율
		   B.CPastFirst, B.CPastNew, B.CPastReturn, B.CPastEnd, B.CPastLast, -- 이전년도 월초, 신규, 복회, 종료, 월말
		   CASE WHEN ISNULL(B.CPastFirst, 0) <> 0 THEN
			   ROUND(
				   CASE WHEN @P_LEAVE = '1' 
						THEN B.CPastEnd * 1.0 / B.CPastFirst * 100
						ELSE (B.CPastEnd - B.CPastReturn) * 1.0 / B.CPastFirst * 100
				   END
			   , 1)
		   ELSE 0.0
		   END AS CPastLeaveRate, -- 이전년도이탈율
		   CASE WHEN @P_LEAVE = '1' 
				THEN B.CDetail_Leave_Rate
				ELSE B.CValue
		   END AS CPastAccrueLeaveRate -- 이전년도 6개월누적이탈율
		  -- 비교항목(월초/신규/복회/종료/월말/이탈율/6개월누적이탈율)
		  ,CASE WHEN @P_COMPARE = '1' THEN 
					CASE WHEN ISNULL(B.CPastFirst, 0) <> 0 THEN ROUND((B.CPastFirst - A.CNowFirst) * 1.0 / B.CPastFirst * 100, 2) ELSE 0.00 END
				WHEN @P_COMPARE = '2' THEN 
					CASE WHEN ISNULL(B.CPastNew, 0) <> 0 THEN ROUND((B.CPastNew - A.CNowNew) * 1.0 / B.CPastNew * 100, 2) ELSE 0.00 END
				WHEN @P_COMPARE = '3' THEN 
					CASE WHEN ISNULL(B.CPastReturn, 0) <> 0 THEN ROUND((B.CPastReturn - A.CNowReturn) * 1.0 / B.CPastReturn * 100, 2) ELSE 0.00 END
				WHEN @P_COMPARE = '4' THEN 
					CASE WHEN ISNULL(B.CPastEnd, 0) <> 0 THEN ROUND((B.CPastEnd - A.CNowEnd) * 1.0 / B.CPastEnd * 100, 2) ELSE 0.00 END
				WHEN @P_COMPARE = '5' THEN 
					CASE WHEN ISNULL(B.CPastLast, 0) <> 0 THEN ROUND((B.CPastLast - A.CNowLast) * 1.0 / B.CPastLast * 100, 2) ELSE 0.00 END
				WHEN @P_COMPARE = '6' THEN -- 이탈율
					CASE WHEN 
						(CASE WHEN @P_LEAVE = '1' THEN -- 복회반영여부
							  (B.CPastEnd * 1.0 / B.CPastFirst * 100)
							  ELSE (B.CPastEnd - B.CPastReturn) * 1.0 / B.CPastFirst * 100 END) <> 0 THEN -- 나눌값이 0이 아니면
							ROUND(
								CASE WHEN @P_LEAVE = '1' THEN 
										   ( (B.CPastEnd * 1.0 / B.CPastFirst * 100) - (A.CNowEnd * 1.0 / A.CNowFirst * 100) ) /  (B.CPastEnd * 1.0 / B.CPastFirst * 100)
									 ELSE ( ((B.CPastEnd - B.CPastReturn) * 1.0 / B.CPastFirst * 100) - ((A.CNowEnd - A.CNowReturn) * 1.0 / A.CNowFirst * 100)) / ((B.CPastEnd - B.CPastReturn) * 1.0 / B.CPastFirst * 100) END
							, 2)
					ELSE 0.00 END
				WHEN @P_COMPARE = '7' THEN -- 6개월누적이탈율
					CASE WHEN (CASE WHEN @P_LEAVE = '1' THEN ISNULL(B.CDetail_Leave_Rate, 0) ELSE ISNULL(B.CValue, 0) END) <> 0 THEN
						ROUND(
							CASE WHEN @P_LEAVE = '1' THEN (B.CDetail_Leave_Rate - A.CDetail_Leave_Rate) / B.CDetail_Leave_Rate * 100
								 ELSE (B.CValue - A.CValue) / B.CValue * 100 END
						, 2)
					ELSE 0.00 END
		   END AS CCOMPARE
	  INTO #TEMP00
	  FROM
			(	
				SELECT datepart(mm, T1.CFirstDate) AS CCOLS01,
					   CASE WHEN @P_GROUP_FLAG = '1' 
							THEN SUM([개별지도(월초)] + [개별지도(월초누락연장)])
							ELSE AVG(([개별지도(월초)] + [개별지도(월초누락연장)])*1.0)
					   END AS CNowFirst,
					   CASE WHEN @P_GROUP_FLAG = '1'
							THEN SUM([개별지도(신규)])
							ELSE AVG([개별지도(신규)]*1.0)
					   END AS CNowNew,
					   CASE WHEN @P_GROUP_FLAG = '1' 
							THEN SUM([개별지도(복회)])
							ELSE SUM([개별지도(복회)]*1.0)
					   END AS CNowReturn,
					   CASE WHEN @P_GROUP_FLAG = '1' 
							THEN SUM([개별지도(월초)] + [개별지도(월초누락연장)] - [개별지도(월말)] - [개별지도(월말누락연장)] + [개별지도(신규)] + [개별지도(복회)]) 
							ELSE SUM(([개별지도(월초)] + [개별지도(월초누락연장)] - [개별지도(월말)] - [개별지도(월말누락연장)] + [개별지도(신규)] + [개별지도(복회)])*1.0) 
					   END AS CNowEnd,
					   CASE WHEN @P_GROUP_FLAG = '1' 
							THEN SUM([개별지도(월말)] + [개별지도(월말누락연장)])
							ELSE AVG(([개별지도(월말)] + [개별지도(월말누락연장)])*1.0)
					   END AS CNowLast,
					   T1.CFirstDate,
					   CASE WHEN @P_GROUP_FLAG = '1' 
							THEN SUM(T2.CTutoring_Leave_In_Rate)
							ELSE AVG(T2.CTutoring_Leave_In_Rate*1.0)
					   END AS CValue, 
					   CASE WHEN @P_GROUP_FLAG = '1' 
							THEN SUM(T2.CTutoring_Leave_Rate)
							ELSE AVG(T2.CTutoring_Leave_Rate* 1.0) 
					   END AS CDetail_Leave_Rate
				  FROM (SELECT a.* 
				          FROM TAnalytics_Student_Count a(NOLOCK)
						 INNER JOIN (SELECT CDepartCode, CFirstDate, MAX(CCalcDate) as CCalcDate FROM TAnalytics_Student_Count(NOLOCK) GROUP BY CDepartCode, CFirstDate) b
						    ON a.CDepartCode = b.CDepartCode AND a.CFirstDate = b.CFirstDate AND a.CCalcDate = b.CCalcDate
						  ) T1 -- 2014.9.12 수정 : TAnalytics_Student_Count의 데이터 집계변경으로 인한 쿼리 변경
				  LEFT OUTER JOIN TEIGHTINDICATOR T2 (NOLOCK)
						ON T1.CDepartCode = T2.CDepartCode AND T1.CFirstDate = T2.CFirstDate AND T2.CFlag = '5'
				 WHERE EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = T1.CDepartCode)
				   AND T1.CFirstDate >= CONVERT(DATETIME, CONVERT(VARCHAR, CONVERT(INT, @P_YEAR) - 1) + '-12-01')
				   AND T1.CFirstDate <= CONVERT(DATETIME, @P_YEAR+'-11-01')
				 GROUP BY T1.CFirstDate
			) A
	  FULL OUTER JOIN
			(	
				SELECT datepart(mm, T1.CFirstDate) AS CCOLS01,
					   CASE WHEN @P_GROUP_FLAG = '1' 
							THEN SUM([개별지도(월초)] + [개별지도(월초누락연장)])
							ELSE AVG(([개별지도(월초)] + [개별지도(월초누락연장)])*1.0)
					   END AS CPastFirst,
					   CASE WHEN @P_GROUP_FLAG = '1' 
							THEN SUM([개별지도(신규)])
							ELSE AVG([개별지도(신규)]*1.0)
					   END AS CPastNew,
					   CASE WHEN @P_GROUP_FLAG = '1'
							THEN SUM([개별지도(복회)])
							ELSE AVG([개별지도(복회)]*1.0)
					   END AS CPastReturn,
					   CASE WHEN @P_GROUP_FLAG = '1'
							THEN SUM([개별지도(월초)] + [개별지도(월초누락연장)] - [개별지도(월말)] - [개별지도(월말누락연장)] + [개별지도(신규)] + [개별지도(복회)])
							ELSE AVG(([개별지도(월초)] + [개별지도(월초누락연장)] - [개별지도(월말)] - [개별지도(월말누락연장)] + [개별지도(신규)] + [개별지도(복회)])*1.0)
					   END AS CPastEnd,
					   CASE WHEN @P_GROUP_FLAG = '1'
							THEN SUM([개별지도(월말)] + [개별지도(월말누락연장)])
							ELSE AVG(([개별지도(월말)] + [개별지도(월말누락연장)])*1.0)
					   END AS CPastLast,
					   dateadd(month,-1, T1.CFirstDate)-(day(T1.CFirstDate)-1) AS CFirstDate,
					   CASE WHEN @P_GROUP_FLAG = '1'
							THEN SUM(T2.CTutoring_Leave_In_Rate)
							ELSE AVG(T2.CTutoring_Leave_In_Rate*1.0)
					   END AS CValue, 
					   CASE WHEN @P_GROUP_FLAG = '1'
							THEN SUM(T2.CTutoring_Leave_Rate)
							ELSE AVG(T2.CTutoring_Leave_Rate*1.0)
					   END AS CDetail_Leave_Rate
				  FROM (SELECT a.* 
				          FROM TAnalytics_Student_Count a(NOLOCK)
						 INNER JOIN (SELECT CDepartCode, CFirstDate, MAX(CCalcDate) as CCalcDate FROM TAnalytics_Student_Count(NOLOCK) GROUP BY CDepartCode, CFirstDate) b
						    ON a.CDepartCode = b.CDepartCode AND a.CFirstDate = b.CFirstDate AND a.CCalcDate = b.CCalcDate
						  ) T1 -- 2014.9.12 수정 : TAnalytics_Student_Count의 데이터 집계변경으로 인한 쿼리 변경
				  LEFT OUTER JOIN TEIGHTINDICATOR T2 (NOLOCK)
						ON T1.CDepartCode = T2.CDepartCode AND T1.CFirstDate = T2.CFirstDate AND T2.CFlag = '5'
				 WHERE EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = T1.CDepartCode) 
				   AND T1.CFirstDate >= CONVERT(DATETIME, CONVERT(VARCHAR, CONVERT(INT, @P_YEAR) - 2) + '-12-01')
				   AND T1.CFirstDate <= CONVERT(DATETIME, CONVERT(VARCHAR, CONVERT(INT, @P_YEAR) - 1) + '-11-01')
				 GROUP BY T1.CFirstDate
			) B ON A.CCOLS01=B.CCOLS01
	ORDER BY ISNULL(A.CFirstDate, B.CFirstDate)

	-- 12개월을 돌려가면서 해당데이터 추가
	SELECT @dLoopDate  = CONVERT(DATETIME, CONVERT(VARCHAR, CONVERT(INT, @P_YEAR) - 1) + '-12-01') ,@dLoop = 1
	WHILE @dLoop <= 12
		BEGIN
			IF (SELECT COUNT(1)
			      FROM #TEMP00
			     WHERE CFirstDate = @dLoopDate) = 0
				BEGIN
					INSERT INTO #TEMP00(CFirstDate, CMonth)
					SELECT @dLoopDate, datepart(mm, @dLoopDate)
				END

			SELECT @dLoopDate = DATEADD(Month, 1, @dLoopDate), @dLoop = @dLoop + 1
		END	
	
	SELECT CFirstDate, CONVERT(VARCHAR, CMonth) AS CMonth, CNowFirst, CNowNew, CNowReturn, CNowEnd, CNowLast, CNowLeaveRate, CNowAccrueLeaveRate, 
	       CPastFirst, CPastNew, CPastReturn, CPastEnd, CPastLast, CPastLeaveRate, CPastAccrueLeaveRate, CCOMPARE
	  FROM #TEMP00 
	-- 누적합계
	UNION
	SELECT '2099-12-30' AS CFirstDate, '누적합계' AS CMonth,
	       SUM(CNowFirst), SUM(CNowNew), SUM(CNowReturn), SUM(CNowEnd), SUM(CNowLast), NULL, NULL,
		   SUM(CPastFirst), SUM(CPastNew), SUM(CPastReturn), SUM(CPastEnd), SUM(CPastLast), NULL, NULL, NULL
	  FROM #TEMP00 
	-- 평균
	UNION
	SELECT '2099-12-31' AS CFirstDate, '평균' AS CMonth,
	       AVG(CNowFirst), AVG(CNowNew), AVG(CNowReturn), AVG(CNowEnd), AVG(CNowLast), AVG(CNowLeaveRate), AVG(CNowAccrueLeaveRate),
		   AVG(CPastFirst), AVG(CPastNew), AVG(CPastReturn), AVG(CPastEnd), AVG(CPastLast), AVG(CPastLeaveRate), AVG(CPastAccrueLeaveRate), AVG(CCOMPARE)
	  FROM #TEMP00 
	 ORDER BY CFirstDate
	
	RETURN
END
-- 9.개별지도 학년별 학생수(3번의 상담관리와 동일한 로직 : 변경이 있을 경우 영향이 있다면 같이 고치삼)
S9_RTN:
BEGIN
	-- 12개월을 돌려가면서 해당데이터 수집
	SELECT @dLoopDate  = CONVERT(DATETIME, CONVERT(VARCHAR, CONVERT(INT, @P_YEAR) - 1) + '-12-01') ,@dLoop = 1
	WHILE @dLoop <= 12
		BEGIN
			INSERT INTO @TEMPTABLE (CFirstDate, CScDepartCode, CScCode, CGrade, CStartDate, CEndDate, CEndDay, CCHGGrade)
			SELECT @dLoopDate, a.CStdDepartCode, a.CStdCode, b.CGrade, a.CStartDate, a.CEndDate, b.CEndDay, b.CGrade
			  FROM TStudentTutoring a(NOLOCK)
			  LEFT JOIN TStudent b(NOLOCK) ON a.CStdDepartCode = b.CBranchCode AND a.CStdCode = b.CCode
			 WHERE EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CStdDepartCode)
				-- 시작일이 다음달1일보다 작고 종료일이 마지막일보다 크거나 같은거
				-- 1.30일 이전 ~ 1.31 : O
			   AND a.CStartDate < DATEADD(Month, 1, @dLoopDate) AND a.CEndDate >= dateadd(d,-1,dateadd(m,1,dateadd(dd,1,dateadd(dd,-datepart(dd,@dLoopDate),@dLoopDate))))

			-- 저장값이 없는 경우 껍떼기 하나 생성(조회 시 전체 월을 나오게 하기위함)
			IF @@ROWCOUNT = 0
				BEGIN
					INSERT INTO @TEMPTABLE (CFirstDate, CScDepartCode)
					SELECT @dLoopDate, @P_FACILITY
				END

			SELECT @dLoopDate = DATEADD(Month, 1, @dLoopDate), @dLoop = @dLoop + 1

		END
	
	-- 1.기준년도가 해당연도보다 작으면 보정
	IF @P_YEAR < datepart(year, GETDATE())
		BEGIN
			-- 현재년도와 차이구하기
			SET @dConvertYear = datepart(year, GETDATE()) - @P_YEAR

			-- 재원중인 학생은(종료일이 NULL인 학생) 기간만큼 학년을 다운시킨다.
			UPDATE @TEMPTABLE SET 
					CCHGGrade = 
							 CASE WHEN CONVERT(INT, SUBSTRING(CGrade, 2, 2)) - @dConvertYear > 0 AND CONVERT(INT, SUBSTRING(CGrade, 2, 2)) <= 12 -- 년도차이보다 학년이 크고 고3 보다 작은거
							 THEN 'g' + CONVERT(VARCHAR, CONVERT(INT, SUBSTRING(CGrade, 2, 2)) - @dConvertYear)
						     ELSE CGrade -- 현 학생 상태가 재수, 검정은 시작이 언제인지 모르는 상황에서 빼기가 애매해서리 구하기 애매모호~~
							 END
			 WHERE CEndDay IS NULL

			-- 종료된 학생은 종료연도에 따라 계산
			UPDATE @TEMPTABLE SET 
					CCHGGrade =
							 CASE WHEN CONVERT(INT, SUBSTRING(CGrade, 2, 2)) <= 12 -- 고3 보다 작은거
							 THEN 'g'  + CONVERT(VARCHAR, CONVERT(INT, SUBSTRING(CGrade, 2, 2)) - (datepart(year, CEndDay) - @P_YEAR)) -- 기준년도에서 종료년도를 뺀다
						     ELSE CGrade -- 현 학생 상태가 재수, 검정은 시작이 언제인지 모르는 상황에서 빼기가 애매해서리 구하기 애매모호~~
							 END
			 WHERE CEndDay IS NOT NULL

		END

	-- 개별지도 학년별 학생수(합산)
	IF @P_GROUP_FLAG = '1' 
		BEGIN
			SELECT CFirstDate, CONVERT(VARCHAR, datepart(mm, CFirstDate)) AS CCOLS01,
				   SUM(CASE WHEN CONVERT(INT, SUBSTRING(CCHGGrade, 2, 2)) <=  6 THEN 1 ELSE NULL END) AS CG6,
				   SUM(CASE WHEN CCHGGrade =  'g7' THEN 1 ELSE NULL END) AS CG7,
				   SUM(CASE WHEN CCHGGrade =  'g8' THEN 1 ELSE NULL END) AS CG8,
				   SUM(CASE WHEN CCHGGrade =  'g9' THEN 1 ELSE NULL END) AS CG9,
				   SUM(CASE WHEN CCHGGrade = 'g10' THEN 1 ELSE NULL END) AS CG10,
				   SUM(CASE WHEN CCHGGrade = 'g11' THEN 1 ELSE NULL END) AS CG11,
				   SUM(CASE WHEN CCHGGrade = 'g12' THEN 1 ELSE NULL END) AS CG12,
				   SUM(CASE WHEN CONVERT(INT, SUBSTRING(CCHGGrade, 2, 2)) >= 13 THEN 1 ELSE NULL END) AS CG13,
				   COUNT(CCHGGrade) AS CTotal,
				   CASE WHEN COUNT(CCHGGrade) <> 0 THEN 
						ROUND(ISNULL(SUM(CASE WHEN CONVERT(INT, SUBSTRING(CCHGGrade, 2, 2)) <=  6 THEN 1 ELSE NULL END), 0) * 1.0 / COUNT(CCHGGrade) * 100, 2)
				   ELSE NULL END AS CG6_RATE,
				   CASE WHEN COUNT(CCHGGrade) <> 0 THEN 
						ROUND(ISNULL(SUM(CASE WHEN CCHGGrade =  'g7' OR CCHGGrade =  'g8' OR CCHGGrade =  'g9' THEN 1 ELSE NULL END), 0) * 1.0 / COUNT(CCHGGrade) * 100, 2)
				   ELSE NULL END AS CG7_RATE,
				   CASE WHEN COUNT(CCHGGrade) <> 0 THEN 
						ROUND(ISNULL(SUM(CASE WHEN CCHGGrade =  'g10' OR CCHGGrade =  'g11' OR CCHGGrade =  'g12' THEN 1 ELSE NULL END), 0) * 1.0 / COUNT(CCHGGrade) * 100, 2)
				   ELSE NULL END AS CG10_RATE,
				   CASE WHEN COUNT(CCHGGrade) <> 0 THEN 
						ROUND(ISNULL(SUM(CASE WHEN CONVERT(INT, SUBSTRING(CCHGGrade, 2, 2)) >= 13 THEN 1 ELSE NULL END), 0) * 1.0 / COUNT(CCHGGrade) * 100, 2)
				   ELSE NULL END AS CG13_RATE
			  FROM @TEMPTABLE
			 GROUP BY CFirstDate
		 --  jsp에서 처리
			UNION ALL
			SELECT '2099-12-31' AS CFirstDate, '평균' AS CCOLS01,
					ROUND(AVG(CG6), 2) AS CG6, 
					ROUND(AVG(CG7), 2) AS CG7, ROUND(AVG(CG8), 2) AS CG8, ROUND(AVG(CG9), 2) AS CG9, 
					ROUND(AVG(CG10), 2) AS CG10, ROUND(AVG(CG11), 2) AS CG11, ROUND(AVG(CG12), 2) AS CG12,
					ROUND(AVG(CG13), 2) AS CG13, SUM(CTotal) AS CTotal,
					CASE WHEN SUM(CTotal) <> 0 THEN ROUND(SUM(CG6) * 1.0 / SUM(CTotal) * 100, 2) ELSE 0.0 END AS CG6_RATE,
					CASE WHEN SUM(CTotal) <> 0 THEN ROUND((SUM(CG7)+SUM(CG8)+SUM(CG9)) * 1.0 / SUM(CTotal) * 100, 2) ELSE 0.0 END AS CG6_RATE,
					CASE WHEN SUM(CTotal) <> 0 THEN ROUND((SUM(CG10)+SUM(CG11)+SUM(CG12)) * 1.0 / SUM(CTotal) * 100, 2) ELSE 0.0 END AS CG10_RATE,
					CASE WHEN SUM(CTotal) <> 0 THEN ROUND(SUM(CG13) * 1.0 / SUM(CTotal) * 100, 2) ELSE 0.0 END AS CG13_RATE
					--ROUND(AVG(CG6_RATE), 2) AS CG6_RATE, ROUND(AVG(CG7_RATE), 2) AS CG7_RATE, ROUND(AVG(CG10_RATE), 2) AS CG10_RATE, ROUND(AVG(CG13_RATE), 2) AS CG13_RATE
			  FROM (
					SELECT CFirstDate, CONVERT(VARCHAR, datepart(mm, CFirstDate)) AS CCOLS01,
						   ISNULL(SUM(CASE WHEN CONVERT(INT, SUBSTRING(CCHGGrade, 2, 2)) <=  6 THEN 1.0 ELSE NULL END), 0) AS CG6,
						   ISNULL(SUM(CASE WHEN CCHGGrade =  'g7' THEN 1.0 ELSE NULL END), 0) AS CG7,
						   ISNULL(SUM(CASE WHEN CCHGGrade =  'g8' THEN 1.0 ELSE NULL END), 0) AS CG8,
						   ISNULL(SUM(CASE WHEN CCHGGrade =  'g9' THEN 1.0 ELSE NULL END), 0) AS CG9,
						   ISNULL(SUM(CASE WHEN CCHGGrade = 'g10' THEN 1.0 ELSE NULL END), 0) AS CG10,
						   ISNULL(SUM(CASE WHEN CCHGGrade = 'g11' THEN 1.0 ELSE NULL END), 0) AS CG11,
						   ISNULL(SUM(CASE WHEN CCHGGrade = 'g12' THEN 1.0 ELSE NULL END), 0) AS CG12,
						   ISNULL(SUM(CASE WHEN CONVERT(INT, SUBSTRING(CCHGGrade, 2, 2)) >= 13 THEN 1.0 ELSE NULL END), 0) AS CG13,
						   COUNT(CCHGGrade) AS CTotal,
						   CASE WHEN COUNT(CCHGGrade) <> 0 THEN
								ROUND(ISNULL(SUM(CASE WHEN CONVERT(INT, SUBSTRING(CCHGGrade, 2, 2)) <=  6 THEN 1 ELSE NULL END), 0) * 1.0 / COUNT(CCHGGrade) * 100, 2) 
						   ELSE 0.0 END AS CG6_RATE,
						   CASE WHEN COUNT(CCHGGrade) <> 0 THEN
								ROUND(ISNULL(SUM(CASE WHEN CCHGGrade =  'g7' OR CCHGGrade =  'g8' OR CCHGGrade =  'g9' THEN 1 ELSE NULL END), 0) * 1.0 / COUNT(CCHGGrade) * 100, 2) 
						   ELSE 0.0 END AS CG7_RATE,
						   CASE WHEN COUNT(CCHGGrade) <> 0 THEN
								ROUND(ISNULL(SUM(CASE WHEN CCHGGrade =  'g10' OR CCHGGrade =  'g11' OR CCHGGrade =  'g12' THEN 1 ELSE NULL END), 0) * 1.0 / COUNT(CCHGGrade) * 100, 2) 
						   ELSE 0.0 END AS CG10_RATE,
						   CASE WHEN COUNT(CCHGGrade) <> 0 THEN
								ROUND(ISNULL(SUM(CASE WHEN CONVERT(INT, SUBSTRING(CCHGGrade, 2, 2)) >= 13 THEN 1 ELSE NULL END), 0) * 1.0 / COUNT(CCHGGrade) * 100, 2)
						   ELSE 0.0 END AS CG13_RATE
					  FROM @TEMPTABLE
					 GROUP BY CFirstDate
				   ) T1
		END
	-- 개별지도 학년별 학생수(평균)
	ELSE
		BEGIN
			SELECT CFirstDate, CONVERT(VARCHAR, datepart(mm, CFirstDate)) AS CCOLS01,
			       AVG(CG6*1.0) AS CG6,			       AVG(CG7*1.0) AS CG7,
			       AVG(CG8*1.0) AS CG8,			       AVG(CG9*1.0) AS CG9,
			       AVG(CG10*1.0) AS CG10,		       AVG(CG11*1.0) AS CG11,
			       AVG(CG12*1.0) AS CG12,		       AVG(CG13*1.0) AS CG13,
			       SUM(CTotal) AS CTotal,
			       AVG(CG6_RATE*1.0) AS CG6_RATE,      AVG(CG7_RATE*1.0) AS CG7_RATE,
			       AVG(CG10_RATE*1.0) AS CG10_RATE,    AVG(CG13_RATE*1.0) AS CG13_RATE
			  FROM (
					SELECT CFirstDate, CScDepartCode, 
						   SUM(CASE WHEN CONVERT(INT, SUBSTRING(CCHGGrade, 2, 2)) <=  6 THEN 1 ELSE NULL END) AS CG6,
						   SUM(CASE WHEN CCHGGrade =  'g7' THEN 1 ELSE NULL END) AS CG7,
						   SUM(CASE WHEN CCHGGrade =  'g8' THEN 1 ELSE NULL END) AS CG8,
						   SUM(CASE WHEN CCHGGrade =  'g9' THEN 1 ELSE NULL END) AS CG9,
						   SUM(CASE WHEN CCHGGrade = 'g10' THEN 1 ELSE NULL END) AS CG10,
						   SUM(CASE WHEN CCHGGrade = 'g11' THEN 1 ELSE NULL END) AS CG11,
						   SUM(CASE WHEN CCHGGrade = 'g12' THEN 1 ELSE NULL END) AS CG12,
						   SUM(CASE WHEN CONVERT(INT, SUBSTRING(CCHGGrade, 2, 2)) >= 13 THEN 1 ELSE NULL END) AS CG13,
						   COUNT(CCHGGrade) AS CTotal,
						   CASE WHEN COUNT(CCHGGrade) <> 0 THEN 
								ROUND(ISNULL(SUM(CASE WHEN CONVERT(INT, SUBSTRING(CCHGGrade, 2, 2)) <=  6 THEN 1 ELSE NULL END), 0) * 1.0 / COUNT(CCHGGrade) * 100, 2)
						   ELSE NULL END AS CG6_RATE,
						   CASE WHEN COUNT(CCHGGrade) <> 0 THEN 
								ROUND(ISNULL(SUM(CASE WHEN CCHGGrade =  'g7' OR CCHGGrade =  'g8' OR CCHGGrade =  'g9' THEN 1 ELSE NULL END), 0) * 1.0 / COUNT(CCHGGrade) * 100, 2)
						   ELSE NULL END AS CG7_RATE,
						   CASE WHEN COUNT(CCHGGrade) <> 0 THEN 
								ROUND(ISNULL(SUM(CASE WHEN CCHGGrade =  'g10' OR CCHGGrade =  'g11' OR CCHGGrade =  'g12' THEN 1 ELSE NULL END), 0) * 1.0 / COUNT(CCHGGrade) * 100, 2)
						   ELSE NULL END AS CG10_RATE,
						   CASE WHEN COUNT(CCHGGrade) <> 0 THEN 
								ROUND(ISNULL(SUM(CASE WHEN CONVERT(INT, SUBSTRING(CCHGGrade, 2, 2)) >= 13 THEN 1 ELSE NULL END), 0) * 1.0 / COUNT(CCHGGrade) * 100, 2)
						   ELSE NULL END AS CG13_RATE
					  FROM @TEMPTABLE
					 GROUP BY CFirstDate, CScDepartCode
			       ) T1 GROUP BY CFirstDate
			UNION ALL
			SELECT '2099-12-31' AS CFirstDate, '평균' AS CCOLS01,
					ROUND(AVG(CG6*1.0), 2) AS CG6, 
					ROUND(AVG(CG7*1.0), 2) AS CG7, ROUND(AVG(CG8*1.0), 2) AS CG8, ROUND(AVG(CG9*1.0), 2) AS CG9, 
					ROUND(AVG(CG10*1.0), 2) AS CG10, ROUND(AVG(CG11*1.0), 2) AS CG11, ROUND(AVG(CG12*1.0), 2) AS CG12,
					ROUND(AVG(CG13*1.0), 2) AS CG13, ROUND(AVG(CTotal*1.0), 2) AS CTotal,
					CASE WHEN SUM(CTotal) <> 0 THEN ROUND(SUM(CG6) * 1.0 / SUM(CTotal) * 100, 2) ELSE 0.0 END AS CG6_RATE,
					CASE WHEN SUM(CTotal) <> 0 THEN ROUND((SUM(CG7)+SUM(CG8)+SUM(CG9)) * 1.0 / SUM(CTotal) * 100, 2) ELSE 0.0 END AS CG6_RATE,
					CASE WHEN SUM(CTotal) <> 0 THEN ROUND((SUM(CG10)+SUM(CG11)+SUM(CG12)) * 1.0 / SUM(CTotal) * 100, 2) ELSE 0.0 END AS CG10_RATE,
					CASE WHEN SUM(CTotal) <> 0 THEN ROUND(SUM(CG13) * 1.0 / SUM(CTotal) * 100, 2) ELSE 0.0 END AS CG13_RATE
					--ROUND(AVG(CG6_RATE), 2) AS CG6_RATE, ROUND(AVG(CG7_RATE), 2) AS CG7_RATE, ROUND(AVG(CG10_RATE), 2) AS CG10_RATE, ROUND(AVG(CG13_RATE), 2) AS CG13_RATE
			  FROM (
					SELECT CFirstDate, 
						   AVG(CG6*1.0) AS CG6,			       AVG(CG7*1.0) AS CG7,
						   AVG(CG8*1.0) AS CG8,			       AVG(CG9*1.0) AS CG9,
						   AVG(CG10*1.0) AS CG10,		       AVG(CG11*1.0) AS CG11,
						   AVG(CG12*1.0) AS CG12,		       AVG(CG13*1.0) AS CG13,
						   SUM(CTotal) AS CTotal,
						   AVG(CG6_RATE*1.0) AS CG6_RATE,      AVG(CG7_RATE*1.0) AS CG7_RATE,
						   AVG(CG10_RATE*1.0) AS CG10_RATE,    AVG(CG13_RATE*1.0) AS CG13_RATE
					  FROM (
							SELECT CFirstDate, CScDepartCode, 
								   SUM(CASE WHEN CONVERT(INT, SUBSTRING(CCHGGrade, 2, 2)) <=  6 THEN 1 ELSE NULL END) AS CG6,
								   SUM(CASE WHEN CCHGGrade =  'g7' THEN 1 ELSE NULL END) AS CG7,
								   SUM(CASE WHEN CCHGGrade =  'g8' THEN 1 ELSE NULL END) AS CG8,
								   SUM(CASE WHEN CCHGGrade =  'g9' THEN 1 ELSE NULL END) AS CG9,
								   SUM(CASE WHEN CCHGGrade = 'g10' THEN 1 ELSE NULL END) AS CG10,
								   SUM(CASE WHEN CCHGGrade = 'g11' THEN 1 ELSE NULL END) AS CG11,
								   SUM(CASE WHEN CCHGGrade = 'g12' THEN 1 ELSE NULL END) AS CG12,
								   SUM(CASE WHEN CONVERT(INT, SUBSTRING(CCHGGrade, 2, 2)) >= 13 THEN 1 ELSE NULL END) AS CG13,
								   COUNT(CCHGGrade) AS CTotal,
								   CASE WHEN COUNT(CCHGGrade) <> 0 THEN 
										ROUND(ISNULL(SUM(CASE WHEN CONVERT(INT, SUBSTRING(CCHGGrade, 2, 2)) <=  6 THEN 1 ELSE NULL END), 0) * 1.0 / COUNT(CCHGGrade) * 100, 2)
								   ELSE NULL END AS CG6_RATE,
								   CASE WHEN COUNT(CCHGGrade) <> 0 THEN 
										ROUND(ISNULL(SUM(CASE WHEN CCHGGrade =  'g7' OR CCHGGrade =  'g8' OR CCHGGrade =  'g9' THEN 1 ELSE NULL END), 0) * 1.0 / COUNT(CCHGGrade) * 100, 2)
								   ELSE NULL END AS CG7_RATE,
								   CASE WHEN COUNT(CCHGGrade) <> 0 THEN 
										ROUND(ISNULL(SUM(CASE WHEN CCHGGrade =  'g10' OR CCHGGrade =  'g11' OR CCHGGrade =  'g12' THEN 1 ELSE NULL END), 0) * 1.0 / COUNT(CCHGGrade) * 100, 2)
								   ELSE NULL END AS CG10_RATE,
								   CASE WHEN COUNT(CCHGGrade) <> 0 THEN 
										ROUND(ISNULL(SUM(CASE WHEN CONVERT(INT, SUBSTRING(CCHGGrade, 2, 2)) >= 13 THEN 1 ELSE NULL END), 0) * 1.0 / COUNT(CCHGGrade) * 100, 2)
								   ELSE NULL END AS CG13_RATE
							  FROM @TEMPTABLE
							 GROUP BY CFirstDate, CScDepartCode
						   ) T1 GROUP BY CFirstDate
			       ) SUB
			
		END
	RETURN
END
-- 10.개별지도 콤마별 학생수
S10_RTN:
BEGIN
	-- 12개월을 돌려가면서 해당데이터 수집
	SELECT @dLoopDate  = CONVERT(DATETIME, CONVERT(VARCHAR, CONVERT(INT, @P_YEAR) - 1) + '-12-01') ,@dLoop = 1
	WHILE @dLoop <= 12
		BEGIN
			INSERT INTO @TEMPTABLE (CFirstDate, CScDepartCode, CScCode, CGrade, CStartDate, CEndDate, CEndDay, CCHGGrade, CTutoring)
			SELECT @dLoopDate, a.CStdDepartCode, a.CStdCode, b.CGrade, a.CStartDate, a.CEndDate, b.CEndDay, b.CGrade, ISNULL(c.CNT, 0)
			  FROM TStudentTutoring a(NOLOCK)
			  LEFT JOIN TStudent b(NOLOCK) ON a.CStdDepartCode = b.CBranchCode AND a.CStdCode = b.CCode
			  LEFT JOIN (	-- 개별지도 스케쥴
							SELECT CBranchCode, CStudentCode, COUNT(DATEADD(Day, -(Day(CDate)-1), CDate)) AS CNT
							  FROM TTimeScheduleStudent a(NOLOCK)
							 WHERE CScheduleType = 'EdSt'
							   AND EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CBranchCode)
							   AND DATEADD(Day, -(Day(CDate)-1), CDate) = @dLoopDate -- 일자변환
							 GROUP BY CBranchCode, CStudentCode
						) c ON a.CStdDepartCode = c.CBranchCode AND a.CStdCode = c.CStudentCode
			 WHERE a.CStdDepartCode  = @P_FACILITY
				-- 시작일이 다음달1일보다 작고 종료일이 마지막일보다 크거나 같은거
				-- 1.30일 이전 ~ 1.31 : O
			   AND a.CStartDate < DATEADD(Month, 1, @dLoopDate) AND a.CEndDate >= dateadd(d,-1,dateadd(m,1,dateadd(dd,1,dateadd(dd,-datepart(dd,@dLoopDate),@dLoopDate))))
			
			-- 저장값이 없는 경우 껍떼기 하나 생성(조회 시 전체 월을 나오게 하기위함)
			IF @@ROWCOUNT = 0
				BEGIN
					-- 학년별 검색조건이 있기 때문에 학년별로 넣어준다
					INSERT INTO @TEMPTABLE (CFirstDate, CScDepartCode, CGrade, CCHGGrade)
					SELECT @dLoopDate, @P_FACILITY, 'g6', 'g6'
					UNION 
					SELECT @dLoopDate, @P_FACILITY, 'g7', 'g7'
					UNION 
					SELECT @dLoopDate, @P_FACILITY, 'g8', 'g8'
					UNION 
					SELECT @dLoopDate, @P_FACILITY, 'g9', 'g9'
					UNION 
					SELECT @dLoopDate, @P_FACILITY, 'g10', 'g10'
					UNION 
					SELECT @dLoopDate, @P_FACILITY, 'g11', 'g11'
					UNION 
					SELECT @dLoopDate, @P_FACILITY, 'g12', 'g12'
					UNION 
					SELECT @dLoopDate, @P_FACILITY, 'g13', 'g13'
				END

			SELECT @dLoopDate = DATEADD(Month, 1, @dLoopDate), @dLoop = @dLoop + 1

		END
	
	-- 1.기준년도가 해당연도보다 작으면 보정(같을경우 그냥 두면 되지 않을까?학년이 다 정리되었다는 전제로 해야하니깐)
	IF @P_YEAR < datepart(year, GETDATE())
		BEGIN
			-- 현재년도와 차이구하기
			SET @dConvertYear = datepart(year, GETDATE()) - @P_YEAR

			-- 재원중인 학생은(종료일이 NULL인 학생) 기간만큼 학년을 다운시킨다.
			UPDATE @TEMPTABLE SET 
					CCHGGrade = 
							 CASE WHEN CONVERT(INT, SUBSTRING(CGrade, 2, 2)) - @dConvertYear > 0 AND CONVERT(INT, SUBSTRING(CGrade, 2, 2)) <= 12 -- 년도차이보다 학년이 크고 고3 보다 작은거
							 THEN 'g' + CONVERT(VARCHAR, CONVERT(INT, SUBSTRING(CGrade, 2, 2)) - @dConvertYear)
						     ELSE CGrade -- 현 학생 상태가 재수, 검정은 시작이 언제인지 모르는 상황에서 빼기가 애매해서리 구하기 애매모호~~
							 END
			 WHERE CEndDay IS NULL
			   AND CScCode IS NOT NULL -- 위에 넣은 임시데이터 까지 변하는거 막기

			-- 종료된 학생은 종료연도에 따라 계산
			UPDATE @TEMPTABLE SET 
					CCHGGrade =  
							 CASE WHEN CONVERT(INT, SUBSTRING(CGrade, 2, 2)) <= 12 -- 고3 보다 작은거
							 THEN 'g'  + CONVERT(VARCHAR, CONVERT(INT, SUBSTRING(CGrade, 2, 2)) - (datepart(year, CEndDay) - @P_YEAR)) -- 기준년도에서 종료년도를 뺀다
						     ELSE CGrade -- 현 학생 상태가 재수, 검정은 시작이 언제인지 모르는 상황에서 빼기가 애매해서리 구하기 애매모호~~
							 END
			 WHERE CEndDay IS NOT NULL
			   AND CScCode IS NOT NULL -- 위에 넣은 임시데이터 까지 변하는거 막기
		END
	
	-- 검색을 위해 학년 보정(g6이하는 몽땅 g6으로 g13이상은 몽땅 g13)
	UPDATE @TEMPTABLE SET
		CCHGGrade = 
					CASE WHEN CONVERT(INT, SUBSTRING(CCHGGrade, 2, 2)) <= 6  THEN 'g6'  -- 초등6학년 이하
					     WHEN CONVERT(INT, SUBSTRING(CCHGGrade, 2, 2)) >= 13 THEN 'g13' -- 증/고(검정, 재수)
					ELSE CCHGGrade -- 그냥 지금 꺼
					END

	-- 개별지도 콤마별 학생수 합산(0, 1~6, 7~10, 11~15, 16이상)
	IF @P_GROUP_FLAG = '1' 
		BEGIN
			SELECT CFirstDate, CONVERT(VARCHAR, datepart(mm, CFirstDate)) AS CCOLS01,
				   SUM(CASE WHEN CTutoring  = 0 THEN 1 ELSE NULL END) AS CCommas0,
				   SUM(CASE WHEN CTutoring >=  1 AND CTutoring <=  6 THEN 1 ELSE NULL END) AS CCommas6,
				   SUM(CASE WHEN CTutoring >=  7 AND CTutoring <= 10 THEN 1 ELSE NULL END) AS CCommas10,
				   SUM(CASE WHEN CTutoring >= 11 AND CTutoring <= 15 THEN 1 ELSE NULL END) AS CCommas15,
				   SUM(CASE WHEN CTutoring >= 16 THEN 1 ELSE NULL END) AS CCommas16,
				   COUNT(CTutoring) * 1.0 AS CTotal
			  FROM @TEMPTABLE
			 WHERE CASE WHEN @P_GRADE = '' THEN '1' ELSE CCHGGrade END = CASE WHEN @P_GRADE = '' THEN '1' ELSE @P_GRADE END
			 GROUP BY CFirstDate
		 --  jsp에서 처리하려면 아래 막기
			UNION ALL
			SELECT '2099-12-31' AS CFirstDate, '평균' AS CCOLS01,
					ROUND(AVG(CCommas0), 2) AS CCommas0,
					ROUND(AVG(CCommas6), 2) AS CCommas6,
					ROUND(AVG(CCommas10), 2) AS CCommas10,
					ROUND(AVG(CCommas15), 2) AS CCommas15,
					ROUND(AVG(CCommas16), 2) AS CCommas16,
					ROUND(AVG(CTotal), 2) AS CTotal
			  FROM (
					SELECT CFirstDate, CONVERT(VARCHAR, datepart(mm, CFirstDate)) AS CCOLS01,
						   ISNULL(SUM(CASE WHEN CTutoring  = 0 THEN 1.0 ELSE NULL END), 0) AS CCommas0,
						   ISNULL(SUM(CASE WHEN CTutoring >=  1 AND CTutoring <=  6 THEN 1.0 ELSE NULL END), 0) AS CCommas6,
						   ISNULL(SUM(CASE WHEN CTutoring >=  7 AND CTutoring <= 10 THEN 1.0 ELSE NULL END), 0) AS CCommas10,
						   ISNULL(SUM(CASE WHEN CTutoring >= 11 AND CTutoring <= 15 THEN 1.0 ELSE NULL END), 0) AS CCommas15,
						   ISNULL(SUM(CASE WHEN CTutoring >= 16 THEN 1.0 ELSE NULL END), 0) AS CCommas16,
						   COUNT(CTutoring) * 1.0 AS CTotal
					  FROM @TEMPTABLE
					 WHERE CASE WHEN @P_GRADE = '' THEN '1' ELSE CCHGGrade END = CASE WHEN @P_GRADE = '' THEN '1' ELSE @P_GRADE END
					 GROUP BY CFirstDate
				   ) T1
		END
	-- 개별지도 콤마별 학생수 평균(0, 1~6, 7~10, 11~15, 16이상)
	ELSE
		BEGIN
			SELECT CFirstDate, CONVERT(VARCHAR, datepart(mm, CFirstDate)) AS CCOLS01,
				   AVG(CCommas0) AS CCommas0, AVG(CCommas6) AS CCommas6, AVG(CCommas10) AS CCommas10, AVG(CCommas15) AS CCommas15, AVG(CCommas16) AS CCommas16,
				   SUM(CTotal) AS CTotal
			  FROM (
					SELECT CFirstDate, CScDepartCode, --CONVERT(VARCHAR, datepart(mm, CFirstDate)) AS CCOLS01,
						   SUM(CASE WHEN CTutoring  = 0 THEN 1 ELSE NULL END) AS CCommas0,
						   SUM(CASE WHEN CTutoring >=  1 AND CTutoring <=  6 THEN 1 ELSE NULL END) AS CCommas6,
						   SUM(CASE WHEN CTutoring >=  7 AND CTutoring <= 10 THEN 1 ELSE NULL END) AS CCommas10,
						   SUM(CASE WHEN CTutoring >= 11 AND CTutoring <= 15 THEN 1 ELSE NULL END) AS CCommas15,
						   SUM(CASE WHEN CTutoring >= 16 THEN 1 ELSE NULL END) AS CCommas16,
						   COUNT(CTutoring) AS CTotal
					  FROM @TEMPTABLE
					 WHERE CASE WHEN @P_GRADE = '' THEN '1' ELSE CCHGGrade END = CASE WHEN @P_GRADE = '' THEN '1' ELSE @P_GRADE END
					 GROUP BY CFirstDate, CScDepartCode
					) SUB1
			 GROUP BY CFirstDate
		 --  jsp에서 처리하려면 아래 막기
			UNION ALL
			SELECT '2099-12-31' AS CFirstDate, '평균' AS CCOLS01,
					ROUND(AVG(CCommas0), 2) AS CCommas0,
					ROUND(AVG(CCommas6), 2) AS CCommas6,
					ROUND(AVG(CCommas10), 2) AS CCommas10,
					ROUND(AVG(CCommas15), 2) AS CCommas15,
					ROUND(AVG(CCommas16), 2) AS CCommas16,
					ROUND(AVG(CTotal), 2) AS CTotal
			  FROM (
					SELECT CFirstDate,
						   SUM(CASE WHEN CTutoring  = 0 THEN 1.0 ELSE NULL END) AS CCommas0,
						   SUM(CASE WHEN CTutoring >=  1 AND CTutoring <=  6 THEN 1.0 ELSE NULL END) AS CCommas6,
						   SUM(CASE WHEN CTutoring >=  7 AND CTutoring <= 10 THEN 1.0 ELSE NULL END) AS CCommas10,
						   SUM(CASE WHEN CTutoring >= 11 AND CTutoring <= 15 THEN 1.0 ELSE NULL END) AS CCommas15,
						   SUM(CASE WHEN CTutoring >= 16 THEN 1.0 ELSE NULL END) AS CCommas16,
						   COUNT(CTutoring) * 1.0 AS CTotal
					  FROM @TEMPTABLE
					 WHERE CASE WHEN @P_GRADE = '' THEN '1' ELSE CCHGGrade END = CASE WHEN @P_GRADE = '' THEN '1' ELSE @P_GRADE END
					 GROUP BY CFirstDate
				   ) T1
		END
	RETURN

END
-- 11.개별지도 유입 학년별 평균등원개월
S11_RTN:
BEGIN
	IF @P_COMPARE = '1' -- 초, 중, 고
		BEGIN
			SELECT ROUND(AVG(CGapDay), 2) AS CTotal,
				   ROUND(AVG(CASE WHEN CONVERT(INT, SUBSTRING(CGrade, 2, 2))  <  7 THEN CGapDay ELSE NULL END), 2) AS CG6,
				   ROUND(AVG(CASE WHEN CONVERT(INT, SUBSTRING(CGrade, 2, 2))  >= 7  AND CONVERT(INT, SUBSTRING(CGrade, 2, 2))  <=  9 THEN CGapDay ELSE NULL END), 2) AS CG7,
				   ROUND(AVG(CASE WHEN CONVERT(INT, SUBSTRING(CGrade, 2, 2))  >= 10 AND CONVERT(INT, SUBSTRING(CGrade, 2, 2))  <= 12 THEN CGapDay ELSE NULL END), 2) AS CG10,
				   ROUND(AVG(CASE WHEN CONVERT(INT, SUBSTRING(CGrade, 2, 2))  > 12 THEN CGapDay ELSE NULL END), 2) AS CG13
			  FROM (
					SELECT CASE WHEN CONVERT(INT, SUBSTRING(CGrade, 2, 2)) <= 12 THEN
						   'g'+CONVERT(VARCHAR, CONVERT(INT, SUBSTRING(CGrade, 2, 2)) -
									   (CASE WHEN CEndDay IS NULL THEN datepart(year, GETDATE())
											 ELSE datepart(year, CEndDay)  END - datepart(year, CMinDate)))
						   ELSE CGrade END AS CGrade,
						   ROUND(CGapDay * 1.0 / 365 * 12, 2) AS CGapDay
					  FROM
							(
							SELECT a.ccode, a.CGrade, MIN(b.CStartDate) AS CMinDate, a.CEndDay, 
								   SUM(DATEDIFF(DD, b.CStartDate,isnull(c.CLeaveEndDate, b.CEndDate))) + 1 AS CGapDay
							  FROM TStudent a(NOLOCK)
							 INNER JOIN TStudentTutoring b(NOLOCK)
								ON a.CBranchCode = b.CStdDepartCode and a.CCode = b.CStdCode
							  LEFT JOIN TStudentCounselLeave c(NOLOCK)
								ON b.CStdDepartCode = c.CStdBrcDptCode and b.CStdCode = c.CStdCode and b.cno = c.CNo
							 WHERE EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CBranchCode)
							 GROUP BY a.ccode, a.CGrade, a.CEndDay
							) T1
					) T2
		END
	ELSE
		BEGIN
			SELECT ROUND(AVG(CGapDay), 2) AS CTotal,
				   ROUND(AVG(CASE WHEN CONVERT(INT, SUBSTRING(CGrade, 2, 2))  <  7 THEN CGapDay ELSE NULL END), 2) AS CG6,
				   ROUND(AVG(CASE WHEN CONVERT(INT, SUBSTRING(CGrade, 2, 2))  =  7 THEN CGapDay ELSE NULL END), 2) AS CG7,
				   ROUND(AVG(CASE WHEN CONVERT(INT, SUBSTRING(CGrade, 2, 2))  =  8 THEN CGapDay ELSE NULL END), 2) AS CG8,
				   ROUND(AVG(CASE WHEN CONVERT(INT, SUBSTRING(CGrade, 2, 2))  =  9 THEN CGapDay ELSE NULL END), 2) AS CG9,
				   ROUND(AVG(CASE WHEN CONVERT(INT, SUBSTRING(CGrade, 2, 2))  = 10 THEN CGapDay ELSE NULL END), 2) AS CG10,
				   ROUND(AVG(CASE WHEN CONVERT(INT, SUBSTRING(CGrade, 2, 2))  = 11 THEN CGapDay ELSE NULL END), 2) AS CG11,
				   ROUND(AVG(CASE WHEN CONVERT(INT, SUBSTRING(CGrade, 2, 2))  = 12 THEN CGapDay ELSE NULL END), 2) AS CG12,
				   ROUND(AVG(CASE WHEN CONVERT(INT, SUBSTRING(CGrade, 2, 2))  > 12 THEN CGapDay ELSE NULL END), 2) AS CG13
			  FROM (
					SELECT CASE WHEN CONVERT(INT, SUBSTRING(CGrade, 2, 2)) <= 12 THEN
						   'g'+CONVERT(VARCHAR, CONVERT(INT, SUBSTRING(CGrade, 2, 2)) -
									   (CASE WHEN CEndDay IS NULL THEN datepart(year, GETDATE())
											 ELSE datepart(year, CEndDay)  END - datepart(year, CMinDate)))
						   ELSE CGrade END AS CGrade,
						   ROUND(CGapDay * 1.0 / 365 * 12, 2) AS CGapDay
					  FROM
							(
							SELECT a.ccode, a.CGrade, MIN(b.CStartDate) AS CMinDate, a.CEndDay, 
								   SUM(DATEDIFF(DD, b.CStartDate,isnull(c.CLeaveEndDate, b.CEndDate))) + 1 AS CGapDay
							  FROM TStudent a(NOLOCK)
							 INNER JOIN TStudentTutoring b(NOLOCK)
								ON a.CBranchCode = b.CStdDepartCode and a.CCode = b.CStdCode
							  LEFT JOIN TStudentCounselLeave c(NOLOCK)
								ON b.CStdDepartCode = c.CStdBrcDptCode and b.CStdCode = c.CStdCode and b.cno = c.CNo
							 WHERE EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CBranchCode)
							 GROUP BY a.ccode, a.CGrade, a.CEndDay
							) T1
					) T2
		END


	RETURN
END
-- 12.문의/방문상담/등록성공율 지표
S12_RTN:
BEGIN
	-- 수집데이터가 없을 월이 있으므로 껍데기 생성을 위해 이것도 고냥 12개월 루프 돌립시다.
	-- 12개월을 돌려가면서 해당데이터 수집
	SELECT @dLoopDate  = CONVERT(DATETIME, CONVERT(VARCHAR, CONVERT(INT, @P_YEAR) - 1) + '-12-01') ,@dLoop = 1
	WHILE @dLoop <= 12
		BEGIN

			INSERT INTO @TEMPTABLE (CFirstDate, CScDepartCode, CInquire, CVisit, CRegist)
			SELECT CFirstDate, CDepartCode,
				   MAX(CASE WHEN CFlag = '2' THEN CValue ELSE NULL END), -- 문의자
				   MAX(CASE WHEN CFlag = '4' THEN CTotal_Count ELSE NULL END), -- 방문자
				   MAX(CASE WHEN CFlag = '4' THEN CRegist_Count ELSE NULL END)  -- 등록성공자
			  FROM TEightIndicator a(NOLOCK)
			 WHERE EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CDepartCode)
			   AND CFirstDate	= @dLoopDate
			   AND CFlag IN ('2', '4') -- 문의(2), 방문(3), 성공율(4)인데 성공율에 방문데이터가 있으니깐 2, 4번으로만 조합
			 GROUP BY CDepartCode, CFirstDate
			
			-- 저장값이 없는 경우 껍떼기 하나 생성(조회 시 전체 월을 나오게 하기위함)
			IF @@ROWCOUNT = 0
				BEGIN
					INSERT INTO @TEMPTABLE (CFirstDate, CScDepartCode)
					SELECT @dLoopDate, @P_FACILITY
				END

			-- 이전년도 업데이트 하기
			UPDATE A SET
				A.CBeInquire= B.CBeInquire,
				A.CBeVisit	= B.CBeVisit,
				A.CBeRegist	= B.CBeRegist
			  FROM @TEMPTABLE A
			  LEFT JOIN (
							SELECT @dLoopDate AS CFirstDate, CDepartCode, 
								   MAX(CASE WHEN CFlag = '2' THEN CValue ELSE NULL END) AS CBeInquire, -- 문의자
								   MAX(CASE WHEN CFlag = '4' THEN CTotal_Count ELSE NULL END) AS CBeVisit, -- 방문자
								   MAX(CASE WHEN CFlag = '4' THEN CRegist_Count ELSE NULL END) AS CBeRegist  -- 등록성공자
								FROM TEightIndicator a(NOLOCK)
								WHERE EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CDepartCode)
								AND CFirstDate		= DATEADD(Month, -12, @dLoopDate) - (day(@dLoopDate)-1) -- 일자변환(12개월 이전)
								AND CFlag IN ('2', '4') -- 문의(2), 방문(3), 성공율(4)인데 성공율에 방문데이터가 있으니깐 2, 4번으로만 조합
								GROUP BY CDepartCode, CFirstDate
						) B ON A.CFirstDate = B.CFirstDate AND a.CScDepartCode = b.CDepartCode
			 WHERE A.CFirstDate = @dLoopDate

			SELECT @dLoopDate = DATEADD(Month, 1, @dLoopDate), @dLoop = @dLoop + 1
		END
	
	-- 문의/방문상담/등록성공율 지표(합산)
	IF @P_GROUP_FLAG = '1' 
		BEGIN
			-- 설계서에는 이미지에는 비교항목이 없지만 설명에 있기에 일단 비교항목을 처리하기 위해 한번 더 SELECT로 감싼다
			SELECT *,
				   -- 비교항목(문의자, 방문자, 성공자, 성공율) : (전년값-기준년값) ÷ 전년값 
				   CASE WHEN @P_COMPARE = '1' THEN
							 CASE WHEN ISNULL(CBeInquire, 0) <> 0 THEN ROUND((CBeInquire - CInquire) * 1.0 / CBeInquire  * 100, 2) ELSE 0.0 END
						WHEN @P_COMPARE = '2' THEN
							 CASE WHEN ISNULL(CBeVisit, 0) <> 0 THEN ROUND((CBeVisit - CVisit) * 1.0 / CBeVisit  * 100, 2) ELSE 0.0 END
						WHEN @P_COMPARE = '3' THEN
							 CASE WHEN ISNULL(CBeRegist, 0) <> 0 THEN ROUND((CBeRegist - CRegist) * 1.0 / CBeRegist  * 100, 2) ELSE 0.0 END
						WHEN @P_COMPARE = '4' THEN
							 CASE WHEN ISNULL(CBeRegistRate, 0) <> 0 THEN ROUND((CBeRegistRate - CRegistRate) * 1.0 / CBeRegistRate  * 100, 2) ELSE 0.0 END
				   END AS CCOMPARE
			  FROM
					(
					SELECT CFirstDate, CONVERT(VARCHAR, datepart(mm, CFirstDate)) AS CCOLS01,
						   SUM(CBeInquire) AS CBeInquire, SUM(CBeVisit) AS CBeVisit, SUM(CBeRegist) AS CBeRegist,
						   CASE WHEN ISNULL(SUM(CBeVisit), 0) <> 0 THEN ROUND(SUM(CBeRegist) * 1.0 / SUM(CBeVisit), 2) ELSE 0.0 END AS CBeRegistRate,
						   SUM(CInquire) AS CInquire, SUM(CVisit) AS CVisit, SUM(CRegist) AS CRegist,
						   CASE WHEN ISNULL(SUM(CVisit), 0) <> 0 THEN ROUND(SUM(CRegist) * 1.0 / SUM(CVisit), 2) ELSE 0.0 END AS CRegistRate
					  FROM @TEMPTABLE
					 GROUP BY CFirstDate
		 --  jsp에서 처리
					-- 누적합계
					UNION
					SELECT '2099-12-30' AS CFirstDate, '누적합계' AS CCOLS01,
						   SUM(CBeInquire), SUM(CBeVisit), SUM(CBeRegist),
						   CASE WHEN ISNULL(SUM(CBeVisit), 0) <> 0 THEN ROUND(SUM(CBeRegist) * 1.0 / SUM(CBeVisit), 2) ELSE 0.0 END,
						   SUM(CInquire), SUM(CVisit), SUM(CRegist),
						   CASE WHEN ISNULL(SUM(CVisit), 0) <> 0 THEN ROUND(SUM(CRegist) * 1.0 / SUM(CVisit), 2) ELSE 0.0 END
					  FROM @TEMPTABLE
					-- 평균
					UNION
					SELECT '2099-12-31' AS CFirstDate, '평균' AS CCOLS01,
						   ROUND(AVG(CBeInquire*1.0), 2), ROUND(AVG(CBeVisit*1.0), 2), ROUND(AVG(CBeRegist*1.0), 2),
						   ROUND(AVG(CASE WHEN CBeVisit <> 0 THEN ROUND(CBeRegist * 1.0 / CBeVisit, 2) ELSE 0.0 END), 2) AS CBeRegistRate,
						   ROUND(AVG(CInquire*1.0), 2), ROUND(AVG(CVisit*1.0), 2), ROUND(AVG(CRegist*1.0), 2),
						   ROUND(AVG(CASE WHEN CVisit <> 0 THEN ROUND(CRegist * 1.0 / CVisit, 2) ELSE 0.0 END), 2) AS CRegistRate
					  FROM @TEMPTABLE
					) T1
			 ORDER BY CFirstDate
		END
	-- 문의/방문상담/등록성공율 지표(평균)
	ELSE
		BEGIN
			-- 설계서에는 이미지에는 비교항목이 없지만 설명에 있기에 일단 비교항목을 처리하기 위해 한번 더 SELECT로 감싼다
			SELECT *,
				   -- 비교항목(문의자, 방문자, 성공자, 성공율) : (전년값-기준년값) ÷ 전년값 
				   CASE WHEN @P_COMPARE = '1' THEN
							 CASE WHEN ISNULL(CBeInquire, 0) <> 0 THEN ROUND((CBeInquire - CInquire) * 1.0 / CBeInquire  * 100, 2) ELSE 0.0 END
						WHEN @P_COMPARE = '2' THEN
							 CASE WHEN ISNULL(CBeVisit, 0) <> 0 THEN ROUND((CBeVisit - CVisit) * 1.0 / CBeVisit  * 100, 2) ELSE 0.0 END
						WHEN @P_COMPARE = '3' THEN
							 CASE WHEN ISNULL(CBeRegist, 0) <> 0 THEN ROUND((CBeRegist - CRegist) * 1.0 / CBeRegist  * 100, 2) ELSE 0.0 END
						WHEN @P_COMPARE = '4' THEN
							 CASE WHEN ISNULL(CBeRegistRate, 0) <> 0 THEN ROUND((CBeRegistRate - CRegistRate) * 1.0 / CBeRegistRate  * 100, 2) ELSE 0.0 END
				   END AS CCOMPARE
			  FROM
					(
					SELECT CFirstDate, CONVERT(VARCHAR, datepart(mm, CFirstDate)) AS CCOLS01,
					       AVG(CBeInquire) AS CBeInquire, AVG(CBeVisit) AS CBeVisit, AVG(CBeRegist) AS CBeRegist,
						   AVG(CBeRegistRate) AS CBeRegistRate, -- 성공율의 평균이라...이상한데...
					       AVG(CInquire) AS CInquire, AVG(CVisit) AS CVisit, AVG(CRegist) AS CRegist,
						   AVG(CRegistRate) AS CRegistRate -- 성공율의 평균이라...이상한데...
					  FROM (		
							SELECT CFirstDate, CScDepartCode,
								   SUM(CBeInquire) AS CBeInquire, SUM(CBeVisit) AS CBeVisit, SUM(CBeRegist) AS CBeRegist,
								   CASE WHEN ISNULL(SUM(CBeVisit), 0) <> 0 THEN ROUND(SUM(CBeRegist) * 1.0 / SUM(CBeVisit), 2) ELSE 0.0 END AS CBeRegistRate,
								   SUM(CInquire) AS CInquire, SUM(CVisit) AS CVisit, SUM(CRegist) AS CRegist,
								   CASE WHEN ISNULL(SUM(CVisit), 0) <> 0 THEN ROUND(SUM(CRegist) * 1.0 / SUM(CVisit), 2) ELSE 0.0 END AS CRegistRate
							  FROM @TEMPTABLE
							 GROUP BY CFirstDate, CScDepartCode
							) SUB 
					 GROUP BY CFirstDate
		 --  jsp에서 처리하려면 아래 막기
					-- 누적합계
					UNION
					SELECT '2099-12-30' AS CFirstDate, '누적합계' AS CCOLS01,
						   SUM(CBeInquire), SUM(CBeVisit), SUM(CBeRegist),
						   CASE WHEN ISNULL(SUM(CBeVisit), 0) <> 0 THEN ROUND(SUM(CBeRegist) * 1.0 / SUM(CBeVisit), 2) ELSE 0.0 END,
						   SUM(CInquire), SUM(CVisit), SUM(CRegist),
						   CASE WHEN ISNULL(SUM(CVisit), 0) <> 0 THEN ROUND(SUM(CRegist) * 1.0 / SUM(CVisit), 2) ELSE 0.0 END
					  FROM @TEMPTABLE
					-- 평균
					UNION
					SELECT '2099-12-31' AS CFirstDate, '평균' AS CCOLS01,
						   ROUND(AVG(CBeInquire*1.0), 2), ROUND(AVG(CBeVisit*1.0), 2), ROUND(AVG(CBeRegist*1.0), 2),
						   ROUND(AVG(CASE WHEN CBeVisit <> 0 THEN ROUND(CBeRegist * 1.0 / CBeVisit, 2) ELSE 0.0 END), 2) AS CBeRegistRate,
						   ROUND(AVG(CInquire*1.0), 2), ROUND(AVG(CVisit*1.0), 2), ROUND(AVG(CRegist*1.0), 2),
						   ROUND(AVG(CASE WHEN CVisit <> 0 THEN ROUND(CRegist * 1.0 / CVisit, 2) ELSE 0.0 END), 2) AS CRegistRate
					  FROM @TEMPTABLE
					) T1
			 ORDER BY CFirstDate
		END
	RETURN
END
-- 13.광고투입비용 지표
S13_RTN:
BEGIN
	-- 겁나 단순하지만 수집데이터가 없는 월이 있으므로 껍데기 생성을 위해 이것도 고냥 12개월 루프 돌립시다.
	SELECT @dLoopDate  = CONVERT(DATETIME, CONVERT(VARCHAR, CONVERT(INT, @P_YEAR) - 1) + '-12-01') ,@dLoop = 1
	WHILE @dLoop <= 12
		BEGIN
			INSERT INTO @TEMPTABLE (CFirstDate, CScDepartCode, CValue)
			SELECT CFirstDate, CDepartCode, ISNULL(CValue, 0)
			  FROM TEightIndicator a(NOLOCK)
			 WHERE EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CDepartCode)
			   AND CFirstDate	= @dLoopDate
			   AND CFlag		= '1'
			
			-- 저장값이 없는 경우 껍떼기 하나 생성(조회 시 전체 월을 나오게 하기위함)
			IF @@ROWCOUNT = 0
				BEGIN
					INSERT INTO @TEMPTABLE (CFirstDate, CScDepartCode)
					SELECT @dLoopDate, @P_FACILITY
				END

			SELECT @dLoopDate = DATEADD(Month, 1, @dLoopDate), @dLoop = @dLoop + 1
		END

	-- 광고투입비용 지표(합산)
	IF @P_GROUP_FLAG = '1' 
		BEGIN
			SELECT CFirstDate, CONVERT(VARCHAR, datepart(mm, CFirstDate)) AS CCOLS01, SUM(CValue) AS CValue
			  FROM @TEMPTABLE
			 GROUP BY CFirstDate
		 --  jsp에서 처리
			-- 누적합계
			UNION
			SELECT '2099-12-30' AS CFirstDate, '누적합계' AS CCOLS01, SUM(CValue)
			  FROM @TEMPTABLE
			-- 평균
			UNION
			SELECT '2099-12-31' AS CFirstDate, '평균' AS CCOLS01, AVG(CValue)
			  FROM @TEMPTABLE
		END
	ELSE
		BEGIN
			SELECT CFirstDate, CONVERT(VARCHAR, datepart(mm, CFirstDate)) AS CCOLS01, AVG(CValue) As CValue
			  FROM (
					SELECT CFirstDate, CScDepartCode, SUM(CValue) AS CValue
					  FROM @TEMPTABLE
					 GROUP BY CFirstDate, CScDepartCode
					) SUB
			 GROUP BY CFirstDate
		 --  jsp에서 처리
			-- 누적합계
			UNION
			SELECT '2099-12-30' AS CFirstDate, '누적합계' AS CCOLS01, SUM(CValue)
			  FROM @TEMPTABLE
			-- 평균
			UNION
			SELECT '2099-12-31' AS CFirstDate, '평균' AS CCOLS01, AVG(CValue)
			  FROM @TEMPTABLE
		END
	RETURN
END
-- 14.매니저 근속 개월
-- 합산과 평균의 구분이 무의미해 보이므로 무시(확인 후 다시 처리여부 결정)
S14_RTN:
BEGIN
	SELECT @P_START_DATE = CONVERT(DATETIME, REPLACE(@P_START_DATE, '/', '')),
	       @P_END_DATE   = CONVERT(DATETIME, REPLACE(@P_END_DATE, '/', ''))

	SELECT COUNT(CWork) AS CWorkCount, ROUND(AVG(CWork), 2) AS CWorkAvg,
		   COUNT(CRetire) AS CRetireCount, ROUND(AVG(CRetire), 2) AS CRetireAvg
	  FROM
	  (
		SELECT CASE WHEN COutDate >= CONVERT(VARCHAR, GETDATE(), 23) THEN 
					ROUND((DATEDIFF(DD, CStartDate, CEndDate) + 1) * 1.0 / 365 * 12, 2)
			   ELSE NULL END AS CWork   -- 재직매니저(기준일자보다 퇴직일자가 크면)
			  ,CASE WHEN COutDate < CONVERT(VARCHAR, GETDATE(), 23) THEN 
					ROUND((DATEDIFF(DD, CStartDate, CEndDate) + 1) * 1.0 / 365 * 12, 2)
			   ELSE NULL END AS CRetire   -- 퇴직매니저(기준일자보다 퇴직일자가 크면)
		  FROM
				(
				SELECT b.CStaffId, b.COutDate
					  -- 부서시작일보다 직급시작일이 작으면 부서시작일에 맞춘다(지점의 근속개월이니깐-굳이 입사일까지 맞출 필요는 없겠지요~)
					  ,MIN(CASE WHEN a.CHistoryStartDate > c.CStartDate THEN a.CHistoryStartDate ELSE c.CStartDate END) AS CStartDate
					  -- 부서종료일보다 직급종료일이 작으면 직급종료일에 맞춘다.
					  ,MAX(CASE WHEN a.CHistoryEndDate > c.CEndDate THEN c.CEndDate 
								-- 퇴직의 경우 이력의 종료일이 변경되지 않으므로 한번 더 직급종료일보다 퇴직일이 작으면 퇴직일을...아니믄 직급종료일
								ELSE CASE WHEN c.CEndDate > b.COutDate THEN b.COutDate 
										  ELSE CASE WHEN c.CEndDate = '2200-12-31' THEN CONVERT(VARCHAR, GETDATE(), 23) ELSE c.CEndDate END END
					   END) AS CEndDate
				  FROM TStaffDepartHistory a(NOLOCK) -- 부서이력
				  LEFT JOIN TStaff b(NOLOCK)		 -- 소속원
					ON a.CStaffId = b.CStaffId
				 INNER JOIN TStaffLevelHistory c(NOLOCK) -- 직급이력
					-- 수석부원장(L15), 부원장, 선임매니저, 주임매니저, 매니저, 인턴매니저(L60)
					ON a.CStaffId = c.CStaffId AND c.CLevelType = 'Rank' AND c.CLevelCode IN ('L15', 'L20', 'L30','L40','L50','L60')
				 WHERE EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CDepartCode)
				 -- 걸어봤자...다쉬해야지만 그래도 조금이나마 걸러질거니깐
				 -- 1.지점이력에서 대상자 걸러주고(시작일 <= 기준종료일, 종료일 >= 기준시작일)
				   AND a.CHistoryStartDate <= @P_END_DATE AND a.CHistoryEndDate >= @P_START_DATE
				 -- 2.직급이력에서 대상자 걸러주기(시작일 <= 기준종료일, 종료일 >= 기준시작일)
				   AND c.CStartDate <= @P_END_DATE AND c.CEndDate >= @P_START_DATE
				  GROUP BY b.CStaffId, b.COutDate
				) T1
		 WHERE CStartDate <= @P_END_DATE AND CEndDate >= @P_START_DATE
		) SUB1

	RETURN
END
-- 15.매니저 학년별 관리 학생수
-- 합산과 평균의 구분이 무의미해 보이므로 무시(확인 후 다시 처리여부 결정)
S15_RTN:
BEGIN
	SELECT T1.CStaffId, T1.CName0,  datediff(mm,  CJoinDate, GETDATE()) AS CMonth, CJoinDate,
		   T2.CTotal, T2.CG6, T2.CG7, T2.CG8, T2.CG9,
		   T2.CG10, T2.CG11, T2.CG12, T2.CG13
	  FROM 
			(
			SELECT DISTINCT b.CStaffId, b.CName0, CASE WHEN b.CJoinDate = '1900-01-01' THEN '2014-01-01' ELSE b.CJoinDate END AS CJoinDate
			  FROM TStaffDepartHistory a(NOLOCK) -- 부서이력
			  LEFT JOIN TStaff b(NOLOCK)		 -- 소속원
				ON a.CStaffId = b.CStaffId
			 INNER JOIN TStaffLevelHistory c(NOLOCK)
				-- 수석부원장(L15), 부원장, 선임매니저, 주임매니저, 매니저, 인턴매니저(L60)
				ON a.CStaffId = c.CStaffId AND c.CLevelType = 'Rank' AND c.CLevelCode IN ('L15', 'L20', 'L30','L40','L50','L60')
			 WHERE EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CDepartCode)
			   AND b.COutDate > CONVERT(VARCHAR, GETDATE(), 23) -- 현재 재직중인 소속원
			   AND c.CEndDate > CONVERT(VARCHAR, GETDATE(), 23) -- 현재 재직중인 소속원(직급이력이라)
			) T1
	  INNER JOIN
			(
			SELECT b.CManager, COUNT(b.CManager) AS CTotal,
					COUNT(CASE WHEN CONVERT(INT, SUBSTRING(a.CGrade, 2, 2))  <  7 THEN a.CGrade ELSE NULL END) AS CG6,
					COUNT(CASE WHEN CONVERT(INT, SUBSTRING(a.CGrade, 2, 2))  =  7 THEN a.CGrade ELSE NULL END) AS CG7,
					COUNT(CASE WHEN CONVERT(INT, SUBSTRING(a.CGrade, 2, 2))  =  8 THEN a.CGrade ELSE NULL END) AS CG8,
					COUNT(CASE WHEN CONVERT(INT, SUBSTRING(a.CGrade, 2, 2))  =  9 THEN a.CGrade ELSE NULL END) AS CG9,
					COUNT(CASE WHEN CONVERT(INT, SUBSTRING(a.CGrade, 2, 2))  = 10 THEN a.CGrade ELSE NULL END) AS CG10,
					COUNT(CASE WHEN CONVERT(INT, SUBSTRING(a.CGrade, 2, 2))  = 11 THEN a.CGrade ELSE NULL END) AS CG11,
					COUNT(CASE WHEN CONVERT(INT, SUBSTRING(a.CGrade, 2, 2))  = 12 THEN a.CGrade ELSE NULL END) AS CG12,
					COUNT(CASE WHEN CONVERT(INT, SUBSTRING(a.CGrade, 2, 2))  > 12 THEN a.CGrade ELSE NULL END) AS CG13
				FROM TStudent a(NOLOCK)
				INNER JOIN TStudentCounsel b(NOLOCK)
				ON a.CBranchCode = b.CScDepartCode and a.CCode = b.CScCode
				LEFT JOIN TStudentCounselLeave c(NOLOCK)
				ON b.CScDepartCode = c.CStdBrcDptCode and b.CScCode = c.CStdCode and b.cno = c.CNo
				WHERE EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CBranchCode)
				AND b.CRegistType <> 'Refund' -- 전액환불건제외
				AND isnull(c.CLeaveEndDate, b.CEndDate) >= CONVERT(VARCHAR, GETDATE(), 23) -- 종료일이 오늘보다 큰거(상담관리 재원학생들)
				AND b.CStartDate <= CONVERT(VARCHAR, GETDATE(), 23) -- 시작일자가 오늘보다 큰 경우의 학생은 제외
				GROUP BY b.CManager
			) T2 ON T1.CStaffId = T2.CManager

	RETURN
END
-- 16.매니저 등원개월별 관리 학생수
-- 합산과 평균의 구분이 무의미해 보이므로 무시(확인 후 다시 처리여부 결정)
S16_RTN:
BEGIN
	SELECT T1.CStaffId, T1.CName0,  datediff(mm,  CJoinDate, GETDATE()) AS CMonth,
		   COUNT(T2.CGapDay) AS CTotal,
	       COUNT(CASE WHEN T2.CGapDay <= 3 THEN T2.CGapDay ELSE NULL END) AS CMonth3,
	       COUNT(CASE WHEN T2.CGapDay >  3 AND T2.CGapDay <=  6 THEN T2.CGapDay ELSE NULL END) AS CMonth6,
	       COUNT(CASE WHEN T2.CGapDay >  6 AND T2.CGapDay <= 12 THEN T2.CGapDay ELSE NULL END) AS CMonth12,
	       COUNT(CASE WHEN T2.CGapDay >  12  THEN T2.CGapDay ELSE NULL END) AS CMonth13
	  FROM 
			(
			SELECT DISTINCT b.CStaffId, b.CName0, CASE WHEN b.CJoinDate = '1900-01-01' THEN '2014-01-01' ELSE b.CJoinDate END AS CJoinDate
			  FROM TStaffDepartHistory a(NOLOCK) -- 부서이력
			  LEFT JOIN TStaff b(NOLOCK)		 -- 소속원
				ON a.CStaffId = b.CStaffId
			 INNER JOIN TStaffLevelHistory c(NOLOCK)
				-- 수석부원장(L15), 부원장, 선임매니저, 주임매니저, 매니저, 인턴매니저(L60)
				ON a.CStaffId = c.CStaffId AND c.CLevelType = 'Rank' AND c.CLevelCode IN ('L15', 'L20', 'L30','L40','L50','L60')
			 WHERE EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CDepartCode)
			   AND b.COutDate > CONVERT(VARCHAR, GETDATE(), 23) -- 현재 재직중인 소속원
			   AND c.CEndDate > CONVERT(VARCHAR, GETDATE(), 23) -- 현재 재직중인 소속원(직급이력이라)
			) T1
	  INNER JOIN
			(
				SELECT TT1.CManager, ROUND(TT2.CGapDay * 1.0 / 365 * 12, 2) AS CGapDay
				  FROM
						(
							SELECT b.CManager, a.CCode
							  FROM TStudent a(NOLOCK)
							 INNER JOIN TStudentCounsel b(NOLOCK)
								ON a.CBranchCode = b.CScDepartCode and a.CCode = b.CScCode
							  LEFT JOIN TStudentCounselLeave c(NOLOCK)
								ON b.CScDepartCode = c.CStdBrcDptCode and b.CScCode = c.CStdCode and b.cno = c.CNo
							 WHERE EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CBranchCode)
							   AND b.CRegistType <> 'Refund' -- 전액환불건제외
							   AND isnull(c.CLeaveEndDate, b.CEndDate) >= CONVERT(VARCHAR, GETDATE(), 23) -- 종료일이 오늘보다 큰거(상담관리 재원학생들)
							 GROUP BY b.CManager, a.CCode
						) TT1
				  LEFT JOIN
						(
							SELECT a.ccode,
									SUM(DATEDIFF(DD, b.CStartDate, CASE WHEN isnull(c.CLeaveEndDate, b.CEndDate) >CONVERT(VARCHAR, GETDATE(), 23) THEN CONVERT(VARCHAR, GETDATE(), 23) ELSE isnull(c.CLeaveEndDate, b.CEndDate) END) ) + 1 AS CGapDay
								FROM TStudent a(NOLOCK)
								INNER JOIN TStudentCounsel b(NOLOCK)
								ON a.CBranchCode = b.CScDepartCode and a.CCode = b.CScCode
								LEFT JOIN TStudentCounselLeave c(NOLOCK)
								ON b.CScDepartCode = c.CStdBrcDptCode and b.CScCode = c.CStdCode and b.cno = c.CNo
								WHERE EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CBranchCode)
								AND b.CRegistType <> 'Refund' -- 전액환불건제외
								AND b.CStartDate <= CONVERT(VARCHAR, GETDATE(), 23)
								GROUP BY a.ccode, a.CGrade, a.CEndDay
						) TT2 ON TT1.CCode = TT2.CCode
			) T2 ON T1.CStaffId = T2.CManager
	 GROUP BY T1.CStaffId, T1.CName0, T1.CJoinDate

	RETURN
END
-- 17.매니저 평균 학생 유지개월
-- 합산과 평균의 구분이 무의미해 보이므로 무시(확인 후 다시 처리여부 결정)
S17_RTN:
BEGIN
	-- 1.현재 재직중인 매니져
	SELECT DISTINCT b.CStaffId, b.CName0, CASE WHEN b.CJoinDate = '1900-01-01' THEN '2014-01-01' ELSE b.CJoinDate END AS CJoinDate
	  INTO #TEMP1
	  FROM TStaffDepartHistory a(NOLOCK) -- 부서이력
	  LEFT JOIN TStaff b(NOLOCK)		 -- 소속원
	    ON a.CStaffId = b.CStaffId
	 INNER JOIN TStaffLevelHistory c(NOLOCK)
	-- 수석부원장(L15), 부원장, 선임매니저, 주임매니저, 매니저, 인턴매니저(L60)
	    ON a.CStaffId = c.CStaffId AND c.CLevelType = 'Rank' AND c.CLevelCode IN ('L15', 'L20', 'L30','L40','L50','L60')
	 WHERE EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CDepartCode)
	   AND b.COutDate > CONVERT(VARCHAR, GETDATE(), 23) -- 현재 재직중인 소속원
	   AND c.CEndDate > CONVERT(VARCHAR, GETDATE(), 23) -- 현재 재직중인 소속원(직급이력이라)
	
	-- 2.현재상담관리중인 학생
	SELECT b.CManager, COUNT(DISTINCT a.CCode) AS CWorkCount
	  INTO #TEMP2
	  FROM TStudent a(NOLOCK)
	 INNER JOIN TStudentCounsel b(NOLOCK)
		ON a.CBranchCode = b.CScDepartCode and a.CCode = b.CScCode
	  LEFT JOIN TStudentCounselLeave c(NOLOCK)
		ON b.CScDepartCode = c.CStdBrcDptCode and b.CScCode = c.CStdCode and b.cno = c.CNo
	 WHERE EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CBranchCode)
	   AND b.CRegistType <> 'Refund' -- 전액환불건제외
	   AND isnull(c.CLeaveEndDate, b.CEndDate) >= CONVERT(VARCHAR, GETDATE(), 23) -- 종료일이 오늘보다 큰거(상담관리 재원학생들)
	   AND b.CStartDate <= CONVERT(VARCHAR, GETDATE(), 23) -- 시작일자가 오늘보다 큰 경우의 학생은 제외
	GROUP BY b.CManager

	-- 3.매니저 이력에서 이탈학생 구하기(이관, 초기오류, 종료학생 등등의 문제로 함 맹글어야 함)
	-- 기준기간에 상담관리 학생을 기준으로 매니저별 최초, 최종일자를 구해서 개월수를 산정 후 조인할 수 있게처리
	SELECT *,
	       ROUND((DATEDIFF(DD, CStartDate, CEndDate) + 1) * 1.0 / 365 * 12, 2) AS CGapDay
	  INTO #TEMP3
	  FROM
			(
			SELECT T1.CManagerId, T1.CStudentCode, T1.CStartDate,
				   CASE WHEN T1.CEndDate > T2.CEndDay THEN T2.CEndDay ELSE T1.CEndDate END AS CEndDate
			  FROM 
					(
					SELECT a.CManagerId, a.CStudentCode,
							MIN(a.CStartDate) AS CStartDate, MAX(a.CEndDate) AS CEndDate
						FROM TStudentManager a(NOLOCK)
						WHERE a.CManagerType = 'Counsel' -- 상담관리만
						AND EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CBranchCode)
						AND CStudentCode IN ( -- 기준기간의 상담관리 학생 구하기
											SELECT DISTINCT a.CScCode
												FROM TStudentCounsel a(NOLOCK)
												LEFT JOIN TStudentCounselLeave b(NOLOCK)
												ON a.CScDepartCode = b.CStdBrcDptCode and a.CScCode = b.CStdCode and a.cno = b.CNo
												WHERE EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CScDepartCode)
												AND a.CRegistType <> 'Refund' -- 전액환불건제외
												AND a.CStartDate   <= @P_END_DATE
												AND isnull(b.CLeaveEndDate, a.CEndDate) >= @P_START_DATE
											)
						GROUP BY a.CManagerId, a.CStudentCode
					) T1
			  LEFT JOIN TStudent T2
				ON T1.CStudentCode = T2.CCode AND EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = T2.CBranchCode)
			 WHERE CASE WHEN T1.CEndDate > T2.CEndDay THEN T2.CEndDay ELSE T1.CEndDate END <> '2200-12-31' -- 종료되지 않은 경우제외(현재 이관 데이터가 이상함)
			) SUB
	
	SELECT CManagerId, COUNT(CStudentCode) AS CCount,
	       COUNT(CASE WHEN CGapDay <= 3 THEN CGapDay ELSE NULL END) AS CMonth3,
	       COUNT(CASE WHEN CGapDay >  3 AND CGapDay <=  6 THEN CGapDay ELSE NULL END) AS CMonth6,
	       COUNT(CASE WHEN CGapDay >  6 AND CGapDay <= 12 THEN CGapDay ELSE NULL END) AS CMonth12,
	       COUNT(CASE WHEN CGapDay >  12  THEN CGapDay ELSE NULL END) AS CMonth13,
		   ROUND(AVG(CGapDay), 2) AS CGapDayAvg
	  INTO #TEMP4
	  FROM #TEMP3
	 GROUP BY CManagerId

	-- 각각 구한테이블 조합
	SELECT CStaffId, CName0, datediff(mm,  CJoinDate, GETDATE()) AS CMonth, b.CWorkCount
	      ,c.CCount, c.CMonth3, c.CMonth6, c.CMonth12, c.CMonth13, c.CGapDayAvg
	  FROM #TEMP1 a
	  LEFT JOIN #TEMP2 b ON a.CStaffId = b.CManager
	  LEFT JOIN #TEMP4 c ON a.CStaffId = c.CManagerId
	
	RETURN
END
-- 18.매니저 종합성과 : 2차 개선 추가개발분
-- 합산과 평균의 구분이 무의미해 보이므로 무시(확인 후 다시 처리여부 결정)
S18_RTN:
BEGIN
	--SELECT @dChgStr = dbo.FN_splitValue(@P_BAS_MONTH, '.', 1, 'D') + dbo.FN_splitValue(@P_BAS_MONTH, '.', 2, 'D') + '01'
	-- 기준월을 1일로 변경
	SET @dStrTmp = REPLACE(@P_BAS_MONTH, '.', '')
	IF LEN(@dStrTmp) = 5
		SET @dStrTmp =LEFT(@dStrTmp, 4) + '0' + SUBSTRING(@dStrTmp, 5, 1)

	SET @dBasDate = @dStrTmp + '01'

	-- 2.상담관리/개별지도 학생 수 구하기(월, 누적)
	IF @P_PERIOD = '1' SET @dLoopDate = @dBasDate -- 월간
	ELSE               SET @dLoopDate = DATEADD(Month, -5, @dBasDate) - (day(@dBasDate)-1) -- 6개월 누적


	-- 누적의 경우 6개월을 처리해야 하므로 LOOP처리
	WHILE @dBasDate >= @dLoopDate
		BEGIN

			-- 전월 마지막일 구하기
			SET @dLastDate2 = DATEADD(Month, -1, @dLoopDate)
			SET @dLastDate2 = dateadd(d,-1,dateadd(m,1,dateadd(dd,1,dateadd(dd,-datepart(dd,@dLastDate2),@dLastDate2))))
			-- 마지막일 구하기
			SET @dLastDate = dateadd(d,-1,dateadd(m,1,dateadd(dd,1,dateadd(dd,-datepart(dd,@dLoopDate),@dLoopDate))))

			-- 1.매니져 저장
			INSERT INTO @TMP_MANAGER (CFirstDate, CDepartCode, CManager, CName0, CJoinDate, CEndDate)
			SELECT DISTINCT 
			       @dLoopDate, a.CDepartCode, b.CStaffId, b.CName0,
				   --******************************************************
				   --** 2017.02.02 고재균 수정
				   --** 지점별로 나와야 하므로 입사일과 퇴사일은 
				   --** 발령 히스토리의 발령시작일과 발령종료일로 체크해야 합니다.
				   --******************************************************
				   --b.CJoinDate, -- 입사일자
				   --CASE WHEN b.COutDate = '2200-12-31' THEN @dLastDate ELSE b.COutDate END AS CEndDate -- 퇴직일자(또는 재직중이면 기준일자)
				   a.CHistoryStartDate, -- 입사일자
				   CASE WHEN a.CHistoryEndDate = '2200-12-31' THEN @dLastDate ELSE a.CHistoryEndDate END AS CEndDate -- 퇴직일자(또는 재직중이면 기준일자)
				   --******************************************************
			  FROM TStaffDepartHistory a(NOLOCK) -- 부서이력
			  LEFT JOIN TStaff b(NOLOCK)		 -- 소속원
				ON a.CStaffId = b.CStaffId
			 INNER JOIN TStaffLevelHistory c(NOLOCK)
			-- 수석부원장(L15), 부원장, 선임매니저, 주임매니저, 매니저, 인턴매니저(L60)
				ON a.CStaffId = c.CStaffId AND c.CLevelType = 'Rank' AND c.CLevelCode IN ('L15', 'L20', 'L30','L40','L50','L60')
			 WHERE a.CDepartCode LIKE 'EPX%' --EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CDepartCode)
			   --******************************************************
			   --** 2017.02.02 고재균 수정
			   --** 지점별로 나와야 하므로 입사일과 퇴사일은 
			   --** 발령 히스토리의 발령시작일과 발령종료일로 체크해야 합니다.
			   --******************************************************
			   --AND CASE WHEN @P_WORK = '1' THEN b.COutDate ELSE 1 END > CASE WHEN @P_WORK = '1' THEN @dLastDate ELSE 0 END -- 재직중인 소속원
			   AND CASE WHEN @P_WORK = '1' THEN a.CHistoryEndDate ELSE 1 END > CASE WHEN @P_WORK = '1' THEN @dLastDate ELSE 0 END -- 재직중인 소속원
			   --******************************************************
			   AND CASE WHEN @P_WORK = '1' THEN c.CEndDate ELSE 1 END > CASE WHEN @P_WORK = '1' THEN @dLastDate ELSE 0 END -- 재직중인 소속원(직급이력이라)
			   AND b.CJoinDate <= @dLastDate -- 입사일자가 기준일보다 작거나 같은거
			-- **********************************************************************************************************************
			-- 이관 데이터의 문제가 있지만 데이터의 보정하는게 확실하므로 매니저 이력으로 만듬...그렇게 해야 함...겁니 복잡혀 ㅡ,.ㅡ)
			-- 추가적인 문제 : 월초로 학생수를 구하면 전월말로 끝나는 학생의 경우 이탈율에 포함되지 않음(그러니 아예 한달전으로 해서 월말로 구하기
			-- **********************************************************************************************************************
			-- 2.1.상담관리학생수(이탈율을 구하기 위해 월초, 월말인원을 구해서 이탈수를 구함)
			-- 상담관리 월초(월초로 하믄 월말로 끈난학생 안구해져...그러니 전월 마지막일자로 구해버려)
			INSERT INTO #TMP1 (CFirstDate, CDepartCode, CManager, CBeCounselCount)
			SELECT @dLoopDate, a.CscDepartCode, 
				   CASE WHEN a.CManager <> c.CManagerId THEN c.CManagerId ELSE a.CManager END AS CManager, 
				   COUNT(DISTINCT a.CScCode) AS CWorkCount
			  FROM TStudentCounsel a(NOLOCK) -- 상담관리
			  LEFT JOIN TStudentCounselLeave b(NOLOCK) -- 휴원
				ON a.CScDepartCode = b.CStdBrcDptCode and a.CScCode = b.CStdCode and a.cno = b.CNo
			  LEFT JOIN (
						SELECT CBranchCode, CManagerId, CStudentCode
							FROM TStudentManager(NOLOCK)
							WHERE CBranchCode LIKE 'EPX%'--EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = CBranchCode)
							AND CManagerType =  'Counsel' -- 상담관리만
							AND CStartDate   <  @dLastDate2 -- 시작일이 전월말일보다 작고
							AND CEndDate     >= @dLastDate2 -- 종료일이 전월말일보다 큰거
							GROUP BY CBranchCode, CManagerId, CStudentCode
						) c -- 매니저이력
				ON a.CscDepartCode = c.CBranchCode AND a.CScCode = c.CStudentCode
			 WHERE a.CscDepartCode LIKE 'EPX%' -- EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CscDepartCode)
			   AND a.CRegistType <> 'Refund' -- 전액환불건제외
			   -- 월초 학생수 조건
			   AND a.CStartDate < @dLastDate2                         -- 시작일이 전월말일보다 작고
			   AND isnull(b.CLeaveEndDate, a.CEndDate) >= @dLastDate2 -- 종료일이 전월말일보다 큰거
			 GROUP BY a.CscDepartCode, CASE WHEN a.CManager <> c.CManagerId THEN c.CManagerId ELSE a.CManager END

			-- 상담관리 월말
			INSERT INTO #TMP1 (CFirstDate, CDepartCode, CManager, CAfCounselCount)
			SELECT @dLoopDate, a.CscDepartCode, 
				   CASE WHEN a.CManager <> c.CManagerId THEN c.CManagerId ELSE a.CManager END AS CManager, 
				   COUNT(DISTINCT a.CScCode) AS CWorkCount
			  FROM TStudentCounsel a(NOLOCK) -- 상담관리
			  LEFT JOIN TStudentCounselLeave b(NOLOCK) -- 휴원
				ON a.CScDepartCode = b.CStdBrcDptCode and a.CScCode = b.CStdCode and a.cno = b.CNo
			  LEFT JOIN (
						SELECT CBranchCode, CManagerId, CStudentCode
							FROM TStudentManager(NOLOCK)
							WHERE CBranchCode LIKE 'EPX%' -- EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = CBranchCode)
							AND CManagerType =  'Counsel' -- 상담관리만
							AND CStartDate   <  @dLastDate -- 시작일이 말일보다 작고
							AND CEndDate     >= @dLastDate -- 종료일이 말일보다 큰거
							GROUP BY CBranchCode, CManagerId, CStudentCode
						) c -- 매니저이력
				ON a.CscDepartCode = c.CBranchCode AND a.CScCode = c.CStudentCode
			 WHERE a.CscDepartCode LIKE 'EPX%'-- EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CscDepartCode)
			   AND a.CRegistType <> 'Refund' -- 전액환불건제외
			   -- 월말 학생수 조건
			   AND a.CStartDate < @dLastDate                         -- 시작일이 말일보다 작고
			   AND isnull(b.CLeaveEndDate, a.CEndDate) >= @dLastDate -- 종료일이 말일보다 큰거
			 GROUP BY a.CscDepartCode, CASE WHEN a.CManager <> c.CManagerId THEN c.CManagerId ELSE a.CManager END

			-- 2.2.개별지도학생수
			-- 개별지도 월초(월초로 하믄 월말로 끈난학생 안구해져...그러니 전월 마지막일자로 구해버려)
			INSERT INTO #TMP1 (CFirstDate, CDepartCode, CManager, CBeTutoringCount)
			SELECT @dLoopDate, a.CStdDepartCode, 
				   CASE WHEN a.CManager <> c.CManagerId THEN c.CManagerId ELSE a.CManager END AS CManager, 
				   COUNT(DISTINCT a.CStdCode) AS CWorkCount
			  FROM TStudentTutoring a(NOLOCK) -- 상담관리
			  LEFT JOIN TStudentTutoringLeave b(NOLOCK) -- 휴원
				ON a.CStdDepartCode = b.CStdBrcDptCode and a.CStdCode = b.CStdCode and a.cno = b.CNo
			  LEFT JOIN (
						SELECT CBranchCode, CManagerId, CStudentCode
							FROM TStudentManager(NOLOCK)
							WHERE CBranchCode LIKE 'EPX%' --EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = CBranchCode)
							AND CManagerType =  'Tutoring' -- 개별지도
							AND CStartDate   <  @dLastDate2 -- 시작일이 전월말일보다 작고
							AND CEndDate     >= @dLastDate2 -- 종료일이 전월말일보다 큰거
							GROUP BY CBranchCode, CManagerId, CStudentCode
						) c -- 매니저이력
				ON a.CStdDepartCode = c.CBranchCode AND a.CStdCode = c.CStudentCode
			 WHERE a.CStdDepartCode LIKE 'EPX%' -- EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CStdDepartCode)
			   AND a.CRegistType <> 'Refund' -- 전액환불건제외
			   -- 월초 학생수 조건
			   AND a.CStartDate < @dLastDate2                         -- 시작일이 전월말일보다 작고
			   AND isnull(b.CLeaveEndDate, a.CEndDate) >= @dLastDate2 -- 종료일이 전월말일보다 큰거
			 GROUP BY a.CStdDepartCode, CASE WHEN a.CManager <> c.CManagerId THEN c.CManagerId ELSE a.CManager END

			-- 개별지도 월말
			INSERT INTO #TMP1 (CFirstDate, CDepartCode, CManager, CAfTutoringCount)
			SELECT @dLoopDate, a.CStdDepartCode, 
				   CASE WHEN a.CManager <> c.CManagerId THEN c.CManagerId ELSE a.CManager END AS CManager, 
				   COUNT(DISTINCT a.CStdCode) AS CWorkCount
			  FROM TStudentTutoring a(NOLOCK) -- 상담관리
			  LEFT JOIN TStudentTutoringLeave b(NOLOCK) -- 휴원
				ON a.CStdDepartCode = b.CStdBrcDptCode and a.CStdCode = b.CStdCode and a.cno = b.CNo
			  LEFT JOIN (
						SELECT CBranchCode, CManagerId, CStudentCode
							FROM TStudentManager(NOLOCK)
							WHERE CBranchCode LIKE 'EPX%'-- EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = CBranchCode)
							AND CManagerType =  'Tutoring' -- 개별지도
							AND CStartDate   <  @dLastDate -- 시작일이 말일보다 작고
							AND CEndDate     >= @dLastDate -- 종료일이 말일보다 큰거
							GROUP BY CBranchCode, CManagerId, CStudentCode
						) c -- 매니저이력
				ON a.CStdDepartCode = c.CBranchCode AND a.CStdCode = c.CStudentCode
			 WHERE a.CStdDepartCode LIKE 'EPX%' -- EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CStdDepartCode)
			   AND a.CRegistType <> 'Refund' -- 전액환불건제외
			   -- 월초 학생수 조건
			   AND a.CStartDate < @dLastDate                         -- 시작일이 말일보다 작고
			   AND isnull(b.CLeaveEndDate, a.CEndDate) >= @dLastDate -- 종료일이 말일보다 큰거
			 GROUP BY a.CStdDepartCode, CASE WHEN a.CManager <> c.CManagerId THEN c.CManagerId ELSE a.CManager END

			-- 2.3.담당중개별지도수업학생수, 담당중개별지도수업콤마수
			--     상담관리중인 학생이 개별지도수업을 하는 경우
			INSERT INTO #TMP1 (CFirstDate, CDepartCode, CManager, CCounselTutoringCount, CCounselTutoringCommas)
			SELECT @dLoopDate, SUB1.CStdDepartCode, SUB1.CManager, COUNT(DISTINCT SUB1.CStdCode) AS CNT, SUM(SUB1.CPayCommas) AS CPayCommas
			  FROM (
					SELECT a.CStdDepartCode, 
						   CASE WHEN a.CManager <> c.CManagerId THEN c.CManagerId ELSE a.CManager END AS CManager, 
						   a.CStdCode, SUM(CPayCommas) AS CPayCommas
					  FROM TStudentTutoring a(NOLOCK) -- 상담관리
					  LEFT JOIN TStudentTutoringLeave b(NOLOCK) -- 휴원
						ON a.CStdDepartCode = b.CStdBrcDptCode and a.CStdCode = b.CStdCode and a.cno = b.CNo
					  LEFT JOIN (
								SELECT CBranchCode, CManagerId, CStudentCode
									FROM TStudentManager(NOLOCK)
									WHERE CBranchCode LIKE 'EPX%'-- EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = CBranchCode)
									AND CManagerType =  'Tutoring' -- 개별지도
									AND CStartDate   <  @dLastDate -- 시작일이 말일보다 작고
									AND CEndDate     >= @dLastDate -- 종료일이 말일보다 큰거
									GROUP BY CBranchCode, CManagerId, CStudentCode
								) c -- 매니저이력
						ON a.CStdDepartCode = c.CBranchCode AND a.CStdCode = c.CStudentCode
					 WHERE a.CStdDepartCode LIKE 'EPX%' -- EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CStdDepartCode)
					   AND a.CRegistType <> 'Refund' -- 전액환불건제외
					   -- 월초 학생수 조건
					   AND a.CStartDate < @dLastDate                         -- 시작일이 말일보다 작고
					   AND isnull(b.CLeaveEndDate, a.CEndDate) >= @dLastDate -- 종료일이 말일보다 큰거
					 GROUP BY a.CStdDepartCode, CASE WHEN a.CManager <> c.CManagerId THEN c.CManagerId ELSE a.CManager END, a.CStdCode
			       ) SUB1
			 INNER JOIN (
					SELECT a.CscDepartCode,
						   CASE WHEN a.CManager <> c.CManagerId THEN c.CManagerId ELSE a.CManager END AS CManager,
						   a.CScCode
					  FROM TStudentCounsel a(NOLOCK) -- 상담관리
					  LEFT JOIN TStudentCounselLeave b(NOLOCK) -- 휴원
						ON a.CScDepartCode = b.CStdBrcDptCode and a.CScCode = b.CStdCode and a.cno = b.CNo
					  LEFT JOIN (
								SELECT CBranchCode, CManagerId, CStudentCode
									FROM TStudentManager(NOLOCK)
									WHERE CBranchCode LIKE 'EPX%'-- EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = CBranchCode)
									AND CManagerType =  'Counsel' -- 상담관리만
									AND CStartDate   <  @dLastDate2 -- 시작일이 전월말일보다 작고
									AND CEndDate     >= @dLastDate2 -- 종료일이 전월말일보다 큰거
									GROUP BY CBranchCode, CManagerId, CStudentCode
								) c -- 매니저이력
						ON a.CscDepartCode = c.CBranchCode AND a.CScCode = c.CStudentCode
					 WHERE a.CscDepartCode LIKE 'EPX%' -- EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CscDepartCode)
					   AND a.CRegistType <> 'Refund' -- 전액환불건제외
					   -- 월말 학생수 조건
					   AND a.CStartDate < @dLastDate                         -- 시작일이 말일보다 작고
					   AND isnull(b.CLeaveEndDate, a.CEndDate) >= @dLastDate -- 종료일이 말일보다 큰거
					 GROUP BY a.CscDepartCode, CASE WHEN a.CManager <> c.CManagerId THEN c.CManagerId ELSE a.CManager END, a.CScCode
			       ) SUB2 
				ON SUB1.CStdDepartCode = SUB2.CScDepartCode AND SUB1.CManager = SUB2.CManager AND SUB1.CStdCode = SUB2.CScCode
			 GROUP BY SUB1.CStdDepartCode, SUB1.CManager

			--**********************************************************************************
			-- 2.4.매출액(상담관리, 개별지도)
			--     2.1.상담관리와 2.2.의개별지도를 구할 때 같이 구하려 하였으나
			--     시작일자와 결제일자(현재용어:등록일자)와 맞지 않으므로 그냥 따로 한번 더 구함
			--**********************************************************************************
			-- 상담관리 매출액
			INSERT INTO #TMP1 (CFirstDate, CDepartCode, CManager, CCounselPrice)
			SELECT @dLoopDate, a.CscDepartCode, 
				   CASE WHEN a.CManager <> c.CManagerId THEN c.CManagerId ELSE a.CManager END AS CManager, 
				   SUM(a.CPayPrice) AS CPayPrice --상담관리매출액
			  FROM TStudentCounsel a(NOLOCK) -- 상담관리
			  LEFT JOIN TStudentCounselLeave b(NOLOCK) -- 휴원
				ON a.CScDepartCode = b.CStdBrcDptCode and a.CScCode = b.CStdCode and a.cno = b.CNo
			  LEFT JOIN (
						SELECT CBranchCode, CManagerId, CStudentCode
						  FROM TStudentManager(NOLOCK)
						 WHERE CBranchCode LIKE 'EPX%'-- EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = CBranchCode)
						   AND CManagerType =  'Counsel' -- 상담관리만
						   AND CStartDate   <  @dLastDate -- 시작일이 말일보다 작고
						   AND CEndDate     >= @dLastDate -- 종료일이 말일보다 큰거
						 GROUP BY CBranchCode, CManagerId, CStudentCode
						) c -- 매니저이력
				ON a.CscDepartCode = c.CBranchCode AND a.CScCode = c.CStudentCode
			 WHERE a.CscDepartCode LIKE 'EPX%' -- EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CscDepartCode)
			   AND a.CRegistType <> 'Refund' -- 전액환불건제외
			   -- 월말 학생수 조건
			   AND a.CStartDate < @dLastDate                         -- 시작일이 말일보다 작고
			   AND isnull(b.CLeaveEndDate, a.CEndDate) >= @dLastDate -- 종료일이 말일보다 큰거
			   -- 결제일자(등록일자)가 월초~말일사이
			   AND a.CPayDate >= @dLoopDate AND a.CPayDate <= @dLastDate
			 GROUP BY a.CscDepartCode, CASE WHEN a.CManager <> c.CManagerId THEN c.CManagerId ELSE a.CManager END

			-- 개별지도 매출액
			INSERT INTO #TMP1 (CFirstDate, CDepartCode, CManager, CTutoringPrice)
			SELECT @dLoopDate, a.CStdDepartCode, 
				   CASE WHEN a.CManager <> c.CManagerId THEN c.CManagerId ELSE a.CManager END AS CManager, 
				   SUM(a.CPayPrice) AS CPayPrice --개별지도매출액
			  FROM TStudentTutoring a(NOLOCK) -- 상담관리
			  LEFT JOIN TStudentTutoringLeave b(NOLOCK) -- 휴원
				ON a.CStdDepartCode = b.CStdBrcDptCode and a.CStdCode = b.CStdCode and a.cno = b.CNo
			  LEFT JOIN (
						SELECT CBranchCode, CManagerId, CStudentCode
							FROM TStudentManager(NOLOCK)
							WHERE CBranchCode LIKE 'EPX%'-- EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = CBranchCode)
							AND CManagerType =  'Tutoring' -- 개별지도
							AND CStartDate   <  @dLastDate -- 시작일이 말일보다 작고
							AND CEndDate     >= @dLastDate -- 종료일이 말일보다 큰거
							GROUP BY CBranchCode, CManagerId, CStudentCode
						) c -- 매니저이력
				ON a.CStdDepartCode = c.CBranchCode AND a.CStdCode = c.CStudentCode
			 WHERE a.CStdDepartCode LIKE 'EPX%' -- EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CStdDepartCode)
			   AND a.CRegistType <> 'Refund' -- 전액환불건제외
			   -- 월초 학생수 조건
			   AND a.CStartDate < @dLastDate                         -- 시작일이 말일보다 작고
			   AND isnull(b.CLeaveEndDate, a.CEndDate) >= @dLastDate -- 종료일이 말일보다 큰거
			   -- 결제일자(등록일자)가 월초~말일사이
			   AND a.CPayDate >= @dLoopDate AND a.CPayDate <= @dLastDate
			 GROUP BY a.CStdDepartCode, CASE WHEN a.CManager <> c.CManagerId THEN c.CManagerId ELSE a.CManager END

			-- 반복용 일자에 한달 더하기
			SET @dLoopDate = DATEADD(Month, 1, @dLoopDate)
		END

	-- 기초, 월말 학생수 업데이트
	UPDATE A SET
		a.CBeCounselCount  = b.CBeCounselCount,
		a.CAfCounselCount  = b.CAfCounselCount,
		a.CCounselRetire   = ISNULL(b.CBeCounselCount, 0) - ISNULL(b.CAfCounselCount, 0),
		a.CBeTutoringCount = b.CBeTutoringCount,
		a.CAfTutoringCount = b.CAfTutoringCount,
		a.CTutoringRetire  = ISNULL(b.CBeTutoringCount, 0) - ISNULL(b.CAfTutoringCount, 0),
		a.CCounselTutoringCount  = b.CCounselTutoringCount,
		a.CCounselTutoringCommas = b.CCounselTutoringCommas,
		a.CCounselPrice    = b.CCounselPrice,
		a.CTutoringPrice   = b.CTutoringPrice
	  FROM @TMP_MANAGER a
	  LEFT JOIN (
				 SELECT CFirstDate, CDepartCode, CManager, 
	                    SUM(CBeCounselCount) AS CBeCounselCount, SUM(CAfCounselCount) AS CAfCounselCount ,
						SUM(CBeTutoringCount) AS CBeTutoringCount, SUM(CAfTutoringCount) AS CAfTutoringCount,
						SUM(CCounselPrice) AS CCounselPrice, SUM(CTutoringPrice) AS CTutoringPrice,
						SUM(CCounselTutoringCount) AS CCounselTutoringCount, SUM(CCounselTutoringCommas) AS CCounselTutoringCommas
				   FROM #TMP1 
				  GROUP BY CFirstDate, CDepartCode, CManager
				) b
		ON a.CFirstDate = b.CFirstDate AND a.CDepartCode = b.CDepartCode AND a.CManager = b.CManager
	--******************
	-- 상위 10%를 구하기
	--******************
	--임시테이블에 저장
	SELECT CDepartCode, CManager, CName0,
	       ROUND((DATEDIFF(DD, MIN(CJoinDate), MAX(CEndDate)) + 1) * 1.0 / 365 * 12, 0) AS CGapDay,
		   SUM(CAfCounselCount) AS CAfCounselCount,
		   SUM(CAfTutoringCount) AS CAfTutoringCount,
		   CASE WHEN ISNULL(SUM(CBeCounselCount), 0) <> 0 THEN ROUND((SUM(CBeCounselCount) - ISNULL(SUM(CAfCounselCount), 0)) * 1.0 / ISNULL(SUM(CBeCounselCount), 0), 2) ELSE 0.0 END AS CCounselRate, -- 상담관리 이탈율
		   CASE WHEN ISNULL(SUM(CBeTutoringCount), 0) <> 0 THEN ROUND((SUM(CBeTutoringCount) - ISNULL(SUM(CAfTutoringCount), 0)) * 1.0 / ISNULL(SUM(CBeTutoringCount), 0), 2) ELSE 0.0 END AS CTutoringRate, -- 개별지도 이탈율
		   SUM(CCounselTutoringCount) AS CCounselTutoringCount,
		   SUM(CCounselTutoringCommas) AS CCounselTutoringCommas,
		   SUM(CCounselPrice) AS CCounselPrice,
		   SUM(CTutoringPrice) AS CTutoringPrice,
		   SUM(CCounselPrice) + SUM(CTutoringPrice) AS CSalePrice
	  INTO #TEMP5
	  FROM @TMP_MANAGER
	 GROUP BY CDepartCode, CManager, CName0

	-- 각각 구하기
	DECLARE @dGapDay NUMERIC(5,2)
	SELECT @dGapDay = AVG(T1.CGapDay)
	  FROM (SELECT TOP 10 PERCENT CGapDay FROM #TEMP5 ORDER BY CGapDay DESC) T1

	DECLARE @dAfCounselCount NUMERIC(6,2)
	SELECT @dAfCounselCount = AVG(T1.CAfCounselCount)
	  FROM (SELECT TOP 10 PERCENT CAfCounselCount FROM #TEMP5 ORDER BY CAfCounselCount DESC) T1

	DECLARE @dAfTutoringCount NUMERIC(6,2)
	SELECT @dAfTutoringCount = AVG(T1.CAfTutoringCount)
	  FROM (SELECT TOP 10 PERCENT CAfTutoringCount FROM #TEMP5 ORDER BY CAfTutoringCount DESC) T1

	DECLARE @dCounselRate NUMERIC(5,2)
	SELECT @dCounselRate = AVG(T1.CCounselRate)
	  FROM (SELECT TOP 10 PERCENT CCounselRate FROM #TEMP5 ORDER BY CCounselRate) T1

	DECLARE @dTutoringRate NUMERIC(5,2)
	SELECT @dTutoringRate = AVG(T1.CTutoringRate)
	  FROM (SELECT TOP 10 PERCENT CTutoringRate FROM #TEMP5 ORDER BY CTutoringRate) T1

	DECLARE @dCounselTutoringCount NUMERIC(6,2)
	SELECT @dCounselTutoringCount = AVG(T1.CCounselTutoringCount)
	  FROM (SELECT TOP 10 PERCENT CCounselTutoringCount FROM #TEMP5 ORDER BY CCounselTutoringCount DESC) T1

	DECLARE @dCounselTutoringCommas NUMERIC(6,2)
	SELECT @dCounselTutoringCommas = AVG(T1.CCounselTutoringCommas)
	  FROM (SELECT TOP 10 PERCENT CCounselTutoringCommas FROM #TEMP5 ORDER BY CCounselTutoringCommas DESC) T1

	DECLARE @dCounselPrice NUMERIC(13,2)
	SELECT @dCounselPrice = AVG(T1.CCounselPrice*1.0)
	  FROM (SELECT TOP 10 PERCENT CCounselPrice FROM #TEMP5 ORDER BY CCounselPrice DESC) T1

	DECLARE @dTutoringPrice NUMERIC(13,2)
	SELECT @dTutoringPrice = AVG(T1.CTutoringPrice*1.0)
	  FROM (SELECT TOP 10 PERCENT CTutoringPrice FROM #TEMP5 ORDER BY CTutoringPrice DESC) T1

	DECLARE @dSalePrice NUMERIC(13,2)
	SELECT @dSalePrice = AVG(T1.CSalePrice*1.0)
	  FROM (SELECT TOP 10 PERCENT CSalePrice FROM #TEMP5 ORDER BY CSalePrice DESC) T1

	SELECT CDepartCode, CManager, CName0,
	       CGapDay,
		   CAfCounselCount,
		   CAfTutoringCount,
		   CCounselRate, -- 상담관리 이탈율
		   CTutoringRate, -- 개별지도 이탈율
		   CCounselTutoringCount,
		   CCounselTutoringCommas,
		   CCounselPrice,
		   CTutoringPrice,
		   CSalePrice
	  FROM #TEMP5
	-- 조건이 있으면 본인것만 조회
	 WHERE EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = #TEMP5.CDepartCode)
	   AND CASE WHEN ISNULL(@P_CAuth_CStaffId, '') = '' THEN '1' ELSE CManager END = CASE WHEN ISNULL(@P_CAuth_CStaffId, '') = '' THEN '1' ELSE @P_CAuth_CStaffId END
	UNION ALL
	SELECT 'ZZZ9999' AS CDepartCode, '' AS CManager, '상위10%' AS CName0
		   ,@dGapDay, @dAfCounselCount, @dAfTutoringCount
		   ,@dCounselRate, @dTutoringRate
		   ,@dCounselTutoringCount, @dCounselTutoringCommas
		   ,@dCounselPrice ,@dTutoringPrice, @dSalePrice
	 ORDER BY CDepartCode, CName0

	RETURN
END

GO


CREATE PROCEDURE [dbo].[SP_OneCur_Lecture_List_Admin]
(
    @num int = 0
)
AS

SELECT 
	a.lecture_idx as id,
	a.title as '제목',
	(case 
			when b.outside_member_yn = 'Y' then b.outside_member_name
			else (select CName0 from TStaff (NOLOCK) where CStaffId = b.staff_Id) 
	end) as '대표강사',
	(select CName0 from TStaffLevel (NOLOCK) where CLevelCode = c.CMasterLevelCode) as '직급',
		(case
			when b.outside_member_yn = 'Y' then '외부강사'
			else (select COpenName0 from TFacility (NOLOCK) where CDepartCode = c.CDEpartCode)
	end) AS '지점명',
	d.title AS '전공구분',
	e.title AS '전공분야', 
	g.title AS '역할',
	f.title AS '지역구분',
	(select count(*) from otbl_Lecture_attend_teacher (NOLOCK) where lecture_id = a.lecture_idx) as '강사인원수',
	a.total_credit as '총학점수',
	(case 
		when a.lecture_closed_yn = 'Y' then '4.종료'
		when a.lecture_reg_yn = 'Y' then '1.접수중'
		when a.lecture_reg_yn = 'P' then '2.접수준비중'
		when a.lecture_reg_yn = 'N' then '3.접수마감'
	end) as '강의상태'

	FROM otbl_Lecture a (NOLOCK)
		LEFT JOIN otbl_Member_profile b (NOLOCK) ON a.main_teacher_id = b.profile_idx
		LEFT JOIN TDepartNowMember c (NOLOCK) ON c.CStaffid = b.staff_id AND c.CMain = 1
      LEFT JOIN otbl_mager d (NOLOCK) ON d.mager_idx = a.lecture_mager_id
      LEFT JOIN otbl_category e (NOLOCK) ON e.category_idx = a.lecture_category_id
	  LEFT JOIN otbl_category g (NOLOCK) ON e.category_idx = a.lecture_sub_category_id
      LEFT JOIN otbl_Area f (NOLOCK) ON f.area_idx = a.area_id


	WHERE 1=1
		AND a.del_yn='N'
		AND a.temp_save_yn = 'N'

GO


/*
	수강신청한 강의 목록을 반환
*/

CREATE PROCEDURE [dbo].[SP_OneCur_Registerd_Lecture_List]
(
	@staff_id nchar(30) = ''
)
AS

SELECT 
	a.class_student_idx,
	a.lecture_id,
	b.lecture_image,
	b.title,
	(select title from otbl_Mager (NOLOCK) WHERE mager_idx = b.lecture_mager_id) as '전공구분',
	(select title from otbl_Category (NOLOCK) WHERE category_idx = b.lecture_category_id) as '전공분야',
	(select title from otbl_Category (NOLOCK) WHERE category_idx = b.lecture_sub_category_id) as '역량',
	(case 
			when d.outside_member_yn = 'Y' then d.outside_member_name
			else (select CName0 from TStaff (NOLOCK) where CStaffId = d.staff_Id) 
	end) as '대표강사이름',
	(select count(*) from otbl_Lecture_attend_teacher (NOLOCK) where lecture_id = a.lecture_id and del_yn = 'N') as '강사의수',
	(select count(*) from otbl_Lecture_Class (NOLOCK) where lecture_id = a.lecture_id) as '수업갯수',
	b.total_credit as '총학점',
	(select MIN(class_startdatetime) from otbl_Lecture_class (NOLOCK) where lecture_id = a.lecture_id AND del_yn = 'N') as firstclass_startdatetime,
    (select MAX(class_startdatetime) from otbl_Lecture_class (NOLOCK) where lecture_id = a.lecture_id AND del_yn = 'N') as lastclass_startdatetime,
	a.reg_date as '신청일',
	a.gain_credit as '취득한학점',
	a.star,
	a.review as '배느실',
	a.pass_yn,

	(case when b.temp_save_yn = 'Y' then '임시저장' else '공개' end) as '공개여부',
	-- (case when b.lecture_closed_yn = 'Y' then '종료' else '진행중' end) as '종료여부',
	(case 
		when b.lecture_closed_yn = 'Y' then
			(case 
				when a.review is NULL OR cast(a.review AS VARCHAR) = '' then '2.배느실 작성대기'
				else '3.종료'
			end)
		else '1.진행중' end) as '종료여부',
	(case 
        when b.lecture_closed_yn = 'Y' THEN '-'
		when b.lecture_reg_yn = 'Y' then '접수중' 
		else '접수마감' 
	end) as '접수여부'
	-- (case when b.lecture_reg_yn = 'Y' then '접수중' else '접수마감' end) as '접수여부'
	
	FROM otbl_Lecture_attend_student a (NOLOCK)
		LEFT JOIN otbl_Lecture b (NOLOCK) ON a.lecture_id = b.lecture_idx
		LEFT JOIN TDepartNowMember c (NOLOCK) on c.CStaffid = b.staff_id AND c.CMain = 1
		LEFT JOIN otbl_Member_profile d (NOLOCK) on d.profile_idx = b.main_teacher_id

	WHERE 1=1
		AND a.del_yn= 'N'
		AND b.del_yn = 'N'
		AND a.staff_id = @staff_id

GO


CREATE PROCEDURE [dbo].[SP_CubeAnalytics01]
	@case			VARCHAR(30),
	@startDate		NVARCHAR(10) = '',
	@endDate		NVARCHAR(10) = '',
	@branchCode     NVARCHAR(30) = ''
AS
BEGIN
	if @case = 'newStudentList'				goto New_Students	-- 기간내 전국지점신규 등록한 학생(개별지도, 상담관리 모두) 리스트
	if @case = 'newStudentList2'			goto New_Students2	-- 기간내 전국지점신규 등록한 학생외 비용확인
	if @Case = 'StudentManage'				goto StudentManage	-- 지점별 학생관리 이력
	if @Case = 'FinishStudents'				goto FinishStudents	-- 기간내 전국지점 종료한 학생
	if @Case = 'VLT4G_CT_Result'		    goto VLT4G_CT_Result	-- VLT4G CT검사 결과 조회
	if @Case = 'GetSMSHistory'				goto GetSMSHistory	-- 문자발송기록조회
	if @Case = 'GetDirectSale'				goto GetDirectSale	-- 직영점 매출조회
	if @Case = 'GetDirectSalePerTotal'	    goto GetDirectSalePerTotal	-- 직영점 매출 일별 합산조회

	select code='ER', mfg='정의되지 않은 분기코드(' + @Case + ')입니다.'
	return
END

-- 신규학생
New_Students:
BEGIN
	-- 지점명, 학생이름, 학생연락처, 학부모연락처, 검사등록일, 등록일, 등록비용, 상담관리/개별지도/프리미엄 구분
	select 
		 d1.CStartDate as "개별지도 시작일"
		,e1.CStartDate as "상담관리 시작일"
		,a.CBranchCode as "지점코드"
		,b.COpenName0 as "지점명"
		,a.CCode as "학생코드"
		,a.CName as "학생명"
		/*
		,a.CSex as "성별"
		,a.CSchoolCode as "학교코드"
		*/
		,c.CName as "학교명"
		,case a.CGrade 
			when 'g1' then '초1'
			when 'g2' then '초2'
			when 'g3' then '초3'
			when 'g4' then '초4'
			when 'g5' then '초5'
			when 'g6' then '초6'
			when 'g7' then '중1'
			when 'g8' then '중2'
			when 'g9' then '중3'
			when 'g10' then '고1'
			when 'g11' then '고2'
			when 'g12' then '고3'
			when 'g13' then '(중)재수'
			when 'g14' then '(중)검정'
			when 'g15' then '(고)재수'
			when 'g16' then '(고)검정'
		 end as "학년"
		 -- ,a.CEmailStudent as "이메일"
		,a.CPhoneStudent as "학생핸드폰"
		-- ,(case when a.CPhoneMother IS null then a.CPhoneFather else a.CPhoneMother end) as "부모님전화번호"
		,a.CStudentStatus as studentStatus
		-- ,a.CNameFather as "아버지성함"
		,a.CPhoneFather as "아버지핸드폰"
		-- ,a.CNameMother as "어머니성함"
		,a.CPhoneMother as "어머니핸드폰"
		/*
		,a.CReentryPossibility as "재등록가능성"
		,a.CEndStatus as "상담관리종료"
		,a.CEndDay as "상담관리종료일"
		,a.CTutorEndStatus as "개별지도종료"
		,a.CTutorEndDay as "개별지도종료일"
		,a.CPhoneHome as "집전화번호"
		,a.CAddress1Home as "집주소"
		,a.CVltType as vltType
		,d.CManageCommas as manageCommas
		,f1.CName0 as "개별지도매니저"
		,e.CManageDays as manageDays
		,f2.CName0 as "상담관리매니저"
		*/
		,z.CRegistDate as "검사등록일"
		,z.CPayMoney as "등록비용"
	from
		--학생대상조건 지정 
		(
			select a.CScDepartCode as FacilityCd, a.CScDepartStartDate as FacilityStartDate, a.CScCode as StudentCd
			  from TStudentCounsel a --상담관리
			  where a.CRegistType = 'Newcomer'
			   and (a.CScDepartCode like 'EPX%' or a.CScDepartCode like 'ECH%')
			   and a.CStartDate between @startDate and @endDate
			 group by a.CScDepartCode, a.CScDepartStartDate, a.CScCode
			 union
			select a.CStdDepartCode as FacilityCd, a.CStdDepartStartDate as FacilityStartDate, a.CStdCode as StudentCd
			  from TStudentTutoring a --개별지도
			  where a.CRegistType = 'Newcomer'
			   and (a.CStdDepartCode like 'EPX%' or a.CStdDepartCode like 'ECH%')
			   and a.CStartDate between @startDate and @endDate
			 group by a.CStdDepartCode, a.CStdDepartStartDate, a.CStdCode
		) T1
	inner join TStudent a on t1.FacilityCd = a.CBranchCode and t1.FacilityStartDate = a.CBranchStartDate and t1.StudentCd = a.CCode
	left join TFacility b on a.CBranchCode = b.CDepartCode and a.CBranchStartDate = b.CDepartStartDate
	left join TSchool   c on a.CSchoolCode = c.CCode
	left join TStudentTutoring d on a.CBranchCode = d.CStdDepartCode and a.CBranchStartDate = d.CStdDepartStartDate and a.CCode = d.CStdCode and a.CLastTutoringNo = d.CNo
	left join TStudentCounsel  e on a.CBranchCode = e.CScDepartCode and a.CBranchStartDate = e.CScDepartStartDate and a.CCode = e.CScCode and a.CLastCounselNo = e.CNo
	left join TStaff f1 on d.CManager = f1.CStaffId
	left join TStaff f2 on e.CManager = f2.CStaffId
	left join TTestInfo z on a.CCode = z.CCode
	left join (
				select CStdDepartCode, CStdDepartStartDate, CStdCode, min(CStartDate) as CStartDate
				  from TStudentTutoring 
				 group by CStdDepartCode, CStdDepartStartDate, CStdCode) d1 on a.CBranchCode = d1.CStdDepartCode and a.CBranchStartDate = d1.CStdDepartStartDate and a.CCode = d1.CStdCode
	left join (
				select CScDepartCode, CScDepartStartDate, CScCode, min(CStartDate) as CStartDate
				  from TStudentCounsel 
				 group by CScDepartCode, CScDepartStartDate, CScCode) e1 on a.CBranchCode = e1.CScDepartCode and a.CBranchStartDate = e1.CScDepartStartDate and a.CCode = e1.CScCode
	where 1=1
	order by z.CRegistDate, a.CBranchCode, a.CEndDay desc, a.CTutorEndDay desc
	return
END

-- 신규학생등록비용외 포함
New_Students2:
BEGIN
	select 
		 d1.CStartDate as '개별지도 시작일'
		,e1.CStartDate as '상담관리 시작일'
		,(case 
			when ISNULL(d1.CStartDate,'') = '' and ISNULL(e1.CStartDate, '') <> '' then '상담관리'
			when ISNULL(d1.CStartDate,'') <> '' and ISNULL(e1.CStartDate, '') = '' then '개별지도'
			when ISNULL(d1.CStartDate,'') <> '' and ISNULL(e1.CStartDate, '') <> '' then '프리미엄'
			else '구분확인필요'
		end) as '프로그램'
		,a.CBranchCode as '지점코드'
		,b.COpenName0 as '지점명'
		-- ,a.CCode as '학생코드'
		,a.CName as '학생이름'
		,a.CPhoneStudent as '학생핸드폰'
		,a.CNameFather as '아버지성함'
		,a.CPhoneFather as '아버지핸드폰'
		,a.CNameMother as '어머니성함'
		,a.CPhoneMother as '어머니핸드폰'
		,(case 
				when a.CStudentStatus = 'Regist' then '등원'
				when a.CStudentStatus = 'Retire' then '종료'
				when a.CStudentStatus = 'Pause' then '휴원'
				else '상태확인'
			end)
			as '상태'
		/*
		,a.CReentryPossibility as '재등록가능성'
		,a.CEndStatus as '상담관리종료'
		,a.CEndDay as '상담관리종료일'
		,a.CTutorEndStatus as '개별지도종료'
		,a.CTutorEndDay as '개별지도종료일'
		,a.CPhoneHome as '집전화번호'
		,a.CAddress1Home as '집주소'
		,a.CVltType as vltType
		,d.CManageCommas as manageCommas
		,f1.CName0 as '개별지도매니저'
		,e.CManageDays as manageDays
		,f2.CName0 as '상담관리매니저'
		*/
		,(select top 1 CRegistDate from TTestInfo (NOLOCK) where CCode = a.CCode order by CRegistDate desc) as '검사등록일'
		,(select top 1 CPayMoney from TTestInfo (NOLOCK) where CCode = a.CCode order by CRegistDate desc) as '검사등록비용'
		-- ,e.CTotalPrice as '상_총결제액'
		,e.CPayPrice as '상_실결제액'
		-- ,d.CBillPrice as '개_총결제액'
		,d.CPayPrice  as '개_실결제액'
		,(ISNULL(e.CPayPrice,0) + ISNULL(d.CPayPrice,0)) as '실결제액 합계'
	from
		--학생대상조건 지정 
		(
			select a.CScDepartCode as FacilityCd, a.CScDepartStartDate as FacilityStartDate, a.CScCode as StudentCd
			  from TStudentCounsel a --상담관리
			  where a.CRegistType = 'Newcomer'
			   and (a.CScDepartCode like 'EPX%' or a.CScDepartCode like 'ECH%')
			   and a.CStartDate between @startDate and @endDate
			 group by a.CScDepartCode, a.CScDepartStartDate, a.CScCode
			 union
			select a.CStdDepartCode as FacilityCd, a.CStdDepartStartDate as FacilityStartDate, a.CStdCode as StudentCd
			  from TStudentTutoring a --개별지도
			  where a.CRegistType = 'Newcomer'
			   and (a.CStdDepartCode like 'EPX%' or a.CStdDepartCode like 'ECH%')
			   and a.CStartDate between @startDate and @endDate
			 group by a.CStdDepartCode, a.CStdDepartStartDate, a.CStdCode
		) T1
	inner join TStudent a on t1.FacilityCd = a.CBranchCode and t1.FacilityStartDate = a.CBranchStartDate and t1.StudentCd = a.CCode
	left join TFacility b on a.CBranchCode = b.CDepartCode and a.CBranchStartDate = b.CDepartStartDate
	left join TSchool   c on a.CSchoolCode = c.CCode
	left join TStudentTutoring d on a.CBranchCode = d.CStdDepartCode and a.CBranchStartDate = d.CStdDepartStartDate and a.CCode = d.CStdCode and a.CLastTutoringNo = d.CNo
	left join TStudentCounsel  e on a.CBranchCode = e.CScDepartCode and a.CBranchStartDate = e.CScDepartStartDate and a.CCode = e.CScCode and a.CLastCounselNo = e.CNo
	left join TStaff f1 on d.CManager = f1.CStaffId
	left join TStaff f2 on e.CManager = f2.CStaffId
	-- left join TTestInfo z on a.CCode = z.CCode
	left join (
				select CStdDepartCode, CStdDepartStartDate, CStdCode, min(CStartDate) as CStartDate
				  from TStudentTutoring 
				 group by CStdDepartCode, CStdDepartStartDate, CStdCode) d1 on a.CBranchCode = d1.CStdDepartCode and a.CBranchStartDate = d1.CStdDepartStartDate and a.CCode = d1.CStdCode
	left join (
				select CScDepartCode, CScDepartStartDate, CScCode, min(CStartDate) as CStartDate
				  from TStudentCounsel 
				 group by CScDepartCode, CScDepartStartDate, CScCode) e1 on a.CBranchCode = e1.CScDepartCode and a.CBranchStartDate = e1.CScDepartStartDate and a.CCode = e1.CScCode
	where 1=1
	order by a.CBranchCode, a.CEndDay desc, a.CTutorEndDay desc
	return
END

-- 학생 관리이력
-- 재원중인 학생들의 전체 리스트
StudentManage:
BEGIN

select 
		a.CBranchCode as '지점코드'
		,b.CName0 as '지점명'
		,a.CCode as '학생코드'
		,a.CName as '학생이름'
		,CASE a.CGrade 
			when 'g1' then '초1'
			when 'g2' then '초2'
			when 'g3' then '초3'
			when 'g4' then '초4'
			when 'g5' then '초5'
			when 'g6' then '초6'
			when 'g7' then '중1'
			when 'g8' then '중2'
			when 'g9' then '중3'
			when 'g10' then '고1'
			when 'g11' then '고2'
			when 'g12' then '고3'
			when 'g13' then '(중)재수'
			when 'g14' then '(중)검정'
			when 'g15' then '(고)재수'
			when 'g16' then '(고)검정'
		 end as "학년"
		,case when a1.manageType = 'AB' then '프리미엄'
			 when a1.manageType =  'A' then '상담관리'
			 when a1.manageType =  'B' then '개별지도'
			 else '종료'
		end AS "프로그램"
		/*
		,(case 
			when ISNULL(d1.CStartDate,'') = '' and ISNULL(e1.CStartDate, '') <> '' then '상담관리'
			when ISNULL(d1.CStartDate,'') <> '' and ISNULL(e1.CStartDate, '') = '' then '개별지도'
			when ISNULL(d1.CStartDate,'') <> '' and ISNULL(e1.CStartDate, '') <> '' then '프리미엄'
			else '구분확인필요'
		end) as '프로그램'
		*/
		,e1.CStartDate AS '상담관리 시작일'			
		,case e.CAttendType when 'W0day'  then '상담' 
							when 'W1day'  then '주1회' 
							when 'W2days' then '주2회' 
							when 'W3days' then '주3회' 
							when 'W4days' then '주4회' 
							when 'W5days' then '주5회' 
							when 'W6days' then '주6회' 
							when 'W7days' then '주7회' 
		 end as "주당등원횟수"
		,d1.CStartDate as '개별지도 시작일'
		,(case 
				when a.CStudentStatus = 'Regist' then '등원'
				when a.CStudentStatus = 'Retire' then '종료'
				when a.CStudentStatus = 'Pause' then '휴원'
				else '상태확인'
			end)
			as '상태'
		,a.CPhoneStudent as '학생핸드폰'
		,a.CNameFather as '아버지성함'
		,a.CPhoneFather as '아버지핸드폰'
		,a.CNameMother as '어머니성함'
		,a.CPhoneMother as '어머니핸드폰'
		--,a.CReentryPossibility as '재등록가능성'
		--,a.CEndStatus as '상담관리종료'
		,a.CEndDay as '상담관리종료일'
		--,a.CTutorEndStatus as '개별지도종료'
		,a.CTutorEndDay as '개별지도종료일'
		--,a.CPhoneHome as '집전화번호'
		--,a.CAddress1Home as '집주소'
		--,a.CVltType as vltType
		
		,d.CManageCommas as manageCommas
		,f1.CName0 as '개별지도매니저'
		,e.CManageDays as manageDays
		,f2.CName0 as '상담관리매니저'
		/*
		,(select top 1 CRegistDate from TTestInfo (NOLOCK) where CCode = a.CCode order by CRegistDate desc) as '검사등록일'
		,(select top 1 CPayMoney from TTestInfo (NOLOCK) where CCode = a.CCode order by CRegistDate desc) as '검사등록비용'
		-- ,e.CTotalPrice as '상_총결제액'
		,e.CPayPrice as '상_실결제액'
		-- ,d.CBillPrice as '개_총결제액'
		,d.CPayPrice  as '개_실결제액'
		,(ISNULL(e.CPayPrice,0) + ISNULL(d.CPayPrice,0)) as '실결제액 합계'
		*/
	from
		--학생대상조건 지정 
		(
			select a.CScDepartCode as FacilityCd, a.CScDepartStartDate as FacilityStartDate, a.CScCode as StudentCd
			  from TStudentCounsel a (NOLOCK) --상담관리
--			  where a.CRegistType = 'Newcomer'
			  where (a.CScDepartCode like 'EPX%' or a.CScDepartCode like 'ECH%')
			   and a.CScDepartCode <> 'EPXHEAD'
			   and a.CScDepartCode <> 'ECHHEAD'
--			   and a.CStartDate between @startDate and @endDate
			 group by a.CScDepartCode, a.CScDepartStartDate, a.CScCode
			 union
			select a.CStdDepartCode as FacilityCd, a.CStdDepartStartDate as FacilityStartDate, a.CStdCode as StudentCd
			  from TStudentTutoring a (NOLOCK)--개별지도
--			  where a.CRegistType = 'Newcomer'
			  where (a.CStdDepartCode like 'EPX%' or a.CStdDepartCode like 'ECH%')
			   and a.CStdDepartCode <> 'EPXHEAD'
			   and a.CStdDepartCode <> 'ECHHEAD'
--			   and a.CStartDate between @startDate and @endDate
			 group by a.CStdDepartCode, a.CStdDepartStartDate, a.CStdCode
		) T1
	inner join TStudent a (NOLOCK) on t1.FacilityCd = a.CBranchCode and t1.FacilityStartDate = a.CBranchStartDate and t1.StudentCd = a.CCode
	left join (select CBranchCode, CCode,
					   case when CLastCounselNo  IS NULL OR CEndStatus IS NOT NULL		then '' else 'A' end +
					   case when CLastTutoringNo IS NULL OR CTutorEndStatus IS NOT NULL	then '' else 'B' end as manageType
				  from TStudent) a1 on a.CBranchCode = a1.CBranchCode and a.CCode = a1.CCode
	left join TDepartment b (NOLOCK) on a.CBranchCode = b.CDepartCode and a.CBranchStartDate = b.CDepartStartDate
	left join TSchool   c (NOLOCK) on a.CSchoolCode = c.CCode
	left join TStudentTutoring d (NOLOCK) on a.CBranchCode = d.CStdDepartCode and a.CBranchStartDate = d.CStdDepartStartDate and a.CCode = d.CStdCode and a.CLastTutoringNo = d.CNo
	left join TStudentCounsel  e (NOLOCK) on a.CBranchCode = e.CScDepartCode and a.CBranchStartDate = e.CScDepartStartDate and a.CCode = e.CScCode and a.CLastCounselNo = e.CNo
	left join TStaff f1 (NOLOCK) on d.CManager = f1.CStaffId
	left join TStaff f2 (NOLOCK) on e.CManager = f2.CStaffId
	-- left join TTestInfo z on a.CCode = z.CCode
	left join (
				select CStdDepartCode, CStdDepartStartDate, CStdCode, min(CStartDate) as CStartDate
				  from TStudentTutoring (NOLOCK) 
				 group by CStdDepartCode, CStdDepartStartDate, CStdCode) d1 on a.CBranchCode = d1.CStdDepartCode and a.CBranchStartDate = d1.CStdDepartStartDate and a.CCode = d1.CStdCode
	left join (
				select CScDepartCode, CScDepartStartDate, CScCode, min(CStartDate) as CStartDate
				  from TStudentCounsel (NOLOCK)
				 group by CScDepartCode, CScDepartStartDate, CScCode) e1 on a.CBranchCode = e1.CScDepartCode and a.CBranchStartDate = e1.CScDepartStartDate and a.CCode = e1.CScCode
	where 1=1
	AND a.CStudentStatus IN ('Regist', 'Pause')	 --재원, 종료, 휴원Regist Retire Pause
	AND CONVERT(VARCHAR(10),b.CEndDate,23) = '2200-12-31'
	order by a.CBranchCode, a.CEndDay desc, a.CTutorEndDay desc

	return
END

-- 기간내 종료학생 리스트
FinishStudents:
BEGIN
SELECT 
	a.CBranchCode
	,b.COpenName0 AS '지점명'
	,a.CCode as '학생코드'
	,a.CName as '학생이름'
	,case a.CGrade 
		when 'g1' then '초1'
		when 'g2' then '초2'
		when 'g3' then '초3'
		when 'g4' then '초4'
		when 'g5' then '초5'
		when 'g6' then '초6'
		when 'g7' then '중1'
		when 'g8' then '중2'
		when 'g9' then '중3'
		when 'g10' then '고1'
		when 'g11' then '고2'
		when 'g12' then '고3'
		when 'g13' then '(중)재수'
		when 'g14' then '(중)검정'
		when 'g15' then '(고)재수'
		when 'g16' then '(고)검정'
		end AS '학년'

	,a.CPhoneStudent AS '학생핸드폰'
	,a.CNameFather as '아버지성함'
	,a.CPhoneFather as '아버지핸드폰'
	,a.CNameMother as '어머니성함'
	,a.CPhoneMother as '어머니핸드폰'
	,CONVERT(VARCHAR(10), a.CEndDay,23) AS '상담관리 종료일'
	,CONVERT(VARCHAR(10), a.CTutorEndDay,23) AS '개별지도 종료일'
	,(case 
				when a.CStudentStatus = 'Regist' then '등원'
				when a.CStudentStatus = 'Retire' then '종료'
				when a.CStudentStatus = 'Pause' then '휴원'
				else '상태확인'
			end)
			as '현재재원상태'
		
FROM TStudent a (NOLOCK)
	LEFT JOIN TFacility b (NOLOCK)
		ON a.CBranchCode=b.CDepartCode AND a.CBranchStartDate=b.CDepartStartDate
	LEFT JOIN TStudentCounsel c (NOLOCK) ON a.CLastCounselNo = c.CNo
	LEFT JOIN TStudentTutoring t (NOLOCK) ON a.CLastTutoringNo = t.CNo
WHERE (
	(a.CEndDay >= @startDate AND a.CEndDay <= @endDate) 
	OR (a.CTutorEndDay >= @startDate AND a.CTutorEndDay <= @endDate) 
	)
	AND a.CStudentStatus = 'Retire'

	return
END


-- VLT4G CT검사 기록 추출
VLT4G_CT_Result:
BEGIN

SELECT 
	a.CRegistDate AS 날짜
	,a.CCode AS 학생코드
	,case a.CCtGrade 
			when 'g1' then '초1'
			when 'g2' then '초2'
			when 'g3' then '초3'
			when 'g4' then '초4'
			when 'g5' then '초5'
			when 'g6' then '초6'
			when 'g7' then '중1'
			when 'g8' then '중2'
			when 'g9' then '중3'
			when 'g10' then '고1'
			when 'g11' then '고2'
			when 'g12' then '고3'
			when 'g13' then '(중)재수'
			when 'g14' then '(중)검정'
			when 'g15' then '(고)재수'
			when 'g16' then '(고)검정'
		 end AS 학년
	,(SELECT isnull(SUM(T1.점수), 0)
		FROM 
			(SELECT 
				CASE WHEN 
					aa.CAnswer = bb.CCorrect THEN 5
					ELSE 0	
				END AS 점수
			FROM TTestCT aa
			LEFT JOIN TCTQuestion bb ON bb.CNo = aa.CQuestionNo
			WHERE 
				bb.CQuestion = '국어'
				and aa.CNo = a.CNo) T1) 국어

	,(select isnull(SUM(T1.점수), 0)
		FROM 
			(SELECT 
				CASE WHEN 
					aa.CAnswer = bb.CCorrect THEN 5
					ELSE 0	
				END AS 점수
			FROM TTestCT aa
			LEFT JOIN TCTQuestion bb ON bb.CNo = aa.CQuestionNo
			WHERE 
				bb.CQuestion = '영어'
				and aa.CNo = a.CNo) T1) 영어

	,(select isnull(SUM(T1.점수), 0)
		FROM 
			(SELECT 
				CASE WHEN 
					aa.CAnswer = bb.CCorrect THEN 5
					ELSE 0	
				END AS 점수
			FROM TTestCT aa
			LEFT JOIN TCTQuestion bb ON bb.CNo = aa.CQuestionNo
			WHERE 
				bb.CQuestion = '수학'
				and aa.CNo = a.CNo) T1) 수학
				
	,(select isnull(SUM(T1.점수), 0)
		FROM 
			(SELECT 
				CASE WHEN 
					aa.CAnswer = bb.CCorrect THEN 5
					ELSE 0	
				END AS 점수
			FROM TTestCT aa
			LEFT JOIN TCTQuestion bb ON bb.CNo = aa.CQuestionNo
			WHERE 
				bb.CQuestion = '기초문장이해'
				and aa.CNo = a.CNo) T1)  기초문장이해
FROM 
	TTestInfo a (NOLOCK)
WHERE 
	a.CCtGrade IN ('g7', 'g8', 'g9', 'g10')


	return
END


-- 문자기록 추출
GetSMSHistory2:
BEGIN

select 
		a.CBranchCode as '지점코드'
		,b.COpenName0 as '지점명'
		,a.CCode as '학생코드'
		,a.CName as '학생이름'
		,CASE a.CGrade 
			when 'g1' then '초1'
			when 'g2' then '초2'
			when 'g3' then '초3'
			when 'g4' then '초4'
			when 'g5' then '초5'
			when 'g6' then '초6'
			when 'g7' then '중1'
			when 'g8' then '중2'
			when 'g9' then '중3'
			when 'g10' then '고1'
			when 'g11' then '고2'
			when 'g12' then '고3'
			when 'g13' then '(중)재수'
			when 'g14' then '(중)검정'
			when 'g15' then '(고)재수'
			when 'g16' then '(고)검정'
		 end as "학년"
		,case when a1.manageType = 'AB' then '프리미엄'
			 when a1.manageType =  'A' then '상담관리'
			 when a1.manageType =  'B' then '개별지도'
			 else '종료'
		end AS "프로그램"
		/*
		,(case 
			when ISNULL(d1.CStartDate,'') = '' and ISNULL(e1.CStartDate, '') <> '' then '상담관리'
			when ISNULL(d1.CStartDate,'') <> '' and ISNULL(e1.CStartDate, '') = '' then '개별지도'
			when ISNULL(d1.CStartDate,'') <> '' and ISNULL(e1.CStartDate, '') <> '' then '프리미엄'
			else '구분확인필요'
		end) as '프로그램'
		*/
		,e1.CStartDateFirst AS '상담관리 최초시작일'
		,e1.CStartDateRecent as '상담관리 최근시작일'
		,e1.CEndDateRecent as '상담관리 최근종료일'
					
		,case e.CAttendType when 'W0day'  then '상담' 
							when 'W1day'  then '주1회' 
							when 'W2days' then '주2회' 
							when 'W3days' then '주3회' 
							when 'W4days' then '주4회' 
							when 'W5days' then '주5회' 
							when 'W6days' then '주6회' 
							when 'W7days' then '주7회' 
		 end as "주당등원횟수"
		,d1.CStartDateFirst as '개별지도 최초시작일'
		,d1.CStartDateRecent as '개별지도 최근시작일'
		,d1.CEndDateRecent as '개별지도 최근종료일'
		,(case 
				when a.CStudentStatus = 'Regist' then '등원'
				when a.CStudentStatus = 'Retire' then '종료'
				when a.CStudentStatus = 'Pause' then '휴원'
				else '상태확인'
			end)
			as '상태'
		--,a.CPhoneStudent as '학생핸드폰'
		--,a.CNameFather as '아버지성함'
		--,a.CPhoneFather as '아버지핸드폰'
		--,a.CNameMother as '어머니성함'
		--,a.CPhoneMother as '어머니핸드폰'
		--,a.CReentryPossibility as '재등록가능성'
		--,a.CEndStatus as '상담관리종료'
		,a.CEndDay as '상담관리종료일'
		--,a.CTutorEndStatus as '개별지도종료'
		,a.CTutorEndDay as '개별지도종료일'
		--,a.CPhoneHome as '집전화번호'
		--,a.CAddress1Home as '집주소'
		--,a.CVltType as vltType
		
		,d.CManageCommas as manageCommas
		,d.CPayCommas as '등록콤마수'
		,d.CCommaPerWeek as '주당콤마수'
		,f1.CName0 as '개별지도매니저'
		,e.CManageDays as manageDays
		,f2.CName0 as '상담관리매니저'
		/*
		,(select top 1 CRegistDate from TTestInfo (NOLOCK) where CCode = a.CCode order by CRegistDate desc) as '검사등록일'
		,(select top 1 CPayMoney from TTestInfo (NOLOCK) where CCode = a.CCode order by CRegistDate desc) as '검사등록비용'
		-- ,e.CTotalPrice as '상_총결제액'
		,e.CPayPrice as '상_실결제액'
		-- ,d.CBillPrice as '개_총결제액'
		,d.CPayPrice  as '개_실결제액'
		,(ISNULL(e.CPayPrice,0) + ISNULL(d.CPayPrice,0)) as '실결제액 합계'
		*/
		,(select max(CSendTime) from TLogSMS (NOLOCK)
			where 
				CBranchIdDepartCode = a.CBranchCode
				and LEFT(CContent, 3) = LEFT(a.CName + ' ', 3)
				and CType='Attendance'
		) as '마지막문자'
	from
		--학생대상조건 지정 
		(
			select a.CScDepartCode as FacilityCd, a.CScDepartStartDate as FacilityStartDate, a.CScCode as StudentCd
			  from TStudentCounsel a (NOLOCK) --상담관리
--			  where a.CRegistType = 'Newcomer'
			  where (a.CScDepartCode like 'EPX%' or a.CScDepartCode like 'ECH%')
			   and a.CScDepartCode <> 'EPXHEAD'
			   and a.CScDepartCode <> 'ECHHEAD'
--			   and a.CStartDate between @startDate and @endDate
			 group by a.CScDepartCode, a.CScDepartStartDate, a.CScCode
			 union
			select a.CStdDepartCode as FacilityCd, a.CStdDepartStartDate as FacilityStartDate, a.CStdCode as StudentCd
			  from TStudentTutoring a (NOLOCK)--개별지도
--			  where a.CRegistType = 'Newcomer'
			  where (a.CStdDepartCode like 'EPX%' or a.CStdDepartCode like 'ECH%')
			   and a.CStdDepartCode <> 'EPXHEAD'
			   and a.CStdDepartCode <> 'ECHHEAD'
--			   and a.CStartDate between @startDate and @endDate
			 group by a.CStdDepartCode, a.CStdDepartStartDate, a.CStdCode
		) T1
	inner join TStudent a (NOLOCK) on t1.FacilityCd = a.CBranchCode and t1.FacilityStartDate = a.CBranchStartDate and t1.StudentCd = a.CCode
	left join (select CBranchCode, CCode,
					   case when CLastCounselNo  IS NULL OR CEndStatus IS NOT NULL		then '' else 'A' end +
					   case when CLastTutoringNo IS NULL OR CTutorEndStatus IS NOT NULL	then '' else 'B' end as manageType
				  from TStudent) a1 on a.CBranchCode = a1.CBranchCode and a.CCode = a1.CCode
	left join TFacility b (NOLOCK) on a.CBranchCode = b.CDepartCode and a.CBranchStartDate = b.CDepartStartDate
	left join TSchool   c (NOLOCK) on a.CSchoolCode = c.CCode
	left join TStudentTutoring d (NOLOCK) on a.CBranchCode = d.CStdDepartCode and a.CBranchStartDate = d.CStdDepartStartDate and a.CCode = d.CStdCode and a.CLastTutoringNo = d.CNo
	left join TStudentCounsel  e (NOLOCK) on a.CBranchCode = e.CScDepartCode and a.CBranchStartDate = e.CScDepartStartDate and a.CCode = e.CScCode and a.CLastCounselNo = e.CNo
	left join TStaff f1 (NOLOCK) on d.CManager = f1.CStaffId
	left join TStaff f2 (NOLOCK) on e.CManager = f2.CStaffId
	-- left join TTestInfo z on a.CCode = z.CCode
	left join (
				select CStdDepartCode, CStdDepartStartDate, CStdCode, min(CStartDate) as CStartDateFirst, MAX(CStartDate) as CStartDateRecent, MAX(CEndDate) as CEndDateRecent
				  from TStudentTutoring (NOLOCK) 
				 group by CStdDepartCode, CStdDepartStartDate, CStdCode) d1 on a.CBranchCode = d1.CStdDepartCode and a.CBranchStartDate = d1.CStdDepartStartDate and a.CCode = d1.CStdCode
	left join (
				select CScDepartCode, CScDepartStartDate, CScCode, min(CStartDate) as CStartDateFirst, MAX(CStartDate) as CStartDateRecent, MAX(CEndDate) as CEndDateRecent
				  from TStudentCounsel (NOLOCK)
				 group by CScDepartCode, CScDepartStartDate, CScCode) e1 on a.CBranchCode = e1.CScDepartCode and a.CBranchStartDate = e1.CScDepartStartDate and a.CCode = e1.CScCode
	where 1=1
	AND a.CStudentStatus IN ('Regist')	 --재원, 종료, 휴원Regist Retire Pause
--	AND CONVERT(VARCHAR(10),b.CEndDate,23) = '2200-12-31'
	and b.CFacilityType = 'DIRECT' -- 직영점만
	order by a.CBranchCode, a.CEndDay desc, a.CTutorEndDay desc

	return
END


-- 문자기록 추출
GetSMSHistory:
BEGIN

SELECT 
	CBranchIdDepartCode AS '지점코드',
	CSendTime as '보낸시각',
	case when CType='Manual' then '사용자 발송'
	when CType='Attendance' then '출결관리 발송'
	when CType='System' then '시스템발송' else '' end as '발송유형',
	CSenderName as '발송자명',
	CSenderPhone as '발신자 전화번호',
	CReceiverName as '수신자명',
	CReceiverPhone as '수신자 전화번호',
	CContent AS '내용'
from TLogSMS(nolock) --SMS이력
where CBranchIdDepartCode = @branchCode
--and CContent not like  '%출근%' --출근 발송 문자를 받는 지점인경우에 출근관련 멘트 제외시키기
and CSendTime >= @startDate
and CSendTime < @endDate -- 보낸시간이 2017년1월부터 9월30일일까지인 데이터 CSendTime은 시분초까지 들어가므로 다음날짜인 10월1일을 이용한다
order by CSendTime -- 보낸시간으로 정렬

return
END


-- 직영매출 조회
GetDirectSale:
BEGIN

SELECT 
	a.CDepartCode as '지점코드'
	,c.COpenName0 as '지점명'
	,b.CName as '학생이름'
	,CASE 
		WHEN a.CRegType = 'Counsel' THEN '상담관리'
		WHEN a.CRegType = 'Tutoring' THEN '개별지도'
	END AS '등록구분'
	,a.CStartDate as '시작날짜'
	,a.CEndDate as '종료날짜'
	,a.CPayCommas AS '결제콤마수'
	,(SELECT CName FROM TCommonCode (NOLOCK) WHERE CCodeGroup = a.CSaleFlagGroupCode AND CCode = a.CSaleFlagCode) AS '매출구분'
	,a.CPayMonthCount AS '선결제개월수'
	,(SELECT CName FROM TCommonCode (NOLOCK) WHERE CCodeGroup = a.CPayFlagGroupCode AND CCode = a.CPayFlagCode) AS '결재구분'
	,a.CPayNo AS '매출승인번호'
	,a.CPayPrice AS '매출금액'
	,a.CSaleDate AS '매출일자'
	,a.CSaleMemo AS '매출메모'	
	,a.CRtnDate AS '취소(환불)일자'
	,a.CRtnPrice AS '취소금액'
	,a.CRtnNo AS '취소승인번호'

FROM TStudentSaleHistory a (NOLOCK)
LEFT JOIN TStudent b (NOLOCK) ON b.CCode = a.CCode
LEFT JOIN TFacility c (nolock) on c.CDepartCode = a.CDepartCode and c.CDepartStartDate = a.CDepartStartDate
WHERE 
	1 = 1
	AND ((a.CSaleDate >= @startDate AND a.CSaleDate <= @endDate) 
	OR (a.CRtnDate >= @startDate AND a.CRtnDate <= @endDate))

	return
END


-- 직영점 매출 일별 합산 조회
GetDirectSalePerTotal:
BEGIN

SELECT 
	c.CName0 as 지점명
	,a.CSaleDate as '매출날짜'
	,SUM(CPayPrice) AS '총매출'
	,SUM(CRtnPrice) AS '총환불'
	,SUM(CPayPrice) - SUM(CRtnPrice) AS '순매출'
	,SUM(CASE WHEN CRegType = 'Counsel' AND (CPayMonthCount is null OR CPayMonthCount = 0 OR CPayMonthCount = 1) THEN CPayPrice END) AS '상담관리매출합1'
	,SUM(CASE WHEN CRegType = 'Tutoring' AND (CPayMonthCount is null OR CPayMonthCount = 0 OR CPayMonthCount = 1)THEN CPayPrice END) AS '개별지도매출합1'
	,SUM(CASE WHEN CRegType = 'Counsel' AND (CPayMonthCount is null OR CPayMonthCount = 0 OR CPayMonthCount = 1) AND CSaleFlagCode = 'COUNSEL' THEN CPayPrice END) AS '상담관리(상담소)1'
	,SUM(CASE WHEN CRegType = 'Counsel' AND (CPayMonthCount is null OR CPayMonthCount = 0 OR CPayMonthCount = 1) AND CSaleFlagCode = 'INSTITUTE' THEN CPayPrice END) AS '상담관리(학원)1'
	,SUM(CASE WHEN CRegType = 'Tutoring' AND (CPayMonthCount is null OR CPayMonthCount = 0 OR CPayMonthCount = 1) AND CSaleFlagCode = 'INSTITUTE' THEN CPayPrice END) AS '개별지도(학원)1'

	,SUM(CASE WHEN CRegType = 'Counsel' AND (CPayMonthCount = 2) THEN CPayPrice END) AS '상담관리매출합2'
	,SUM(CASE WHEN CRegType = 'Tutoring' AND (CPayMonthCount = 2)THEN CPayPrice END) AS '개별지도매출합2'
	,SUM(CASE WHEN CRegType = 'Counsel' AND (CPayMonthCount = 2) AND CSaleFlagCode = 'COUNSEL' THEN CPayPrice END) AS '상담관리(상담소)2'
	,SUM(CASE WHEN CRegType = 'Counsel' AND (CPayMonthCount = 2) AND CSaleFlagCode = 'INSTITUTE' THEN CPayPrice END) AS '상담관리(학원)2'
	,SUM(CASE WHEN CRegType = 'Tutoring' AND (CPayMonthCount = 2) AND CSaleFlagCode = 'INSTITUTE' THEN CPayPrice END) AS '개별지도(학원)2'

	,SUM(CASE WHEN CRegType = 'Counsel' AND (CPayMonthCount = 3) THEN CPayPrice END) AS '상담관리매출합3'
	,SUM(CASE WHEN CRegType = 'Tutoring' AND (CPayMonthCount = 3)THEN CPayPrice END) AS '개별지도매출합3'
	,SUM(CASE WHEN CRegType = 'Counsel' AND (CPayMonthCount = 3) AND CSaleFlagCode = 'COUNSEL' THEN CPayPrice END) AS '상담관리(상담소)3'
	,SUM(CASE WHEN CRegType = 'Counsel' AND (CPayMonthCount = 3) AND CSaleFlagCode = 'INSTITUTE' THEN CPayPrice END) AS '상담관리(학원)3'
	,SUM(CASE WHEN CRegType = 'Tutoring' AND (CPayMonthCount = 3) AND CSaleFlagCode = 'INSTITUTE' THEN CPayPrice END) AS '개별지도(학원)3'

	,SUM(CASE WHEN CSaleFlagCode = 'CONSULTING2' THEN CPayPrice END) AS '고입컨설팅'
	,SUM(CASE WHEN CSaleFlagCode = 'CONSULTING' THEN CPayPrice END) AS '대입컨설팅'	
	,SUM(CASE WHEN CSaleFlagCode = 'SPACERENTAL' THEN CPayPrice END) AS '공간임대'		

	,SUM(CASE WHEN (CRegType = 'Counsel' OR CRegType = 'Tutoring') AND CSaleFlagCode = 'COUNSEL' THEN CRtnPrice END) AS '상담소환불'
	,SUM(CASE WHEN (CRegType = 'Counsel' OR CRegType = 'Tutoring') AND CSaleFlagCode = 'INSTITUTE' THEN CRtnPrice END) AS '학원환불'

	,SUM(CASE WHEN CSaleFlagCode = 'CONSULTING2' THEN CRtnPrice END) AS '고입컨설팅환불'
	,SUM(CASE WHEN CSaleFlagCode = 'CONSULTING' THEN CRtnPrice END) AS '대입컨설팅환불'	
	,SUM(CASE WHEN CSaleFlagCode = 'SPACERENTAL' THEN CRtnPrice END) AS '공간임대환불'		

FROM TStudentSaleHistory a (NOLOCK)
	LEFT JOIN TStudent b (NOLOCK) ON b.CCode = a.CCode
	LEFT JOIN TDepartment c (nolock) on c.CDepartCode = a.CDepartCode and c.CDepartStartDate = a.CDepartStartDate
WHERE 
	1 = 1
	AND ((a.CSaleDate >= @startDate AND a.CSaleDate <= @endDate) 
		OR (a.CRtnDate >= @startDate AND a.CRtnDate <= @endDate))
	AND c.CDepartCode like 'EPX%' and c.CParentFacilityCode = 'EPXDIRECT' and c.CEndDate = '2200-12-31'
	-- AND a.CDepartCode = @branchCode
GROUP BY c.CName0, a.CSaleDate 
ORDER BY a.CSaleDate

	return
END

GO

-- =============================================
-- Author:		김길명
-- Create date: 2016-02-12
-- Description:	지점운영현황(신규)
-- Modify:      김길명
-- Modify date: 2016-03-10
-- Description:	말일자로 끝나는 학생은 종료학생으로 처리하였으나 이탈율이 너무 올라간다고 포함처리
-- Modify:      김길명
-- Modify date: 2018-04-05
-- Description:	개별지도콤마의 정리를 위해 데이터 이관작업을 해줌. 이관데이터는 집계에서 제외되어야 함(TRANYN = 'Y')
-- EXEC SP_FACILITY_STUDENT_COUNT_CALC @pTYPE = '2015-03-01'
-- =============================================
CREATE PROCEDURE [dbo].[SP_FACILITY_STUDENT_COUNT_CALC]
	@pTYPE			VARCHAR(10)  = ''	-- 일자 받은걸로 12개월치(없으면 오늘기준)
AS

-- 임시테이블을 이용하여 지점처리
DECLARE @FACILITY TABLE
(
	CFACILITY NVARCHAR(20)	-- 지점코드
)

-- 기준테이블(월별)
CREATE TABLE #MONTH
(
	CMonth			NVARCHAR(7),	-- 월
	CFacility		NVARCHAR(20) 	-- 지점코드
)
CREATE NONCLUSTERED INDEX #Idx00 ON #MONTH (CMonth, CFacility)
-- 상담관리 월초, 월말을 구하기 위한 임시테이블
CREATE TABLE #dTEMP0
(
	CMonth			NVARCHAR(7),	-- 월
	CFacility		NVARCHAR(20),	-- 지점코드
	CStudentCode	NVARCHAR(50),	-- 학생코드
	CGrade          NVARCHAR(10)    -- 학년
)

-- 변수선언
DECLARE 
	@dSTART_DATE DATETIME,
	@dEND_DATE   DATETIME,
	@dLOOP_DATE	 DATETIME,
	@dLOOP_CHK   INT,
	@sEND_DATE   DATETIME,
	@dMonLastDt  DATETIME

BEGIN
	-- 검색기간 변환
	IF ISNULL(@pTYPE, '') = ''
		SET @dEND_DATE   = CONVERT(VARCHAR(10), GETDATE(), 23)
	ELSE
		SET @dEND_DATE   = CONVERT(DATETIME, @pTYPE)

	SET @dEND_DATE   = DATEADD(Day, -(Day(@dEND_DATE)-1), @dEND_DATE)
	SET @dSTART_DATE = DATEADD(Month, -11, @dEND_DATE) - (day(@dEND_DATE)-1)
	
	SET @sEND_DATE   = DATEADD(d,-1,DATEADD(m,1,DATEADD(dd,1,DATEADD(dd,-DATEPART(dd,@dEND_DATE),@dEND_DATE)))) -- 월말
----------------------------------------------------- 지점목록 설정 Start
INSERT INTO @FACILITY (CFACILITY)  
SELECT a.CDepartCode
  FROM TFacility a(NOLOCK)   
 INNER JOIN TDepartment b(NOLOCK) 
	ON a.CDepartCode = b.CDepartCode AND a.CDepartStartDate = b.CDepartStartDate 
 WHERE SUBSTRING(a.CDepartCode, 1, 3) IN ('EPX','ECH')
   AND a.CFacilityType NOT IN ('GROUP', 'HEAD')
   AND (  -- 기간내에 존재하는 지점만 세팅
		(a.CDepartStartDate <= @dSTART_DATE AND b.CEndDate >= @dSTART_DATE) OR
		(a.CDepartStartDate <= @sEND_DATE   AND b.CEndDate >= @sEND_DATE) 
	   ) 
	
--------------------------------------------------------------- 지점목록 End
DELETE FROM TFacilityStudentCount
 WHERE CMonth >= LEFT(CONVERT(VARCHAR, @dSTART_DATE, 23), 7)
   AND CMonth <= LEFT(CONVERT(VARCHAR, @dEND_DATE, 23), 7)


-- 0.월초,월말회원(상담관리, 개별지도 둘 다)
SET @dLOOP_CHK = 0
SET @dLOOP_DATE = @dSTART_DATE
WHILE @dEND_DATE >= @dLOOP_DATE
	BEGIN
		--************
		--상담관리월초
		-- 2016.03.18. 등록테이블에 학년추가
		--************
		-- 1일 미만등록, 1일이후 종료 학생 리스트 
		INSERT INTO #dTEMP0(CMonth, CFacility, CStudentCode, CGrade)
		SELECT LEFT(CONVERT(VARCHAR, @dLOOP_DATE, 23), 7) AS CMonth, a.CScDepartCode, a.CScCode, MAX(a.CGrade) AS CGrade
		  FROM TStudentCounsel a(NOLOCK)
		 WHERE EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CScDepartCode)  -- 해당지점
		   -- 2016.03.10. 이전달 말일자로 끝나는 데이터도 월초에 포함시키도록 한다.
		   AND a.CStartDate < @dLOOP_DATE AND a.CEndDate >= DATEADD(DD, -1, @dLOOP_DATE) 
--					AND a.CStartDate < @dLOOP_DATE AND a.CEndDate >= @dLOOP_DATE -- 시작일이 기준일보다 작고 종료일은 시작일과 같거나 큰거
		   AND a.CRegistType <> 'Refund' -- 환불은 제외처리
		 GROUP BY a.CScDepartCode, a.CScCode

		-- 월말에 종료처리하고 7일 이내 등록한 학생을 월초 회원으로 집계(월초집계에 누락되는 학생 보정)
		INSERT INTO TFacilityStudentCount(CMonth, CFacility, CStudentCode, CType, CFlag, CGrade)
		SELECT LEFT(CONVERT(VARCHAR, @dLOOP_DATE, 23), 7) AS CMonth, a.CScDepartCode, a.CScCode, 'Counsel', 'Begin', MAX(a.CGrade) AS CGrade
		  FROM TStudentCounsel a(NOLOCK)
		 WHERE EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CScDepartCode)  -- 해당지점
		   AND a.CStartDate >= @dLOOP_DATE					-- 시작일이 1일보다 크거나 같고
		   AND a.CStartDate <= DATEADD(dd, 6, @dLOOP_DATE)  -- 시작일이 7일보다 작거나 같은거(6을 해준거 1일을 먹고 들어가기 때문임돠)
		   -- 현재등록 이전 데이터가 있으며 마지막일자가 시작일보다 7일 이전
		   AND (SELECT COUNT(CScCode) FROM TStudentCounsel(NOLOCK) WHERE CScDepartCode = a.CScDepartCode and CScCode = a.CScCode AND CNo < a.CNo AND CEndDate >= DATEADD(dd, -7, a.CStartDate) ) > 0
		   AND a.CRegistType NOT IN ('Newcomer', 'Refund') -- 환불은 제외처리
		   -- 데이터가 이상한게 많아..월초리스트에 있는 학생을 제외하는 조건 하나 더 추가
		   AND NOT EXISTS  (SELECT 1 FROM #dTEMP0 where CFacility = a.CScDepartCode and CStudentCode = a.CScCode)
		 GROUP BY a.CScDepartCode, a.CScCode

		-- 먼저 구해뒀던 월초회원을 추가
		INSERT INTO TFacilityStudentCount (CMonth, CFacility, CStudentCode, CType, CFlag, CGrade)
		SELECT CMonth, CFacility, CStudentCode, 'Counsel', 'Begin', CGrade FROM #dTEMP0

		-- 2017.05.27 종료회원수를 구한다.(현재월과 과거월의 경우 차이 발생
		-- 말일구하기
		select @dMonLastDt = DATEADD(d,-1,DATEADD(m,1,DATEADD(dd,1,DATEADD(dd,-DATEPART(dd,@dLOOP_DATE),@dLOOP_DATE))))
		-- 현재일자보다 크면 오늘일자 넣어주기
		if @dMonLastDt > CONVERT(VARCHAR, getdate(), 23)
			select @dMonLastDt = CONVERT(VARCHAR, getdate(), 23)
		
		INSERT INTO TFacilityStudentCount(CMonth, CFacility, CStudentCode, CType, CFlag, CGrade)
		select a.CMonth, a.CFacility, a.CStudentCode, a.CType, 'RealEnd', null
		  from TFacilityStudentCount a
		  left join TStudentCounsel b
			on a.CFacility = b.CScDepartCode and a.CStudentCode = b.CScCode and 
			   (
--				(a.CMonth = LEFT(CONVERT(VARCHAR, b.CStartDate, 23), 7) and b.CEndDate >= @dMonLastDt) or
				@dMonLastDt between b.CStartDate and b.CEndDate
		--	    a.CMonth = LEFT(CONVERT(VARCHAR, b.CStartDate, 23), 7) and b.CEndDate >= CONVERT(VARCHAR, GetDate(), 23) or
		--	    CONVERT(VARCHAR, GetDate(), 23) between b.CStartDate and b.CEndDate
			   )
		 where CMonth = LEFT(CONVERT(VARCHAR, @dLOOP_DATE, 23), 7)
		   and a.CType = 'Counsel' AND a.CFlag = 'Begin'
		   and b.CScDepartCode is null


		-- 임시테이블 날려주고
		DELETE FROM #dTEMP0

		--************
		--개별지도월초
		--2016.03.18. 이거 학년이력을 갖고 오기가 애매하네..쩝~~ 머 스케쥴에서 도니깐 시간 걸려도 넣어봐야지요.
		--************
		-- 시작월에 가장 가까운 신규나 복회데이터를 구하고 종료이력일자보다 시작일이 큰것들만 추리기
		INSERT INTO TFacilityStudentCount(CMonth, CFacility, CStudentCode, CType, CFlag, CStartDate, CEndDate, CGrade)
		SELECT LEFT(CONVERT(VARCHAR, @dLOOP_DATE, 23), 7) AS CMonth, 
				a.CStdDepartCode,
				a.CStdCode,
				'Tutoring', 'Begin',
				@dLOOP_DATE,
				DATEADD(d,-1,DATEADD(m,1,DATEADD(dd,1,DATEADD(dd,-DATEPART(dd,@dLOOP_DATE),@dLOOP_DATE)))),
				d.CGrade
		  FROM TStudentTutoring a(NOLOCK)
		 INNER JOIN ( -- 기준데이터(시작일보다 작은날자의 신규나 복회 데이터)
						SELECT CStdDepartCode, CStdCode, MAX(CNo) AS CNo
						  FROM TStudentTutoring sub(NOLOCK)
						 WHERE EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = sub.CStdDepartCode)
						   AND CRegistType IN ('Newcomer','Returning')
						   AND sub.CStartDate < @dLOOP_DATE 
						   AND isnull(TranYn, 'N') <> 'Y' -- 2018.04.05. 이관데이터 제외처리조건 추가
						 GROUP BY CStdDepartCode, CStdCode
					) b 
			ON a.CStdDepartCode = b.CStdDepartCode AND a.CStdCode = b.CStdCode AND a.CNo = b.CNo
		  LEFT JOIN ( -- 종료데이터(시작일보다 작은일자의 종료이력)
						SELECT CStdBranchCode, CStdCode, MAX(CHistoryDate) AS CHistoryDate
						  FROM TStudentHistory sub2(NOLOCK)
						 WHERE EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = sub2.CStdBranchCode)  -- 해당지점
						   AND sub2.CRegistType = 'Retire' AND sub2.CStudentCounselType = 'Tutoring'
						   AND sub2.CHistoryDate < @dLOOP_DATE
						 GROUP BY CStdBranchCode, CStdCode
					) c
			ON a.CStdDepartCode = c.CStdBranchCode AND a.CStdCode = c.CStdCode
			-- 2016.03.18. 학년을 가져오는 조인절 추가
			LEFT JOIN (
						SELECT sub2.CStdDepartCode, sub2.CStdCode, sub2.CGrade
						  FROM TStudentTutoring sub2
						 INNER JOIN (
										SELECT aa.CStdDepartCode, aa.CStdCode, MAX(aa.CNo) AS CNo
										  FROM TStudentTutoring aa(NOLOCK)
										 WHERE EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = aa.CStdDepartCode)
										   AND aa.CStartDate < @dLOOP_DATE 
										 GROUP BY aa.CStdDepartCode, aa.CStdCode
									) sub3
							ON sub2.CStdDepartCode = sub3.CStdDepartCode AND sub2.CStdCode = sub3.CStdCode AND sub2.CNo = sub3.CNo
					) d
			ON a.CStdDepartCode = d.CStdDepartCode AND a.CStdCode = d.CStdCode
		 WHERE EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CStdDepartCode)
		   -- 종료이력이 null이거나 관리시작일보다 종료일이 작은 대상만 걸러준다
		   AND (c.CHistoryDate IS NULL OR a.CStartDate > c.CHistoryDate)
		   AND isnull(a.TranYn, 'N') <> 'Y' -- 2018.04.05. 이관데이터 제외처리조건 추가

		--**************
		--월말구하기(1)
		--**************
		-- 더 이상 로직 타지않게 변수 바꾸고
		IF @dLOOP_CHK = 0
			BEGIN
				SET @dLOOP_CHK = 1
			END
		ELSE
		-- 두번째 부터는 월초데이터를 전월말 데이터로 처리 
			BEGIN
				-- 1.상담관리 전월말 자료생성
				INSERT INTO TFacilityStudentCount(CMonth, CFacility, CStudentCode, CType, CFlag, CGrade)
				SELECT LEFT(CONVERT(VARCHAR, DATEADD(Month, -1, @dLOOP_DATE), 23), 7), CFacility, CStudentCode, 'Counsel', 'End', CGrade
				  FROM TFacilityStudentCount(NOLOCK)
				 WHERE CMonth = LEFT(CONVERT(VARCHAR, @dLOOP_DATE, 23), 7)
				   AND CType  = 'Counsel' AND CFlag  = 'Begin'

				-- 2.개별지도 전월말 자료생성
				INSERT INTO TFacilityStudentCount(CMonth, CFacility, CStudentCode, CType, CFlag, CGrade)
				SELECT LEFT(CONVERT(VARCHAR, DATEADD(Month, -1, @dLOOP_DATE), 23), 7), CFacility, CStudentCode, 'Tutoring', 'End', CGrade
				  FROM TFacilityStudentCount(NOLOCK)
				 WHERE CMonth = LEFT(CONVERT(VARCHAR, @dLOOP_DATE, 23), 7)
				   AND CType = 'Tutoring' AND CFlag = 'Begin'

			END

		-- 반복용 일자에 한달 더하기
		SET @dLOOP_DATE = DATEADD(Month, 1, @dLOOP_DATE)

		--**************
		--월말구하기(2)
		--**************
		IF @dEND_DATE < @dLOOP_DATE
			BEGIN
				
				--*************
				-- 상담관리월말
				--*************
				INSERT INTO #dTEMP0 (CMonth, CFacility, CStudentCode, CGrade)
				SELECT LEFT(CONVERT(VARCHAR, DATEADD(Month, -1, @dLOOP_DATE), 23), 7) AS CMonth, a.CScDepartCode, a.CScCode, MAX(a.CGrade) AS CGrade
				  FROM TStudentCounsel a(NOLOCK)
				 WHERE EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CScDepartCode)  -- 해당지점
				   -- 2016.03.10. 이전달 말일자로 끝나는 데이터도 월초에 포함시키도록 한다.
				   AND a.CStartDate < @dLOOP_DATE AND a.CEndDate >= DATEADD(DD, -1, @dLOOP_DATE)
		--			AND a.CStartDate < @dLOOP_DATE AND a.CEndDate >= @dLOOP_DATE -- 시작일이 기준일보다 작고 종료일은 시작일과 같거나 큰거
				   AND a.CRegistType <> 'Refund' -- 환불은 제외처리
				 GROUP BY a.CScDepartCode, a.CScCode

				-- 월말에 종료처리하고 7일 이내 등록한 학생을 월초 회원으로 집계(월초집계에 누락되는 학생 보정)
				INSERT INTO TFacilityStudentCount(CMonth, CFacility, CStudentCode, CType, CFlag, CGrade)
				SELECT LEFT(CONVERT(VARCHAR, DATEADD(Month, -1, @dLOOP_DATE), 23), 7) AS CMonth, a.CScDepartCode, a.CScCode, 'Counsel', 'End', MAX(a.CGrade) AS CGrade
				  FROM TStudentCounsel a(NOLOCK)
				 WHERE EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CScDepartCode)  -- 해당지점
				   AND a.CStartDate >= @dLOOP_DATE					-- 시작일이 1일보다 크거나 같고
				   AND a.CStartDate <= DATEADD(dd, 6, @dLOOP_DATE)  -- 시작일이 7일보다 작거나 같은거(6을 해준거 1일을 먹고 들어가기 때문임돠)
				   -- 현재등록 이전 데이터가 있으며 마지막일자가 시작일보다 7일 이전
				   AND (SELECT COUNT(CScCode) FROM TStudentCounsel(NOLOCK) WHERE CScDepartCode = a.CScDepartCode and CScCode = a.CScCode AND CNo < a.CNo AND CEndDate >= DATEADD(dd, -7, a.CStartDate) ) > 0
				   AND a.CRegistType NOT IN ('Newcomer', 'Refund') -- 환불은 제외처리
				   -- 데이터가 이상한게 많아..리스트에 있는 학생을 제외하는 조건 하나 더 추가
				   AND NOT EXISTS  (SELECT 1 FROM #dTEMP0 where CFacility = a.CScDepartCode and CStudentCode = a.CScCode)
				 GROUP BY a.CScDepartCode, a.CScCode

				-- 먼저 구해뒀던 월말회원을 추가
				INSERT INTO TFacilityStudentCount(CMonth, CFacility, CStudentCode, CType, CFlag, CGrade)
				SELECT CMonth, CFacility, CStudentCode, 'Counsel', 'End', CGrade FROM #dTEMP0

				--*************
				-- 개별지도월말
				--*************
				INSERT INTO TFacilityStudentCount(CMonth, CFacility, CStudentCode, CType, CFlag, CGrade)
				SELECT LEFT(CONVERT(VARCHAR, DATEADD(Month, -1, @dLOOP_DATE), 23), 7) AS CMonth, 
						a.CStdDepartCode,
						a.CStdCode, 
						'Tutoring', 'End',
						d.CGrade
				  FROM TStudentTutoring a(NOLOCK)
				 INNER JOIN ( -- 기준데이터(시작일보다 작은날자의 신규나 복회 데이터)
								SELECT CStdDepartCode, CStdCode, MAX(CNo) AS CNo
								  FROM TStudentTutoring sub(NOLOCK)
								 WHERE EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = sub.CStdDepartCode)
								   AND CRegistType IN ('Newcomer','Returning')
								   AND sub.CStartDate < @dLOOP_DATE 
								   AND isnull(TranYn, 'N') <> 'Y' -- 2018.04.05. 이관데이터 제외처리조건 추가
								 GROUP BY CStdDepartCode, CStdCode
							) b 
					ON a.CStdDepartCode = b.CStdDepartCode AND a.CStdCode = b.CStdCode AND a.CNo = b.CNo
				  LEFT JOIN ( -- 종료데이터(시작일보다 작은일자의 종료이력)
								SELECT CStdBranchCode, CStdCode, MAX(CHistoryDate) AS CHistoryDate
								  FROM TStudentHistory sub2(NOLOCK)
								 WHERE EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = sub2.CStdBranchCode)  -- 해당지점
								   AND sub2.CRegistType = 'Retire' AND sub2.CStudentCounselType = 'Tutoring'
								   AND sub2.CHistoryDate < @dLOOP_DATE
								 GROUP BY CStdBranchCode, CStdCode
							) c
					ON a.CStdDepartCode = c.CStdBranchCode AND a.CStdCode = c.CStdCode
				  -- 2016.03.18. 학년을 가져오는 조인절 추가
				  LEFT JOIN (
							SELECT sub2.CStdDepartCode, sub2.CStdCode, sub2.CGrade
							  FROM TStudentTutoring sub2
							 INNER JOIN (
											SELECT aa.CStdDepartCode, aa.CStdCode, MAX(aa.CNo) AS CNo
											  FROM TStudentTutoring aa(NOLOCK)
											 WHERE EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = aa.CStdDepartCode)
											   AND aa.CStartDate < @dLOOP_DATE 
											 GROUP BY aa.CStdDepartCode, aa.CStdCode
										) sub3
								ON sub2.CStdDepartCode = sub3.CStdDepartCode AND sub2.CStdCode = sub3.CStdCode AND sub2.CNo = sub3.CNo
						) d
					ON a.CStdDepartCode = d.CStdDepartCode AND a.CStdCode = d.CStdCode
				 WHERE EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CStdDepartCode)
				   -- 종료이력이 null이거나 관리시작일보다 종료일이 작은 대상만 걸러준다
				   AND (c.CHistoryDate IS NULL OR a.CStartDate > c.CHistoryDate)
				   AND isnull(a.TranYn, 'N') <> 'Y' -- 2018.04.05. 이관데이터 제외처리조건 추가
			END
	END
	-- 월초,월말회원 정리 끝
	SELECT 'OK' as Messege
END

GO


/*
	특정사용자가 개설했거나 강사로 참여하는 강의 리스트를 반환
*/

CREATE PROCEDURE [dbo].[SP_OneCur_My_Lecture_List](

	@staff_id nchar(30) = ''
	)
AS
SELECT 
	a.lecture_idx,
	a.lecture_image,
	a.title,
	(select title from otbl_Mager (NOLOCK) WHERE mager_idx = a.lecture_mager_id) as '전공구분',
	(select title from otbl_Category (NOLOCK) WHERE category_idx = a.lecture_category_id) as '전공분야',
	(select title from otbl_Category (NOLOCK) WHERE category_idx = a.lecture_sub_category_id) as '역량',
	(select CName0 from TStaff (NOLOCK) where CStaffId = a.staff_Id) as'개설자',
	(select count(*) from otbl_Lecture_Class (NOLOCK) where lecture_id = a.lecture_idx) as '수업갯수',
	a.total_credit as '총학점',
	a.limit_student as '모집인원수',
	(select count(*) from otbl_Lecture_attend_student (NOLOCK) where lecture_id = a.lecture_idx  and del_yn = 'N') as '신청인원수',
	(select MIN(class_startdatetime) from otbl_Lecture_class (NOLOCK) where lecture_id = a.lecture_idx AND del_yn = 'N') as firstclass_startdatetime,
    (select MAX(class_startdatetime) from otbl_Lecture_class (NOLOCK) where lecture_id = a.lecture_idx AND del_yn = 'N') as lastclass_startdatetime,
	(case when a.temp_save_yn = 'Y' then '임시저장' else '공개' end) as '공개여부',
	(case when a.lecture_closed_yn = 'Y' then '2.종료' else '1.진행중' end) as '종료여부',
	--(case when a.lecture_reg_yn = 'Y' then '접수중' else '접수마감' end) as '접수여부'
	(case 
        when a.lecture_closed_yn = 'Y' THEN '-'
		when a.lecture_reg_yn = 'Y' then '접수중' 
		else '접수마감' 
	end) as '접수여부'
	
	FROM otbl_Lecture a (NOLOCK)
		LEFT JOIN otbl_Member_profile b (NOLOCK) ON a.main_teacher_id = b.profile_idx
	   left join TDepartNowMember c (NOLOCK) on c.CStaffid = b.staff_id AND c.CMain = 1

	WHERE 1=1
		AND a.del_yn='N'
		-- 작성자이면 임시저장, 공개를 모두 보이고, 참여자이면 공개된 강의만 보이도록 함.
		AND (
			(a.staff_id = @staff_id) 
			OR 
			(SELECT profile_idx from otbl_Member_profile (NOLOCK) where staff_id = @staff_id) in (SELECT teacher_id from otbl_Lecture_attend_teacher(NOLOCK)
								WHERE lecture_id = a.lecture_idx
								AND del_yn = 'N'
								AND a.temp_save_yn = 'N')
			)

GO

-- ==================================================================
-- Author:		김길명
-- Create date: 2014-05-19
-- Description:	상담관리 갱신
-- 1) 연장등록시 들어가게 되는 데이터 값은 다음과 같습니다.
--   .주당등원일, 등원요일, 담당매니저 : 가장 마지막 등록내역분 그대로
--   .상담관리일자 : 가장 마지막 등록내역의 상담관리마감일 +1 ~ 한달
--   .납부여부 : 미납
--   .등록일자(구 결제일자) : 가장 마지막 등록내역의 상담관리마감일 +1일
-- Modify date: 2014-08-25
-- Description:	지점코드없이 연장등록하는 프로시져 짰는데 테스트 지점으로 인하여 문제 발생 ㅡ,.ㅡ(학생코드를 복사해버려서..)
--              25일 이전 데이터는 우야남...후~~~ 미챠
-- exec SP_STUDENT_COUNSEL_RENEW @pFACILITYCODE = 'EPX0116', @pSTUDENTCODE = 'Student-00000029', @PCOUNSELNO = 260158
-- 2015.12.24. 자동연장 시 원장자녀의 체크만으로 몽땅 로얄티를 부과 안하는게 아니라 체킹을 해야할거 같은데...
-- ==================================================================
CREATE PROCEDURE [dbo].[SP_STUDENT_COUNSEL_RENEW] 
	@pFACILITYCODE VARCHAR(20),	-- 지점코드
	@pSTUDENTCODE  VARCHAR(50),	-- 학생코드
	@PCOUNSELNO    INT			-- 상담관리번호
AS

DECLARE @dStartDate  DATETIME
DECLARE @dEndDate    DATETIME
DECLARE @dPriceMonth INT

DECLARE @dNo         INT

DECLARE @dCRegistType   VARCHAR(50)
DECLARE @dOrgStartDate  DATETIME
DECLARE @dRoyaltyRate   FLOAT
-- 2016.03.28 자동연장 시 현재 학생의 학년으로 처리한다.
DECLARE @dGrade         VARCHAR(50)

SET NOCOUNT ON
BEGIN
	
	-- 임시 : java에서 처리해야 되나 현재 잠시...여기서 처리하는걸로
	-- 폐기지점(종료일자가 오늘보다 작은경우.같으면 오늘까지니깐)의 경우 생성하지 않는다.
	IF (SELECT COUNT(1)
		  FROM TDepartment
		 WHERE CEndDate >= CONVERT(VARCHAR, GETDATE(), 23)
		   AND CDepartCode = @pFACILITYCODE) = 0
	BEGIN
		RETURN
	END

	-- 검색조건에 해당하는 상담관리정보 찾기
	SELECT *
	  INTO #TEMP1
	  FROM TStudentCounsel(NOLOCK)
	 WHERE CScDepartCode = @pFACILITYCODE
	   AND CScCode       = @pSTUDENTCODE
	   AND CNo           = @PCOUNSELNO
	
	-- 이럴일이 없어야 하는데 혹 모르니깐 함 걸러주기
	IF @@ROWCOUNT = 0 
		BEGIN
			PRINT '갱신할 상담정보를 찾을 수 없습니다.'
			RETURN
		END

	-- 상담관리 종료일 + 1을 시작일자로 가져오기
	SELECT @dStartDate    = DATEADD(dd, 1, CEndDate)
	      ,@dCRegistType  = CRegistType
		  ,@dOrgStartDate = CStartDate
	  FROM #TEMP1
	
	-- 결제내역(TStudentCounselPayments)을 생성하기 위한 금액 찾기(조인 마이 걸어야 하네...헐~~)
	SELECT TOP 1 @dPriceMonth = CPriceMonth
	            ,@dGrade      = b.CGrade
	  FROM #TEMP1 a
	 INNER JOIN TStudent b(NOLOCK)
	    ON a.CScDepartCode = b.CBranchCode AND a.CScDepartStartDate = b.CBranchStartDate AND a.CScCode = b.CCode
	  LEFT JOIN TPriceStudentCounsel c(NOLOCK)
	    ON b.CBranchCode = c.CDepartCode AND b.CBranchStartDate = c.CDepartStartDate AND b.CGrade = c.CGrade AND a.CAttendType = c.CAttendType
	 WHERE c.CRegDate <= @dStartDate -- 상담시작일보다 작거나 같은 지점별 주당 금액 가져오기
	 ORDER BY c.CRegDate DESC

	-- 이럴일이 없어야 하는데 혹 모르니깐 또 함 걸러주기
	IF @@ROWCOUNT = 0 
		BEGIN
			PRINT '지점별 학년별 주당기준금액을 찾을 수 없습니다.'
			RETURN
		END
	
	-- 로얄티 부과율 가져오기
	SELECT @dRoyaltyRate = CAST(CComment as float)
	  FROM TCommonCode
	 WHERE CCodeGroup = 'ROYALTYTYPE'
	   AND CCode = 'Counsel'


	-- 시작일이 1일이면 종료일도 마지막 일자로 셋팅
	IF DAY(@dStartDate) = 1
		BEGIN
			-- 2015.08.06 : 3월의 시작일이 1일인 경우 전전 종료일을 확인하여 말일 처리
			--              전전월의 데이터가 없으면 그냥 말일로 처리(신규 등록 데이터니깐 담달부터는 그냥 1달로 계산되도록)
			IF MONTH(@dStartDate) = 3 -- 시작월이 3월인 예외케이스
				BEGIN
					-- 이전등록 건이 연장이고 시작일이 1일이 아니면 시작일자 -1일 하여 종료일로 처리(신규, 복회는 그냥 1달로 계산처리)
					IF (@dCRegistType = 'Extension' AND DAY(@dOrgStartDate) <> 1)
						BEGIN
							SELECT @dEndDate = LEFT(CONVERT(VARCHAR, @dStartDate, 23), 8) + CONVERT(VARCHAR, DAY(DATEADD(dd,-1,@dOrgStartDate)))
						END
					ELSE -- 연장이고 1일이면, 신규면, 복회면 무조건 말일
						BEGIN
							SELECT @dEndDate = dateadd(d,-1,dateadd(m,1,dateadd(dd,1,dateadd(dd,-datepart(dd,@dStartDate),@dStartDate))))
						END
				END
			ELSE
				BEGIN
					SELECT @dEndDate = dateadd(d,-1,dateadd(m,1,dateadd(dd,1,dateadd(dd,-datepart(dd,@dStartDate),@dStartDate))))
				END
		END
	ELSE 
		BEGIN
			-- 시작일이 1일이 아니면 1달을 더하고 -1일 
			SELECT @dEndDate = DATEADD(mm, 1, @dStartDate)

			-- 시작일이 28일이하이면 -1일처리를 하는데...
			-- 종료월이 2월이이믄 29일까지 있을 떄가 있고 시작일이 29일이믄 2.28일이 되어야 하거등요~~ 살째기 조건을 몇개 더 겁니다.
			IF MONTH(@dEndDate) = 2 -- 2월 예외케이스
				BEGIN
					IF DAY(@dStartDate) < 29
						SELECT @dEndDate = @dEndDate - 1
					ELSE IF DAY(@dStartDate) = 29 AND DAY(@dEndDate) = 29 -- 2월의 시작일과 종료일이 같으면 하루 뺴기
						SELECT @dEndDate = @dEndDate - 1
				END
			ELSE 
				BEGIN
					SELECT @dEndDate = @dEndDate - 1
				END
		END
	--********************************************
	-- 기간 구했고, 금액 구했고 구람 맹글어 볼까욤
	--********************************************
	-- 1.채번 해오고 

	SELECT @dNo = CNowSeqNo + 1
	  FROM TMaxCode(NOLOCK)
	 WHERE CPrefix = 'StudentCounsel'
	-- 2.MAX값 변경 해주구
	UPDATE TMaxCode SET
			CNowSeqNo = @dNo,
			CNowValue = 'StudentCounsel-' + replicate(0,  8-len(@dNo)) + CONVERT(VARCHAR, @dNo)
	 WHERE CPrefix = 'StudentCounsel'

	-- 3.임시테이블 값 업데이트 해주구
	UPDATE #TEMP1 SET
		 CNo = @dNo
		,CRegistType      = 'Extension'
		,CDeaultStartDate = @dStartDate
		,CDeaultEndDate   = @dEndDate
		,CStartDate       = @dStartDate
		,CEndDate         = @dEndDate
		,CManageDays      = DATEDIFF(DAY, @dStartDate, DATEADD(DAY, 1, @dEndDate))
		,CFreeDays        = NULL
		,CFreeComment     = NULL
		,CPayDays         = DATEDIFF(DAY, @dStartDate, DATEADD(DAY, 1, @dEndDate))
		,CChangeDateReason=''
		,CBillPrice       = @dPriceMonth
		,CTestDCPrice     = 0
		,CPayPrice        = CASE WHEN CChildren = 1 THEN 0 ELSE @dPriceMonth END
		,CTotalPrice      = CASE WHEN CChildren = 1 THEN 0 ELSE @dPriceMonth END
		,CChangePriceReason=''
		,CPayDate         = @dStartDate
		,CFixRoyalty      = CASE WHEN CChildren = 1 THEN 0 ELSE @dPriceMonth / 100 * @dRoyaltyRate END
		,CRoyaltyRate     = @dRoyaltyRate
		-- 2015.12.01. 자동연장 시 제외되고 있었으나 로얄티관리에서 0으로 표시되는 항목이 있어 집어넣기로 함
		,CRoyalty         = CASE WHEN CChildren = 1 THEN 0 ELSE @dPriceMonth / 100 * @dRoyaltyRate END
	
	-- 4.상담관리 넣어주고
	INSERT INTO TStudentCounsel 
	  (CScDepartCode ,CScDepartStartDate,CScCode,CNo,CRegistType,CAttendType,CMonday,CTuesday,CWednesday,CThursday,CFriday,CSaturday,CSunday,CManager,CDeaultStartDate,CDeaultEndDate,CStartDate,CEndDate,CManageDays,CFreeDays,CFreeComment,CPayDays,CChangeDateReason,CBillPrice,CTestDCPrice,CPayPrice,CTotalPrice,CChangePriceReason,CPayDate,CRoyaltyRate,CRoyalty,CRoyaltyPayDate, CChk, CFixRoyalty, CChildren, CGrade, CAttributionPrice)
	SELECT   CScDepartCode
			,CScDepartStartDate
			,CScCode
			,CNo
			,CRegistType
			,CAttendType
			,CMonday
			,CTuesday
			,CWednesday
			,CThursday
			,CFriday
			,CSaturday
			,CSunday
			,CManager
			,CDeaultStartDate
			,CDeaultEndDate
			,CStartDate
			,CEndDate
			,CManageDays
			,CFreeDays
			,CFreeComment
			,CPayDays
			,CChangeDateReason
			,CBillPrice
			,CTestDCPrice
			,CPayPrice
			,CTotalPrice
			,CChangePriceReason
			,CPayDate
			,CRoyaltyRate
			,CRoyalty
			,CRoyaltyPayDate
			,'AUTO' 
			,CFixRoyalty
			,CChildren
			,@dGrade
			,(  -- 학원 현금 출납부 귀속금액 넣어주기( 2017.02.02 고재균 추가)
				select top 1 CAttributionPrice
				  from TPriceStudentCounsel(nolock)
				 where CDepartCode = t.CScDepartCode
				   and CDepartStartDate = t.CScDepartStartDate
				   and CGrade = @dGrade
				   and CAttendType = t.CAttendType
				 order by CRegDate desc
			 )
	  FROM #TEMP1 as t

	-- 5.상담관리 결제내역에 넣어주고(시작일이 1일인 경우와 아닌 경우 분리)
	IF DAY(@dStartDate) = 1
		BEGIN
			INSERT INTO TStudentCounselPayments(CStdDepartCode, CStdDepartStartDate, CStdCode,CNo, CPayStartDate
                                               ,CPayEndDate ,CMonthPrice ,CDayPrice ,CManageDays ,CBillPrice ,CPayPrice)
			SELECT CScDepartCode
				  ,CScDepartStartDate
				  ,CScCode
				  ,CNo
				  ,CStartDate
				  ,CEndDate
				  ,CBillPrice
				  ,CBillPrice / CManageDays
				  ,CManageDays
				  ,CBillPrice
				  ,CPayPrice
			  FROM #TEMP1
		END
	ELSE
		BEGIN
			-- 5.1.시작월 일수를 구해서 넣어주기
			SELECT CScDepartCode
				  ,CScDepartStartDate
				  ,CScCode
				  ,CNo
				  ,CStartDate
				  ,DATEADD(D,-1,DATEADD(M,1,DATEADD(DD,1,DATEADD(DD,-DATEPART(DD,CStartDate),CStartDate)))) AS CPayEndDate-- 시작일의 월말
				  ,CBillPrice AS CMonthPrice
				  ,0 AS CDayPrice
				  ,0 AS CManageDays
				  ,0 AS CBillPrice
				  ,0 AS CPayPrice
			  INTO #TEMP2
			  FROM #TEMP1
			-- 5.2.종료월 일수 구해서 넣어주기
			INSERT INTO #TEMP2
			SELECT CScDepartCode
				  ,CScDepartStartDate
				  ,CScCode
				  ,CNo
				  ,DATEADD(DAY, -(DAY(CEndDate)-1), CEndDate)
				  ,CEndDate AS CPayEndDate-- 시작일의 월말
				  ,CBillPrice AS CMonthPrice
				  ,0 AS CDayPrice
				  ,0 AS CManageDays
				  ,0 AS CBillPrice
				  ,0 AS CPayPrice
			  FROM #TEMP1
			-- 5.3.관리일수 계산
			UPDATE #TEMP2 SET
					 CManageDays = DATEDIFF(DAY, CStartDate, DATEADD(DAY, 1, CPayEndDate))
			-- 5.4.금액계산
			UPDATE #TEMP2 SET
					 CBillPrice = CMonthPrice / DAY(dateadd(d,-1,dateadd(m,1,dateadd(dd,1,dateadd(dd,-datepart(dd,CPayEndDate),CPayEndDate))))) * CManageDays
					,CPayPrice  = CMonthPrice / DAY(dateadd(d,-1,dateadd(m,1,dateadd(dd,1,dateadd(dd,-datepart(dd,CPayEndDate),CPayEndDate))))) * CManageDays
			-- 5.5.당월 일당회비
			UPDATE #TEMP2 SET
					 CDayPrice = CBillPrice / CManageDays
			
			-- 5.6.상담관리 결제 내역저장
			INSERT INTO TStudentCounselPayments(CStdDepartCode, CStdDepartStartDate, CStdCode,CNo, CPayStartDate
                                               ,CPayEndDate ,CMonthPrice ,CDayPrice ,CManageDays ,CBillPrice ,CPayPrice)
			SELECT * FROM #TEMP2
		END
	
	-- 6.학생마스터에 마지막 상담번호 갱신(젤 중요 : 이거 안하믄 계속 맹글어 냅니다.)
	UPDATE TStudent SET
		CLastCounselNo = @dNo
	 WHERE CBranchCode = @pFACILITYCODE
	   and CCode       = @pSTUDENTCODE

END

GO

-- =============================================
-- Author:		김동우
-- Create date: 201407-29
-- Description:	학생수 집계SP를 분리
-- Modify:      김길명
-- Modify date: 2015-10-29
-- Description:	집계쿼리를 각각 분리(속도때문에 저장이 안됨(3분 이상...변경 후 5초 이내)
-- =============================================
CREATE PROCEDURE [dbo].[SP_TStudent_Count_Calc]
	-- Add the parameters for the stored procedure here
	@SEARCHDATE		DATETIME = NULL
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    --아래 해당월의 첫째날, 마지막날 구하기
	DECLARE @FIRSTDATE		DATETIME
		, @SEARCHMONTH		DATETIME
		, @LASTDATE			DATETIME
		, @STD_CNT_CS		INT
		, @STD_CNT_TR		INT
		--, @NEXTDATE			DATETIME

	--조회 대상일이 없으면 오늘
	IF ISNULL(@SEARCHDATE, '') = ''
		SET @SEARCHDATE = CONVERT(VARCHAR(20), GETDATE(), 23)
		--SET @SEARCHDATE = '2014-03-01'

	--조회 대상일 달의 첫번째 날
	SET @FIRSTDATE = CONVERT(DATETIME, LEFT(CONVERT(VARCHAR(20), @SEARCHDATE, 23), 8) + '01')
	SET @SEARCHMONTH = CONVERT(DATETIME, LEFT(CONVERT(VARCHAR(20), @SEARCHDATE, 23), 8) + '01')

	--조회 대상일 기준 마지막날 처리
	IF @SEARCHDATE < CONVERT(DATETIME, LEFT(CONVERT(VARCHAR(20), GETDATE(), 23), 8) + '01')		--과거달 조회시 달1일~달말일
		SET @LASTDATE = DATEADD(DD, -1, DATEADD(MM, +1, @FIRSTDATE))
	ELSE IF @SEARCHDATE >= DATEADD(MONTH, 1, CONVERT(DATETIME, LEFT(CONVERT(VARCHAR(20), GETDATE(), 23), 8) + '01'))		--미래달 조회시 달1일~달말일
		SET @LASTDATE = DATEADD(DD, -1, DATEADD(MM, +1, @FIRSTDATE))
	ELSE		--현재달 조회시 달1일~오늘 까지
		SET @LASTDATE = CONVERT(VARCHAR(20), GETDATE(), 23)
	--ELSE		--현재달 조회시 달1일~어제 날짜 까지
	--	SET @LASTDATE = DATEADD(DD, -1, CONVERT(VARCHAR(20), GETDATE(), 23))

	--바로 다음달 조회시 시작일을 내일부터
	IF @SEARCHDATE >= DATEADD(MONTH, 1, CONVERT(DATETIME, LEFT(CONVERT(VARCHAR(20), GETDATE(), 23), 8) + '01'))	AND @SEARCHDATE < DATEADD(MONTH, 2, CONVERT(DATETIME, LEFT(CONVERT(VARCHAR(20), GETDATE(), 23), 8) + '01'))
		SET @FIRSTDATE = DATEADD(DD, 1, CONVERT(VARCHAR(20), GETDATE(), 23))
	----바로 다음달 조회시 시작일을 오늘부터
	--IF @SEARCHDATE >= DATEADD(MONTH, 1, CONVERT(DATETIME, LEFT(CONVERT(VARCHAR(20), GETDATE(), 23), 8) + '01'))	AND @SEARCHDATE < DATEADD(MONTH, 2, CONVERT(DATETIME, LEFT(CONVERT(VARCHAR(20), GETDATE(), 23), 8) + '01'))
	--	SET @FIRSTDATE = CONVERT(VARCHAR(20), GETDATE(), 23)

	--날짜 역전 방지
	IF @LASTDATE < @FIRSTDATE
		SET @LASTDATE = @FIRSTDATE

	--마지막날 다음날
	--SET @NEXTDATE = DATEADD(DD, +1, @LASTDATE)

	--SELECT @SEARCHDATE AS SEARCHDATE, @FIRSTDATE AS FIRSTDATE, @LASTDATE AS LASTDATE, @NEXTDATE AS NEXTDATE

	--해당월 해당집계일 데이터 삭제
	delete TAnalytics_Student_Count where CFirstDate = @SEARCHMONTH and CCalcDate = CONVERT(VARCHAR(20), GETDATE(), 23)

	--하루씩 날짜 빼서 계산하기
	set @FIRSTDATE = DATEADD(DD, -1, @FIRSTDATE)
	set @LASTDATE = DATEADD(DD, -1, @LASTDATE)

/* 2015-10-29 속도 문제로 각각 쿼리를 쪼개서 처리한다
	--해당월의 학생수 테이블에 넣기
	insert into TAnalytics_Student_Count
	select
		A.CDepartCode
		, A.COpenName0 as 지점명
		, ISNULL((select Count(distinct CScCode) from TStudentCounsel X where X.CScDepartCode = A.CDepartCode
			and X.CStartDate < @FIRSTDATE and X.CEndDate >= @FIRSTDATE),0) as [상담관리(월초)]		--첫째날 전에 등록하고, 이후에 끝남
		, ISNULL((select Count(distinct CScCode) from TStudentCounsel X where X.CScDepartCode = A.CDepartCode
			and (select Count(*) from TStudentCounsel Y where Y.CScCode = X.CScCode and Y.CEndDate < X.CStartDate) > 0
			and (select Count(*) from TStudentCounsel Y where Y.CScCode = X.CScCode and Y.CEndDate < @FIRSTDATE and Y.CEndDate > DATEADD(dd, -7, X.CStartDate)) > 0
			and X.CStartDate >= @FIRSTDATE),0) as [상담관리(월초누락연장)]
		, ISNULL((select Count(distinct CScCode) from TStudentCounsel X where X.CScDepartCode = A.CDepartCode
			and (select Count(*) from TStudentCounsel Y where Y.CScCode = X.CScCode and Y.CEndDate < X.CStartDate) = 0
			and X.CStartDate between @FIRSTDATE and @LASTDATE),0) as [상담관리(신규)]		--첫째날 부터 등록하고, 이후에 끝남
		, ISNULL((select Count(distinct CScCode) from TStudentCounsel X where X.CScDepartCode = A.CDepartCode
			and (select Count(*) from TStudentCounsel Y where Y.CScCode = X.CScCode and Y.CEndDate < X.CStartDate) > 0
			and (select Count(*) from TStudentCounsel Y where Y.CScCode = X.CScCode and Y.CEndDate < X.CStartDate and Y.CEndDate > DATEADD(dd, -7, X.CStartDate)) = 0
			and X.CStartDate between @FIRSTDATE and @LASTDATE),0) as [상담관리(복회)]
		, ISNULL((select Count(distinct CScCode) from TStudentCounsel X where X.CScDepartCode = A.CDepartCode
			and X.CStartDate <= @LASTDATE and X.CEndDate > @LASTDATE),0) as [상담관리(월말)]		--마지막 다음날에 등록하고, 이후에 끝남
		, ISNULL((select Count(distinct CScCode) from TStudentCounsel X where X.CScDepartCode = A.CDepartCode
			and (select Count(*) from TStudentCounsel Y where Y.CScCode = X.CScCode and Y.CEndDate < X.CStartDate) > 0
			and (select Count(*) from TStudentCounsel Y where Y.CScCode = X.CScCode and Y.CEndDate <= @LASTDATE and Y.CEndDate > DATEADD(dd, -7, X.CStartDate)) > 0
			and X.CStartDate > @LASTDATE),0) as [상담관리(월말누락연장)]
		, ISNULL((select Count(distinct CStdCode) from TStudentTutoring X where X.CStdDepartCode = A.CDepartCode
			and X.CStartDate < @FIRSTDATE and X.CEndDate >= @FIRSTDATE),0) as [개별지도(월초)]		--첫째날 전에 등록하고, 이후에 끝남
		, ISNULL((select Count(distinct CStdCode) from TStudentTutoring X where X.CStdDepartCode = A.CDepartCode
			and (select Count(*) from TStudentTutoring Y where Y.CStdCode = X.CStdCode and Y.CEndDate < X.CStartDate) > 0
			and (select Count(*) from TStudentTutoring Y where Y.CStdCode = X.CStdCode and Y.CEndDate < @FIRSTDATE and Y.CEndDate > DATEADD(dd, -7, X.CStartDate)) > 0
			and X.CStartDate between @FIRSTDATE and @LASTDATE),0) as [개별지도(월초누락연장)]
		, ISNULL((select Count(distinct CStdCode) from TStudentTutoring X where X.CStdDepartCode = A.CDepartCode
			and (select Count(*) from TStudentTutoring Y where Y.CStdCode = X.CStdCode and Y.CEndDate < X.CStartDate) = 0
			and X.CStartDate between @FIRSTDATE and @LASTDATE),0) as [개별지도(신규)]		--첫째날 부터 등록하고, 이후에 끝남
		, ISNULL((select Count(distinct CStdCode) from TStudentTutoring X where X.CStdDepartCode = A.CDepartCode
			and (select Count(*) from TStudentTutoring Y where Y.CStdCode = X.CStdCode and Y.CEndDate < X.CStartDate) > 0
			and (select Count(*) from TStudentTutoring Y where Y.CStdCode = X.CStdCode and Y.CEndDate < X.CStartDate and Y.CEndDate > DATEADD(dd, -7, X.CStartDate)) = 0
			and X.CStartDate between @FIRSTDATE and @LASTDATE),0) as [개별지도(복회)]
		, ISNULL((select Count(distinct CStdCode) from TStudentTutoring X where X.CStdDepartCode = A.CDepartCode
			and X.CStartDate <= @LASTDATE and X.CEndDate > @LASTDATE),0) as [개별지도(월말)]		--마지막 다음날에 등록하고, 이후에 끝남
		, ISNULL((select Count(distinct CStdCode) from TStudentTutoring X where X.CStdDepartCode = A.CDepartCode
			and (select Count(*) from TStudentTutoring Y where Y.CStdCode = X.CStdCode and Y.CEndDate < X.CStartDate) > 0
			and (select Count(*) from TStudentTutoring Y where Y.CStdCode = X.CStdCode and Y.CEndDate <= @LASTDATE and Y.CEndDate > DATEADD(dd, -7, X.CStartDate)) > 0
			and X.CStartDate > @LASTDATE),0) as [개별지도(월말누락연장)]
		, @SEARCHMONTH as CFirstDate
		, isnull((select sum(CCash) from TAccountingIncome where CBrDepartCode = A.CDepartCode and CBrDepartStartDate = A.CDepartStartDate
			and CSubject not like '%/개별지도%' and CSubject not like '%/상담관리%'
			and CAccountingDate between @FIRSTDATE and @LASTDATE), 0) as salesMoney --[매출]
		, isnull((select sum(CCash) from TAccountingExpense where CBrDepartCode = A.CDepartCode and CBrDepartStartDate = A.CDepartStartDate
			and CAccountingDate between @FIRSTDATE and @LASTDATE), 0) as expenseMoney --[비용]
		, isnull((select sum(CPayPrice) from TStudentCounsel where CScDepartCode = A.CDepartCode and CScDepartStartDate = B.CDepartStartDate
			and CPayDate between @FIRSTDATE and @LASTDATE)
			- (select sum(CRefundPrice) from TStudentCounselRefund where CStdBrcDptCode = A.CDepartCode and CStdBrcDptStartDate = A.CDepartStartDate
			and CEndDateRefund between @FIRSTDATE and @LASTDATE), 0) as counselTotalMoney --[상담관리매출]
		, isnull((select sum(CPayPrice) from TStudentTutoring where CStdDepartCode = A.CDepartCode and CStdDepartStartDate = B.CDepartStartDate
			and CPayDate between @FIRSTDATE and @LASTDATE)
			- (select sum(CRefundPrice) from TStudentTutoringRefund where CStdBrcDptCode = A.CDepartCode and CStdBrcDptStartDate = A.CDepartStartDate
			and CEndDateRefund between @FIRSTDATE and @LASTDATE), 0) as tutoringTotalMoeny --[개별지도매출]
		, CONVERT(VARCHAR(20), GETDATE(), 23) AS CCalcDate
	from TFacility A
		left join TDepartment B on A.CDepartCode = B.CDepartCode and A.CDepartStartDate = B.CDepartStartDate
	where A.CDepartCode like 'EPX%' and B.CEndDate >= @FIRSTDATE and B.CDepartStartDate <= @LASTDATE
	-- 2014.06.10 수정내용 추가
		and A.CDepartCode not in ('EPXBRANCH','EPXDIRECT','EPXHEAD')
*/

-- [상담관리(월초)]
SELECT X.CScDepartCode, Count(distinct X.CScCode) as cnt
  INTO #TMP1
  FROM TStudentCounsel X
 WHERE X.CStartDate < @FIRSTDATE and X.CEndDate >= @FIRSTDATE --첫째날 전에 등록하고, 이후에 끝남
 GROUP BY CScDepartCode

-- 2016.02.03. 보정데이터로 월초에 중복되는 데이터를 제거하기위해 새로 생성
SELECT distinct X.CScDepartCode, X.CScCode 
  INTO #TMP111
  FROM TStudentCounsel X 
 WHERE X.CStartDate < @FIRSTDATE and X.CEndDate >= @FIRSTDATE --첫째날 전에 등록하고, 이후에 끝남

-- [상담관리(월초누락연장)]
SELECT X.CScDepartCode, Count(distinct CScCode) as cnt
  INTO #TMP2
  FROM TStudentCounsel X 
 WHERE X.CStartDate >= @FIRSTDATE
   and (select Count(*) from TStudentCounsel Y where Y.CScDepartCode = X.CScDepartCode and Y.CScCode = X.CScCode and Y.CEndDate < X.CStartDate) > 0
   and (select Count(*) from TStudentCounsel Y where Y.CScDepartCode = X.CScDepartCode and Y.CScCode = X.CScCode and Y.CEndDate < @FIRSTDATE and Y.CEndDate > DATEADD(dd, -7, X.CStartDate)) > 0
   -- 2016.02.03. 보정데이터로 월초에 중복되는 데이터를 제거하기위해 추가
   and not exists  (select * from #TMP111 where CScDepartCode = X.CScDepartCode and CScCode = X.CScCode)
 GROUP BY X.CScDepartCode

-- [상담관리(신규)]
SELECT X.CScDepartCode, Count(distinct CScCode) as cnt
  INTO #TMP3
  FROM TStudentCounsel X 
 WHERE X.CStartDate between @FIRSTDATE and @LASTDATE		--첫째날 부터 등록하고, 이후에 끝남
   and (select Count(*) from TStudentCounsel Y where Y.CScDepartCode = X.CScDepartCode and Y.CScCode = X.CScCode and Y.CEndDate < X.CStartDate) = 0
 GROUP BY X.CScDepartCode

-- [상담관리(복회)]
SELECT X.CScDepartCode, Count(distinct CScCode) as cnt
  INTO #TMP4
  FROM TStudentCounsel X 
 WHERE X.CStartDate between @FIRSTDATE and @LASTDATE
   and (select Count(*) from TStudentCounsel Y where Y.CScDepartCode = X.CScDepartCode and Y.CScCode = X.CScCode and Y.CEndDate < X.CStartDate) > 0
   and (select Count(*) from TStudentCounsel Y where Y.CScDepartCode = X.CScDepartCode and Y.CScCode = X.CScCode and Y.CEndDate < X.CStartDate and Y.CEndDate > DATEADD(dd, -7, X.CStartDate)) = 0
 GROUP BY X.CScDepartCode
			
-- [상담관리(월말)]
SELECT X.CScDepartCode, Count(distinct CScCode) as cnt
  INTO #TMP5
  FROM TStudentCounsel X 
 WHERE X.CStartDate <= @LASTDATE and X.CEndDate > @LASTDATE		--마지막 다음날에 등록하고, 이후에 끝남
 GROUP BY X.CScDepartCode

-- 2016.02.02. 보정데이터로 월말에 중복되는 데이터를 제거하기위해 새로 생성
SELECT distinct X.CScDepartCode, X.CScCode 
  INTO #TMP55
  FROM TStudentCounsel X 
 WHERE X.CStartDate <= @LASTDATE and X.CEndDate > @LASTDATE		--마지막 다음날에 등록하고, 이후에 끝남

-- [상담관리(월말누락연장)]
SELECT X.CScDepartCode, Count(distinct CScCode) as cnt
  INTO #TMP6
  FROM TStudentCounsel X 
 WHERE X.CStartDate > @LASTDATE
   and (select Count(*) from TStudentCounsel Y where Y.CScDepartCode = X.CScDepartCode and Y.CScCode = X.CScCode and Y.CEndDate < X.CStartDate) > 0
   and (select Count(*) from TStudentCounsel Y where Y.CScDepartCode = X.CScDepartCode and Y.CScCode = X.CScCode and Y.CEndDate <= @LASTDATE and Y.CEndDate > DATEADD(dd, -7, X.CStartDate)) > 0
   -- 2016.02.02. 보정데이터로 월말에 중복되는 데이터를 제거하기위해 추가
   and not exists  (select * from #TMP55 where CScDepartCode = X.CScDepartCode and CScCode = X.CScCode)
 GROUP BY X.CScDepartCode

-- [개별지도(월초)]
SELECT X.CStdDepartCode, Count(distinct X.CStdCode) as cnt
  INTO #TMP7
  FROM TStudentTutoring X 
 WHERE X.CStartDate < @FIRSTDATE and X.CEndDate >= @FIRSTDATE -- 첫째날 전에 등록하고, 이후에 끝남
 GROUP BY CStdDepartCode

-- [개별지도(월초누락연장)]
SELECT X.CStdDepartCode, Count(distinct CStdCode) as cnt
  INTO #TMP8
  FROM TStudentTutoring X 
 WHERE X.CStartDate between @FIRSTDATE and @LASTDATE
   and (select Count(*) from TStudentTutoring Y where Y.CStdDepartCode = X.CStdDepartCode and Y.CStdCode = X.CStdCode and Y.CEndDate < X.CStartDate) > 0
   and (select Count(*) from TStudentTutoring Y where Y.CStdDepartCode = X.CStdDepartCode and Y.CStdCode = X.CStdCode and Y.CEndDate < @FIRSTDATE and Y.CEndDate > DATEADD(dd, -7, X.CStartDate)) > 0
 GROUP BY CStdDepartCode

-- [개별지도(신규)]
SELECT X.CStdDepartCode, Count(distinct CStdCode) as cnt
  INTO #TMP9
  FROM TStudentTutoring X 
 WHERE X.CStartDate between @FIRSTDATE and @LASTDATE --첫째날 부터 등록하고, 이후에 끝남
   and (select Count(*) from TStudentTutoring Y where Y.CStdDepartCode = X.CStdDepartCode and Y.CStdCode = X.CStdCode and Y.CEndDate < X.CStartDate) = 0
 GROUP BY CStdDepartCode

-- [개별지도(복회)]
SELECT X.CStdDepartCode, Count(distinct CStdCode) as cnt
  INTO #TMP10
  FROM TStudentTutoring X 
 WHERE X.CStartDate between @FIRSTDATE and @LASTDATE
   and (select Count(*) from TStudentTutoring Y where Y.CStdDepartCode = X.CStdDepartCode and Y.CStdCode = X.CStdCode and Y.CEndDate < X.CStartDate) > 0
   and (select Count(*) from TStudentTutoring Y where Y.CStdDepartCode = X.CStdDepartCode and Y.CStdCode = X.CStdCode and Y.CEndDate < X.CStartDate and Y.CEndDate > DATEADD(dd, -7, X.CStartDate)) = 0
 GROUP BY CStdDepartCode

-- [개별지도(월말)]
SELECT X.CStdDepartCode, Count(distinct CStdCode) as cnt
  INTO #TMP11
  FROM TStudentTutoring X 
 WHERE X.CStartDate <= @LASTDATE and X.CEndDate > @LASTDATE --마지막 다음날에 등록하고, 이후에 끝남
 GROUP BY CStdDepartCode

-- [개별지도(월말누락연장)]
SELECT X.CStdDepartCode, Count(distinct CStdCode) as cnt
  INTO #TMP12
  FROM TStudentTutoring X 
 WHERE X.CStartDate > @LASTDATE
   and (select Count(*) from TStudentTutoring Y where Y.CStdDepartCode = X.CStdDepartCode and Y.CStdCode = X.CStdCode and Y.CEndDate < X.CStartDate) > 0
   and (select Count(*) from TStudentTutoring Y where Y.CStdDepartCode = X.CStdDepartCode and Y.CStdCode = X.CStdCode and Y.CEndDate <= @LASTDATE and Y.CEndDate > DATEADD(dd, -7, X.CStartDate)) > 0
 GROUP BY CStdDepartCode

-- [매출]
SELECT CBrDepartCode, sum(CCash) as salesMoney --[매출]
  INTO #TMP13
  FROM TAccountingIncome 
 WHERE CSubject not like '%/개별지도%' and CSubject not like '%/상담관리%'
   and CAccountingDate between @FIRSTDATE and @LASTDATE
 GROUP BY CBrDepartCode

-- [비용]
SELECT CBrDepartCode, sum(CCash) as salesMoney --[비용]
  INTO #TMP14
  FROM TAccountingExpense 
 WHERE CAccountingDate between @FIRSTDATE and @LASTDATE
 GROUP BY CBrDepartCode

	insert into TAnalytics_Student_Count
	select
		  A.CDepartCode
		, A.COpenName0 as 지점명
		, ISNULL(#TMP1.cnt, 0) AS [상담관리(월초)]
		, ISNULL(#TMP2.cnt, 0) AS [상담관리(월초누락연장)]
		, ISNULL(#TMP3.cnt, 0) AS [상담관리(신규)]
		, ISNULL(#TMP4.cnt, 0) AS [상담관리(복회)]
		, ISNULL(#TMP5.cnt, 0) AS [상담관리(월말)]
		, ISNULL(#TMP6.cnt, 0) AS [상담관리(월말누락연장)]

		, ISNULL(#TMP7.cnt, 0) AS [개별지도(월초)]
		, ISNULL(#TMP8.cnt, 0) AS [개별지도(월초누락연장)]
		, ISNULL(#TMP9.cnt, 0) AS [개별지도(신규)]
		, ISNULL(#TMP10.cnt, 0) AS [개별지도(복회)]
		, ISNULL(#TMP11.cnt, 0) AS [개별지도(월말)]
		, ISNULL(#TMP12.cnt, 0) AS [개별지도(월말누락연장)]
		, @SEARCHMONTH as CFirstDate
		, ISNULL(#TMP13.salesMoney, 0) AS salesMoney
		, ISNULL(#TMP14.salesMoney, 0) AS salesMoney
		, isnull((select sum(CPayPrice) from TStudentCounsel where CScDepartCode = A.CDepartCode and CScDepartStartDate = B.CDepartStartDate
			and CPayDate between @FIRSTDATE and @LASTDATE)
			- (select sum(CRefundPrice) from TStudentCounselRefund where CStdBrcDptCode = A.CDepartCode and CStdBrcDptStartDate = A.CDepartStartDate
			and CEndDateRefund between @FIRSTDATE and @LASTDATE), 0) as counselTotalMoney --[상담관리매출]
		, isnull((select sum(CPayPrice) from TStudentTutoring where CStdDepartCode = A.CDepartCode and CStdDepartStartDate = B.CDepartStartDate
			and CPayDate between @FIRSTDATE and @LASTDATE)
			- (select sum(CRefundPrice) from TStudentTutoringRefund where CStdBrcDptCode = A.CDepartCode and CStdBrcDptStartDate = A.CDepartStartDate
			and CEndDateRefund between @FIRSTDATE and @LASTDATE), 0) as tutoringTotalMoeny --[개별지도매출]
		, CONVERT(VARCHAR(20), GETDATE(), 23) AS CCalcDate
	from TFacility A
		left join TDepartment B on A.CDepartCode = B.CDepartCode and A.CDepartStartDate = B.CDepartStartDate
		left join #TMP1 on A.CDepartCode = #TMP1.CScDepartCode
		left join #TMP2 on A.CDepartCode = #TMP2.CScDepartCode
		left join #TMP3 on A.CDepartCode = #TMP3.CScDepartCode
		left join #TMP4 on A.CDepartCode = #TMP4.CScDepartCode
		left join #TMP5 on A.CDepartCode = #TMP5.CScDepartCode
		left join #TMP6 on A.CDepartCode = #TMP6.CScDepartCode
		left join #TMP7 on A.CDepartCode = #TMP7.CStdDepartCode
		left join #TMP8 on A.CDepartCode = #TMP8.CStdDepartCode
		left join #TMP9 on A.CDepartCode = #TMP9.CStdDepartCode
		left join #TMP10 on A.CDepartCode = #TMP10.CStdDepartCode
		left join #TMP11 on A.CDepartCode = #TMP11.CStdDepartCode
		left join #TMP12 on A.CDepartCode = #TMP12.CStdDepartCode
		left join #TMP13 on A.CDepartCode = #TMP13.CBrDepartCode
		left join #TMP14 on A.CDepartCode = #TMP14.CBrDepartCode
	where A.CDepartCode like 'EPX%' and B.CEndDate >= @FIRSTDATE and B.CDepartStartDate <= @LASTDATE
	-- 2014.06.10 수정내용 추가
		and A.CDepartCode not in ('EPXBRANCH','EPXDIRECT','EPXHEAD')

END

GO

-- =============================================
-- Author:		김길명
-- Create date: 2016-04-14
-- Description:	경영지표 - 지점및 가맹현황
-- Modify:      2016-04-27
-- Modify date: 로얄티매출현황 데이터 추가
-- Description:	Tableau를 이용한 데이터 시각화
-- EXEC SP_FACILITY_TABLEAU @pTYPE = 'S1'
-- =============================================
CREATE PROCEDURE [dbo].[SP_FACILITY_TABLEAU]
	@pTYPE			VARCHAR(10)  = ''	-- 검색구분
AS

DECLARE @dStartDate  DATETIME
       ,@dEndDate    DATETIME
       ,@dEndDate2   DATETIME
	   ,@dLoopDate	 DATETIME

IF      @pTYPE = 'S1' GOTO S1_RTN   --에듀플렉스 지점수 현황
ELSE IF @pTYPE = 'S2' GOTO S2_RTN   --에듀코치 지점수 현황
ELSE IF @pTYPE = 'S3' GOTO S3_RTN   --
ELSE IF @pTYPE = 'S4' GOTO S4_RTN   --
ELSE RETURN

S1_RTN:
BEGIN
	-- ### 에듀플렉스 지점수 현황 ###
	TRUNCATE TABLE TABLEAU_FACILITY
	
	SELECT a.CFacilityCode, a.CDepartStartDate, b.CEndDate, a.COpenName0, c.CName AS CType, d.CName AS CArea, e.CName AS CScope
	  INTO #FACILITY
	  FROM TFacility a
	 INNER JOIN TDepartment b
	    ON a.CFacilityCode = b.CDepartCode
	  LEFT JOIN TCommonCode c
	    ON a.CTmpGroup1 = c.CCodeGroup AND a.CTmpCode1 = c.CCode
	  LEFT JOIN TCommonCode d
	    ON a.CTmpGroup2 = d.CCodeGroup AND a.CTmpCode2 = d.CCode
	  LEFT JOIN TCommonCode e
	    ON a.CTmpGroup3 = e.CCodeGroup AND a.CTmpCode3 = e.CCode
	 WHERE a.CFacilityCode LIKE 'EPX%'
	   AND a.CFacilityType NOT IN ('HEAD', 'GROUP')
	
	SET @dEndDate = CONVERT(VARCHAR(10), GETDATE(), 23)
	SELECT @dStartDate = DATEADD(Day, -(Day(MIN(CDepartStartDate))-1), MIN(CDepartStartDate))
		  ,@dEndDate   = DATEADD(d,-1,DATEADD(m,1,DATEADD(dd,1,DATEADD(dd,-DATEPART(dd,@dEndDate),@dEndDate)))) 
	  FROM #FACILITY
	
	--SELECT @dStartDate, @dEndDate

	SET @dLoopDate = @dStartDate
	WHILE @dEndDate >= @dLoopDate
		BEGIN
			-- 월말일자를 구한다.
			SET @dEndDate2 = DATEADD(d,-1,DATEADD(m,1,DATEADD(dd,1,DATEADD(dd,-DATEPART(dd,@dLoopDate),@dLoopDate)))) 

			-- 시작일자가 기준시작일보다 작고 종료일자가 기준종료일보다 큰 데이터 저장
			INSERT INTO TABLEAU_FACILITY (CFacility, CMonth, CName, CType, CArea, CScope, CCounsel, CTutoring, CTotalSales, CRoyaltyCounsel, CRoyaltyTutoring, CRoyaltyTotal, CKnowre, CSoobakc)
			SELECT a.CFacilityCode, @dLoopDate, a.COpenName0, a.CType, a.CArea, a.CScope,
			       b.CSalesCounsel, b.CSalesTutoring, b.CSalesTotal, b.CRoyaltyCounsel, b.CRoyaltyTutoring, b.CRoyaltyTotal, b.CRoyaltyTest, b.CRoyaltyOther
			  FROM #FACILITY a
			  LEFT JOIN TTradeRoyaltyMonth b
			    ON a.CFacilityCode = b.CBranchCode AND b.CRoyaltyMonth = @dLoopDate AND b.CRoyaltyStatus = 'Confirm'
			 WHERE a.CDepartStartDate <= @dLoopDate
			   AND a.CEndDate         >= @dEndDate2

			-- 반복용 일자에 한달 더하기
			SET @dLoopDate = DATEADD(Month, 1, @dLoopDate)
		END

	-- 데이터 반환
	SELECT * FROM TABLEAU_FACILITY ORDER BY CFacility, CMonth

	RETURN
END

S2_RTN:
BEGIN
	SELECT 1
	RETURN
END

S3_RTN:
BEGIN
	SELECT 1
	RETURN
END

S4_RTN:
BEGIN
	SELECT 1
	RETURN
END

GO

--/*******************************************************************************************************
--/* 단위업무 : 이관
--/* 작 성 자 : 김 길 명
--/* 작 성 일 : 
--/* 작성내용 : 
--/* 수 정 일 :	
--/* 수 정 자 :	
--/* 수정내용 : [TTestInfo]
--/* 비    고 :	
--/* 실행코드 : EXEC 
--/*******************************************************************************************************
CREATE PROCEDURE [dbo].[SP_TTest_Trans](  
	@pTestNo			INT
)                                                                                      
AS                                                                                                  
BEGIN 
DECLARE @SEQ INT


DECLARE @Staff VARCHAR(20)
DECLARE @StaffName VARCHAR(20)
DECLARE @05DN  VARCHAR(20)
DECLARE @06UP  VARCHAR(20)
DECLARE @06DN  VARCHAR(20)
DECLARE @07UP  VARCHAR(20)
DECLARE @07DN  VARCHAR(20)
DECLARE @08UP  VARCHAR(20)
DECLARE @08DN  VARCHAR(20)
DECLARE @09UP  VARCHAR(20)
DECLARE @09DN  VARCHAR(20)
DECLARE @10UP  VARCHAR(20)
DECLARE @10DN  VARCHAR(20)
DECLARE @11UP  VARCHAR(20)
DECLARE @11DN  VARCHAR(20)
DECLARE @12UP  VARCHAR(20)
DECLARE @12DN  VARCHAR(20)
DECLARE @13UP  VARCHAR(20)
DECLARE @13DN  VARCHAR(20)
DECLARE @14UP  VARCHAR(20)
DECLARE @14DN  VARCHAR(20)
DECLARE @15UP  VARCHAR(20)
DECLARE @15DN  VARCHAR(20)
DECLARE @16UP  VARCHAR(20)


DECLARE CURSOR1 CURSOR FOR
SELECT Staff, "이름",  "05년 하", "06년 상", "06년 하",
       "07년 상", "07년 하", "08년 상", "08년 하",   
       "09년 상", "09년 하", "10년 상", "10년 하",
       "11년 상", "11년 하", "12년 상", "12년 하",   
       "13년 상", "13년 하", "14년 상", "14년 하",
       "15년 상", "15년 하", "16년 상"
  from "20160831Trans" a
 WHERE "05년 하" IS NOT NULL 
   OR "06년 상" IS NOT NULL OR "06년 하" IS NOT NULL
   OR "07년 상" IS NOT NULL OR "07년 하" IS NOT NULL OR "08년 상" IS NOT NULL OR "08년 하" IS NOT NULL
   OR "09년 상" IS NOT NULL OR "09년 하" IS NOT NULL OR "10년 상" IS NOT NULL OR "10년 하" IS NOT NULL
   OR "11년 상" IS NOT NULL OR "11년 하" IS NOT NULL OR "12년 상" IS NOT NULL OR "12년 하" IS NOT NULL   
   OR "13년 상" IS NOT NULL OR "13년 하" IS NOT NULL OR "14년 상" IS NOT NULL OR "14년 하" IS NOT NULL
   OR "15년 상" IS NOT NULL OR "15년 하" IS NOT NULL OR "16년 상" IS NOT NULL
 ORDER BY Staff

OPEN CURSOR1

			FETCH NEXT FROM CURSOR1 INTO @Staff, @StaffName, @05DN, @06UP, @06DN, @07UP, @07DN, @08UP,@08DN,@09UP,@09DN,@10UP,@10DN,@11UP,@11DN,@12UP,@12DN,@13UP,@13DN,@14UP,@14DN,@15UP,@15DN,@16UP

			WHILE @@FETCH_STATUS = 0
				BEGIN
PRINT @Staff + ':' + @StaffName
					SET @SEQ = 1

					 IF ISNULL(@05DN, '') <> ''
					 BEGIN
					  INSERT INTO TStaffEvaluate
					  SELECT @Staff, @SEQ, '2005', 'HREVALTERM', '02', 'HREVALTYPE', '02', @05DN, '', '', '', '', ''
					  SET @SEQ = @SEQ + 1
					 END

					 IF ISNULL(@06UP, '') <> ''
					 BEGIN
					  INSERT INTO TStaffEvaluate
					  SELECT @Staff, @SEQ, '2006', 'HREVALTERM', '01', 'HREVALTYPE', '02', @06UP, '', '', '', '', ''
					  SET @SEQ = @SEQ + 1
					 END
					 IF ISNULL(@06DN, '') <> ''
					 BEGIN
					  INSERT INTO TStaffEvaluate
					  SELECT @Staff, @SEQ, '2006', 'HREVALTERM', '02', 'HREVALTYPE', '02', @06DN, '', '', '', '', ''
					  SET @SEQ = @SEQ + 1
					 END

					 IF ISNULL(@07UP, '') <> ''
					 BEGIN
					  INSERT INTO TStaffEvaluate
					  SELECT @Staff, @SEQ, '2007', 'HREVALTERM', '01', 'HREVALTYPE', '02', @07UP, '', '', '', '', ''
					  SET @SEQ = @SEQ + 1
					 END
					 IF ISNULL(@07DN, '') <> ''
					 BEGIN
					  INSERT INTO TStaffEvaluate
					  SELECT @Staff, @SEQ, '2007', 'HREVALTERM', '02', 'HREVALTYPE', '02', @07DN, '', '', '', '', ''
					  SET @SEQ = @SEQ + 1
					 END

					 IF ISNULL(@08UP, '') <> ''
					 BEGIN
					  INSERT INTO TStaffEvaluate
					  SELECT @Staff, @SEQ, '2008', 'HREVALTERM', '01', 'HREVALTYPE', '02', @08UP, '', '', '', '', ''
					  SET @SEQ = @SEQ + 1
					 END
					 IF ISNULL(@08DN, '') <> ''
					 BEGIN
					  INSERT INTO TStaffEvaluate
					  SELECT @Staff, @SEQ, '2008', 'HREVALTERM', '02', 'HREVALTYPE', '02', @08DN, '', '', '', '', ''
					  SET @SEQ = @SEQ + 1
					 END

					 IF ISNULL(@09UP, '') <> ''
					 BEGIN
					  INSERT INTO TStaffEvaluate
					  SELECT @Staff, @SEQ, '2009', 'HREVALTERM', '01', 'HREVALTYPE', '02', @09UP, '', '', '', '', ''
					  SET @SEQ = @SEQ + 1
					 END
					 IF ISNULL(@09DN, '') <> ''
					 BEGIN
					  INSERT INTO TStaffEvaluate
					  SELECT @Staff, @SEQ, '2009', 'HREVALTERM', '02', 'HREVALTYPE', '02', @09DN, '', '', '', '', ''
					  SET @SEQ = @SEQ + 1
					 END

					 IF ISNULL(@10UP, '') <> ''
					 BEGIN
					  INSERT INTO TStaffEvaluate
					  SELECT @Staff, @SEQ, '2010', 'HREVALTERM', '01', 'HREVALTYPE', '02', @10UP, '', '', '', '', ''
					  SET @SEQ = @SEQ + 1
					 END
					 IF ISNULL(@10DN, '') <> ''
					 BEGIN
					  INSERT INTO TStaffEvaluate
					  SELECT @Staff, @SEQ, '2010', 'HREVALTERM', '02', 'HREVALTYPE', '02', @10DN, '', '', '', '', ''
					  SET @SEQ = @SEQ + 1
					 END

					 IF ISNULL(@11UP, '') <> ''
					 BEGIN
					  INSERT INTO TStaffEvaluate
					  SELECT @Staff, @SEQ, '2011', 'HREVALTERM', '01', 'HREVALTYPE', '02', @11UP, '', '', '', '', ''
					  SET @SEQ = @SEQ + 1
					 END
					 IF ISNULL(@11DN, '') <> ''
					 BEGIN
					  INSERT INTO TStaffEvaluate
					  SELECT @Staff, @SEQ, '2011', 'HREVALTERM', '02', 'HREVALTYPE', '02', @11DN, '', '', '', '', ''
					  SET @SEQ = @SEQ + 1
					 END

					 IF ISNULL(@12UP, '') <> ''
					 BEGIN
					  INSERT INTO TStaffEvaluate
					  SELECT @Staff, @SEQ, '2012', 'HREVALTERM', '01', 'HREVALTYPE', '02', @12UP, '', '', '', '', ''
					  SET @SEQ = @SEQ + 1
					 END
					 IF ISNULL(@12DN, '') <> ''
					 BEGIN
					  INSERT INTO TStaffEvaluate
					  SELECT @Staff, @SEQ, '2012', 'HREVALTERM', '02', 'HREVALTYPE', '02', @12DN, '', '', '', '', ''
					  SET @SEQ = @SEQ + 1
					 END

					 IF ISNULL(@13UP, '') <> ''
					 BEGIN
					  INSERT INTO TStaffEvaluate
					  SELECT @Staff, @SEQ, '2013', 'HREVALTERM', '01', 'HREVALTYPE', '02', @13UP, '', '', '', '', ''
					  SET @SEQ = @SEQ + 1
					 END
					 IF ISNULL(@13DN, '') <> ''
					 BEGIN
					  INSERT INTO TStaffEvaluate
					  SELECT @Staff, @SEQ, '2013', 'HREVALTERM', '02', 'HREVALTYPE', '02', @13DN, '', '', '', '', ''
					  SET @SEQ = @SEQ + 1
					 END

					 IF ISNULL(@14UP, '') <> ''
					 BEGIN
					  INSERT INTO TStaffEvaluate
					  SELECT @Staff, @SEQ, '2014', 'HREVALTERM', '01', 'HREVALTYPE', '02', @14UP, '', '', '', '', ''
					  SET @SEQ = @SEQ + 1
					 END
					 IF ISNULL(@14DN, '') <> ''
					 BEGIN
					  INSERT INTO TStaffEvaluate
					  SELECT @Staff, @SEQ, '2014', 'HREVALTERM', '02', 'HREVALTYPE', '02', @14DN, '', '', '', '', ''
					  SET @SEQ = @SEQ + 1
					 END

					 IF ISNULL(@15UP, '') <> ''
					 BEGIN
					  INSERT INTO TStaffEvaluate
					  SELECT @Staff, @SEQ, '2015', 'HREVALTERM', '01', 'HREVALTYPE', '02', @15UP, '', '', '', '', ''
					  SET @SEQ = @SEQ + 1
					 END
					 IF ISNULL(@15DN, '') <> ''
					 BEGIN
					  INSERT INTO TStaffEvaluate
					  SELECT @Staff, @SEQ, '2015', 'HREVALTERM', '02', 'HREVALTYPE', '02', @15DN, '', '', '', '', ''
					  SET @SEQ = @SEQ + 1
					 END

					 IF ISNULL(@16UP, '') <> ''
					 BEGIN
					  INSERT INTO TStaffEvaluate
					  SELECT @Staff, @SEQ, '2016', 'HREVALTERM', '01', 'HREVALTYPE', '02', @16UP, '', '', '', '', ''
					 END



					FETCH NEXT FROM CURSOR1 INTO @Staff, @StaffName, @05DN, @06UP, @06DN, @07UP, @07DN, @08UP,@08DN,@09UP,@09DN,@10UP,@10DN,@11UP,@11DN,@12UP,@12DN,@13UP,@13DN,@14UP,@14DN,@15UP,@15DN,@16UP

				END
			CLOSE CURSOR1
			DEALLOCATE CURSOR1


END

GO

-- =============================================
-- Author:		김동우
-- Create date: 2014-04-23
-- Description:	서비스별 기간단위 지점 학생수
-- 2014.06.10 :(김길명) 지점코드 부여 규칙이 깨짐(EPX0XXX => EPXXXXX)..그래서 직영, 지점 및 본사를 구분하는 값을 강제로 제외시킴
-- =============================================
CREATE PROCEDURE [dbo].[SP_TStudent_Count]
	-- Add the parameters for the stored procedure here
	@SEARCHDATE		DATETIME = NULL
AS
BEGIN
	SET NOCOUNT ON;

	--조회 대상일 없으면 오늘
	IF ISNULL(@SEARCHDATE, '') = ''
	BEGIN
		SET @SEARCHDATE = CONVERT(VARCHAR(20), GETDATE(), 23)
	END

	--조회대상일이 이번달 1일이면 오늘 날짜로
	IF @SEARCHDATE = CONVERT(DATETIME, LEFT(CONVERT(VARCHAR(20), GETDATE(), 23), 8) + '01')
	BEGIN
		SET @SEARCHDATE = CONVERT(VARCHAR(20), GETDATE(), 23)
	END

	--새벽3시 까지는 전날거 조회 되도록
	--SET @SEARCHDATE = DATEADD(HOUR, -3, @SEARCHDATE)

	--전달의 첫번째 날
	DECLARE @FIRSTDATE		DATETIME
		, @BEFOREMONTH		DATETIME
	SET @FIRSTDATE = CONVERT(DATETIME, LEFT(CONVERT(VARCHAR(20), @SEARCHDATE, 23), 8) + '01')
	SET @BEFOREMONTH = CONVERT(DATETIME, LEFT(CONVERT(VARCHAR(20), DATEADD(MONTH, -1, @SEARCHDATE), 23), 8) + '01')

	-- 검색일이 오늘이거나 미래인데, 오전 8시 이후이고, 오늘자 집계 데이터가 없으면 검색달, 이전달 데이터 생성
	IF @SEARCHDATE >= CONVERT(VARCHAR(20), GETDATE(), 23)
		AND (SELECT COUNT(*) FROM TAnalytics_Student_Count(nolock) WHERE CFirstDate = @FIRSTDATE AND CCalcDate = CONVERT(VARCHAR(20), GETDATE(), 23)) = 0
		AND DATEPART(HOUR, GETDATE()) >= 8
	BEGIN
		--이번달
		EXEC dbo.SP_TStudent_Count_Calc @SEARCHDATE
		--이전달은 검색일이 오늘이면 생성
		IF @SEARCHDATE = CONVERT(VARCHAR(20), GETDATE(), 23)
		BEGIN
			EXEC dbo.SP_TStudent_Count_Calc @BEFOREMONTH
		END
	END

	-- 검색할 데이터가 없으면 생성
	IF (SELECT COUNT(*) FROM TAnalytics_Student_Count(nolock) WHERE CFirstDate = @FIRSTDATE) = 0
	BEGIN
		--이번달
		EXEC dbo.SP_TStudent_Count_Calc @SEARCHDATE
	END

	--반환되는 쿼리문
	select
		Z.지점명 as branchName	--지점명
		, Z.[상담관리(월초)] + Z.[상담관리(월초누락연장)] as counselPreCount --[상담관리(월초)]
		, Z.[상담관리(신규)] as counselNewComer --[상담관리(신규)]
		, Z.[상담관리(복회)] as counselReturning-- [상담관리(복회)]
		, (Z.[상담관리(월초)] + Z.[상담관리(월초누락연장)] - Z.[상담관리(월말)] - Z.[상담관리(월말누락연장)] + Z.[상담관리(신규)] + Z.[상담관리(복회)]) as counselRetire --[상담관리(종료)]
		, Z.[상담관리(월말)] + Z.[상담관리(월말누락연장)] as counselMonthTotal --[상담관리(월말)]
		, case when (Z.[상담관리(월초)] + Z.[상담관리(월초누락연장)]) > 0
			then convert(float, (Z.[상담관리(월초)] + Z.[상담관리(월초누락연장)] - Z.[상담관리(월말)] - Z.[상담관리(월말누락연장)] + Z.[상담관리(신규)] + Z.[상담관리(복회)])) / convert(float, (Z.[상담관리(월초)] + Z.[상담관리(월초누락연장)])) * 100
			else 0 end as counselLeavePercent --[상담관리(이탈율)] 종료/월초
		, Z.[개별지도(월초)] + Z.[개별지도(월초누락연장)] as tutoringPreCount --[개별지도(월초)]
		, Z.[개별지도(신규)] as tutoringNewComer --[개별지도(신규)]
		, Z.[개별지도(복회)] as tutoringReturning --[개별지도(복회)]
		, (Z.[개별지도(월초)] + Z.[개별지도(월초누락연장)] - Z.[개별지도(월말)] - Z.[개별지도(월말누락연장)] + Z.[개별지도(신규)] + Z.[개별지도(복회)]) as tutoringRetire --[개별지도(종료)]
		, Z.[개별지도(월말)] + Z.[개별지도(월말누락연장)] as tutoringMonthTotal --[개별지도(월말)]
		, case when (Z.[개별지도(월초)] + Z.[개별지도(월초누락연장)]) > 0
			then convert(float, (Z.[개별지도(월초)] + Z.[개별지도(월초누락연장)] - Z.[개별지도(월말)] - Z.[개별지도(월말누락연장)] + Z.[개별지도(신규)] + Z.[개별지도(복회)])) / convert(float, (Z.[개별지도(월초)] + Z.[개별지도(월초누락연장)])) * 100
			else 0 end as tutoringLeavePercent --[개별지도(이탈율)] 종료/월초
		, Z.salesMoney + Z.counselTotalMoney + Z.tutoringTotalMoeny as salesMoney --[총매출]
		, Z.counselTotalMoney as counselTotalMoney --[상담관리매출]
		, Z.tutoringTotalMoeny as tutoringTotalMoeny --[개별지도매출]
		, (Z.salesMoney - Z.expenseMoney) as profitMoney --[순이익]
		, Z.CDepartCode as branchCode --[지점코드]
	from
		TAnalytics_Student_Count Z(nolock)
	where CFirstDate = @FIRSTDATE
		AND CCalcDate = (select max(CCalcDate) from TAnalytics_Student_Count where CFirstDate = @FIRSTDATE)
	union
	select
		' 합계' as branchName --지점명
		, SUM(Z.[상담관리(월초)] + Z.[상담관리(월초누락연장)]) as counselPreCount --[상담관리(월초)]
		, SUM(Z.[상담관리(신규)]) as counselNewComer --[상담관리(신규)]
		, SUM(Z.[상담관리(복회)]) as counselReturning --[상담관리(복회)]
		, SUM(Z.[상담관리(월초)] + Z.[상담관리(월초누락연장)] - Z.[상담관리(월말)] - Z.[상담관리(월말누락연장)] + Z.[상담관리(신규)] + Z.[상담관리(복회)]) as counselRetire --[상담관리(종료)]
		, SUM(Z.[상담관리(월말)] + Z.[상담관리(월말누락연장)]) as counselMonthTotal --[상담관리(월말)]
		, case when SUM(Z.[상담관리(월초)] + Z.[상담관리(월초누락연장)]) > 0
			then convert(float, SUM(Z.[상담관리(월초)] + Z.[상담관리(월초누락연장)] - Z.[상담관리(월말)] - Z.[상담관리(월말누락연장)] + Z.[상담관리(신규)] + Z.[상담관리(복회)])) / convert(float, SUM(Z.[상담관리(월초)] + Z.[상담관리(월초누락연장)])) * 100
			else 0 end as counselLeavePercent --[상담관리(이탈율)] 종료/월초
		, SUM(Z.[개별지도(월초)] + Z.[개별지도(월초누락연장)]) as tutoringPreCount --[개별지도(월초)]
		, SUM(Z.[개별지도(신규)]) as tutoringNewComer --[개별지도(신규)]
		, SUM(Z.[개별지도(복회)]) as tutoringReturning --[개별지도(복회)]
		, SUM(Z.[개별지도(월초)] + Z.[개별지도(월초누락연장)] - Z.[개별지도(월말)] - Z.[개별지도(월말누락연장)] + Z.[개별지도(신규)] + Z.[개별지도(복회)]) as tutoringRetire --[개별지도(종료)]
		, SUM(Z.[개별지도(월말)] + Z.[개별지도(월말누락연장)]) as tutoringMonthTotal --[개별지도(월말)]
		, case when SUM(Z.[개별지도(월초)] + Z.[개별지도(월초누락연장)]) > 0
			then convert(float, SUM(Z.[개별지도(월초)] + Z.[개별지도(월초누락연장)] - Z.[개별지도(월말)] - Z.[개별지도(월말누락연장)] + Z.[개별지도(신규)] + Z.[개별지도(복회)])) / convert(float, SUM(Z.[개별지도(월초)] + Z.[개별지도(월초누락연장)])) * 100
			else 0 end as tutoringLeavePercent --[개별지도(이탈율)] 종료/월초
		, sum(Z.salesMoney + Z.counselTotalMoney + Z.tutoringTotalMoeny) as salesMoney --[총매출]
		, sum(Z.counselTotalMoney) as counselTotalMoney --[상담관리매출]
		, sum(Z.tutoringTotalMoeny) as tutoringTotalMoeny --[개별지도매출]
		, sum(Z.salesMoney - Z.expenseMoney) as profitMoney --[순이익]
		, 'AAA0000' as branchCode --[지점코드]
	from
		TAnalytics_Student_Count Z(nolock)
	where CFirstDate = @FIRSTDATE
		AND CCalcDate = (select max(CCalcDate) from TAnalytics_Student_Count where CFirstDate = @FIRSTDATE)
	order by branchCode
END

GO

-- =============================================
-- Author:		김동우
-- Create date: 2014-09-05
-- Description:	퇴사일 이후 로그인 불가 처리
-- =============================================
CREATE PROCEDURE [dbo].[SP_Daily_Manage]
	-- Add the parameters for the stored procedure here
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	-- 퇴사일 이후 로긴 불가
	------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	update TStaff set CLoginType = 'Disabled' where COutDate < CONVERT(VARCHAR(10), GETDATE(), 120) and CLoginType <> 'Disabled'


	------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	-- 모든 사용자용 사업장 기본권한
	------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	insert into TFacilityLoginLevel
	select *
	from 
		(
			select *
			from
				(
					select 
						CStaffId
					from
						(
							select
								CStaffId
							from
								(
									select *
										, (select top 1 CDepartCode from TStaffDepartHistory (nolock) where CStaffId = TS.CStaffId order by CHistoryStartDate desc) as CDepartCode
										, (select top 1 CDepartStartDate from TStaffDepartHistory (nolock) where CStaffId = TS.CStaffId order by CHistoryStartDate desc) as CDepartStartDate
									from TStaff TS (nolock)
									where CLoginType <> 'Disabled'
								) A
							where A.CDepartCode not in (
									select CDepartCode from TDepartment (nolock) where CParentDepartCode in ('CHONGBONE')
								)
						) B
				) MASTER_A
				,
				(
					select
						'CHONGBONE' as CFacilityCode
						, '2013-09-30 00:00:00.000' as CFacilityStartDate
						, '0001' as CLoginLevelCode
						, GETDATE() as CAddedTime
				) MASTER_B
		) A
	where CStaffId + '|' + CFacilityCode + '|' + CONVERT(VARCHAR(30), CONVERT(DATETIME, CFacilityStartDate), 23)
		not in (select CStaffId + '|' + CFacilityCode + '|' + CONVERT(VARCHAR(30), CFacilityStartDate, 23) from TFacilityLoginLevel (nolock))


	------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	-- 에듀플렉스 사용자용 사업장 기본권한
	------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	insert into TFacilityLoginLevel
	select *
	from 
		(
			select *
			from
				(
					select 
						CStaffId
					from
						(
							select
								CStaffId
							from
								(
									select *
										, (select top 1 CDepartCode from TStaffDepartHistory (nolock) where CStaffId = TS.CStaffId order by CHistoryStartDate desc) as CDepartCode
										, (select top 1 CDepartStartDate from TStaffDepartHistory (nolock) where CStaffId = TS.CStaffId order by CHistoryStartDate desc) as CDepartStartDate
									from TStaff TS (nolock)
									where CLoginType <> 'Disabled'
								) A
							where A.CDepartCode in (
									select CDepartCode from TDepartment (nolock) where CParentDepartCode in ('EPXBRANCH', 'EPXDIRECT', 'EDUPLEX')
								)
						) B
				) MASTER_A
				,
				(
					select
						'EDUPLEX' as CFacilityCode
						, '2013-09-30 00:00:00.000' as CFacilityStartDate
						, '0001' as CLoginLevelCode
						, GETDATE() as CAddedTime
					union
					select
						'EPXBRANCH' as CFacilityCode
						, '2013-09-30 00:00:00.000' as CFacilityStartDate
						, '0001' as CLoginLevelCode
						, GETDATE() as CAddedTime
					union
					select
						'EPXDIRECT' as CFacilityCode
						, '2013-09-30 00:00:00.000' as CFacilityStartDate
						, '0001' as CLoginLevelCode
						, GETDATE() as CAddedTime
				) MASTER_B
		) A
	where CStaffId + '|' + CFacilityCode + '|' + CONVERT(VARCHAR(30), CONVERT(DATETIME, CFacilityStartDate), 23)
		not in (select CStaffId + '|' + CFacilityCode + '|' + CONVERT(VARCHAR(30), CFacilityStartDate, 23) from TFacilityLoginLevel (nolock))


	------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	-- 에듀코치 사용자용 사업장 기본권한
	------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	insert into TFacilityLoginLevel
	select *
	from 
		(
			select *
			from
				(
					select 
						CStaffId
					from
						(
							select
								CStaffId
							from
								(
									select *
										, (select top 1 CDepartCode from TStaffDepartHistory (nolock) where CStaffId = TS.CStaffId order by CHistoryStartDate desc) as CDepartCode
										, (select top 1 CDepartStartDate from TStaffDepartHistory (nolock) where CStaffId = TS.CStaffId order by CHistoryStartDate desc) as CDepartStartDate
									from TStaff TS (nolock)
									where CLoginType <> 'Disabled'
								) A
							where A.CDepartCode in (
									select CDepartCode from TDepartment (nolock) where CParentDepartCode in ('ECHBRANCH', 'ECHDIRECT', 'EDUCOACH')
								)
						) B
				) MASTER_A
				,
				(
					select
						'ECHBRANCH' as CFacilityCode
						, '2013-09-30 00:00:00.000' as CFacilityStartDate
						, '0001' as CLoginLevelCode
						, GETDATE() as CAddedTime
					union
					select
						'ECHDIRECT' as CFacilityCode
						, '2013-09-30 00:00:00.000' as CFacilityStartDate
						, '0001' as CLoginLevelCode
						, GETDATE() as CAddedTime
					union
					select
						'EDUCOACH' as CFacilityCode
						, '2013-09-30 00:00:00.000' as CFacilityStartDate
						, '0001' as CLoginLevelCode
						, GETDATE() as CAddedTime
				) MASTER_B
		) A
	where CStaffId + '|' + CFacilityCode + '|' + CONVERT(VARCHAR(30), CONVERT(DATETIME, CFacilityStartDate), 23)
		not in (select CStaffId + '|' + CFacilityCode + '|' + CONVERT(VARCHAR(30), CFacilityStartDate, 23) from TFacilityLoginLevel (nolock))

	------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	-- 스포플렉스 사용자용 사업장 기본권한
	------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	insert into TFacilityLoginLevel
	select *
	from 
		(
			select *
			from
				(
					select 
						CStaffId
					from
						(
							select
								CStaffId
							from
								(
									select *
										, (select top 1 CDepartCode from TStaffDepartHistory (nolock) where CStaffId = TS.CStaffId order by CHistoryStartDate desc) as CDepartCode
										, (select top 1 CDepartStartDate from TStaffDepartHistory (nolock) where CStaffId = TS.CStaffId order by CHistoryStartDate desc) as CDepartStartDate
									from TStaff TS (nolock)
									where CLoginType <> 'Disabled'
								) A
							where A.CDepartCode in (
									select CDepartCode from TDepartment (nolock) where CParentDepartCode in ('SPXBRANCH', 'SPXDIRECT', 'SPOPLEX')
								)
						) B
				) MASTER_A
				,
				(
					select
						'SPXBRANCH' as CFacilityCode
						, '2013-09-30 00:00:00.000' as CFacilityStartDate
						, '0001' as CLoginLevelCode
						, GETDATE() as CAddedTime
					union
					select
						'SPXDIRECT' as CFacilityCode
						, '2013-09-30 00:00:00.000' as CFacilityStartDate
						, '0001' as CLoginLevelCode
						, GETDATE() as CAddedTime
					union
					select
						'SPOPLEX' as CFacilityCode
						, '2013-09-30 00:00:00.000' as CFacilityStartDate
						, '0001' as CLoginLevelCode
						, GETDATE() as CAddedTime
				) MASTER_B
		) A
	where CStaffId + '|' + CFacilityCode + '|' + CONVERT(VARCHAR(30), CONVERT(DATETIME, CFacilityStartDate), 23)
		not in (select CStaffId + '|' + CFacilityCode + '|' + CONVERT(VARCHAR(30), CFacilityStartDate, 23) from TFacilityLoginLevel (nolock))


	------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	-- SMS Log 지우기
	------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	insert into SC_LOG_BAKCUP
	select * from SC_LOG where TR_SENDDATE < dateadd(dd, -30, getdate())

	delete SC_LOG where TR_SENDDATE < dateadd(dd, -30, getdate())

END

GO

-- ==================================================================
-- Author:		김길명
-- Create date: 2014.09.17
-- Description:	My Page 메인화면
-- Modify date: 
-- Description:
/*
-- 부서중복 체크용
SELECT CStaffId
  FROM TStaffDepartHistory b
 WHERE CMain = 1 -- 메인부서(지점)
   AND CHistoryStartDate <= CONVERT(VARCHAR, GETDATE(), 23) -- 부서시작일이 오늘보다 작거나 같은거
   AND CHistoryEndDate   >= CONVERT(VARCHAR, GETDATE(), 23) -- 부서종료일이 오늘보다 큰거나 같은거
 GROUP BY CStaffId
HAVING COUNT(CStaffId) > 1
*/
-- exec SP_MYPAGE_MAIN @pTYPE = '1'
-- ==================================================================
CREATE PROCEDURE [dbo].[SP_MYPAGE_MAIN]
	@pTYPE				VARCHAR(2)  = '',	-- 구분
	@P_FACILITY         VARCHAR(20) = '',	-- 지점
	@P_STAFFID          VARCHAR(50) = '' 	-- 개인랭킹조회를 위한 소속원ID
AS

DECLARE @dStartDate DATETIME
DECLARE @dEndDate   DATETIME

SET NOCOUNT ON
BEGIN
--	SELECT @dStartDate = '2014-01-01', @dEndDate = '2014-02-01'
	-- 수집기간 구하기(당월 1일, 익월 1일)
	SELECT @dStartDate  = CONVERT(VARCHAR, GETDATE(), 23)
	SELECT @dStartDate  = DATEADD(Day, -(Day(@dStartDate)-1), @dStartDate)
	SELECT @dEndDate    = DATEADD(Month, 1, @dStartDate) - (day(@dStartDate)-1)

	-- 전문가에 등록된 소속원을 대상으로 등수산정
	SELECT c.CDepartCode, d.COpenName0, a.CStaffId, b.CName0, 
		   CASE WHEN b.CJoinDate = '1900-01-01' THEN '2014-01-01' ELSE b.CJoinDate END AS CJoinDate,
		   0 AS CTotalPoint,    --포인트합계
		   0 as CTotalRank,     --포인트랭킹
		   0 AS CComponent,     --게시글수
		   0 AS CComponentRank, --게시글수랭킹
           0 AS C17Point,       --학습관리포인트
           0 AS C17PointRank,   --학습관리포인트랭킹
           0 AS C18Point,       --행동관리포인트
           0 AS C18PointRank,   --행동관리포인트랭킹
           0 AS C20Point,       --정신관리포인트
           0 AS C20PointRank,   --정신관리포인트랭킹
           0 AS C21Point,       --진로진학포인트
           0 AS C21PointRank    --진로진학포인트랭킹
	  INTO #TEMP
	  FROM TExpert a(NOLOCK)
	 INNER JOIN TStaff b(NOLOCK)
		ON a.CStaffId = b.CStaffId
	 INNER JOIN TStaffDepartHistory c(NOLOCK)
		ON a.CStaffId = c.CStaffId AND
		   c.CMain = 1 AND -- 메인부서(지점)
		   c.CHistoryStartDate <= CONVERT(VARCHAR, GETDATE(), 23) AND -- 부서시작일자가 오늘보다 작은거
		   c.CHistoryEndDate   >= CONVERT(VARCHAR, GETDATE(), 23)     -- 부서종료일이 오늘보다 큰거나 같은거
	  LEFT JOIN TFacility d(NOLOCK)
	    ON c.CDepartCode = d.CFacilityCode
	 WHERE 1=1--c.CDepartCode LIKE 'EPX%'
	   AND b.COutDate > CONVERT(VARCHAR, GETDATE(), 23) -- 현재 재직중인 소속원

	-- 게시글 수, 게시글 점수(분야별 100점), 댓글점수(별점당 10점 합계한도 600) 구하기
	UPDATE a SET
			a.CComponent = b.CComponent,
			a.C17Point   = b.C17Point,
			a.C18Point   = b.C18Point,
			a.C20Point   = b.C20Point,
			a.C21Point   = b.C21Point
	  FROM #TEMP a
	 INNER JOIN (	-- 게시글 수
					SELECT T1.CWriterId, COUNT(T1.CWriterId) AS CComponent,
					       SUM(CASE WHEN CSoul     = 1 THEN 100 ELSE 0 END) + SUM(CASE WHEN CSoul     = 1 THEN ISNULL(CScore, 0) ELSE 0 END) AS C20Point,
					       SUM(CASE WHEN CLearning = 1 THEN 100 ELSE 0 END) + SUM(CASE WHEN CLearning = 1 THEN ISNULL(CScore, 0) ELSE 0 END) AS C17Point,
					       SUM(CASE WHEN CAction   = 1 THEN 100 ELSE 0 END) + SUM(CASE WHEN CAction   = 1 THEN ISNULL(CScore, 0) ELSE 0 END) AS C18Point,
					       SUM(CASE WHEN CCareer   = 1 THEN 100 ELSE 0 END) + SUM(CASE WHEN CCareer   = 1 THEN ISNULL(CScore, 0) ELSE 0 END) AS C21Point
					  FROM TComponent T1(NOLOCK)
					  LEFT JOIN (-- 게시글 점수
								SELECT CComponentNo,
								       MAX(CSoul)     AS CSoul,
								       MAX(CLearning) AS CLearning,
								       MAX(CAction)   AS CAction,
								       MAX(CCareer)   AS CCareer
								  FROM (
										-- 주제분야
										SELECT S1.CComponentNo,
											   MAX(CASE WHEN S2.CSoul     = 1 THEN 1 ELSE 0 END) AS CSoul,
											   MAX(CASE WHEN S2.CLearning = 1 THEN 1 ELSE 0 END) AS CLearning,
											   MAX(CASE WHEN S2.CAction   = 1 THEN 1 ELSE 0 END) AS CAction,
											   MAX(CASE WHEN S2.CCareer   = 1 THEN 1 ELSE 0 END) AS CCareer
										  FROM TComponentTopic S1(NOLOCK) 
										 INNER JOIN TTopic S2(NOLOCK) -- 주제
											ON S1.CTopicNo = S2.CTopicNo
										 GROUP BY S1.CComponentNo
										-- 시기분야
										UNION ALL
										SELECT S3.CComponentNo,
											   MAX(CASE WHEN S4.CSoul     = 1 THEN 1 ELSE 0 END) AS CSoul,
											   MAX(CASE WHEN S4.CLearning = 1 THEN 1 ELSE 0 END) AS CLearning,
											   MAX(CASE WHEN S4.CAction   = 1 THEN 1 ELSE 0 END) AS CAction,
											   MAX(CASE WHEN S4.CCareer   = 1 THEN 1 ELSE 0 END) AS CCareer
										  FROM TComponentSeason S3(NOLOCK)
										 INNER JOIN TSeason S4(NOLOCK) -- 시기
											ON S3.CSeasonNo = S4.CSeasonNo
										 GROUP BY S3.CComponentNo
										) SUB1 GROUP BY CComponentNo
								) T2
						ON T1.CComponentNo = T2.CComponentNo
					  LEFT JOIN (-- 게시글 댓글 점수
								SELECT CComponentNo, 
									   CASE WHEN SUM(CScore * 10) > 600 THEN 600 ELSE SUM(CScore * 10) END AS CScore -- 댓글 최고점수는 600점 한도
								  FROM (-- 개인별 댓글 최고점수
										SELECT CComponentNo, CWriterId, MAX(CScore) AS CScore
										  FROM TComponentComment(NOLOCK)
										 GROUP BY CComponentNo, CWriterId
										) SUB2 GROUP BY CComponentNo
								) T3
						ON T1.CComponentNo = T3.CComponentNo
					 WHERE T1.CRegTime >= @dStartDate -- 당월 1일보다 크거나 같고
					   AND T1.CRegTime <  @dEndDate   -- 익월 1일보다 작은거
					   AND T1.CStatus <> 'Delelted' -- 삭제된것 제외(등록 - Regist, 변경요청 - ReqModify, 삭제요청 - ReqDelete, 오류신고 - ReportError, 삭제 - Delelted)
					 GROUP BY T1.CWriterId
				) b
		ON a.CStaffId = b.CWriterId


	-- 전문가 관리에서 부여된 점수 업데이트
	UPDATE a SET
			a.C17Point = a.C17Point + b.C17Point,
			a.C18Point = a.C18Point + b.C18Point,
			a.C20Point = a.C20Point + b.C20Point,
			a.C21Point = a.C21Point + b.C21Point
	  FROM #TEMP a
	 INNER JOIN (
					SELECT CStaffId, 
						   SUM(CASE WHEN CAreaNo = 17 THEN CPoint ELSE 0 END) AS C17Point,
						   SUM(CASE WHEN CAreaNo = 18 THEN CPoint ELSE 0 END) AS C18Point,
						   SUM(CASE WHEN CAreaNo = 20 THEN CPoint ELSE 0 END) AS C20Point,
						   SUM(CASE WHEN CAreaNo = 21 THEN CPoint ELSE 0 END) AS C21Point
					  FROM TExpertLog(NOLOCK)
					 WHERE CApprovalStatus = 'Signed' -- 결제완료 건만 처리
					   AND CRegDate  >= @dStartDate -- 당월 1일보다 크거나 같고
					   AND CRegDate  <  @dEndDate   -- 익월 1일보다 작은거
					 GROUP BY CStaffId
				) b
		ON a.CStaffId = b.CStaffId
	
	-- 포인트 합계
	UPDATE #TEMP SET
			CTotalPoint = C17Point + C18Point + C20Point + C21Point
	
	--***********
	-- 랭킹구하기RANK() OVER(ORDER BY 정렬 필드)
	--***********
	UPDATE a SET 
			a.CTotalRank     = ISNULL(b.Rank, a.CTotalRank),    --최고 Point
			a.CComponentRank = ISNULL(c.Rank, a.CComponentRank),--최다 게시글
			a.C20PointRank   = ISNULL(d.Rank, a.C20PointRank),  --정신관리
			a.C17PointRank   = ISNULL(e.Rank, a.C17PointRank),  --학습관리
			a.C18PointRank   = ISNULL(f.Rank, a.C18PointRank),  --행동관리
			a.C21PointRank   = ISNULL(g.Rank, a.C21PointRank)   --진로진학
	  FROM #TEMP a
	-- 최고 Point
	 LEFT JOIN (
					SELECT CDepartCode, CStaffId,
					       RANK() OVER(ORDER BY CTotalPoint DESC) AS Rank
					  FROM #TEMP
					 WHERE CTotalPoint <> 0 -- 값이 있는것만
				) b
		ON a.CDepartCode = b.CDepartCode AND a.CStaffId = b.CStaffId
	-- 최다 게시글
	  LEFT JOIN (
					SELECT CDepartCode, CStaffId,
					       RANK() OVER(ORDER BY CComponent DESC) AS Rank
					  FROM #TEMP
					 WHERE CComponent <> 0 -- 값이 있는것만
				) c
		ON a.CDepartCode = c.CDepartCode AND a.CStaffId = c.CStaffId
	-- 정신Point
	  LEFT JOIN (
					SELECT CDepartCode, CStaffId,
					       RANK() OVER(ORDER BY C20Point DESC) AS Rank
					  FROM #TEMP
					 WHERE C20Point <> 0 -- 값이 있는것만
				) d
		ON a.CDepartCode = d.CDepartCode AND a.CStaffId = d.CStaffId
	-- 학습Point
	  LEFT JOIN (
					SELECT CDepartCode, CStaffId,
					       RANK() OVER(ORDER BY C17Point DESC) AS Rank
					  FROM #TEMP
					 WHERE C17Point <> 0 -- 값이 있는것만
				) e
		ON a.CDepartCode = e.CDepartCode AND a.CStaffId = e.CStaffId
	-- 행동Point
	  LEFT JOIN (
					SELECT CDepartCode, CStaffId,
					       RANK() OVER(ORDER BY C18Point DESC) AS Rank
					  FROM #TEMP
					 WHERE C18Point <> 0 -- 값이 있는것만
				) f
		ON a.CDepartCode = f.CDepartCode AND a.CStaffId = f.CStaffId
	-- 진로진학Point
	  LEFT JOIN (
					SELECT CDepartCode, CStaffId,
					       RANK() OVER(ORDER BY C21Point DESC) AS Rank
					  FROM #TEMP
					 WHERE C21Point <> 0 -- 값이 있는것만
				) g
		ON a.CDepartCode = g.CDepartCode AND a.CStaffId = g.CStaffId

	--************************
	-- 구분에 따른 결과값 리턴
	--************************
	-- 나의 전문가 랭킹
	IF @pTYPE = '1'
		BEGIN
			SELECT CONVERT(VARCHAR, a.C20Point) + '/' + b.CTotalCount AS C20Point,--정신관리
			       CONVERT(VARCHAR, a.C17Point) + '/' + b.CTotalCount AS C17Point,--학습관리
				   CONVERT(VARCHAR, a.C18Point) + '/' + b.CTotalCount AS C18Point,--행동관리
				   CONVERT(VARCHAR, a.C21Point) + '/' + b.CTotalCount AS C21Point --진로진학
			  FROM #TEMP a
			  LEFT JOIN (SELECT CONVERT(VARCHAR, COUNT(*)) AS CTotalCount FROM #TEMP) b ON 1=1
			 WHERE a.CDepartCode = @P_FACILITY
			   AND a.CStaffId    = @P_STAFFID
		END
	-- 이달의 최고 Point(1등)
	ELSE IF @pTYPE = '2'
		BEGIN
			-- 1등이 1명 일때만 리턴
			IF (SELECT COUNT(CStaffId) 
			      FROM #TEMP 
				 WHERE CTotalRank = 1) = 1
				BEGIN
					SELECT CDepartCode, COpenName0, CStaffId, CName0, CTotalPoint
					  FROM #TEMP 
					 WHERE CTotalRank = 1
				END
			ELSE SELECT CDepartCode, COpenName0, CStaffId, CName0 FROM #TEMP WHERE 1=2
		END
	-- 이달의 최고 Point(리스트)
	ELSE IF @pTYPE = '3'
		BEGIN
			-- 1등이 1명 이상일때 TOP 5
			IF (SELECT COUNT(CStaffId) 
			      FROM #TEMP 
				 WHERE CTotalRank = 1) > 1
				BEGIN
					SELECT TOP 5 CDepartCode, COpenName0, CStaffId, CName0, CTotalPoint
					  FROM #TEMP
					 WHERE CTotalRank <> 0 -- 값이 없는 소속원 제외
					 ORDER BY CTotalRank, CName0
				END
			-- 그 외 4명까지 표시
			ELSE
				BEGIN
					SELECT TOP 4 CDepartCode, COpenName0, CStaffId, CName0, CTotalPoint
					  FROM #TEMP
					 WHERE CTotalRank NOT IN (0, 1) -- 값이 없는 소속원, 1등 제외
					 ORDER BY CTotalRank, CName0
				END
		END
	-- 이달의 최다 게시글(1등)
	ELSE IF @pTYPE = '4'
		BEGIN
			-- 1등이 1명 일때만 리턴
			IF (SELECT COUNT(CStaffId) 
			      FROM #TEMP 
				 WHERE CComponentRank = 1) = 1
				BEGIN
					SELECT CDepartCode, COpenName0, CStaffId, CName0, CComponent
					  FROM #TEMP 
					 WHERE CComponentRank = 1
				END
			ELSE SELECT CDepartCode, COpenName0, CStaffId, CName0 FROM #TEMP WHERE 1=2
		END
	-- 이달의 최다 게시글(리스트)
	ELSE IF @pTYPE = '5'
		BEGIN
			-- 1등이 1명 이상일때 TOP 5
			IF (SELECT COUNT(CStaffId) 
			      FROM #TEMP 
				 WHERE CComponentRank = 1) > 1
				BEGIN
					SELECT TOP 5 CDepartCode, COpenName0, CStaffId, CName0, CComponent
					  FROM #TEMP
					 WHERE CComponentRank <> 0 -- 값이 없는 소속원 제외
					 ORDER BY CComponentRank, CName0
				END
			-- 그 외 4명까지 표시(1등 제외)
			ELSE
				BEGIN
					SELECT TOP 4 CDepartCode, COpenName0, CStaffId, CName0
					  FROM #TEMP
					 WHERE CComponentRank NOT IN (0, 1) -- 값이 없는 소속원, 1등 제외
					 ORDER BY CComponentRank, CName0
				END
		END
	-- 분야별전문가(정신관리)
	ELSE IF @pTYPE = '6'
		BEGIN
			SELECT TOP 5 CDepartCode, COpenName0, CStaffId, CName0
				FROM #TEMP
				WHERE C20PointRank <> 0 -- 값이 없는 소속원 제외
				ORDER BY C20PointRank, CName0
		END
	-- 분야별전문가(학습관리)
	ELSE IF @pTYPE = '7'
		BEGIN
			SELECT TOP 5 CDepartCode, COpenName0, CStaffId, CName0
				FROM #TEMP
				WHERE C17PointRank <> 0 -- 값이 없는 소속원 제외
				ORDER BY C17PointRank, CName0
		END
	-- 분야별전문가(행동관리)
	ELSE IF @pTYPE = '8'
		BEGIN
			SELECT TOP 5 CDepartCode, COpenName0, CStaffId, CName0
				FROM #TEMP
				WHERE C18PointRank <> 0 -- 값이 없는 소속원 제외
				ORDER BY C18PointRank, CName0
		END
	-- 분야별전문가(진로진학)
	ELSE IF @pTYPE = '9'
		BEGIN
			SELECT TOP 5 CDepartCode, COpenName0, CStaffId, CName0
				FROM #TEMP
				WHERE C21PointRank <> 0 -- 값이 없는 소속원 제외
				ORDER BY C21PointRank, CName0
		END
	ELSE 
		BEGIN
			SELECT * FROM #TEMP
		END
			
END

GO

-- =============================================
-- Author:		김동우
-- Create date: 2014-02-26
-- Description:	RFID 연동 테이블 처리 프로시저
--              2014.07.02 : MSG받기여부에 대한 처리추가
--              2015.08.25 : 계획없이 등하원 할 때 상담관리의 주당등원요일을 체크하는 부분을 막음(line:203, 301)
-- =============================================
CREATE PROC [dbo].[SP_ATTEND_RFID]
	@CLASS_CODE		NVARCHAR(20),		--지점번호(코드)
	@USER_GUBN		NVARCHAR(1),		--P (학생) / T (직원)
	@USER_SEQ		NVARCHAR(20),		--회원번호(코드)
	@USER_CARDNO		NVARCHAR(20),	--카드번호
	@ATT_STATE		NVARCHAR(2),		--I (In, 등원) / O (Out, 하원)
	@ATT_FLAG		NVARCHAR(1),		--1 (정상) / 2 (자유) / 3 (지각) / 4 (조퇴)
	@ATT_DATE		DATETIME			--태깅시간
AS
-- exec SP_ATTEND_RFID 'H0001','T','Staff-00001833','41393135','I','2', '2017-01-10 16:51:19.740'
BEGIN 
	SET NOCOUNT ON;
--IF @CLASS_CODE = 'H0001'
--BEGIN
--	INSERT INTO TTest 
--	SELECT CONVERT(VARCHAR, GETDATE(), 21), @CLASS_CODE + ',' + @USER_GUBN + ',' + @USER_SEQ + ',' + @USER_CARDNO + ',' + @ATT_DATE
--END
	--상태 업데이트
	UPDATE TB_ATT_UNIQUE SET PROC_FLAG = 1 where CLASS_CODE = @CLASS_CODE AND USER_CARDNO = @USER_CARDNO AND ATT_DATE = @ATT_DATE
	
	--변수지정
	DECLARE
	@DepartCode		NVARCHAR(20),		--지점코드
	@CDepartStartDate	DATETIME,		--지점시작일
	@DepartName		NVARCHAR(50),
	@StudentName	NVARCHAR(50),
	@Message		NVARCHAR(255),
	@AttendType		NVARCHAR(50),		--주당등원일
	@CManagerId		NVARCHAR(30),		--매니저 Id
	@CNT			INT,
	@NowDate		DATETIME
	--2016.03.15. 추가
   ,@Counsel        BIT                 --상담관리
   ,@StudentStatus  NVARCHAR(50)        --학생상태
   ,@LeaveStartDate DATETIME            --휴원시작일
   ,@LeaveDays      INT                 --기존휴원일수
   ,@BeforeDays     INT                 --변경휴원일수
   ,@ModifyDays     INT                 --칠수차이

	SET @NowDate = CONVERT(VARCHAR(20), DATEADD(HH,-3, @ATT_DATE), 23)

	--지점정보
	select
		@DepartCode = CDepartCode
		, @CDepartStartDate = CDepartStartDate
		, @DepartName = COpenName0
	from TFacility (nolock)
	where REPLACE(REPLACE(REPLACE(CFacilityCode, 'PX', ''), 'ECH', 'C'), 'EHM', 'H') = @CLASS_CODE
	--where CFacilityCode = @CLASS_CODE

	--학생정보
	select
		@StudentName = CName
		, @CManagerId = CManagerId
		, @StudentStatus = CStudentStatus
	from TStudent (nolock)
	where CBranchCode = @DepartCode
		and CBranchStartDate = @CDepartStartDate
		and CCode = @USER_SEQ

	--학생의 주당등원일
	select @AttendType = CAttendType
	from TStudentCounsel (nolock)
	where CScDepartCode = @DepartCode
		and CScDepartStartDate = @CDepartStartDate
		and CScCode = @USER_SEQ
		and CStartDate <= @NowDate
		and CEndDate >= @NowDate
	
	DECLARE @CComeSchool BIT
	DECLARE @Cperceive   BIT
	DECLARE @CAbsent     BIT
	DECLARE @CLeaving    BIT
	DECLARE @CComeHome   BIT
	DECLARE @CBackSchool BIT
	DECLARE @CStay       BIT

	--메세지 수신여부	
	select @CComeSchool = CComeSchool, @Cperceive = Cperceive, @CAbsent = CAbsent, @CLeaving = CLeaving, @CComeHome = CComeHome, @CBackSchool = CBackSchool, @CStay = CStay
	  from TSetReceiveMsg(nolock)
	 where CStaffId = @CManagerId
	-- 데이터를 생성안한 경우 전부 현재와 같이 전부 전송하는걸로 처리
	IF @@ROWCOUNT = 0
		BEGIN
			SELECT @CComeSchool=0, @Cperceive=0, @CAbsent=0, @CLeaving=0, @CComeHome=0, @CBackSchool=0, @CStay=0
		END
	----------------------------------------------------------------------------------------------------------------------------------------------------------
	--학생일때 처리
	----------------------------------------------------------------------------------------------------------------------------------------------------------
	IF @USER_GUBN = 'P'
	BEGIN
		-- 2016.03.15. 학생상태가 휴원이면 해제처리
		IF @StudentStatus = 'Pause'
			BEGIN
				SELECT TOP 1 -- 이럴일은 없지만 기존 데이터가 엉망이니깐 넣어주는 센스~
				       @Counsel        = CCounsel
					  ,@LeaveStartDate = CLeaveStartDate
				      ,@LeaveDays      = DATEDIFF(day, CLeaveStartDate, CLeaveEndDate) + 1 -- 기존일수
				      ,@BeforeDays     = DATEDIFF(day, CLeaveStartDate, @NowDate)          -- 오늘기준 휴원일수(※※※주의※※※카드체킹이되면 어제날자가 휴원종료일이니깐~~)
				  FROM TStudentLeave
				 WHERE CDepartCode      = @DepartCode
				   AND CDepartStartDate = @CDepartStartDate
				   AND CStudentCode     = @USER_SEQ
				   AND CLeaveStartDate <= @NowDate -- 휴원한다구 하구선 체킹한 경우(등원 했는데 휴원처리는...또 다른 문제로 보완되어야 하네요..휴~~ )
				   AND CLeaveEndDate   >= @NowDate

				-- 자! 휴원 데이터가 있고 상담관리가 존재하면 당황하지 말고
				IF @@rowcount <> 0 
					BEGIN
						-- 휴원일수가 0 인경우는 아예 휴원한적 없는 것처럼 처리 해야죠...(데이터 삭제)
						IF @BeforeDays = 0 
							BEGIN
								DELETE FROM TStudentLeave
								 WHERE CDepartCode      = @DepartCode
								   AND CDepartStartDate = @CDepartStartDate
								   AND CStudentCode     = @USER_SEQ
								   AND CLeaveStartDate  = @LeaveStartDate
							END
						ELSE
							BEGIN
								-- 1.휴원테이블 상태 바꾸고
								UPDATE TStudentLeave SET
										CLeaveEndDate = DATEADD(day, -1, @NowDate) -- 체킹한 이전일자가 휴원종료일
									   ,CLeaveDays    = @BeforeDays
									   ,CLeaveStatus  = 'Close'
								 WHERE CDepartCode      = @DepartCode
								   AND CDepartStartDate = @CDepartStartDate
								   AND CStudentCode     = @USER_SEQ
								   AND CLeaveStartDate  = @LeaveStartDate
							END

						-- 2.휴원대상에 상담관리가 있으면 상담관리 기간변경하고
						IF @Counsel = 1
							BEGIN
								-- 변경일수에서 기존일수 빼기(-로 만들어야죵)
								SET @ModifyDays = @BeforeDays - @LeaveDays
								
								-- 헐~~~~ 여기서 문제 발생... ㅡ,.ㅡ 프로그램에서는 선 등록 상담건의 시작일자는 변경하지 않고 있음... 미챠... ㅡㅡ^(데이터 꼬여 있네... 도대체 왜 이래...엉???)
								-- 일단 로직은 여기서 만들고 프로그램은 바꿔서 2016.03.16일에 반영하도록 한다.(이러나 저러나 꼬여 있는거..이건 15일에 반영)
								UPDATE TStudentCounsel SET
										-- 상담관리 시작일은 휴원시작일보다 큰 경우 변경(선 등록 등록건의 보정)
										CStartDate = CASE WHEN CStartDate > @LeaveStartDate THEN DATEADD(day, @ModifyDays, CStartDate) ELSE CStartDate END
									   ,CEndDate   = DATEADD(day, @ModifyDays, CEndDate)
								 WHERE CScDepartCode      = @DepartCode
								   AND CScDepartStartDate = @CDepartStartDate
								   AND CScCode            = @USER_SEQ
								   AND CEndDate          >= @LeaveStartDate -- 휴원시작일보다 종료일이 큰거
							END


					END

					-- 3.학생상태 바꾸고... 끝~~~
					--2016.09.06 프리미엄 학생이 휴원중 상담관리만 종료하여 휴원 데이터가 삭제되는 경우, 휴원해제가 되지 않으므로 밖으로 빼냄.
					UPDATE TStudent SET
					     	CStudentStatus = 'Regist'
				    WHERE CBranchCode = @DepartCode
					  AND CBranchStartDate = @CDepartStartDate
					  AND CCode = @USER_SEQ
			END
		
		--TStudentDailyAttend 생성
		SELECT @CNT = COUNT(*) FROM TStudentDailyAttend (nolock)
		WHERE CDate = @NowDate
			and CStduentBranchCode = @DepartCode
			and CStduentBranchStartDate = @CDepartStartDate
			and CStduentcode = @USER_SEQ
		IF @CNT = 0
		BEGIN
			INSERT INTO [dbo].[TStudentDailyAttend]
				([CStduentBranchCode]
				,[CStduentBranchStartDate]
				,[CStduentcode]
				,[CDate]
				,[CStartPlanTime]
				,[CEndPlanTime]
				,[CPlanHours]
				,[CAttendType]
				,[CStartTime]
				,[CEndTime]
				,[CHours]
				,[CAttendStatus]
				,[CSentLateMsg]
				,[CSentNotLeaveMsg])
			VALUES
				(@DepartCode
				,@CDepartStartDate
				,@USER_SEQ
				,@NowDate
				,@NowDate
				,NULL
				,0
				,@AttendType
				,NULL
				,NULL
				,NULL
				,NULL
				,NULL
				,NULL)
		END
		
		--출근일때
		IF @ATT_STATE = 'I'
		BEGIN

			--출근시각/상태 기록
			IF @ATT_FLAG = '1' OR @ATT_FLAG = '5' OR @ATT_FLAG = '2' OR @ATT_FLAG = '6'	--1 (정상) / 5(재등원) / 2(미계획) / 6 (개별지도)
			BEGIN

				update STA
				set CStartTime = @ATT_DATE, CAttendStatus = 'Attend'
				from TStudentDailyAttend STA (nolock)
				where
					CDate = @NowDate
					and CStduentBranchCode = @DepartCode
					and CStduentBranchStartDate = @CDepartStartDate
					and CStduentcode = @USER_SEQ
					and CStartTime is Null
					
			END
			ELSE IF @ATT_FLAG = '3' OR @ATT_FLAG = '8'	--3 (지각) / 8 (개별지도지각)
			BEGIN
				
				update STA
				set CStartTime = @ATT_DATE, CAttendStatus = 'Late'
				from TStudentDailyAttend STA (nolock)
				where
					CDate = @NowDate
					and CStduentBranchCode = @DepartCode
					and CStduentBranchStartDate = @CDepartStartDate
					and CStduentcode = @USER_SEQ
					and CStartTime is Null

			END

			--SMS / 메시지 테이블 기록
			IF @ATT_FLAG = '1' OR @ATT_FLAG = '3'	-- 1 (정상) / 3 (지각)
			BEGIN
				IF SUBSTRING(@DepartCode, 1, 3) = 'ECH'  OR SUBSTRING(@DepartCode, 1, 3) = 'EHM'  -- 2016.12.30 넥스큐브 김선주씨의 요청으로 출결문자에서 에듀코치와 동일한 조건으로 에듀하임(EHM)에서도 문자가 보내지도록(문자 내용에 '00 에듀코치'로 표기) 수정
					select @Message = REPLACE(REPLACE('OOO 학생이 등원하였습니다. - OO 에듀코치', 'OOO', @StudentName), 'OO', @DepartName)
				ELSE
					select @Message = REPLACE(REPLACE('OOO 학생이 등원하였습니다. - OO 에듀플렉스', 'OOO', @StudentName), 'OO', @DepartName)

				INSERT INTO TB_ATT_MESSAGE (CBranchCode, CBranchStartDate, CCode, CManagerId, CRegDate, CMsgType, CMessage)
					VALUES (@DepartCode, @CDepartStartDate, @USER_SEQ, @CManagerId, @ATT_DATE, 'SMS', @Message)
				IF @CComeSchool = 0 --등원메세지 발송
					BEGIN
						INSERT INTO TB_ATT_MESSAGE (CBranchCode, CBranchStartDate, CCode, CManagerId, CRegDate, CMsgType, CMessage)
							VALUES (@DepartCode, @CDepartStartDate, @USER_SEQ, @CManagerId, @ATT_DATE, 'MSG', @Message)
					END

			END
			IF @ATT_FLAG = '6' OR @ATT_FLAG = '8'	-- 6 (개별지도) / 8 (개별지도지각)
			BEGIN
				IF SUBSTRING(@DepartCode, 1, 3) = 'ECH'  OR SUBSTRING(@DepartCode, 1, 3) = 'EHM'  -- 2016.12.30 넥스큐브 김선주씨의 요청으로 출결문자에서 에듀코치와 동일한 조건으로 에듀하임(EHM)에서도 문자가 보내지도록(문자 내용에 '00 에듀코치'로 표기) 수정
					select @Message = REPLACE(REPLACE('OOO 학생이 개별지도 등원하였습니다. - OO 에듀코치', 'OOO', @StudentName), 'OO', @DepartName)
				ELSE
					select @Message = REPLACE(REPLACE('OOO 학생이 개별지도 등원하였습니다. - OO 에듀플렉스', 'OOO', @StudentName), 'OO', @DepartName)

				INSERT INTO TB_ATT_MESSAGE (CBranchCode, CBranchStartDate, CCode, CManagerId, CRegDate, CMsgType, CMessage)
					VALUES (@DepartCode, @CDepartStartDate, @USER_SEQ, @CManagerId, @ATT_DATE, 'SMS', @Message)
				IF @CComeSchool = 0 --등원메세지 발송
					BEGIN
						INSERT INTO TB_ATT_MESSAGE (CBranchCode, CBranchStartDate, CCode, CManagerId, CRegDate, CMsgType, CMessage)
							VALUES (@DepartCode, @CDepartStartDate, @USER_SEQ, @CManagerId, @ATT_DATE, 'MSG', @Message)
					END
			END
			ELSE IF @ATT_FLAG = '5'	-- 1 (재등원)
			BEGIN
				IF SUBSTRING(@DepartCode, 1, 3) = 'ECH'  OR SUBSTRING(@DepartCode, 1, 3) = 'EHM'  -- 2016.12.30 넥스큐브 김선주씨의 요청으로 출결문자에서 에듀코치와 동일한 조건으로 에듀하임(EHM)에서도 문자가 보내지도록(문자 내용에 '00 에듀코치'로 표기) 수정
					select @Message = REPLACE(REPLACE('OOO 학생이 재등원하였습니다. - OO 에듀코치', 'OOO', @StudentName), 'OO', @DepartName)
				ELSE
					select @Message = REPLACE(REPLACE('OOO 학생이 재등원하였습니다. - OO 에듀플렉스', 'OOO', @StudentName), 'OO', @DepartName)

				INSERT INTO TB_ATT_MESSAGE (CBranchCode, CBranchStartDate, CCode, CManagerId, CRegDate, CMsgType, CMessage)
					VALUES (@DepartCode, @CDepartStartDate, @USER_SEQ, @CManagerId, @ATT_DATE, 'SMS', @Message)
				IF @CBackSchool = 0 --재등원메세지 발송
					BEGIN
						INSERT INTO TB_ATT_MESSAGE (CBranchCode, CBranchStartDate, CCode, CManagerId, CRegDate, CMsgType, CMessage)
							VALUES (@DepartCode, @CDepartStartDate, @USER_SEQ, @CManagerId, @ATT_DATE, 'MSG', @Message)
					END
			END
			ELSE IF @ATT_FLAG = '2' -- AND ISNULL(@AttendType, '') <> ''	-- 2(미계획)
			BEGIN
				IF SUBSTRING(@DepartCode, 1, 3) = 'ECH'  OR SUBSTRING(@DepartCode, 1, 3) = 'EHM'  -- 2016.12.30 넥스큐브 김선주씨의 요청으로 출결문자에서 에듀코치와 동일한 조건으로 에듀하임(EHM)에서도 문자가 보내지도록(문자 내용에 '00 에듀코치'로 표기) 수정
					select @Message = REPLACE(REPLACE('OOO 학생이 등원하였습니다. - OO 에듀코치', 'OOO', @StudentName), 'OO', @DepartName)
				ELSE
					select @Message = REPLACE(REPLACE('OOO 학생이 등원하였습니다. - OO 에듀플렉스', 'OOO', @StudentName), 'OO', @DepartName)

				INSERT INTO TB_ATT_MESSAGE (CBranchCode, CBranchStartDate, CCode, CManagerId, CRegDate, CMsgType, CMessage)
					VALUES (@DepartCode, @CDepartStartDate, @USER_SEQ, @CManagerId, @ATT_DATE, 'SMS', @Message)
				IF @CComeSchool = 0 --등원메세지 발송
					BEGIN
						INSERT INTO TB_ATT_MESSAGE (CBranchCode, CBranchStartDate, CCode, CManagerId, CRegDate, CMsgType, CMessage)
							VALUES (@DepartCode, @CDepartStartDate, @USER_SEQ, @CManagerId, @ATT_DATE, 'MSG', @Message)
					END
			END
			--ELSE IF @ATT_FLAG = '2' AND (DATEPART(DW, GETDATE()) = '1' OR DATEPART(DW, GETDATE()) = '7')
			--	AND (@AttendType = 'W4days' OR @AttendType = 'W5days' OR @AttendType = 'W6days' OR @AttendType = 'W7days')	-- 2(미계획) & 주말(1:일요일 7:토요일) & 주당등원일4,5,6,7일
			--BEGIN
			--	select @Message = REPLACE(REPLACE('OOO 학생이 주말 자율학습 등원하였습니다. - OO 에듀플렉스', 'OOO', @StudentName), 'OO', @DepartName)
			--	INSERT INTO TB_ATT_MESSAGE (CBranchCode, CBranchStartDate, CCode, CManagerId, CRegDate, CMsgType, CMessage)
			--		VALUES (@DepartCode, @CDepartStartDate, @USER_SEQ, @CManagerId, @ATT_DATE, 'SMS', @Message)
			--END
		END
		--퇴근일때
		ELSE
		BEGIN

			--퇴근시각/상태/근무시간수 기록
			IF @ATT_FLAG = '1' OR @ATT_FLAG = '2' OR @ATT_FLAG = '6'	--1 (정상) / 2 (미계획) / 6 (개별지도)
			BEGIN

				update STA
				set CEndTime = @ATT_DATE, CAttendStatus = 'Leave'
				from TStudentDailyAttend STA (nolock)
				where
					CDate = @NowDate
					and CStduentBranchCode = @DepartCode
					and CStduentBranchStartDate = @CDepartStartDate
					and CStduentcode = @USER_SEQ

			END
			ELSE IF @ATT_FLAG = '4' OR @ATT_FLAG = '9'	--4 (조퇴) /	 9 (개별지도조퇴)
			BEGIN
				
				update STA
				set CEndTime = @ATT_DATE, CAttendStatus = 'EarlyLeave'
				from TStudentDailyAttend STA (nolock)
				where
					CDate = @NowDate
					and CStduentBranchCode = @DepartCode
					and CStduentBranchStartDate = @CDepartStartDate
					and CStduentcode = @USER_SEQ

			END

			--SMS / 메시지 테이블 기록
			IF @ATT_FLAG = '1'	-- 1 (정상)
			BEGIN
				IF SUBSTRING(@DepartCode, 1, 3) = 'ECH'  OR SUBSTRING(@DepartCode, 1, 3) = 'EHM'  -- 2016.12.30 넥스큐브 김선주씨의 요청으로 출결문자에서 에듀코치와 동일한 조건으로 에듀하임(EHM)에서도 문자가 보내지도록(문자 내용에 '00 에듀코치'로 표기) 수정
					select @Message = REPLACE(REPLACE('OOO 학생이 하원하였습니다. - OO 에듀코치', 'OOO', @StudentName), 'OO', @DepartName)
				ELSE
					select @Message = REPLACE(REPLACE('OOO 학생이 하원하였습니다. - OO 에듀플렉스', 'OOO', @StudentName), 'OO', @DepartName)

				INSERT INTO TB_ATT_MESSAGE (CBranchCode, CBranchStartDate, CCode, CManagerId, CRegDate, CMsgType, CMessage)
					VALUES (@DepartCode, @CDepartStartDate, @USER_SEQ, @CManagerId, @ATT_DATE, 'SMS', @Message)
				IF @CComeHome = 0 --하원메세지 발송
					BEGIN
						INSERT INTO TB_ATT_MESSAGE (CBranchCode, CBranchStartDate, CCode, CManagerId, CRegDate, CMsgType, CMessage)
							VALUES (@DepartCode, @CDepartStartDate, @USER_SEQ, @CManagerId, @ATT_DATE, 'MSG', @Message)
					END
			END
			IF @ATT_FLAG = '6'	-- 6 (개별지도)
			BEGIN
				IF SUBSTRING(@DepartCode, 1, 3) = 'ECH'  OR SUBSTRING(@DepartCode, 1, 3) = 'EHM'  -- 2016.12.30 넥스큐브 김선주씨의 요청으로 출결문자에서 에듀코치와 동일한 조건으로 에듀하임(EHM)에서도 문자가 보내지도록(문자 내용에 '00 에듀코치'로 표기) 수정
					select @Message = REPLACE(REPLACE('OOO 학생이 하원하였습니다. - OO 에듀코치', 'OOO', @StudentName), 'OO', @DepartName)
				ELSE
					select @Message = REPLACE(REPLACE('OOO 학생이 개별지도 하원하였습니다. - OO 에듀플렉스', 'OOO', @StudentName), 'OO', @DepartName)

				INSERT INTO TB_ATT_MESSAGE (CBranchCode, CBranchStartDate, CCode, CManagerId, CRegDate, CMsgType, CMessage)
					VALUES (@DepartCode, @CDepartStartDate, @USER_SEQ, @CManagerId, @ATT_DATE, 'SMS', @Message)
				IF @CComeHome = 0 --하원메세지 발송
					BEGIN
						INSERT INTO TB_ATT_MESSAGE (CBranchCode, CBranchStartDate, CCode, CManagerId, CRegDate, CMsgType, CMessage)
							VALUES (@DepartCode, @CDepartStartDate, @USER_SEQ, @CManagerId, @ATT_DATE, 'MSG', @Message)
					END
			END
			ELSE IF @ATT_FLAG = '4'	-- 4 (조퇴)
			BEGIN
				IF SUBSTRING(@DepartCode, 1, 3) = 'ECH'  OR SUBSTRING(@DepartCode, 1, 3) = 'EHM'  -- 2016.12.30 넥스큐브 김선주씨의 요청으로 출결문자에서 에듀코치와 동일한 조건으로 에듀하임(EHM)에서도 문자가 보내지도록(문자 내용에 '00 에듀코치'로 표기) 수정
					select @Message = REPLACE(REPLACE('OOO 학생이 하원하였습니다. - OO 에듀코치', 'OOO', @StudentName), 'OO', @DepartName)
				ELSE
					select @Message = REPLACE(REPLACE('OOO 학생이 하원하였습니다. - OO 에듀플렉스', 'OOO', @StudentName), 'OO', @DepartName)

				INSERT INTO TB_ATT_MESSAGE (CBranchCode, CBranchStartDate, CCode, CManagerId, CRegDate, CMsgType, CMessage)
					VALUES (@DepartCode, @CDepartStartDate, @USER_SEQ, @CManagerId, @ATT_DATE, 'SMS', @Message)
				IF @CLeaving = 0 --조퇴메세지 발송
					BEGIN
						IF SUBSTRING(@DepartCode, 1, 3) = 'ECH'  OR SUBSTRING(@DepartCode, 1, 3) = 'EHM'  -- 2016.12.30 넥스큐브 김선주씨의 요청으로 출결문자에서 에듀코치와 동일한 조건으로 에듀하임(EHM)에서도 문자가 보내지도록(문자 내용에 '00 에듀코치'로 표기) 수정
							select @Message = REPLACE(REPLACE('OOO 학생이 하원하였습니다. - OO 에듀코치', 'OOO', @StudentName), 'OO', @DepartName)
						ELSE
							select @Message = REPLACE(REPLACE('OOO 학생이 하원하였습니다. - OO 에듀플렉스', 'OOO', @StudentName), 'OO', @DepartName)

						INSERT INTO TB_ATT_MESSAGE (CBranchCode, CBranchStartDate, CCode, CManagerId, CRegDate, CMsgType, CMessage)
							VALUES (@DepartCode, @CDepartStartDate, @USER_SEQ, @CManagerId, @ATT_DATE, 'MSG', @Message)
					END
			END
			ELSE IF @ATT_FLAG = '9'	-- 9 (개별지도조퇴)
			BEGIN
				IF SUBSTRING(@DepartCode, 1, 3) = 'ECH'  OR SUBSTRING(@DepartCode, 1, 3) = 'EHM'  -- 2016.12.30 넥스큐브 김선주씨의 요청으로 출결문자에서 에듀코치와 동일한 조건으로 에듀하임(EHM)에서도 문자가 보내지도록(문자 내용에 '00 에듀코치'로 표기) 수정
					select @Message = REPLACE(REPLACE('OOO 학생이 하원하였습니다. - OO 에듀코치', 'OOO', @StudentName), 'OO', @DepartName)
				ELSE
					select @Message = REPLACE(REPLACE('OOO 학생이 개별지도 하원하였습니다. - OO 에듀플렉스', 'OOO', @StudentName), 'OO', @DepartName)

				INSERT INTO TB_ATT_MESSAGE (CBranchCode, CBranchStartDate, CCode, CManagerId, CRegDate, CMsgType, CMessage)
					VALUES (@DepartCode, @CDepartStartDate, @USER_SEQ, @CManagerId, @ATT_DATE, 'SMS', @Message)
				IF @CLeaving = 0 --조퇴메세지 발송
					BEGIN
						IF SUBSTRING(@DepartCode, 1, 3) = 'ECH'  OR SUBSTRING(@DepartCode, 1, 3) = 'EHM'  -- 2016.12.30 넥스큐브 김선주씨의 요청으로 출결문자에서 에듀코치와 동일한 조건으로 에듀하임(EHM)에서도 문자가 보내지도록(문자 내용에 '00 에듀코치'로 표기) 수정
							select @Message = REPLACE(REPLACE('OOO 학생이 하원하였습니다. - OO 에듀코치', 'OOO', @StudentName), 'OO', @DepartName)
						ELSE
							select @Message = REPLACE(REPLACE('OOO 학생이 개별지도 하원하였습니다. - OO 에듀플렉스', 'OOO', @StudentName), 'OO', @DepartName)

						INSERT INTO TB_ATT_MESSAGE (CBranchCode, CBranchStartDate, CCode, CManagerId, CRegDate, CMsgType, CMessage)
							VALUES (@DepartCode, @CDepartStartDate, @USER_SEQ, @CManagerId, @ATT_DATE, 'MSG', @Message)
					END
			END
			ELSE IF @ATT_FLAG = '2' -- AND ISNULL(@AttendType, '') <> ''	-- 2(미계획)
			BEGIN
				IF SUBSTRING(@DepartCode, 1, 3) = 'ECH'  OR SUBSTRING(@DepartCode, 1, 3) = 'EHM'  -- 2016.12.30 넥스큐브 김선주씨의 요청으로 출결문자에서 에듀코치와 동일한 조건으로 에듀하임(EHM)에서도 문자가 보내지도록(문자 내용에 '00 에듀코치'로 표기) 수정
					select @Message = REPLACE(REPLACE('OOO 학생이 하원하였습니다. - OO 에듀코치', 'OOO', @StudentName), 'OO', @DepartName)
				ELSE
					select @Message = REPLACE(REPLACE('OOO 학생이 하원하였습니다. - OO 에듀플렉스', 'OOO', @StudentName), 'OO', @DepartName)

				INSERT INTO TB_ATT_MESSAGE (CBranchCode, CBranchStartDate, CCode, CManagerId, CRegDate, CMsgType, CMessage)
					VALUES (@DepartCode, @CDepartStartDate, @USER_SEQ, @CManagerId, @ATT_DATE, 'SMS', @Message)
				IF @CComeHome = 0 
					BEGIN
						INSERT INTO TB_ATT_MESSAGE (CBranchCode, CBranchStartDate, CCode, CManagerId, CRegDate, CMsgType, CMessage)
							VALUES (@DepartCode, @CDepartStartDate, @USER_SEQ, @CManagerId, @ATT_DATE, 'MSG', @Message)
					END
			END
			--ELSE IF @ATT_FLAG = '2' AND (DATEPART(DW, GETDATE()) = '1' OR DATEPART(DW, GETDATE()) = '7')
			--	AND (@AttendType = 'W4days' OR @AttendType = 'W5days' OR @AttendType = 'W6days' OR @AttendType = 'W7days')	-- 2(미계획) & 주말(1:일요일 7:토요일) & 주당등원일4,5,6,7일
			--BEGIN
			--	select @Message = REPLACE(REPLACE('OOO 학생이 주말 자율학습 하원하였습니다. - OO 에듀플렉스', 'OOO', @StudentName), 'OO', @DepartName)
			--	INSERT INTO TB_ATT_MESSAGE (CBranchCode, CBranchStartDate, CCode, CManagerId, CRegDate, CMsgType, CMessage)
			--		VALUES (@DepartCode, @CDepartStartDate, @USER_SEQ, @CManagerId, @ATT_DATE, 'SMS', @Message)
			--	INSERT INTO TB_ATT_MESSAGE (CBranchCode, CBranchStartDate, CCode, CManagerId, CRegDate, CMsgType, CMessage)
			--		VALUES (@DepartCode, @CDepartStartDate, @USER_SEQ, @CManagerId, @ATT_DATE, 'MSG', @Message)
			--END

		END

	END
	----------------------------------------------------------------------------------------------------------------------------------------------------------
	--직원일때 처리
	----------------------------------------------------------------------------------------------------------------------------------------------------------
	ELSE
	BEGIN
		DECLARE @dCStaffId NVARCHAR(50), @dCStaffReception NVARCHAR(50), @dCName0 NVARCHAR(50)

		--직원정보(SMS발송용)
		select @dCStaffId = a.CStaffId, @dCStaffReception = b.CStaffReception, @dCName0 = c.CName0
		  from TRFID a
		  left join TRFIDAttend b
			on a.CBranchCode = b.CBranchCode and a.CBranchStartDate = b.CBranchStartDate and a.CCardNumber = b.CCardNumber
		  left join TStaff c
		    on a.CStaffId = c.CStaffId
		 where a.CBranchCode = @DepartCode  -- 지점번호
			and a.CBranchStartDate = @CDepartStartDate
		   and a.CCardNumber = @USER_CARDNO -- 카드번호

		--TStaffDailyAttend 생성
		SELECT @CNT = COUNT(*) FROM TStaffDailyAttend (nolock)
		WHERE CDate = @NowDate
			and CStaffId = @USER_SEQ
			and CBranchCode = @DepartCode
			and CBranchStartDate = @CDepartStartDate
		IF @CNT = 0
		BEGIN
			INSERT INTO [dbo].[TStaffDailyAttend]
				([CStaffId]
				,[CDate]
				,[CBranchCode]
				,[CBranchStartDate]
				,[CStartPlanTime]
				,[CEndPlanTime]
				,[CPlanHours]
				,[CStartTime]
				,[CEndTime]
				,[CHours]
				,[CAttendStatus])
			VALUES
				(@USER_SEQ
				,@NowDate
				,@DepartCode
				,@CDepartStartDate
				,@NowDate
				,NULL
				,0
				,NULL
				,NULL
				,NULL
				,NULL)
		END
		
		--출근일때
		IF @ATT_STATE = 'I'
		BEGIN

			--출근시각/상태 기록
			IF @ATT_FLAG = '1' OR @ATT_FLAG = '2' or @ATT_FLAG = '5'	--1 (정상) / 5(재출근)
			BEGIN

				update SFA
				set CStartTime = @ATT_DATE, CAttendStatus = 'Attend'
				from TStaffDailyAttend SFA (nolock)
				where
					CDate = @NowDate
					and CStaffId = @USER_SEQ
					and CStartTime is Null
					
			END
			ELSE IF @ATT_FLAG = '3'	--3 (지각)
			BEGIN
				
				update SFA
				set CStartTime = @ATT_DATE, CAttendStatus = 'Late'
				from TStaffDailyAttend SFA (nolock)
				where
					CDate = @NowDate
					and CStaffId = @USER_SEQ
					and CStartTime is Null

			END

			--SMS / 메시지 테이블 기록
			IF ISNULL(@dCStaffReception, '') <> '' -- 메세지를 받는 사람이 지정된 경우
				BEGIN
					select @Message = REPLACE(REPLACE('OOO 이(가) '+ CONVERT(VARCHAR, DATEPART(dd, GETDATE())) + '일 ' + CONVERT(VARCHAR, DATEPART(hour, GETDATE())) + '시' + CONVERT(VARCHAR, DATEPART(mi, GETDATE())) + '분 출근 하였습니다. - OO -', 'OOO', @dCName0), 'OO', @DepartName)
					INSERT INTO TB_ATT_MESSAGE (CBranchCode, CBranchStartDate, CCode, CManagerId, CRegDate, CMsgType, CMessage)
						VALUES (@DepartCode, @CDepartStartDate, @dCStaffId, @dCStaffReception, @ATT_DATE, 'SMS2', @Message)
				END
		END
		--퇴근일때
		ELSE
		BEGIN

			--퇴근시각/상태/근무시간수 기록
			IF @ATT_FLAG = '1' or @ATT_FLAG = '2'	--1 (정상)
			BEGIN

				update SFA
				set CEndTime = @ATT_DATE, CAttendStatus = 'Leave'
				from TStaffDailyAttend SFA (nolock)
				where
					CDate = @NowDate
					and CStaffId = @USER_SEQ

			END
			ELSE IF @ATT_FLAG = '4'	--4 (조퇴)
			BEGIN
				
				update SFA
				set CEndTime = @ATT_DATE, CAttendStatus = 'EarlyLeave'
				from TStaffDailyAttend SFA (nolock)
				where
					CDate = @NowDate
					and CStaffId = @USER_SEQ

			END

			--SMS / 메시지 테이블 기록
			IF ISNULL(@dCStaffReception, '') <> '' -- 메세지를 받는 사람이 지정된 경우
				BEGIN
					select @Message = REPLACE(REPLACE('OOO 이(가) '+ CONVERT(VARCHAR, DATEPART(dd, GETDATE())) + '일 ' + CONVERT(VARCHAR, DATEPART(hour, GETDATE())) + '시' + CONVERT(VARCHAR, DATEPART(mi, GETDATE())) + '분 퇴근 하였습니다. - OO -', 'OOO', @dCName0), 'OO', @DepartName)
					INSERT INTO TB_ATT_MESSAGE (CBranchCode, CBranchStartDate, CCode, CManagerId, CRegDate, CMsgType, CMessage)
						VALUES (@DepartCode, @CDepartStartDate, @dCStaffId, @dCStaffReception, @ATT_DATE, 'SMS2', @Message)
				END

		END

	END

END

GO

-- =======================================================================================
-- Author:		김동우
-- Create date: 2014.06.24
-- Description:	SMS청구 시스템 (매월 21일부터 말일까지 반복으로 실행시켜야 함
--              20일까지 청구단위금액 이상의 건을 자동 청구함
-- =======================================================================================
CREATE PROCEDURE [dbo].[SP_SMS_Billing]
AS
SET XACT_ABORT ON
BEGIN TRAN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	--문자 단가는 16.5원
	--기준 금액 이상 미청구된 지점을 임시테이블에 넣기
	------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	DECLARE @SMSCost DECIMAL(16, 2)
		, @BillMoney DECIMAL(14)
		, @BillCnt INT
		, @MAXID INT
		, @ROWID INT
		, @CBranchIdDepartCode nvarchar(20)
		, @CBranchIdDepartStartDate datetime
		, @CBranchName nvarchar(50)
		, @NotChargeCnt INT
		, @BillPage INT
		, @NowBillCnt INT
		, @BillBalance DECIMAL(16, 2)

	Declare @SMS_MAXID INT
		, @SMS_ROWID INT
		, @MAX_CTradeNo INT
		, @MAX_CDetailNo INT

	SET @SMSCost = 16.5						--개당SMS단가
	SET @BillMoney = 33000					--청구단위금액
	SET @BillCnt = FLOOR(@BillMoney / @SMSCost)	--청구단위갯수

	--테이블 변수
	Declare @BillDepartList TABLE
	(
		 ROWID INT IDENTITY(1,1) PRIMARY KEY
		 , CBranchIdDepartCode nvarchar(20) null
		 , CBranchIdDepartStartDate datetime null
		 , CBranchName nvarchar(50) null
		 , NotChargeCnt INT null
		 , BillPage INT null
		 , NowBillCnt INT null
		 , BillBalance DECIMAL(16, 2) null
	)

	--테이블 변수
	Declare @SMSLog TABLE
	(
		ROWID INT IDENTITY(1,1) PRIMARY KEY
		, CId INT null
		, SMSCnt INT null
	)

	--테이블 변수에 기준금액 이상인 지점 넣기
	insert into @BillDepartList
	select
		CBranchIdDepartCode
		, CBranchIdDepartStartDate
		, CBranchName
		, NotChargeCnt
		, FLOOR(NotChargeCnt / @BillCnt) as BillPage									--금번청구단위배수
		, FLOOR(NotChargeCnt / @BillCnt) * @BillCnt as NowBillCnt						--금번 청구수
		, FLOOR(NotChargeCnt / @BillCnt) * @BillCnt * @SMSCost as BillBalance			--금번 청구금액
	from
	(
		SELECT
			CBranchIdDepartCode
			, CBranchIdDepartStartDate
			, CBranchName
			, SUM(isnull(NotChargeCnt, 0)) AS NotChargeCnt
		FROM
			(
				SELECT
					X.CBranchIdDepartCode
					, X.CBranchIdDepartStartDate
					, Y.COpenName0 AS CBranchName
					--, CONVERT(varchar(10), X.CSendTime, 23) AS CSendDate
					, CEILING(DATALENGTH(X.CContent) / 80.0) AS NotChargeCnt
				FROM     TLogSMS AS X LEFT OUTER JOIN
					TFacility AS Y ON X.CBranchIdDepartCode = Y.CDepartCode AND X.CBranchIdDepartStartDate = Y.CDepartStartDate
				where isnull(CONVERT(varchar(10), X.CTradeDate, 23), '0') + '|' + convert(varchar(10), isnull(X.CTradeNo, '0')) + '|' + convert(varchar(10), isnull(X.CDetailNo, '0'))
					not in (select isnull(CONVERT(varchar(10), K.CRequireDate, 23), '0') + '|' + convert(varchar(10), isnull(K.CTradeNo, '0')) + '|' + convert(varchar(10), isnull(K.CDetailNo, '0'))
						from TTradeDetail K where CTiDepartCode = 'EPXHEAD' and CTiDepartStartDate = '2004-01-01 00:00:00.000')
					and X.CSendTime < convert(datetime, left(CONVERT(varchar(10), getdate(), 23), 8) + '21')
			) AS A
		GROUP BY CBranchIdDepartCode, CBranchIdDepartStartDate, CBranchName
	) A
	where NotChargeCnt >= @BillCnt
	--and CBranchIdDepartCode = 'CHONGBONE'
	order by CBranchIdDepartCode

	--select * from @BillDepartList
	--select max(ROWID) from @BillDepartList

	------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	--임시테이블을 순회하며 청구데이터 생성
	--서브쿼리와 top, order by 를 이용해서 기준 금액 만큼만 청구
	--CIsBilled, CBilledTime
	------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	select @MAXID = isnull(max(ROWID), 0) from @BillDepartList
	set @ROWID = 1
	set @SMS_ROWID = 1

	IF @MAXID > 0
	BEGIN

		--청구껍데기 생성
		INSERT INTO [dbo].[TTradeInfo]
			([CRequireDate]
			,[CBranchCode]
			,[CBranchStartDate]
			,[CTradeNo]
			,[CTradeStatus]
			,[CCommonGroupCode]
			,[CCommonCode]
			,[CTradeName]
			,[CDueDatePayment]
			,[CCloseReason]
			,[CChargeType]
			,[CChargePrice]
			,[CInterestRate]
			,[CInterestDate]
			,[CInterestType]
			,[CRegDate]
			,[CRegStaffId]
			,[CApprovalStatus])
		VALUES
			(convert(char(10),getdate(),126)
			,'EPXHEAD'
			,'2004-01-01 00:00:00.000'
			,(select isnull(MAX(CTradeNo), 0) + 1 from TTradeInfo)
			,'Unpaid'
			,'FNTRADETYPE'
			,'04'
			,convert(varchar(4), YEAR(GETDATE())) + '년' + convert(varchar(2), MONTH(GETDATE())) + '월 SMS사용료'
			,convert(char(10),DATEADD(dd,14,GETDATE()),126)
			,NULL
			,NULL
			,(select SUM(BillBalance) from @BillDepartList)
			,NULL
			,NULL
			,NULL
			,getdate()
			,'general'
			,'NotDraft')

		select @MAX_CTradeNo = (select isnull(MAX(CTradeNo), 0) from TTradeInfo)

		--테이블변수 반복 처리
		WHILE @ROWID <= @MAXID
		BEGIN
			--변수에 대입
			select @CBranchIdDepartCode = CBranchIdDepartCode
				, @CBranchIdDepartStartDate = CBranchIdDepartStartDate
				, @CBranchName = CBranchName
				, @NotChargeCnt = NotChargeCnt
				, @BillPage = BillPage
				, @NowBillCnt = NowBillCnt
				, @BillBalance = BillBalance
			from @BillDepartList
			where ROWID = @ROWID

			--select *
			--from @BillDepartList
			--where ROWID = @ROWID

			--대상SMSLog 테이블 변수에 담기
			delete @SMSLog
			
			insert into @SMSLog
			select CId, CEILING(DATALENGTH(X.CContent) / 80.0) AS SMSCnt
			from TLogSMS X
			where X.CBranchIdDepartCode = @CBranchIdDepartCode and X.CBranchIdDepartStartDate = @CBranchIdDepartStartDate
				and isnull(CONVERT(varchar(10), X.CTradeDate, 23), '0') + '|' + convert(varchar(10), isnull(X.CTradeNo, '0')) + '|' + convert(varchar(10), isnull(X.CDetailNo, '0'))
					not in (select isnull(CONVERT(varchar(10), K.CRequireDate, 23), '0') + '|' + convert(varchar(10), isnull(K.CTradeNo, '0')) + '|' + convert(varchar(10), isnull(K.CDetailNo, '0'))
						from TTradeDetail K where CTiDepartCode = 'EPXHEAD' and CTiDepartStartDate = '2004-01-01 00:00:00.000'
						and CBranchCode = @CBranchIdDepartCode and CBranchStartDate = @CBranchIdDepartStartDate)
				and X.CSendTime < convert(datetime, left(CONVERT(varchar(10), getdate(), 23), 8) + '21')
			order by CId asc

			----대상SMSLog에 청구정보 입력
			select @SMS_MAXID = isnull(max(ROWID), 0) from @SMSLog

			--청구상세 생성
			INSERT INTO [dbo].[TTradeDetail]
				([CRequireDate]
				,[CTiDepartCode]
				,[CTiDepartStartDate]
				,[CTradeNo]
				,[CBranchCode]
				,[CBranchStartDate]
				,[CDetailNo]
				,[CTradeStatus]
				,[CCommonGroupCode]
				,[CCommonCode]
				,[CTradeName]
				,[CDueDatePayment]
				,[CChargePrice]
				,[CPaidPrice]
				,[CChargeInterest]
				,[CPaidInterest]
				,[CRegDate]
				,[CRegStaffId])
			VALUES
				(convert(char(10),getdate(),126)
				,'EPXHEAD'
				,'2004-01-01 00:00:00.000'
				,(select isnull(MAX(CTradeNo), 0) from TTradeInfo)
				,@CBranchIdDepartCode
				,@CBranchIdDepartStartDate
				,(select isnull(MAX(CDetailNo), 0) + 1 from TTradeDetail)
				,'Unpaid'
				,'FNTRADETYPE'
				,'04'
				,convert(varchar(4), YEAR(GETDATE())) + '년' + convert(varchar(2), MONTH(GETDATE())) + '월 SMS사용료'
				,convert(char(10),DATEADD(dd,14,GETDATE()),126)
				,@BillBalance
				,0
				,0
				,0
				,getdate()
				,'general')

			select @MAX_CDetailNo = (select isnull(MAX(CDetailNo), 0) from TTradeDetail)

			----테이블변수 반복 처리
			WHILE @SMS_ROWID <= @SMS_MAXID
			BEGIN
				IF @NowBillCnt > 0
				BEGIN
					update TLogSMS
					set CTradeDate = convert(char(10),getdate(),126)
						, CTradeNo = @MAX_CTradeNo
						, CDetailNo = @MAX_CDetailNo
					where CId = (select CId from @SMSLog where ROWID = @SMS_ROWID)
				
					SET @NowBillCnt = @NowBillCnt - (select SMSCnt from @SMSLog where ROWID = @SMS_ROWID)
				END

				--다음 행으로
				SET @SMS_ROWID = @SMS_ROWID + 1
			END

			--다음 행으로
			SET @ROWID = @ROWID + 1
		END

	END

	-- 디버깅용 코드
	-- EXEC SP_SMS_Billing
	--select * from TTradeInfo
	--select * from TTradeDetail
	--select * from TLogSMS order by CBranchIdDepartCode, CId
	--select * from TLogSMS where CBranchIdDepartCode = 'CHONGBONE' order by CBranchIdDepartCode, CId
	--select sum(CEILING(DATALENGTH(CContent) / 80.0)) AS SMSCnt from TLogSMS where CBranchIdDepartCode = 'CHONGBONE' and CDetailNo is not null
	--select sum(CEILING(DATALENGTH(CContent) / 80.0)) AS SMSCnt from TLogSMS where CBranchIdDepartCode = 'EPX0001' and CDetailNo is not null

	--delete from TTradeDetail where CTradeNo = '2'
	--delete from TTradeInfo where CTradeNo = '2'
	--update TLogSMS set CTradeDate = null, CTradeNo = null, CDetailNo = null


--트랜잭션 종료
IF @@ERROR <> 0
BEGIN
	SELECT @@ERROR
	ROLLBACK TRAN
	RETURN
END
COMMIT TRAN
SET XACT_ABORT OFF

GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE getTutorInfo

AS

BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	SELECT DISTINCT CPlanDate AS 날짜,
    (SELECT COUNT(*) FROM TTutoringPlan 
        WHERE CDepartCode = 'EPX0001'
        AND CTutorInfo = 3337
        AND CStCode <> ''
        AND CPlanDate = e.CPlanDate ) AS 콤마수,
    CASE WHEN (SELECT SUM(dcCount) FROM tbl_TutorDcHistory 
        WHERE branchCode = 'EPX0001'
        AND tutorCode = 3337
        AND dcDate = e.CPlanDate) IS NULL THEN 0 ELSE (SELECT SUM(dcCount) FROM tbl_TutorDcHistory 
        WHERE branchCode = 'EPX0001'
        AND tutorCode = 3337
        AND dcDate = e.CPlanDAte) END AS DC횟수,
    CASE WHEN (SELECT COUNT(*) FROM tbl_TutorLateHistory 
        WHERE branchCode = 'EPX0001'
        AND tutorCode = 3337
        AND lateDate = e.CPlanDate) > 0 THEN '지각' ELSE '' END AS 지각여부
	FROM TTutoringPlan e (NOLOCK)
	WHERE CStDepartCode = 'EPX0001' 
    AND CPlanDate >= '2018-09-01' AND CPlanDate <= '2018-09-30'
	 ORDER BY CPlanDate;
END

GO

-- ==================================================================
-- Author:		김길명
-- Create date: 2014.08.06
-- Description:	학생관리이력
-- Modify date: 
-- Description:
-- exec SP_STUDENT_MANAGEMENT_HISTORY @P_FACILITY = 'EPX0005', @P_STUDENT_CODE = '42085'
-- ==================================================================
CREATE PROCEDURE [dbo].[SP_STUDENT_MANAGEMENT_HISTORY]
	@P_FACILITY			VARCHAR(20) = '',	-- 지점코드
	@P_STUDENT_CODE	    VARCHAR(50) = ''	-- 학생코드
AS

DECLARE @dLoop			BIT			-- 지점이동 반복처리를 위한 변수
DECLARE @dFACILITY_CODE	VARCHAR(20)	-- 지점코드
DECLARE @dSTUDENT_CODE	VARCHAR(50)	-- 학생코드

DECLARE @dBeFACILITY	VARCHAR(20)	-- 전 지점코드 체크용

--커서용 변수
DECLARE @dCLeaveDate			DATETIME	-- 휴원일자
DECLARE @dCLeaveStatus			VARCHAR(50)	-- 휴원상태
DECLARE @dCCounselLeaveEndDate	DATETIME	-- 상담관리 종료일자
DECLARE @dCTutoringLeaveEndDate	DATETIME	-- 개별지도 종료일자
DECLARE @dCComment				VARCHAR(255)-- 휴원사유

DECLARE @dCCounselStartDate		DATETIME	-- 휴원이후 상담관리 시작일자
DECLARE @dCTutoringStartDate	DATETIME	-- 휴원이후 개별지도 시작일자
DECLARE @CCounselRegistType		VARCHAR(50)	-- 휴원이후 상담관리 등록상태
DECLARE @CTutoringRegistType	VARCHAR(50)	-- 휴원이후 상담관리 등록상태

-- 변수테이블을 이용하여 처리(※ 테스트 주의 : 임시테이블이 아니라서 데이터가 없는 경우에는 무한로딩됩니다.)
DECLARE @StudentManagementHistory TABLE
(
	CHistoryDate			DATETIME,		-- 관리일자
	CHistoryType			VARCHAR(50),	-- 내용(Newcomer, 휴원, 휴원복귀, 종료, Returning, 매니저변경, 지점이동)
	CHistoryTypeName		VARCHAR(50),	-- 내용(신규, 휴원, 휴원복귀, 종료, 복회, 매니저변경, 지점이동)
	CHistoryReason			VARCHAR(100),	-- 사유
	CCounselManagerId		VARCHAR(30),	-- 상담관리매니저Id
	CCounselManagerName		VARCHAR(50),	-- 상담관리매니저명
	CTutoringManagerId		VARCHAR(30),	-- 개별지도매니저Id
	CTutoringManagerNAme	VARCHAR(50),	-- 개별지도매니저명
	CFacilityCode			VARCHAR(20),	-- 지점코드
	CFacilityName			VARCHAR(50)		-- 지점명
)

SET NOCOUNT ON
BEGIN
	SELECT @dLoop = 0, @dFACILITY_CODE = @P_FACILITY, @dSTUDENT_CODE = @P_STUDENT_CODE
	-- 지점이동이 있으므로 반복처리하여 끝~~~~까지 따라간다.
	WHILE @dLoop = 0
		BEGIN
			-- 1.상담/개별지도 신규/복회 저장
			INSERT INTO @StudentManagementHistory
			SELECT a.CHistoryDate, 
				   a.CRegistType,
				   CASE WHEN a.CRegistType = 'Newcomer'
						THEN CASE WHEN a.CStudentCounselType = 'Counsel' THEN '상담관리신규' ELSE '개별지도신규' END 
						ELSE CASE WHEN a.CStudentCounselType = 'Counsel' THEN '상담관리복회' ELSE '개별지도복회' END 
				   END AS CHistoryTypeName,
				   '-' AS CHistoryReason,
				   CASE WHEN a.CStudentCounselType = 'Counsel' THEN b.CManagerId ELSE '-' END CCounselManagerId,
				   CASE WHEN a.CStudentCounselType = 'Counsel' THEN d.CName0 ELSE '-' END CCounselManagerName,
				   CASE WHEN a.CStudentCounselType = 'Counsel' THEN '-' ELSE b.CManagerId END CTutoringManagerId,
				   CASE WHEN a.CStudentCounselType = 'Counsel' THEN '-' ELSE d.CName0 END CTutoringManagerName,
				   a.CStdBranchCode CFacilityCode,
				   c.COpenName0 CFacilityName
			  FROM TStudentHistory a(NOLOCK)
			  LEFT JOIN TStudentManager b(NOLOCK)
				ON a.CStdBranchCode = b.CBranchCode AND a.CStdCode = b.CStudentCode AND a.CStudentCounselType = b.CManagerType AND
				   (b.CStartDate <= a.CHistoryDate AND b.CEndDate >= a.CHistoryDate)
			  LEFT JOIN TFacility c(NOLOCK)
				ON a.CStdBranchCode = c.CDepartCode
			  LEFT JOIN TStaff d(NOLOCK)
				ON b.CManagerId = d.CStaffId
			 WHERE a.CStdBranchCode      = @dFACILITY_CODE
			   AND a.CStdCode            = @dSTUDENT_CODE
			   AND a.CRegistType        IN ('Newcomer', 'Returning') -- 신규/복회

			-- 2.휴원, 휴원해제(여러건의 휴원데이터가 있을 수 있으며 휴원해제, 종료등의 결과에 따라 이력을 생성해야하므로 커서로 처리)
			-- 휴원처리 시 상담관리, 개별지도 각각 생성되며 한쪽만 등록가능하므로
			DECLARE CURSOR1 CURSOR FOR
			SELECT ISNULL(a.CLeaveDate, b.CLeaveDate) AS CLeaveDate,
				   ISNULL(a.CLeaveStatus, b.CLeaveStatus) AS CLeaveStatus, -- 휴원상태(둘이 같이 움직이니깐 하나로 뭉치기)
				   -- 시작일자가 각각 노니깐 분리
			       a.CLeaveEndDate AS CCounselLeaveEndDate,  -- 상담관리 종료일
			       b.CLeaveEndDate AS CTutoringLeaveEndDate, -- 개별지도 종료일
				   ISNULL(a.CComment, b.CComment)
			  FROM TStudentCounselLeave a(NOLOCK)
			  FULL OUTER JOIN TStudentTutoringLeave b(NOLOCK)
			    ON a.CStdBrcDptCode = b.CStdBrcDptCode AND a.CStdCode = b.CStdCode AND a.CLeaveDate = b.CLeaveDate
			 WHERE ISNULL(a.CStdBrcDptCode, b.CStdBrcDptCode) = @dFACILITY_CODE
			   AND ISNULL(a.CStdCode, b.CStdCode)             = @dSTUDENT_CODE
			 ORDER BY ISNULL(a.CLeaveDate, b.CLeaveDate)
			
			OPEN CURSOR1

			FETCH NEXT FROM CURSOR1 INTO @dCLeaveDate, @dCLeaveStatus, @dCCounselLeaveEndDate, @dCTutoringLeaveEndDate, @dCComment

			WHILE @@FETCH_STATUS = 0
				BEGIN
					-- 2.1. 일단 휴원정보 저장
					INSERT INTO @StudentManagementHistory
					SELECT @dCLeaveDate, 'Leave', '휴원', @dCComment, 
					       '-' AS CCounselManagerId,
					       '-' AS CCounselManagerName,
					       '-' AS CTutoringManagerId,
					       '-' AS CTutoringManagerName,
					       @dFACILITY_CODE,
					       c.COpenName0 CFacilityName
					  FROM TFacility c(NOLOCK)
					 WHERE c.CDepartCode = @dFACILITY_CODE
					
					--**************************************************
					-- 휴원의 상태값이 복회처리 상태이면 휴원복귀를 처리
					-- .......를 하는게 맞지만 현재 데이터가 꼬여 있으니
					-- 노가다 다이렉트 보정 이후에 사용(아님 이전꺼 무시)
					----------------------------------------------------
					-- 상담과 개별지도 각각의 시작일이 다를 경우가 발생
					-- 종료일이 같으면 1Row 다르면 2Row 생성
					--**************************************************
					IF @dCLeaveStatus = 'ReInstate'
						-- 복귀한 경우 휴원복귀 저장
						BEGIN
							
							IF @dCCounselLeaveEndDate IS NOT NULL
								-- 상담관리 휴원정보가 있으면
								BEGIN
									-- 상담관리의 휴원복귀 일자, 상태값
									SELECT TOP 1 @dCCounselStartDate = CStartDate,  @CCounselRegistType = CRegistType
									  FROM TStudentCounsel(NOLOCK)
									 WHERE CScDepartCode = @dFACILITY_CODE
									   AND CScCode       = @dSTUDENT_CODE
									   AND CStartDate    > @dCCounselLeaveEndDate -- 휴원종료일보다 이후 등록데이터
									 ORDER BY CStartDate -- 조건으로 걸면 다른게 튀어나올 수 있으니 정렬해서 1번째 행값으로 처리
								END
							
							IF @dCTutoringLeaveEndDate IS NOT NULL
								-- 개별지도 휴원정보가 있으면
								BEGIN
									-- 개별지도의 휴원복귀 일자, 상태값
									SELECT TOP 1 @dCTutoringStartDate = CStartDate, @CTutoringRegistType = CRegistType
									  FROM TStudentTutoring(NOLOCK)
									 WHERE CStdDepartCode = @dFACILITY_CODE
									   AND CStdCode       = @dSTUDENT_CODE
									   AND CStartDate    > @dCTutoringLeaveEndDate -- 휴원종료일보다 이후 등록데이터
									 ORDER BY CStartDate -- 조건으로 걸면 다른게 튀어나올 수 있으니 정렬해서 1번째 행값으로 처리
								END

							-- 상담/개별 둘다 휴원복귀이고 시작일이 같으면 1 Row 생성하고 아니면 각각 처리(1~2Row 생성)
							IF @dCCounselLeaveEndDate IS NOT NULL AND @dCTutoringLeaveEndDate IS NOT NULL AND
							   @dCCounselStartDate = @dCTutoringStartDate
								BEGIN
									-- 2.2. 휴원복귀 저장(복귀하면서 매니저 변경가능하므로 한줄로 나오는게 낫겠지만 사유가 추가되었으므로 따로 나오게...처리함)
									INSERT INTO @StudentManagementHistory
									SELECT @dCCounselStartDate, 'ReInstate', '휴원복귀', '-', 
										   '-' AS CCounselManagerId,
										   '-' AS CCounselManagerName,
										   '-' AS CTutoringManagerId,
										   '-' AS CTutoringManagerName,
										   @dFACILITY_CODE,
										   c.COpenName0 CFacilityName
									  FROM TFacility c(NOLOCK)
									 WHERE c.CDepartCode = @dFACILITY_CODE
								END
							ELSE
								BEGIN
									IF @dCCounselLeaveEndDate IS NOT NULL
										-- 상담관리 휴원복귀 있으면
										BEGIN
											-- 2.3. 상담관리 휴원복귀
											INSERT INTO @StudentManagementHistory
											SELECT @dCCounselStartDate, 'ReInstate', '상담관리휴원복귀', '-', 
												   '-' AS CCounselManagerId,
												   '-' AS CCounselManagerName,
												   '-' AS CTutoringManagerId,
												   '-' AS CTutoringManagerName,
												   @dFACILITY_CODE,
												   c.COpenName0 CFacilityName
											  FROM TFacility c(NOLOCK)
											 WHERE c.CDepartCode = @dFACILITY_CODE
										END

									IF @dCTutoringLeaveEndDate IS NOT NULL
										-- 개별지도 휴원정보가 있으면
										BEGIN
											-- 2.4. 개별지도 휴원복귀
											INSERT INTO @StudentManagementHistory
											SELECT @dCTutoringStartDate, 'ReInstate', '개별지도휴원복귀', '-', 
												   '-' AS CCounselManagerId,
												   '-' AS CCounselManagerName,
												   '-' AS CTutoringManagerId,
												   '-' AS CTutoringManagerName,
												   @dFACILITY_CODE,
												   c.COpenName0 CFacilityName
											  FROM TFacility c(NOLOCK)
											 WHERE c.CDepartCode = @dFACILITY_CODE
										END

								END
						END

					FETCH NEXT FROM CURSOR1 INTO @dCLeaveDate, @dCLeaveStatus, @dCCounselLeaveEndDate, @dCTutoringLeaveEndDate, @dCComment
				END
			CLOSE CURSOR1
			DEALLOCATE CURSOR1

			-- 3.매니저 변경
			INSERT INTO @StudentManagementHistory
			SELECT a.CStartDate,
				   'ChangeManager' AS CHistoryType,
			       CASE WHEN a.CManagerType = 'Counsel' THEN '상담관리 매니저변경' ELSE '개별지도 매니저변경' END AS CHistoryTypeName,
				   a.CComment AS CHistoryReason,
				   CASE WHEN a.CManagerType = 'Counsel' THEN a.CManagerId ELSE '-' END CCounselManagerId,
				   CASE WHEN a.CManagerType = 'Counsel' THEN d.CName0 ELSE '-' END CCounselManagerName,
				   CASE WHEN a.CManagerType = 'Counsel' THEN '-' ELSE a.CManagerId END CTutoringManagerId,
				   CASE WHEN a.CManagerType = 'Counsel' THEN '-' ELSE d.CName0 END CTutoringManagerName,
				   a.CBranchCode CFacilityCode,
				   c.COpenName0 CFacilityName
			  FROM TStudentManager a(NOLOCK)
			  LEFT JOIN TFacility c(NOLOCK)
				ON a.CBranchCode = c.CDepartCode
			  LEFT JOIN TStaff d(NOLOCK)
				ON a.CManagerId = d.CStaffId
			 WHERE a.CBranchCode  = @dFACILITY_CODE
			   AND a.CStudentCode = @dSTUDENT_CODE
			   -- 신규/복회와 같은일자의 매니저 이력은 제외(신규, 복회시에 학생매니저이력에도 저장되며 그 데이터는 신규, 복회에서 표시되므로)
			   AND NOT EXISTS (
			                   SELECT 1 
			                     FROM @StudentManagementHistory
								WHERE CHistoryDate = a.CStartDate 
								  AND CHistoryType IN ('Newcomer', 'Returning')
							  )
			 --SELECT * FROM TStudentManager

			-- 4.종료(종료사유 보정해야 됨)
			INSERT INTO @StudentManagementHistory
			SELECT a.CHistoryDate, 
				   a.CRegistType,
				   CASE WHEN a.CStudentCounselType = 'Counsel' THEN '상담관리종료' ELSE '개별지도종료' END AS CHistoryTypeName,
				   '-' AS CHistoryReason,
				   '-' AS CCounselManagerId,
				   '-' AS CCounselManagerName,
				   '-' AS CTutoringManagerId,
				   '-' AS CTutoringManagerName,
				   a.CStdBranchCode CFacilityCode,
				   c.COpenName0 CFacilityName
				FROM TStudentHistory a(NOLOCK)
				LEFT JOIN TFacility c(NOLOCK)
				ON a.CStdBranchCode = c.CDepartCode
				WHERE a.CStdBranchCode    = @dFACILITY_CODE
				AND a.CStdCode            = @dSTUDENT_CODE
				AND a.CRegistType         = 'Retire' -- 종료
			
			--***********************
			-- 지점이동 학생여부 판단
			--***********************
			SELECT @dBeFACILITY = @dFACILITY_CODE, @dFACILITY_CODE = COldBranchCode, @dSTUDENT_CODE = COldCode
			  FROM TStudent(NOLOCK)
			 WHERE CBranchCode = @dFACILITY_CODE
			   AND CCode	   = @dSTUDENT_CODE
			-- 결과값이 없으면 반복문 종료를 위해 값 변경(BREAK, CONTINUE를 쓰려고 했으나 ㅎㅎ 고냥 단순하게)
			IF @dFACILITY_CODE IS NULL
				SET @dLoop = 1
			ELSE
				BEGIN
					-- 전 지점정보가 있을 경우 현재 지점의 신규 건의 사유에 '지점이동' 업데이트
					UPDATE @StudentManagementHistory SET
						CHistoryReason = '지점이동'
					 WHERE CFacilityCode = @dBeFACILITY
					   AND CHistoryType  = 'Newcomer'
				END
	
		END
	
	-- 결과값 리턴
	SELECT * FROM @StudentManagementHistory ORDER BY CHistoryDate
	RETURN
END

GO

--/*******************************************************************************************************
--/* 단위업무 : 샘플
--/* 작 성 자 : 김 길 명
--/* 작 성 일 : 2014.03.08
--/* 작성내용 : 
--/* 수 정 일 :	
--/* 수 정 자 :	
--/* 수정내용 : [TTestInfo]
--/* 비    고 :	
--/* 실행코드 : EXEC SP_TTest_Sample 33939
--/*******************************************************************************************************
CREATE PROCEDURE [dbo].[SP_TTest_Sample](  
	@pTestNo			INT
)                                                                                      
AS                                                                                                  
BEGIN 

--설문
SELECT CStarNo, CName, CAnswerSum, CAverage, CStdDeviation, CStdValue,
      CASE WHEN CStdValue < 68 THEN 1
	       WHEN CStdValue > 133 THEN 99
		   ELSE CValue
	  END CValue
  FROM 
		(
		SELECT T1.CStarNo,  T2.CName, T1.CAnswerSum, T2.CAverage, T2.CStdDeviation,
			   ROUND((T1.CAnswerSum - T2.CAverage) / T2.CStdDeviation * 15 + 100, 0) AS CStdValue
		  FROM
				(
				select a.CStudentGrade, c.CStarNo, 
					   SUM( CASE WHEN C.CDirection = 0 THEN 5 - CONVERT(int, b.CAnswer)
							ELSE CONVERT(int, b.CAnswer)
							END 
					   ) AS CAnswerSum
				  from TTestInfo a
				  join TTestSurvey b on a.CNo = b.CNo
				  join TSurveyQuestion c on b.CQuestionNo = c.CNo
				 where a.cno = @pTestNo
				 group by a.CStudentGrade, c.CStarNo
				) T1
		  LEFT JOIN TTestStar T2
			ON T1.CStudentGrade = T2.CGrade and T1.CStarNo = T2.CNo
		) main 
	LEFT JOIN TTestRate score ON main.CStdValue = score.CStdScore
 ORDER BY main.CStarNo


--CT
SELECT CNo AS CChampNo, CSubject, CParameter, VALUE, CAverage, CStdDeviation, CStdValue,
      CASE WHEN CStdValue < 68 THEN 1
	       WHEN CStdValue > 133 THEN 99
		   ELSE CValue
	  END CValue
  FROM 
		(
		SELECT T1.CCtGrade, 
			   T1.CCtPeriod,
			   T1.CNo, 
			   T1.VALUE,
			   T2.CSubject, T2.CParameter, T2.CAverage, T2.CStdDeviation,
			   ROUND((T1.VALUE - T2.CAverage) / T2.CStdDeviation * 15 + 100, 0) AS CStdValue
		  FROM 
				(
				select a.CCtGrade, a.CCtPeriod, a.CCtRevision, c.CSumNo as Cno, c.CQuestion, '' CHAMP,
						sum( case when b.CAnswer = c.CCorrect then c.CValueC + c.CValueH + c.CValueA + c.CValueM + c.CValueP
							else 0
							end
						) as VALUE
					from TTestInfo a
					join TTestCT b on a.CNo = b.CNo
					join TCTQuestion c on b.CQuestionNo = c.CNo and a.CCtRevision=c.CCtRevision and a.CCtPeriod=c.CCtPeriod
					where a.cno = @pTestNo
					group by a.CCtGrade, a.CCtPeriod, a.CCtRevision, c.CSumNo, c.CQuestion
				union all
				select a.CCtGrade, a.CCtPeriod, a.CCtRevision, c.CSubNo as CCHAMPNo, c.CQuestion, '' CHAMP,
					sum( case when b.CAnswer = c.CCorrect then c.CValueC + c.CValueH + c.CValueA + c.CValueM + c.CValueP
						else 0
						end
					) as VALUE
				from TTestInfo a
				join TTestCT b on a.CNo = b.CNo
				join TCTQuestion c on b.CQuestionNo = c.CNo and a.CCtRevision=c.CCtRevision and a.CCtPeriod=c.CCtPeriod
				where a.cno = @pTestNo
				and c.CDevision is not null -- 기초문장 제외
				group by a.CCtGrade, a.CCtPeriod, a.CCtRevision, c.CSubNo, c.CQuestion
				union
				SELECT CCtGrade, CCtPeriod, CCtRevision, ROW_NUMBER() OVER (ORDER BY cCHAMPNO) + cCHAMPNO AS CNO, 
						CQuestion, CHAMP, VALUE
					FROM
				(
				select a.CCtGrade, a.CCtPeriod, a.CCtRevision, c.cCHAMPNO, c.CQuestion,
						sum( case when b.CAnswer = c.CCorrect then c.CValueC else 0 end) as C,
						sum( case when b.CAnswer = c.CCorrect then c.CValueH else 0 end) as H,
						sum( case when b.CAnswer = c.CCorrect then c.CValueA else 0 end) as A,
						sum( case when b.CAnswer = c.CCorrect then c.CValueM else 0 end) as M,
						sum( case when b.CAnswer = c.CCorrect then c.CValueP else 0 end) as P
					from TTestInfo a
					join TTestCT b on a.CNo = b.CNo
					join TCTQuestion c on b.CQuestionNo = c.CNo and a.CCtRevision=c.CCtRevision and a.CCtPeriod=c.CCtPeriod
					where a.cno = @pTestNo
					and c.CQuestion <> '기초문장이해'
					group by a.CCtGrade, a.CCtPeriod, a.CCtRevision, c.cCHAMPNO, c.CQuestion
				) AAA 
				UNPIVOT 
				( [VALUE] for [CHAMP] in ([C], [H], [A], [M], [P]) ) as unpvt
			) T1 
		 LEFT JOIN TTestChamp T2
		   ON T1.CCtGrade = T2.CGrade AND T1.CCtPeriod = T2.CCtPeriod AND T1.Cno = T2.CQuestionNo AND T1.CCtRevision = T2.CCtRevision
		) main
		LEFT JOIN TTestRate score ON main.CStdValue = score.CStdScore
ORDER BY CNo

END

GO


/*
	등록된 강의 리스트를 반환 (CardView)
*/

CREATE PROCEDURE [dbo].[SP_OneCur_Lecture_List](

	@target_director_yn char(1) = '',
	@target_tmanager_yn char(1) = '',
	@target_cmanager_yn char(1) = '',
	@head_recommend_yn char(1) = ''
	)
AS

	SELECT 
	a.lecture_idx,
	a.title as '제목',
	(case 
			when b.outside_teacher_yn = 'Y' then b.outside_teacher_name
			else (select CName0 from TStaff (NOLOCK) where CStaffId = b.staff_Id) 
	end) as '이름',
	(select CName0 from TStaffLevel (NOLOCK) where CLevelCode = c.CMasterLevelCode) as '직급',
		(case
			when b.outside_teacher_yn = 'Y' then '외부강사'
			else (select COpenName0 from TFacility (NOLOCK) where CDepartCode = c.CDEpartCode)
	end) as '지점명',
	(select count(*) from otbl_Lecture_attend_teacher (NOLOCK) where lecture_id = a.lecture_idx) as '강사인원수',
	a.total_credit as '총학점수',
	a.target_director_yn,
	a.target_tmanager_yn, 
	a.target_cmanager_yn,
	a.limit_student as '제한인원수',
	(select count(*) from otbl_Lecture_attend_student (NOLOCK) where del_yn = 'N' and lecture_id = a.lecture_idx) as '신청인원수',
	a.lecture_closed_yn,
	a.lecture_image,
	a.lecture_reg_yn

	FROM otbl_Lecture a (NOLOCK)
		LEFT JOIN otbl_Reg_teachers b (NOLOCK) ON a.main_teacher_id = b.teacher_idx
	   left join TDepartNowMember c (NOLOCK) on c.CStaffid = b.staff_id AND c.CMain = 1

	WHERE 1=1
		AND a.del_yn='N'
		AND a.temp_save_yn = 'N'
		
		AND
		(
			(@target_director_yn <> '' AND a.target_director_yn = @target_director_yn)
			OR
			(@target_tmanager_yn <> '' AND a.target_tmanager_yn = @target_tmanager_yn)
			OR
			(@target_cmanager_yn <> '' AND a.target_cmanager_yn = @target_cmanager_yn)
			OR
			(@head_recommend_yn <> '' AND a.head_recommend_yn = @head_recommend_yn)
			OR
			(@target_director_yn='' AND @target_tmanager_yn='' AND @target_cmanager_yn='' AND @head_recommend_yn='')
		)

GO

-- ==================================================================
-- Author:		김길명
-- Create date: 2014-05-13
-- Description:	8대 지표 생성 및 조회
--              화면 첫 로딩 시 지점별 지표를 생성하고 그 이후는 조회
--              분기별, 월별 생성(오늘기준 - 1년치 만들기)
--              상세지표의 셀렉트는 파라메터로 받아 처리하려다 중복코딩에 동일변경의 유지비용이 과다하게 처리되나,
--              향후 현황이 각각 분리되어 형태가 조금씩 다를 수도 있다는게 지금현재 소견이므로 일단 중복처리 해뿌려~~~
-- 2014.05.20 : 광고투입량, 문의수, 등록상담수, 상담성공율 등등...분기로 조회 시 분기 합계가 아닌 월 합계를 그냥 분기로 나눠서(분기평균)보여주는걸로 처리 
--              용어의 의미로 봤을 땐 좀 거시기 하지만 그렇다니깐 일단 그렇게....괜히 빡시게 맹글었네.. ㅡ,.ㅡ
--              결론은 각 월별 집계 후 지점 시작일자가 큰 경우에는 데이터가 없더라도 0값으로 생성을 해둬야 해..(데이터 표시를 위해 값은 null)
-- 2014.06.10 :(김길명) 지점코드 부여 규칙이 깨짐(EPX0XXX => EPXXXXX)..그래서 직영, 지점 및 본사를 구분하는 값을 강제로 제외시킴
-- 2014.06.24 :(김길명) 개인랭킹을 보여줘야 하는데 이게 쿼리로 될게 아니네~~ 집계를 해둬야 하네... 후~~ 그러니 지점별로 집계할 때 새벽에 스케쥴로 돌아가니깐 여기서 처리
--             8대지표 집계 하듯이 똑같이 월별, 분기별 데이터를 구해놓도록 합니다....아놔~~~!!!
-- exec SP_EIGHT_INDICATOR @pTYPE = 'C1'
-- exec SP_EIGHT_INDICATOR @pTYPE = 'S3', @P_FACILITY = 'EPX0001', @P_PERIOD2 = '2', @P_START_DATE = '2013/01', @P_END_DATE = '2014/05'
-- ==================================================================
CREATE PROCEDURE [dbo].[SP_EIGHT_INDICATOR] 
	@pTYPE		  VARCHAR(3)  = '',	-- 구분(생성, 조회(S1~S9 : S9는 8대 종합))
	@P_FACILITY   VARCHAR(20) = '',	-- 지점
	@P_YEAR		  VARCHAR(4)  = '',	-- 기준년도
	@P_PERIOD1    VARCHAR(1)  = '',	-- 분기구분(신학기-1, 1학기-2, 여름방학-3, 2학기-4, 겨울방학-5)
	@P_PERIOD2    VARCHAR(1)  = '',	-- 분기구분(5분기별-1,  월별-2)
	@P_START_DATE VARCHAR(7)  = '', -- 시작월(YYYY/MM)
	@P_END_DATE   VARCHAR(7)  = '', -- 종료월(YYYY/MM)
	@P_MANAGER_CODE VARCHAR(50) = ''  -- 개인랭킹조회를 위한 직원ID
AS

SET NOCOUNT ON

DECLARE @dStartDate DATETIME
DECLARE @dEndDate   DATETIME

DECLARE @dLoopDate  DATETIME

DECLARE @dRank      INT

DECLARE @dCFlag		VARCHAR(1)

DECLARE @dYear	    VARCHAR(4)
DECLARE @dPeriod	VARCHAR(1)

DECLARE @cCYearPeriod	VARCHAR(5)
DECLARE @cCFlag			VARCHAR(1)
DECLARE @cCClass		VARCHAR(5)

DECLARE @dStartPeriod VARCHAR(5)
DECLARE @dEndPeriod	VARCHAR(5)
-- 지표상세에서 분기별로 조회할 경우 검색조건 선 처리(8대지표에서 쓰이는데 일일히 만들면 너무 버겁잖아)
IF @P_PERIOD2 = '1' -- 5분기별 처리일 때
	BEGIN
		SELECT @dStartPeriod = CASE WHEN DATEPART(mm, CONVERT(DATETIME, REPLACE(@P_START_DATE, '/', '') + '01')) = 1 THEN CONVERT(VARCHAR(4), CONVERT(INT, LEFT(@P_START_DATE, 4)) - 1)
							   ELSE LEFT(@P_START_DATE, 4) END +
							   CASE DATEPART(mm, CONVERT(DATETIME, REPLACE(@P_START_DATE, '/', '') + '01'))
								WHEN  2 THEN '1' WHEN  3 THEN '1' WHEN 4 THEN '1'
								WHEN  5 THEN '2' WHEN  6 THEN '2'
								WHEN  7 THEN '3' WHEN  8 THEN '3'
								WHEN  9 THEN '4' WHEN 10 THEN '4' WHEN 11 THEN '4'
								WHEN 12 THEN '5' WHEN  1 THEN '5'
							 END,
			   @dEndPeriod = CASE WHEN DATEPART(mm, CONVERT(DATETIME, REPLACE(@P_END_DATE, '/', '') + '01')) = 1 THEN CONVERT(VARCHAR(4), CONVERT(INT, LEFT(@P_END_DATE, 4)) - 1)
							 ELSE LEFT(@P_END_DATE, 4) END +
							 CASE DATEPART(mm, CONVERT(DATETIME, REPLACE(@P_END_DATE, '/', '') + '01'))
								WHEN  2 THEN '1' WHEN  3 THEN '1' WHEN 4 THEN '1'
								WHEN  5 THEN '2' WHEN  6 THEN '2'
								WHEN  7 THEN '3' WHEN  8 THEN '3'
								WHEN  9 THEN '4' WHEN 10 THEN '4' WHEN 11 THEN '4'
								WHEN 12 THEN '5' WHEN  1 THEN '5'
							 END
	END

IF      @pTYPE = 'C1' GOTO C1_RTN   --생성루틴    
ELSE	
	BEGIN
		IF @pTYPE = 'S1' OR @pTYPE = 'S2' OR @pTYPE = 'S3' OR @pTYPE = 'S4' OR @pTYPE = 'S5' OR @pTYPE = 'S6' OR @pTYPE = 'S7' OR @pTYPE = 'S8'
			BEGIN
				-- (1.광고투입량, 2.등록문의수, 3.등록상담수, 4.상담성공율, 5.6개월이탈율, 6.월총매출액, 7.월평균콤마수, 8.월평균순이익)
				SET @dCFlag = RIGHT(@pTYPE, 1) 
				GOTO S1_RTN   --조회
			END
		ELSE IF @pTYPE = 'S9' 
			BEGIN 
				GOTO S9_RTN   --8대지표 종합
				RETURN
			END
		ELSE IF @pTYPE = 'S11' OR @pTYPE = 'S12' OR @pTYPE = 'S13' OR @pTYPE = 'S14'
			BEGIN
				SET @dCFlag = RIGHT(@pTYPE, 1) 
				GOTO S2_RTN   --조회
			END
		ELSE RETURN
	END
--********************************************************************
-- 8대지표, 상세지표 조회
-- 컬럼 : 기준기간, 등급, 나의지수(값), 전국평균, S~D평균, 전년도지수(값)
--********************************************************************
--조회
S1_RTN:
BEGIN
	-- 분기별인지, 월별인지 구분에 따라 쿼리 조건이 달라짐
	IF @P_PERIOD2 = '1'
		-- 5분기별 처리
		BEGIN
			SELECT LEFT(A.CYearPeriod, 4) +
				   CASE RIGHT(A.CYearPeriod, 1) 
						WHEN '1' THEN '년 신학기'
						WHEN '2' THEN '년 1학기'
						WHEN '3' THEN '년 여름방학'
						WHEN '4' THEN '년 2학기'
						WHEN '5' THEN '년 겨울방학'
				   END AS CFirstDate,
				   A.CDepartCode, A.CClass, A.CValue, A.CTotal_Avg, A.CS_Avg, A.CA_Avg, A.CB_Avg, A.CC_Avg, A.CD_Avg, B.CBeforeValue
			  FROM TEightIndicatorPeriod A(NOLOCK)
			  LEFT JOIN (
						-- 검색조건은 과거분기, 컬럼은 미래분기로 변경해서 조인
						SELECT CDepartCode, 
							   CONVERT(VARCHAR(4), CONVERT(INT, LEFT(CYearPeriod, 4)) + 1) + RIGHT(CYearPeriod, 1) AS CYearPeriod, 
							   CValue AS CBeforeValue
						  FROM TEightIndicatorPeriod (NOLOCK)
						 WHERE CDepartCode = @P_FACILITY
						   AND CFlag       = @dCFlag
						   AND CYearPeriod >= CONVERT(VARCHAR(4), CONVERT(INT, LEFT(@dStartPeriod, 4)) + 1) + RIGHT(@dStartPeriod, 1)
						   AND CYearPeriod <= CONVERT(VARCHAR(4), CONVERT(INT, LEFT(@dEndPeriod, 4))   + 1) + RIGHT(@dEndPeriod,   1)
						) B ON A.CDepartCode = B.CDepartCode AND A.CYearPeriod = B.CYearPeriod
			 WHERE A.CDepartCode = @P_FACILITY
			   AND A.CFlag       = @dCFlag
			   AND A.CYearPeriod >= @dStartPeriod
			   AND A.CYearPeriod <= @dEndPeriod
			 ORDER BY A.CYearPeriod
		END
	ELSE
		-- 월별 처리
		BEGIN
			SELECT LEFT(CONVERT(VARCHAR(10), A.CFirstDate, 111), 7) AS CFirstDate,
				   A.CDepartCode, A.CClass, A.CValue, A.CTotal_Avg, A.CS_Avg, A.CA_Avg, A.CB_Avg, A.CC_Avg, A.CD_Avg, B.CBeforeValue
			  FROM TEightIndicator A(NOLOCK)
			  LEFT JOIN (
						-- 검색조건은 과거 -12개월 처리하고 컬럼은 +12개월로 처리해서 조인
						SELECT CDepartCode, 
							   DATEADD(Month, 12, CFirstDate) - (day(CFirstDate)-1) AS CFirstDate, 
							   CValue AS CBeforeValue
						  FROM TEightIndicator (NOLOCK)
						 WHERE CDepartCode = @P_FACILITY
						   AND CFlag       = @dCFlag
						   AND CFirstDate >= DATEADD(Month, -12, CONVERT(DATETIME, REPLACE(@P_START_DATE, '/', '') + '01')) - (day(CONVERT(DATETIME, REPLACE(@P_START_DATE, '/', '') + '01'))-1)
						   AND CFirstDate <= DATEADD(Month, -12, CONVERT(DATETIME, REPLACE(@P_END_DATE,   '/', '') + '01')) - (day(CONVERT(DATETIME, REPLACE(@P_END_DATE,   '/', '') + '01'))-1)
						) B ON A.CDepartCode = B.CDepartCode AND A.CFirstDate = B.CFirstDate
			 WHERE A.CDepartCode = @P_FACILITY
			   AND A.CFlag       = @dCFlag
			   AND A.CFirstDate >= CONVERT(DATETIME, REPLACE(@P_START_DATE, '/', '') + '01')
			   AND A.CFirstDate <= CONVERT(DATETIME, REPLACE(@P_END_DATE,   '/', '') + '01')
			 ORDER BY CFirstDate
		END
	  
	RETURN

END

--********************************************************************
-- 개인별 랭킹 조회
-- 컬럼 : 기준기간, 등급, 나의지수(값), 전국평균, S~D평균, 전년도지수(값)
--********************************************************************
--조회
S2_RTN:
BEGIN
	-- 분기별인지, 월별인지 구분에 따라 쿼리 조건이 달라짐
	IF @P_PERIOD2 = '1'
		-- 5분기별 처리
		BEGIN
			SELECT LEFT(A.CYearPeriod, 4) +
				   CASE RIGHT(A.CYearPeriod, 1) 
						WHEN '1' THEN '년 신학기'
						WHEN '2' THEN '년 1학기'
						WHEN '3' THEN '년 여름방학'
						WHEN '4' THEN '년 2학기'
						WHEN '5' THEN '년 겨울방학'
				   END AS CFirstDate,
				   A.CManagerCode, A.CClass, A.CValue, A.CTotal_Avg, A.CS_Avg, A.CA_Avg, A.CB_Avg, A.CC_Avg, A.CD_Avg, B.CBeforeValue
			  FROM TPersonalRankPeriod A(NOLOCK)
			  LEFT JOIN (
						-- 검색조건은 과거분기, 컬럼은 미래분기로 변경해서 조인
						SELECT CManagerCode, 
							   CONVERT(VARCHAR(4), CONVERT(INT, LEFT(CYearPeriod, 4)) + 1) + RIGHT(CYearPeriod, 1) AS CYearPeriod, 
							   CValue AS CBeforeValue
						  FROM TPersonalRankPeriod (NOLOCK)
						 WHERE CManagerCode = @P_MANAGER_CODE
						   AND CFlag       = @dCFlag
						   AND CYearPeriod >= CONVERT(VARCHAR(4), CONVERT(INT, LEFT(@dStartPeriod, 4)) + 1) + RIGHT(@dStartPeriod, 1)
						   AND CYearPeriod <= CONVERT(VARCHAR(4), CONVERT(INT, LEFT(@dEndPeriod, 4))   + 1) + RIGHT(@dEndPeriod,   1)
						) B ON A.CManagerCode = B.CManagerCode AND A.CYearPeriod = B.CYearPeriod
			 WHERE A.CManagerCode = @P_MANAGER_CODE
			   AND A.CFlag       = @dCFlag
			   AND A.CYearPeriod >= @dStartPeriod
			   AND A.CYearPeriod <= @dEndPeriod
			 ORDER BY A.CYearPeriod
		END
	ELSE
		-- 월별 처리
		BEGIN
			SELECT LEFT(CONVERT(VARCHAR(10), A.CFirstDate, 111), 7) AS CFirstDate,
				   A.CManagerCode, A.CClass, A.CValue, A.CTotal_Avg, A.CS_Avg, A.CA_Avg, A.CB_Avg, A.CC_Avg, A.CD_Avg, B.CBeforeValue
			  FROM TPersonalRank A(NOLOCK)
			  LEFT JOIN (
						-- 검색조건은 과거 -12개월 처리하고 컬럼은 +12개월로 처리해서 조인
						SELECT CManagerCode, 
							   DATEADD(Month, 12, CFirstDate) - (day(CFirstDate)-1) AS CFirstDate, 
							   CValue AS CBeforeValue
						  FROM TPersonalRank (NOLOCK)
						 WHERE CManagerCode = @P_MANAGER_CODE
						   AND CFlag        = @dCFlag
						   AND CFirstDate  >= DATEADD(Month, -12, CONVERT(DATETIME, REPLACE(@P_START_DATE, '/', '') + '01')) - (day(CONVERT(DATETIME, REPLACE(@P_START_DATE, '/', '') + '01'))-1)
						   AND CFirstDate  <= DATEADD(Month, -12, CONVERT(DATETIME, REPLACE(@P_END_DATE,   '/', '') + '01')) - (day(CONVERT(DATETIME, REPLACE(@P_END_DATE,   '/', '') + '01'))-1)
						) B ON A.CManagerCode = B.CManagerCode AND A.CFirstDate = B.CFirstDate
			 WHERE A.CManagerCode = @P_MANAGER_CODE
			   AND A.CFlag        = @dCFlag
			   AND A.CFirstDate  >= CONVERT(DATETIME, REPLACE(@P_START_DATE, '/', '') + '01')
			   AND A.CFirstDate  <= CONVERT(DATETIME, REPLACE(@P_END_DATE,   '/', '') + '01')
			 ORDER BY CFirstDate
		END

	RETURN
END

--조회
--분기별 조회만 존재
S9_RTN:
BEGIN

	SELECT
		CFirstDate,
		MAX(CASE CFlag WHEN '1' THEN CClass ELSE '' END) value1,
		MAX(CASE CFlag WHEN '2' THEN CClass ELSE '' END) value2,
		MAX(CASE CFlag WHEN '3' THEN CClass ELSE '' END) value3,
		MAX(CASE CFlag WHEN '4' THEN CClass ELSE '' END) value4,
		MAX(CASE CFlag WHEN '5' THEN CClass ELSE '' END) value5,
		MAX(CASE CFlag WHEN '6' THEN CClass ELSE '' END) value6,
		MAX(CASE CFlag WHEN '7' THEN CClass ELSE '' END) value7,
		MAX(CASE CFlag WHEN '8' THEN CClass ELSE '' END) value8
	FROM (
		SELECT 
			LEFT(A.CYearPeriod, 4) +
			CASE RIGHT(A.CYearPeriod, 1) 
				WHEN '1' THEN '년 신학기'
				WHEN '2' THEN '년 1학기'
				WHEN '3' THEN '년 여름방학'
				WHEN '4' THEN '년 2학기'
				WHEN '5' THEN '년 겨울방학'
			END AS CFirstDate,
			* 
		FROM TEightIndicatorPeriod A(NOLOCK)
		WHERE CDepartCode=@P_FACILITY
			and CYearPeriod = @P_YEAR+@P_PERIOD1
	) X
	GROUP BY CFirstDate
	
	RETURN
END

C1_RTN:    
/**
8대지표, 상세지표 생성
 : 5분기별, 월별 오늘일자를 기준으로 생성처리 한다.
 : 혹 이전데이터를 다시 생성해야하믄 수동으로 해주삼~~~
**/
BEGIN
	-- 오늘기준 첫날 구하기
	SELECT @dEndDate  = CONVERT(VARCHAR(10), GETDATE())
	SELECT @dEndDate  = DATEADD(Day, -(Day(@dEndDate)-1), @dEndDate)
	-- 오늘기준 13개월 전 첫날 구하기
--	SELECT @dStartDate = DATEADD(Month, -12, @dEndDate) - (day(@dEndDate)-1)
	-- 오늘기준 2개월의 데이터 산출
	SELECT @dStartDate = DATEADD(Month, -11, @dEndDate) - (day(@dEndDate)-1)

--/*	
	-- 집계데이터 삭제
	DELETE FROM TEightIndicator WHERE CFirstDate >= @dStartDate

	-- 1.광고투입량 수집
	-- 특이사항 : 여러달에 걸쳐서 홍보내역이 있으므로 반복문을 사용해서 월별 카운팅 생성
	-- 2014.05.20 : 카운팅이 아닌 (제작비용 + 배포비용) 월 합계
	SET @dCFlag = '1'
	SET @dLoopDate = @dStartDate
	WHILE @dEndDate >= @dLoopDate
		BEGIN

			INSERT INTO TEightIndicator
           (CDepartCode ,CFirstDate ,CFlag ,CValue ,CRegist_Count ,CTotal_Count ,CClass ,CTotal_Avg ,CS_Avg ,CA_Avg ,CB_Avg ,CC_Avg ,CD_Avg ,CF_Avg ,CDetail_Leave_Rate) 
			SELECT CPromoDepartCode, @dLoopDate, @dCFlag, 
				   SUM(ISNULL(CMakeCost, 0) + ISNULL(CDistributeCost, 0)),
				   0, 0, '', 0, 0, 0, 0, 0, 0, 0, 0 -- 값, 전체(%에서 사용), 등급, 전국평균, S평균, A평균, B평균, C평균, D평균, F평균, 상세사용이탈율
			  FROM TPromoEvent(NOLOCK)
			 WHERE LEFT(CONVERT(VARCHAR(10), @dLoopDate, 112), 6) BETWEEN LEFT(CONVERT(VARCHAR(10), CStartDate, 112), 6) AND LEFT(CONVERT(VARCHAR(10), CEndDate, 112), 6)
			   AND CPromoDepartCode like 'EPX%'
			   -- 2014.06.10 수정내용 추가
			   AND CPromoDepartCode not in ('EPXBRANCH','EPXDIRECT','EPXHEAD')
			 GROUP BY CPromoDepartCode

			-- 랭킹, 등급산정(2가지 방식), 월별총합 저장
			IF @@ROWCOUNT > 0
				BEGIN
					-- 랭킹
					-- DENSE_RANK()사용안함 : 같은 등급을 가지면 넘긴다.
					UPDATE A SET
						A.CClass = B.CClass
					  FROM TEightIndicator A 
					  LEFT JOIN (
								SELECT CDepartCode, RANK() OVER (ORDER BY CValue DESC) AS CClass
								  FROM TEightIndicator(NOLOCK)
								 WHERE CFirstDate = @dLoopDate
								   AND CFlag = @dCFlag
								) B ON A.CDepartCode = B.CDepartCode
					WHERE A.CFirstDate = @dLoopDate
					  AND A.CFlag = @dCFlag

					-- 등급산정
					SELECT @dRank = MAX(CClass)
					  FROM TEightIndicator(NOLOCK)
					 WHERE CFirstDate = @dLoopDate
					   AND CFlag = @dCFlag

					-- 1.랭킹이 20개 미만이면 바로 고냥 업데이트
					IF @dRank < 20
						BEGIN
							UPDATE TEightIndicator SET
								CClass = CASE 
								              WHEN CClass = 1 THEN 'S'
											  WHEN CClass >  1 AND CClass <= 4  THEN 'A'
											  WHEN CClass >  4 AND CClass <= 8  THEN 'B'
											  WHEN CClass >  8 AND CClass <= 12 THEN 'C'
											  WHEN CClass > 12 AND CClass <= 16 THEN 'D'
											  WHEN CClass > 16 THEN 'F'
										 END   
							 WHERE CFirstDate = @dLoopDate
							   AND CFlag = @dCFlag
						END
					-- 2.랭킹이 20개 이상이면 비율로 등급업데이트
					ELSE
						BEGIN
							-- 상위  5% 이상 - S
							-- 상위  5% 미만 20%이상 - A
							-- 상위 20% 미만 50%이상 - B
							-- 상위 50% 미만 80%이상 - C
							-- 상위 80% 미만 95%이상 - D
							-- 상위 95% 미만 - F
							-- 특이사항 Integer을 계산 시 정수화 되므로 1.0을 곱해서 계산식 처리
							UPDATE TEightIndicator SET
								CClass = CASE WHEN CONVERT(INT, CClass) * 1.0 / @dRank <= 0.05 THEN 'S'
											  WHEN CONVERT(INT, CClass) * 1.0 / @dRank >  0.05 AND CONVERT(INT, CClass) * 1.0 / @dRank <= 0.2  THEN 'A'
											  WHEN CONVERT(INT, CClass) * 1.0 / @dRank >  0.2  AND CONVERT(INT, CClass) * 1.0 / @dRank <= 0.5  THEN 'B'
											  WHEN CONVERT(INT, CClass) * 1.0 / @dRank >  0.5  AND CONVERT(INT, CClass) * 1.0 / @dRank <= 0.8  THEN 'C'
											  WHEN CONVERT(INT, CClass) * 1.0 / @dRank >  0.8  AND CONVERT(INT, CClass) * 1.0 / @dRank <= 0.95 THEN 'D'
											  WHEN CONVERT(INT, CClass) * 1.0 / @dRank >  0.95 THEN 'F'
										 END   
							 WHERE CFirstDate = @dLoopDate
							   AND CFlag = @dCFlag
						END

					-- 월별총합(전체, 등급별 평균)
					INSERT INTO TEightIndicator
		           (CDepartCode ,CFirstDate ,CFlag ,CValue ,CRegist_Count ,CTotal_Count ,CClass ,CTotal_Avg ,CS_Avg ,CA_Avg ,CB_Avg ,CC_Avg ,CD_Avg ,CF_Avg ,CDetail_Leave_Rate) 
					SELECT 'EPX0000', @dLoopDate, @dCFlag, SUM(CValue), 0, 0, '', 
						   ROUND(AVG(CValue), 1), 
					       ROUND(AVG(CASE WHEN CClass = 'S' THEN CValue ELSE NULL END), 1), 
					       ROUND(AVG(CASE WHEN CClass = 'A' THEN CValue ELSE NULL END), 1), 
					       ROUND(AVG(CASE WHEN CClass = 'B' THEN CValue ELSE NULL END), 1), 
					       ROUND(AVG(CASE WHEN CClass = 'C' THEN CValue ELSE NULL END), 1), 
					       ROUND(AVG(CASE WHEN CClass = 'D' THEN CValue ELSE NULL END), 1), 
					       ROUND(AVG(CASE WHEN CClass = 'F' THEN CValue ELSE NULL END), 1), 0
					  FROM TEightIndicator(NOLOCK)
					 WHERE CFirstDate = @dLoopDate
					   AND CFlag = @dCFlag

					-- 합계에서 구한 평균값을 업데이트
					UPDATE A SET
						A.CTotal_Avg = B.CTotal_Avg,
						A.CS_Avg = B.CS_Avg,
						A.CA_Avg = B.CA_Avg,
						A.CB_Avg = B.CB_Avg,
						A.CC_Avg = B.CC_Avg,
						A.CD_Avg = B.CD_Avg,
						A.CF_Avg = B.CF_Avg
					  FROM TEightIndicator A(NOLOCK)
					  LEFT JOIN (SELECT * FROM TEightIndicator(NOLOCK) WHERE CFirstDate = @dLoopDate AND CFlag = @dCFlag AND CDepartCode = 'EPX0000') B ON 1=1
					 WHERE A.CFirstDate = @dLoopDate
					   AND A.CFlag = @dCFlag
					
				END
			
			-- 지점의 시작일자가 집계월에 포함되면 값이 없더라도 껍데기 생성해야 되네요...아놔...(이거 매일 스케쥴로 돌리믄 로그 겁나 쌓일거 같은데..집계방법을 바꿔야 하나?)
			INSERT INTO TEightIndicator
			(CDepartCode ,CFirstDate ,CFlag) 
			SELECT a.CDepartCode, @dLoopDate, @dCFlag
			  FROM TFacility a(NOLOCK)
			  LEFT JOIN TEightIndicator b (NOLOCK) ON a.CDepartCode = b.CDepartCode AND b.CFirstDate = @dLoopDate and b.CFlag = @dCFlag
			 WHERE LEFT(CONVERT(VARCHAR(10), CDepartStartDate, 112), 6)  <= LEFT(CONVERT(VARCHAR(10), @dLoopDate, 112), 6) 
--			  LEFT JOIN TEightIndicator b ON a.CDepartCode = b.CDepartCode AND b.CFirstDate = '2013-05-01' and b.CFlag = '3'
--			 WHERE LEFT(CONVERT(VARCHAR(10), a.CDepartStartDate, 112), 6)  <= LEFT(CONVERT(VARCHAR(10), '2010-05-01', 112), 6) 
			   AND b.CFlag IS NULL
			   AND a.CDepartCode like 'EPX%'
			   -- 2014.06.10 수정내용 추가
			   AND a.CDepartCode not in ('EPXBRANCH','EPXDIRECT','EPXHEAD')

			-- 반복용 일자에 한달 더하기
			SET @dLoopDate = DATEADD(Month, 1, @dLoopDate)
		END

	-- 2.등록문의수
	-- 방문상담자 리스트 조회(문의 및 방문 도메인이 같은 관계로 방문에서 저장을 하게되면 문의유형이 변경되는 문제가 있으나 인지하고 있는 부분이므로 여기에 다시 기술만 해놓음)
	SET @dCFlag		= '2'
	SET @dLoopDate	= @dStartDate
	WHILE @dEndDate >= @dLoopDate
		BEGIN

			INSERT INTO TEightIndicator
			(CDepartCode ,CFirstDate ,CFlag ,CValue ,CRegist_Count ,CTotal_Count ,CClass ,CTotal_Avg ,CS_Avg ,CA_Avg ,CB_Avg ,CC_Avg ,CD_Avg ,CF_Avg ,CDetail_Leave_Rate) 
			SELECT CStdDepartCode, @dLoopDate, @dCFlag, COUNT(CStdCode), 
				   0, 0, '', 0, 0, 0, 0, 0, 0, 0, 0 -- 값, 전체(%에서 사용), 등급, 전국평균, S평균, A평균, B평균, C평균, D평균, F평균, 상세사용이탈율
			  FROM TRegistCounsel(NOLOCK)
			 WHERE LEFT(CONVERT(VARCHAR(10), CCallDate, 112), 6) = LEFT(CONVERT(VARCHAR(10), @dLoopDate, 112), 6)
			   AND CStdDepartCode like 'EPX%'
			   -- 2014.06.10 수정내용 추가
			   AND CStdDepartCode not in ('EPXBRANCH','EPXDIRECT','EPXHEAD')
			   AND CCounselType	  = 'Inquire' -- 문의자만 조회
			   -- 문의에서 방문예약 -> 방문자에서 예약자 리스트 조회 후 바로 등록 가능.(등록상담수에 등록완료가 포함되니깐 일단 여기선 제외처리)
			   AND CStatus		  <> 'Regist' 
			 GROUP BY CStdDepartCode
			
			-- 저장값이 있을 경우
			IF @@ROWCOUNT > 0
				BEGIN
					-- 랭킹구하기
					UPDATE A SET
						A.CClass = B.CClass
					  FROM TEightIndicator A 
					  LEFT JOIN (
								SELECT CDepartCode, RANK() OVER (ORDER BY CValue DESC) AS CClass
								  FROM TEightIndicator(NOLOCK)
								 WHERE CFirstDate = @dLoopDate
								   AND CFlag = @dCFlag
								) B ON A.CDepartCode = B.CDepartCode
					 WHERE A.CFirstDate = @dLoopDate
					   AND A.CFlag = @dCFlag

					-- 최고등급 확인
					SELECT @dRank = MAX(CClass)
					  FROM TEightIndicator(NOLOCK)
					 WHERE CFirstDate = @dLoopDate
					   AND CFlag = @dCFlag

					-- 1.랭킹이 20개 미만이면 바로 고냥 업데이트
					IF @dRank < 20
						BEGIN
							UPDATE TEightIndicator SET
								CClass = CASE 
								              WHEN CClass = 1 THEN 'S'
											  WHEN CClass >  1 AND CClass <= 4  THEN 'A'
											  WHEN CClass >  4 AND CClass <= 8  THEN 'B'
											  WHEN CClass >  8 AND CClass <= 12 THEN 'C'
											  WHEN CClass > 12 AND CClass <= 16 THEN 'D'
											  WHEN CClass > 16 THEN 'F'
										 END   
							 WHERE CFirstDate = @dLoopDate
							   AND CFlag = @dCFlag
						END
					-- 2.랭킹이 20개 이상이면 비율로 등급업데이트
					ELSE
						BEGIN
							-- 상위  5% 이상 - S
							-- 상위  5% 미만 20%이상 - A
							-- 상위 20% 미만 50%이상 - B
							-- 상위 50% 미만 80%이상 - C
							-- 상위 80% 미만 95%이상 - D
							-- 상위 95% 미만 - F
							-- 특이사항 Integer을 계산 시 정수화 되므로 1.0을 곱해서 계산식 처리
							UPDATE TEightIndicator SET
								CClass = CASE WHEN CONVERT(INT, CClass) * 1.0 / @dRank <= 0.05 THEN 'S'
											  WHEN CONVERT(INT, CClass) * 1.0 / @dRank >  0.05 AND CONVERT(INT, CClass) * 1.0 / @dRank <= 0.2  THEN 'A'
											  WHEN CONVERT(INT, CClass) * 1.0 / @dRank >  0.2  AND CONVERT(INT, CClass) * 1.0 / @dRank <= 0.5  THEN 'B'
											  WHEN CONVERT(INT, CClass) * 1.0 / @dRank >  0.5  AND CONVERT(INT, CClass) * 1.0 / @dRank <= 0.8  THEN 'C'
											  WHEN CONVERT(INT, CClass) * 1.0 / @dRank >  0.8  AND CONVERT(INT, CClass) * 1.0 / @dRank <= 0.95 THEN 'D'
											  WHEN CONVERT(INT, CClass) * 1.0 / @dRank >  0.95 THEN 'F'
										 END   
							 WHERE CFirstDate = @dLoopDate
							   AND CFlag = @dCFlag
						END

					-- 월별총합(전체, 등급별 평균)
					INSERT INTO TEightIndicator
					(CDepartCode ,CFirstDate ,CFlag ,CValue ,CRegist_Count ,CTotal_Count ,CClass ,CTotal_Avg ,CS_Avg ,CA_Avg ,CB_Avg ,CC_Avg ,CD_Avg ,CF_Avg ,CDetail_Leave_Rate) 
					SELECT 'EPX0000', @dLoopDate, @dCFlag, SUM(CValue), 0, 0, '', 
						   ROUND(AVG(CValue), 1), 
					       ROUND(AVG(CASE WHEN CClass = 'S' THEN CValue ELSE NULL END), 1), 
					       ROUND(AVG(CASE WHEN CClass = 'A' THEN CValue ELSE NULL END), 1), 
					       ROUND(AVG(CASE WHEN CClass = 'B' THEN CValue ELSE NULL END), 1), 
					       ROUND(AVG(CASE WHEN CClass = 'C' THEN CValue ELSE NULL END), 1), 
					       ROUND(AVG(CASE WHEN CClass = 'D' THEN CValue ELSE NULL END), 1), 
					       ROUND(AVG(CASE WHEN CClass = 'F' THEN CValue ELSE NULL END), 1), 0
					  FROM TEightIndicator(NOLOCK)
					 WHERE CFirstDate = @dLoopDate
					   AND CFlag = @dCFlag

					-- 합계에서 구한 평균값을 업데이트
					UPDATE A SET
						A.CTotal_Avg = B.CTotal_Avg,
						A.CS_Avg = B.CS_Avg,
						A.CA_Avg = B.CA_Avg,
						A.CB_Avg = B.CB_Avg,
						A.CC_Avg = B.CC_Avg,
						A.CD_Avg = B.CD_Avg,
						A.CF_Avg = B.CF_Avg
					  FROM TEightIndicator A
					  LEFT JOIN (SELECT * FROM TEightIndicator(NOLOCK) WHERE CFirstDate = @dLoopDate AND CFlag = @dCFlag AND CDepartCode = 'EPX0000') B ON 1=1
					 WHERE A.CFirstDate = @dLoopDate
					   AND A.CFlag = @dCFlag

				END

			-- 데이터 집계 안된 지점자료 생성
			INSERT INTO TEightIndicator
			(CDepartCode ,CFirstDate ,CFlag)
			SELECT a.CDepartCode, @dLoopDate, @dCFlag
			  FROM TFacility a(NOLOCK)
			  LEFT JOIN TEightIndicator b(NOLOCK) ON a.CDepartCode = b.CDepartCode AND b.CFirstDate = @dLoopDate and b.CFlag = @dCFlag
			 WHERE LEFT(CONVERT(VARCHAR(10), CDepartStartDate, 112), 6)  <= LEFT(CONVERT(VARCHAR(10), @dLoopDate, 112), 6) 
			   AND b.CFlag IS NULL
			   AND a.CDepartCode like 'EPX%'
			   -- 2014.06.10 수정내용 추가
			   AND a.CDepartCode not in ('EPXBRANCH','EPXDIRECT','EPXHEAD')

			-- 반복용 일자에 한달 더하기
			SET @dLoopDate = DATEADD(Month, 1, @dLoopDate)
		END

	-- 3.등록상담수
	SET @dCFlag		= '3'
	SET @dLoopDate	= @dStartDate
	WHILE @dEndDate >= @dLoopDate
		BEGIN
			INSERT INTO TEightIndicator
			(CDepartCode ,CFirstDate ,CFlag ,CValue ,CRegist_Count ,CTotal_Count ,CClass ,CTotal_Avg ,CS_Avg ,CA_Avg ,CB_Avg ,CC_Avg ,CD_Avg ,CF_Avg ,CDetail_Leave_Rate) 
			SELECT CStdDepartCode, @dLoopDate, @dCFlag, COUNT(CStdCode), 
				   0, 0, '', 0, 0, 0, 0, 0, 0, 0, 0 -- 값, 전체(%에서 사용), 등급, 전국평균, S평균, A평균, B평균, C평균, D평균, F평균, 상세사용이탈율
			  FROM TRegistCounsel(NOLOCK)
			 WHERE LEFT(CONVERT(VARCHAR(10), CCallDate, 112), 6) = LEFT(CONVERT(VARCHAR(10), @dLoopDate, 112), 6)
			   AND CStdDepartCode like 'EPX%'
			   -- 2014.06.10 수정내용 추가
			   AND CStdDepartCode not in ('EPXBRANCH','EPXDIRECT','EPXHEAD')
			   AND ( (CCounselType	  = 'Visit'   AND CStatus IN ('RegistStandby', 'RegistHold', 'Regist')) OR -- 방문자(등록대기, 등록보류, 등록완료)
			         (CCounselType	  = 'Inquire' AND CStatus = 'Regist') ) -- 문의자(등록완료)
			 GROUP BY CStdDepartCode

			-- 저장값이 있을 경우
			IF @@ROWCOUNT > 0
				BEGIN
					-- 랭킹구하기
					UPDATE A SET
						A.CClass = B.CClass
					  FROM TEightIndicator A (NOLOCK)
					  LEFT JOIN (
								SELECT CDepartCode, RANK() OVER (ORDER BY CValue DESC) AS CClass
								  FROM TEightIndicator(NOLOCK)
								 WHERE CFirstDate = @dLoopDate
								   AND CFlag = @dCFlag
								) B ON A.CDepartCode = B.CDepartCode
					 WHERE A.CFirstDate = @dLoopDate
					   AND A.CFlag = @dCFlag

					-- 최고등급 확인
					SELECT @dRank = MAX(CClass)
					  FROM TEightIndicator(NOLOCK)
					 WHERE CFirstDate = @dLoopDate
					   AND CFlag = @dCFlag

					-- 1.랭킹이 20개 미만이면 바로 고냥 업데이트
					IF @dRank < 20
						BEGIN
							UPDATE TEightIndicator SET
								CClass = CASE 
								              WHEN CClass = 1 THEN 'S'
											  WHEN CClass >  1 AND CClass <= 4  THEN 'A'
											  WHEN CClass >  4 AND CClass <= 8  THEN 'B'
											  WHEN CClass >  8 AND CClass <= 12 THEN 'C'
											  WHEN CClass > 12 AND CClass <= 16 THEN 'D'
											  WHEN CClass > 16 THEN 'F'
										 END   
							 WHERE CFirstDate = @dLoopDate
							   AND CFlag = @dCFlag
						END
					-- 2.랭킹이 20개 이상이면 비율로 등급업데이트
					ELSE
						BEGIN
							-- 상위  5% 이상 - S
							-- 상위  5% 미만 20%이상 - A
							-- 상위 20% 미만 50%이상 - B
							-- 상위 50% 미만 80%이상 - C
							-- 상위 80% 미만 95%이상 - D
							-- 상위 95% 미만 - F
							-- 특이사항 Integer을 계산 시 정수화 되므로 1.0을 곱해서 계산식 처리
							UPDATE TEightIndicator SET
								CClass = CASE WHEN CONVERT(INT, CClass) * 1.0 / @dRank <= 0.05 THEN 'S'
											  WHEN CONVERT(INT, CClass) * 1.0 / @dRank >  0.05 AND CONVERT(INT, CClass) * 1.0 / @dRank <= 0.2  THEN 'A'
											  WHEN CONVERT(INT, CClass) * 1.0 / @dRank >  0.2  AND CONVERT(INT, CClass) * 1.0 / @dRank <= 0.5  THEN 'B'
											  WHEN CONVERT(INT, CClass) * 1.0 / @dRank >  0.5  AND CONVERT(INT, CClass) * 1.0 / @dRank <= 0.8  THEN 'C'
											  WHEN CONVERT(INT, CClass) * 1.0 / @dRank >  0.8  AND CONVERT(INT, CClass) * 1.0 / @dRank <= 0.95 THEN 'D'
											  WHEN CONVERT(INT, CClass) * 1.0 / @dRank >  0.95 THEN 'F'
										 END   
							 WHERE CFirstDate = @dLoopDate
							   AND CFlag = @dCFlag
						END

					-- 월별총합(전체, 등급별 평균)
					INSERT INTO TEightIndicator
					(CDepartCode ,CFirstDate ,CFlag ,CValue ,CRegist_Count ,CTotal_Count ,CClass ,CTotal_Avg ,CS_Avg ,CA_Avg ,CB_Avg ,CC_Avg ,CD_Avg ,CF_Avg ,CDetail_Leave_Rate) 
					SELECT 'EPX0000', @dLoopDate, @dCFlag, SUM(CValue), 0, 0, '', 
					       ROUND(AVG(CValue), 1), 
						   ROUND(AVG(CASE WHEN CClass = 'S' THEN CValue * 1.0 ELSE NULL END), 1), 
						   ROUND(AVG(CASE WHEN CClass = 'A' THEN CValue * 1.0 ELSE NULL END), 1), 
						   ROUND(AVG(CASE WHEN CClass = 'B' THEN CValue * 1.0 ELSE NULL END), 1), 
						   ROUND(AVG(CASE WHEN CClass = 'C' THEN CValue * 1.0 ELSE NULL END), 1),  
						   ROUND(AVG(CASE WHEN CClass = 'D' THEN CValue * 1.0 ELSE NULL END), 1), 
						   ROUND(AVG(CASE WHEN CClass = 'F' THEN CValue * 1.0 ELSE NULL END), 1), 0
					  FROM TEightIndicator(NOLOCK)
					 WHERE CFirstDate = @dLoopDate
					   AND CFlag = @dCFlag

					-- 합계에서 구한 평균값을 업데이트
					UPDATE A SET
						A.CTotal_Avg = B.CTotal_Avg,
						A.CS_Avg = B.CS_Avg,
						A.CA_Avg = B.CA_Avg,
						A.CB_Avg = B.CB_Avg,
						A.CC_Avg = B.CC_Avg,
						A.CD_Avg = B.CD_Avg,
						A.CF_Avg = B.CF_Avg
					  FROM TEightIndicator A
					  LEFT JOIN (SELECT * FROM TEightIndicator(NOLOCK) WHERE CFirstDate = @dLoopDate AND CFlag = @dCFlag AND CDepartCode = 'EPX0000') B ON 1=1
					 WHERE A.CFirstDate = @dLoopDate
					   AND A.CFlag = @dCFlag

				END

			-- 데이터 집계 안된 지점자료 생성
			INSERT INTO TEightIndicator
			(CDepartCode ,CFirstDate ,CFlag)
			SELECT a.CDepartCode, @dLoopDate, @dCFlag
			  FROM TFacility a(NOLOCK)
			  LEFT JOIN TEightIndicator b(NOLOCK) ON a.CDepartCode = b.CDepartCode AND b.CFirstDate = @dLoopDate and b.CFlag = @dCFlag
			 WHERE LEFT(CONVERT(VARCHAR(10), CDepartStartDate, 112), 6)  <= LEFT(CONVERT(VARCHAR(10), @dLoopDate, 112), 6) 
			   AND b.CFlag IS NULL
			   AND a.CDepartCode like 'EPX%'
			   -- 2014.06.10 수정내용 추가
			   AND a.CDepartCode not in ('EPXBRANCH','EPXDIRECT','EPXHEAD')

			-- 반복용 일자에 한달 더하기
			SET @dLoopDate = DATEADD(Month, 1, @dLoopDate)
		END
	
	-- 4.상담성공율
	SET @dCFlag		= '4'
	SET @dLoopDate	= @dStartDate
	WHILE @dEndDate >= @dLoopDate
		BEGIN
			INSERT INTO TEightIndicator
			(CDepartCode ,CFirstDate ,CFlag ,CValue ,CRegist_Count ,CTotal_Count ,CClass ,CTotal_Avg ,CS_Avg ,CA_Avg ,CB_Avg ,CC_Avg ,CD_Avg ,CF_Avg ,CDetail_Leave_Rate) 
			SELECT CStdDepartCode, @dLoopDate, @dCFlag,
				   ROUND(COUNT(CASE WHEN CStatus = 'Regist' THEN CStdCode ELSE NULL END)  * 1.0 / COUNT(CStdCode) * 100, 1), -- 성공율
				   COUNT(CASE WHEN CStatus = 'Regist' THEN CStdCode ELSE NULL END), -- 등록완료
				   COUNT(CStdCode), -- 전체
				   '' , 0, 0, 0, 0, 0, 0, 0, 0 -- 등급, 전국평균, S평균, A평균, B평균, C평균, D평균, F평균, 상세사용이탈율
			  FROM TRegistCounsel(NOLOCK)
			 WHERE LEFT(CONVERT(VARCHAR(10), CCallDate, 112), 6) = LEFT(CONVERT(VARCHAR(10), @dLoopDate, 112), 6)
			   AND CStdDepartCode like 'EPX%'
			   -- 2014.06.10 수정내용 추가
			   AND CStdDepartCode not in ('EPXBRANCH','EPXDIRECT','EPXHEAD')
			   AND ( (CCounselType	  = 'Visit'   AND CStatus IN ('RegistStandby', 'RegistHold', 'Regist')) OR -- 방문자(등록대기, 등록보류, 등록완료)
			         (CCounselType	  = 'Inquire' AND CStatus = 'Regist') ) -- 문의자(등록완료)
			 GROUP BY CStdDepartCode
			
			-- 저장값이 있을 경우
			IF @@ROWCOUNT > 0
				BEGIN
					-- 랭킹구하기
					UPDATE A SET
						A.CClass = B.CClass
					  FROM TEightIndicator A 
					  LEFT JOIN (
								SELECT CDepartCode, RANK() OVER (ORDER BY CValue DESC) AS CClass
								  FROM TEightIndicator(NOLOCK)
								 WHERE CFirstDate = @dLoopDate
								   AND CFlag = @dCFlag
								) B ON A.CDepartCode = B.CDepartCode
					 WHERE A.CFirstDate = @dLoopDate
					   AND A.CFlag = @dCFlag

					-- 최고등급 확인
					SELECT @dRank = MAX(CClass)
					  FROM TEightIndicator(NOLOCK)
					 WHERE CFirstDate = @dLoopDate
					   AND CFlag = @dCFlag

					-- 1.랭킹이 20개 미만이면 바로 고냥 업데이트
					IF @dRank < 20
						BEGIN
							UPDATE TEightIndicator SET
								CClass = CASE 
								              WHEN CClass = 1 THEN 'S'
											  WHEN CClass >  1 AND CClass <= 4  THEN 'A'
											  WHEN CClass >  4 AND CClass <= 8  THEN 'B'
											  WHEN CClass >  8 AND CClass <= 12 THEN 'C'
											  WHEN CClass > 12 AND CClass <= 16 THEN 'D'
											  WHEN CClass > 16 THEN 'F'
										 END   
							 WHERE CFirstDate = @dLoopDate
							   AND CFlag = @dCFlag
						END
					-- 2.랭킹이 20개 이상이면 비율로 등급업데이트
					ELSE
						BEGIN
							-- 상위  5% 이상 - S
							-- 상위  5% 미만 20%이상 - A
							-- 상위 20% 미만 50%이상 - B
							-- 상위 50% 미만 80%이상 - C
							-- 상위 80% 미만 95%이상 - D
							-- 상위 95% 미만 - F
							-- 특이사항 Integer을 계산 시 정수화 되므로 1.0을 곱해서 계산식 처리
							UPDATE TEightIndicator SET
								CClass = CASE WHEN CONVERT(INT, CClass) * 1.0 / @dRank <= 0.05 THEN 'S'
											  WHEN CONVERT(INT, CClass) * 1.0 / @dRank >  0.05 AND CONVERT(INT, CClass) * 1.0 / @dRank <= 0.2  THEN 'A'
											  WHEN CONVERT(INT, CClass) * 1.0 / @dRank >  0.2  AND CONVERT(INT, CClass) * 1.0 / @dRank <= 0.5  THEN 'B'
											  WHEN CONVERT(INT, CClass) * 1.0 / @dRank >  0.5  AND CONVERT(INT, CClass) * 1.0 / @dRank <= 0.8  THEN 'C'
											  WHEN CONVERT(INT, CClass) * 1.0 / @dRank >  0.8  AND CONVERT(INT, CClass) * 1.0 / @dRank <= 0.95 THEN 'D'
											  WHEN CONVERT(INT, CClass) * 1.0 / @dRank >  0.95 THEN 'F'
										 END   
							 WHERE CFirstDate = @dLoopDate
							   AND CFlag = @dCFlag
						END

					-- 월별총합(전체, 등급별 평균)
					INSERT INTO TEightIndicator
					(CDepartCode ,CFirstDate ,CFlag ,CValue ,CRegist_Count ,CTotal_Count ,CClass ,CTotal_Avg ,CS_Avg ,CA_Avg ,CB_Avg ,CC_Avg ,CD_Avg ,CF_Avg ,CDetail_Leave_Rate) 
					SELECT 'EPX0000', @dLoopDate, @dCFlag, 
						   ROUND(SUM(CRegist_Count) * 1.0 / SUM(CTotal_Count) * 100, 1), 
						   SUM(CRegist_Count), SUM(CTotal_Count), '', 
-- 2014.05.20 : 왠지 월 합계의 평균도 그냥 평균으로 보는게 아닐까 싶어서 일단 주석으로 미리 생성.
--					       ROUND(AVG(CValue), 1),
					       ROUND(SUM(CRegist_Count) * 1.0 / SUM(CTotal_Count) * 100, 1),
						   ROUND(AVG(CASE WHEN CClass = 'S' THEN CValue * 1.0 ELSE NULL END), 1), 
						   ROUND(AVG(CASE WHEN CClass = 'A' THEN CValue * 1.0 ELSE NULL END), 1), 
						   ROUND(AVG(CASE WHEN CClass = 'B' THEN CValue * 1.0 ELSE NULL END), 1), 
						   ROUND(AVG(CASE WHEN CClass = 'C' THEN CValue * 1.0 ELSE NULL END), 1),  
						   ROUND(AVG(CASE WHEN CClass = 'D' THEN CValue * 1.0 ELSE NULL END), 1), 
						   ROUND(AVG(CASE WHEN CClass = 'F' THEN CValue * 1.0 ELSE NULL END), 1), 0
					  FROM TEightIndicator(NOLOCK)
					 WHERE CFirstDate = @dLoopDate
					   AND CFlag = @dCFlag

					-- 합계에서 구한 평균값을 업데이트
					UPDATE A SET
						A.CTotal_Avg = B.CTotal_Avg,
						A.CS_Avg = B.CS_Avg,
						A.CA_Avg = B.CA_Avg,
						A.CB_Avg = B.CB_Avg,
						A.CC_Avg = B.CC_Avg,
						A.CD_Avg = B.CD_Avg,
						A.CF_Avg = B.CF_Avg
					  FROM TEightIndicator A
					  LEFT JOIN (SELECT * FROM TEightIndicator(NOLOCK) WHERE CFirstDate = @dLoopDate AND CFlag = @dCFlag AND CDepartCode = 'EPX0000') B ON 1=1
					 WHERE A.CFirstDate = @dLoopDate
					   AND A.CFlag = @dCFlag

				END

			-- 데이터 집계 안된 지점자료 생성
			INSERT INTO TEightIndicator
			(CDepartCode ,CFirstDate ,CFlag)
			SELECT a.CDepartCode, @dLoopDate, @dCFlag
			  FROM TFacility a(NOLOCK)
			  LEFT JOIN TEightIndicator b(NOLOCK) ON a.CDepartCode = b.CDepartCode AND b.CFirstDate = @dLoopDate and b.CFlag = @dCFlag
			 WHERE LEFT(CONVERT(VARCHAR(10), CDepartStartDate, 112), 6)  <= LEFT(CONVERT(VARCHAR(10), @dLoopDate, 112), 6) 
			   AND b.CFlag IS NULL
			   AND a.CDepartCode like 'EPX%'
			   -- 2014.06.10 수정내용 추가
			   AND a.CDepartCode not in ('EPXBRANCH','EPXDIRECT','EPXHEAD')

			-- 반복용 일자에 한달 더하기
			SET @dLoopDate = DATEADD(Month, 1, @dLoopDate)
		END

	-- 5.6개월이탈율
	-- 김동우 팀장이 맹글어 논거(SP_TStudent_Count ==> TAnalytics_Student_Count) 날로 먹기(과거 데이터 없음 거기다가 집어 넣워둬요~~~)
	-- 이탈율의 경우...값이 낮은게 좋은거...
	-- 2014.05.21 : 지점별 상세지표에서 사용하기 위한 컬럼 추가(복회미반영 6개월누적이탈율)
	-- 2014.05.22 : 아놔~!!! 지점별 상세지표에서 상담과 개별이 각각 필요하네요~~~ 그래서리 또 다시 컬럼추가
	SET @dCFlag		= '5'
	SET @dLoopDate	= @dStartDate
	WHILE @dEndDate >= @dLoopDate
		BEGIN
			-- 6개월 이탈율 : 이전6개월 종료학생 - 이전6개월 복회 / 이전6개월 월초
			
			-- 지점의 시작일(월)이 집계월 기준 6개월 이하일 경우 수집한다.
			INSERT INTO TEightIndicator
			(CDepartCode ,CFirstDate ,CFlag ,CValue ,CRegist_Count ,CTotal_Count ,CClass ,CTotal_Avg ,CS_Avg ,CA_Avg ,CB_Avg ,CC_Avg ,CD_Avg ,CF_Avg ,CDetail_Leave_Rate,
			CTutoring_Leave_Rate, CTutoring_Leave_In_Rate) 
			SELECT a.CDepartCode, @dLoopDate, @dCFlag
				  ,CASE WHEN ISNULL(SUM(c.[상담관리(월초)] + c.[상담관리(월초누락연장)]), 0) <> 0 THEN
				   ROUND(
				   ( SUM(c.[상담관리(월초)] + c.[상담관리(월초누락연장)] - c.[상담관리(월말)] - c.[상담관리(월말누락연장)] + c.[상담관리(신규)] + c.[상담관리(복회)]) * 1.0 -- 종료
			       - SUM(c.[상담관리(복회)]) )  -- 복회
				   / SUM(c.[상담관리(월초)] + c.[상담관리(월초누락연장)]) * 100, 1) -- 월초
				   ELSE NULL END
				  ,0, 0, '', 0, 0, 0, 0, 0, 0, 0 -- 값, 전체(%에서 사용), 등급, 전국평균, S평균, A평균, B평균, C평균, D평균, F평균
				  -- 2014.05.21
				  ,CASE WHEN ISNULL(SUM(c.[상담관리(월초)] + c.[상담관리(월초누락연장)]), 0) <> 0 THEN
				   ROUND(
				     SUM(c.[상담관리(월초)] + c.[상담관리(월초누락연장)] - c.[상담관리(월말)] - c.[상담관리(월말누락연장)] + c.[상담관리(신규)] + c.[상담관리(복회)]) * 1.0 -- 종료
				   / SUM(c.[상담관리(월초)] + c.[상담관리(월초누락연장)]) * 100, 1) -- 복회미반영 6개월 누적 이탈율
				   ELSE NULL END
				  ,CASE WHEN ISNULL(SUM(c.[개별지도(월초)] + c.[개별지도(월초누락연장)]), 0) <> 0 THEN 
				   ROUND(
				     SUM(c.[개별지도(월초)] + c.[개별지도(월초누락연장)] - c.[개별지도(월말)] - c.[개별지도(월말누락연장)] + c.[개별지도(신규)] + c.[개별지도(복회)]) * 1.0 -- 종료
				   / SUM(c.[개별지도(월초)] + c.[개별지도(월초누락연장)]) * 100, 1) -- 복회미반영 6개월 누적 이탈율
				   ELSE NULL END
				  ,CASE WHEN ISNULL(SUM(c.[개별지도(월초)] + c.[개별지도(월초누락연장)]), 0) <> 0 THEN 
				   ROUND(
				   ( SUM(c.[개별지도(월초)] + c.[개별지도(월초누락연장)] - c.[개별지도(월말)] - c.[개별지도(월말누락연장)] + c.[개별지도(신규)] + c.[개별지도(복회)]) * 1.0 -- 종료
			       - SUM(c.[개별지도(복회)]) )  -- 복회
				   / SUM(c.[개별지도(월초)] + c.[개별지도(월초누락연장)]) * 100, 1) -- 복회미반영 6개월 누적 이탈율
				   ELSE NULL END
			  FROM TFacility a(NOLOCK)
			  LEFT JOIN TDepartment b(NOLOCK) on a.CDepartCode = b.CDepartCode and a.CDepartStartDate = b.CDepartStartDate
			  -- 2014.9.12 수정 : TAnalytics_Student_Count의 데이터 집계변경으로 인한 쿼리 변경
			  LEFT JOIN (SELECT t1.* 
				          FROM TAnalytics_Student_Count t1(NOLOCK)
						 INNER JOIN (SELECT CDepartCode, CFirstDate, MAX(CCalcDate) as CCalcDate FROM TAnalytics_Student_Count(NOLOCK) GROUP BY CDepartCode, CFirstDate) t2
						    ON t1.CDepartCode = t2.CDepartCode AND t1.CFirstDate = t2.CFirstDate AND t1.CCalcDate = t2.CCalcDate
						 WHERE t1.CFirstDate BETWEEN DATEADD(Month, -5, @dLoopDate) - (day(@dLoopDate)-1) AND @dLoopDate
						  ) c 
				on a.CDepartCode = c.CDepartCode AND c.CFirstDate BETWEEN DATEADD(Month, -5, @dLoopDate) - (day(@dLoopDate)-1) AND @dLoopDate
--			  LEFT JOIN TAnalytics_Student_Count c(NOLOCK) on a.CDepartCode = c.CDepartCode AND c.CFirstDate BETWEEN DATEADD(Month, -5, @dLoopDate) - (day(@dLoopDate)-1) AND @dLoopDate
			 WHERE a.CDepartCode like 'EPX%'
			   -- 2014.06.10 수정내용 추가
			   AND a.CDepartCode not in ('EPXBRANCH','EPXDIRECT','EPXHEAD')
			 -- 부서시작일이 과거 6개월보다 작고 종료일은 오늘보다 큰거나 같은 지점...(1일자로 셋팅할거니깐 5개월 과거로 하믄 6개월전 부서)
			   AND a.CDepartStartDate <  DATEADD(Month, -5, @dLoopDate) - (day(@dLoopDate)-1) 
			   AND b.CEndDate         >= @dLoopDate
--			   AND a.CDepartStartDate <  DATEADD(Month, -5, '2014-04-01') - (day('2015-04-01')-1) 
--			   AND b.CEndDate         >= '2014-04-01'
			 GROUP BY a.CDepartCode
			
			-- 저장값이 있을 경우
			IF @@ROWCOUNT > 0
				BEGIN
					-- 랭킹구하기
					UPDATE A SET
						A.CClass = B.CClass
					  FROM TEightIndicator A 
					  LEFT JOIN (
								SELECT CDepartCode, RANK() OVER (ORDER BY CValue) AS CClass -- 이탈율 낮은게 등급이 높음
								  FROM TEightIndicator(NOLOCK)
								 WHERE CFirstDate = @dLoopDate
								   AND CFlag = @dCFlag
								) B ON A.CDepartCode = B.CDepartCode
					 WHERE A.CFirstDate = @dLoopDate
					   AND A.CFlag = @dCFlag

					-- 최고등급 확인
					SELECT @dRank = MAX(CClass)
					  FROM TEightIndicator(NOLOCK)
					 WHERE CFirstDate = @dLoopDate
					   AND CFlag = @dCFlag

					-- 1.랭킹이 20개 미만이면 바로 고냥 업데이트
					IF @dRank < 20
						BEGIN
							UPDATE TEightIndicator SET
								CClass = CASE 
								              WHEN CClass = 1 THEN 'S'
											  WHEN CClass >  1 AND CClass <= 4  THEN 'A'
											  WHEN CClass >  4 AND CClass <= 8  THEN 'B'
											  WHEN CClass >  8 AND CClass <= 12 THEN 'C'
											  WHEN CClass > 12 AND CClass <= 16 THEN 'D'
											  WHEN CClass > 16 THEN 'F'
										 END   
							 WHERE CFirstDate = @dLoopDate
							   AND CFlag = @dCFlag
						END
					-- 2.랭킹이 20개 이상이면 비율로 등급업데이트
					ELSE
						BEGIN
							-- 상위  5% 이상 - S
							-- 상위  5% 미만 20%이상 - A
							-- 상위 20% 미만 50%이상 - B
							-- 상위 50% 미만 80%이상 - C
							-- 상위 80% 미만 95%이상 - D
							-- 상위 95% 미만 - F
							-- 특이사항 1.Integer을 계산 시 정수화 되므로 1.0을 곱해서 계산식 처리
							-- ※※※※ 2.값이 낮을수록 등급을 높게 처리이지만 위에 랭킹의 순서가 먼저 정해졌으니 동일 ※※※※
							UPDATE TEightIndicator SET
								CClass = CASE WHEN CONVERT(FLOAT, CClass) * 1.0 / @dRank <= 0.05 THEN 'S'
											  WHEN CONVERT(FLOAT, CClass) * 1.0 / @dRank >  0.05 AND CONVERT(FLOAT, CClass) * 1.0 / @dRank <= 0.2  THEN 'A'
											  WHEN CONVERT(FLOAT, CClass) * 1.0 / @dRank >  0.2  AND CONVERT(FLOAT, CClass) * 1.0 / @dRank <= 0.5  THEN 'B'
											  WHEN CONVERT(FLOAT, CClass) * 1.0 / @dRank >  0.5  AND CONVERT(FLOAT, CClass) * 1.0 / @dRank <= 0.8  THEN 'C'
											  WHEN CONVERT(FLOAT, CClass) * 1.0 / @dRank >  0.8  AND CONVERT(FLOAT, CClass) * 1.0 / @dRank <= 0.95 THEN 'D'
											  WHEN CONVERT(FLOAT, CClass) * 1.0 / @dRank >  0.95 THEN 'F'
										 END   
							 WHERE CFirstDate = @dLoopDate
							   AND CFlag = @dCFlag
						END

					-- 월별총합(전체, 등급별 평균)
					INSERT INTO TEightIndicator
					(CDepartCode ,CFirstDate ,CFlag ,CValue ,CRegist_Count ,CTotal_Count ,CClass ,CTotal_Avg ,CS_Avg ,CA_Avg ,CB_Avg ,CC_Avg ,CD_Avg ,CF_Avg ,CDetail_Leave_Rate) 
					SELECT 'EPX0000', @dLoopDate, @dCFlag, SUM(CValue), 0, 0, '', 
						   ROUND(AVG(CValue), 1), 
					       ROUND(AVG(CASE WHEN CClass = 'S' THEN CValue ELSE NULL END), 1), 
					       ROUND(AVG(CASE WHEN CClass = 'A' THEN CValue ELSE NULL END), 1), 
					       ROUND(AVG(CASE WHEN CClass = 'B' THEN CValue ELSE NULL END), 1), 
					       ROUND(AVG(CASE WHEN CClass = 'C' THEN CValue ELSE NULL END), 1), 
					       ROUND(AVG(CASE WHEN CClass = 'D' THEN CValue ELSE NULL END), 1), 
					       ROUND(AVG(CASE WHEN CClass = 'F' THEN CValue ELSE NULL END), 1), 0
					  FROM TEightIndicator(NOLOCK)
					 WHERE CFirstDate = @dLoopDate
					   AND CFlag = @dCFlag

					-- 합계에서 구한 평균값을 업데이트
					UPDATE A SET
						A.CTotal_Avg = B.CTotal_Avg,
						A.CS_Avg = B.CS_Avg,
						A.CA_Avg = B.CA_Avg,
						A.CB_Avg = B.CB_Avg,
						A.CC_Avg = B.CC_Avg,
						A.CD_Avg = B.CD_Avg,
						A.CF_Avg = B.CF_Avg
					  FROM TEightIndicator A
					  LEFT JOIN (SELECT * FROM TEightIndicator(NOLOCK) WHERE CFirstDate = @dLoopDate AND CFlag = @dCFlag AND CDepartCode = 'EPX0000') B ON 1=1
					 WHERE A.CFirstDate = @dLoopDate
					   AND A.CFlag = @dCFlag

				END

			-- 데이터 집계 안된 지점자료 생성
			-- (시작일이 6개월 이전인 지점만 추가...해야되나??? 훔...없으니깐??? 근데 화면의 트리에 나오는건 좀 다른데?..6개월 거시기 트리 모양을 바꿔야 하나?..애매하네...일단 이건 딴거랑 같이..)
			INSERT INTO TEightIndicator
			(CDepartCode ,CFirstDate ,CFlag ,CValue ,CRegist_Count ,CTotal_Count ,CClass ,CTotal_Avg ,CS_Avg ,CA_Avg ,CB_Avg ,CC_Avg ,CD_Avg ,CF_Avg ,CDetail_Leave_Rate) 
			SELECT a.CDepartCode, @dLoopDate, @dCFlag, 
				   NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
			  FROM TFacility a(NOLOCK)
			  LEFT JOIN TEightIndicator b(NOLOCK) ON a.CDepartCode = b.CDepartCode AND b.CFirstDate = @dLoopDate and b.CFlag = @dCFlag
			 WHERE LEFT(CONVERT(VARCHAR(10), CDepartStartDate, 112), 6)  <= LEFT(CONVERT(VARCHAR(10), @dLoopDate, 112), 6) 
			   AND b.CFlag IS NULL
			   AND a.CDepartCode like 'EPX%'
			   -- 2014.06.10 수정내용 추가
			   AND a.CDepartCode not in ('EPXBRANCH','EPXDIRECT','EPXHEAD')

			-- 반복용 일자에 한달 더하기
			SET @dLoopDate = DATEADD(Month, 1, @dLoopDate)
		END
	
	-- 6.월총매출액
	SET @dCFlag		= '6'
	SET @dLoopDate	= @dStartDate
	WHILE @dEndDate >= @dLoopDate
		BEGIN
			INSERT INTO TEightIndicator
			(CDepartCode ,CFirstDate ,CFlag ,CValue ,CRegist_Count ,CTotal_Count ,CClass ,CTotal_Avg ,CS_Avg ,CA_Avg ,CB_Avg ,CC_Avg ,CD_Avg ,CF_Avg ,CDetail_Leave_Rate) 
			SELECT CBrDepartCode, @dLoopDate, @dCFlag, SUM(CCash), 
				   0, 0, '', 0, 0, 0, 0, 0, 0, 0, 0 -- 값, 전체(%에서 사용), 등급, 전국평균, S평균, A평균, B평균, C평균, D평균, F평균, 상세사용이탈율
			  FROM TAccountingIncome(NOLOCK)
			 WHERE LEFT(CONVERT(VARCHAR(10), CAccountingDate, 112), 6) = LEFT(CONVERT(VARCHAR(10), @dLoopDate, 112), 6)
			   AND CBrDepartCode like 'EPX%'
			   -- 2014.06.10 수정내용 추가
			   AND CBrDepartCode not in ('EPXBRANCH','EPXDIRECT','EPXHEAD')
			 GROUP BY CBrDepartCode

			-- 저장값이 있을 경우
			IF @@ROWCOUNT > 0
				BEGIN
					-- 랭킹구하기
					UPDATE A SET
						A.CClass = B.CClass
					  FROM TEightIndicator A 
					  LEFT JOIN (
								SELECT CDepartCode, RANK() OVER (ORDER BY CValue DESC) AS CClass
								  FROM TEightIndicator(NOLOCK)
								 WHERE CFirstDate = @dLoopDate
								   AND CFlag = @dCFlag
								) B ON A.CDepartCode = B.CDepartCode
					 WHERE A.CFirstDate = @dLoopDate
					   AND A.CFlag = @dCFlag

					-- 최고등급 확인
					SELECT @dRank = MAX(CClass)
					  FROM TEightIndicator(NOLOCK)
					 WHERE CFirstDate = @dLoopDate
					   AND CFlag = @dCFlag

					-- 1.랭킹이 20개 미만이면 바로 고냥 업데이트
					IF @dRank < 20
						BEGIN
							UPDATE TEightIndicator SET
								CClass = CASE 
								              WHEN CClass = 1 THEN 'S'
											  WHEN CClass >  1 AND CClass <= 4  THEN 'A'
											  WHEN CClass >  4 AND CClass <= 8  THEN 'B'
											  WHEN CClass >  8 AND CClass <= 12 THEN 'C'
											  WHEN CClass > 12 AND CClass <= 16 THEN 'D'
											  WHEN CClass > 16 THEN 'F'
										 END   
							 WHERE CFirstDate = @dLoopDate
							   AND CFlag = @dCFlag
						END
					-- 2.랭킹이 20개 이상이면 비율로 등급업데이트
					ELSE
						BEGIN
							-- 상위  5% 이상 - S
							-- 상위  5% 미만 20%이상 - A
							-- 상위 20% 미만 50%이상 - B
							-- 상위 50% 미만 80%이상 - C
							-- 상위 80% 미만 95%이상 - D
							-- 상위 95% 미만 - F
							-- 특이사항 Integer을 계산 시 정수화 되므로 1.0을 곱해서 계산식 처리
							UPDATE TEightIndicator SET
								CClass = CASE WHEN CONVERT(INT, CClass) * 1.0 / @dRank <= 0.05 THEN 'S'
											  WHEN CONVERT(INT, CClass) * 1.0 / @dRank >  0.05 AND CONVERT(INT, CClass) * 1.0 / @dRank <= 0.2  THEN 'A'
											  WHEN CONVERT(INT, CClass) * 1.0 / @dRank >  0.2  AND CONVERT(INT, CClass) * 1.0 / @dRank <= 0.5  THEN 'B'
											  WHEN CONVERT(INT, CClass) * 1.0 / @dRank >  0.5  AND CONVERT(INT, CClass) * 1.0 / @dRank <= 0.8  THEN 'C'
											  WHEN CONVERT(INT, CClass) * 1.0 / @dRank >  0.8  AND CONVERT(INT, CClass) * 1.0 / @dRank <= 0.95 THEN 'D'
											  WHEN CONVERT(INT, CClass) * 1.0 / @dRank >  0.95 THEN 'F'
										 END   
							 WHERE CFirstDate = @dLoopDate
							   AND CFlag = @dCFlag
						END

					-- 월별총합(전체, 등급별 평균)
					INSERT INTO TEightIndicator
					(CDepartCode ,CFirstDate ,CFlag ,CValue ,CRegist_Count ,CTotal_Count ,CClass ,CTotal_Avg ,CS_Avg ,CA_Avg ,CB_Avg ,CC_Avg ,CD_Avg ,CF_Avg ,CDetail_Leave_Rate) 
					SELECT 'EPX0000', @dLoopDate, @dCFlag, SUM(CValue), 0, 0, '', 
						   ROUND(AVG(CValue), 1), 
					       ROUND(AVG(CASE WHEN CClass = 'S' THEN CValue ELSE NULL END), 1), 
					       ROUND(AVG(CASE WHEN CClass = 'A' THEN CValue ELSE NULL END), 1), 
					       ROUND(AVG(CASE WHEN CClass = 'B' THEN CValue ELSE NULL END), 1), 
					       ROUND(AVG(CASE WHEN CClass = 'C' THEN CValue ELSE NULL END), 1), 
					       ROUND(AVG(CASE WHEN CClass = 'D' THEN CValue ELSE NULL END), 1), 
					       ROUND(AVG(CASE WHEN CClass = 'F' THEN CValue ELSE NULL END), 1), 0
					  FROM TEightIndicator(NOLOCK)
					 WHERE CFirstDate = @dLoopDate
					   AND CFlag = @dCFlag

					-- 합계에서 구한 평균값을 업데이트
					UPDATE A SET
						A.CTotal_Avg = B.CTotal_Avg,
						A.CS_Avg = B.CS_Avg,
						A.CA_Avg = B.CA_Avg,
						A.CB_Avg = B.CB_Avg,
						A.CC_Avg = B.CC_Avg,
						A.CD_Avg = B.CD_Avg,
						A.CF_Avg = B.CF_Avg
					  FROM TEightIndicator A
					  LEFT JOIN (SELECT * FROM TEightIndicator(NOLOCK) WHERE CFirstDate = @dLoopDate AND CFlag = @dCFlag AND CDepartCode = 'EPX0000') B ON 1=1
					 WHERE A.CFirstDate = @dLoopDate
					   AND A.CFlag = @dCFlag

				END

			-- 데이터 집계 안된 지점자료 생성
			INSERT INTO TEightIndicator
			(CDepartCode ,CFirstDate ,CFlag) 
			SELECT a.CDepartCode, @dLoopDate, @dCFlag
			  FROM TFacility a(NOLOCK)
			  LEFT JOIN TEightIndicator b(NOLOCK) ON a.CDepartCode = b.CDepartCode AND b.CFirstDate = @dLoopDate and b.CFlag = @dCFlag
			 WHERE LEFT(CONVERT(VARCHAR(10), CDepartStartDate, 112), 6)  <= LEFT(CONVERT(VARCHAR(10), @dLoopDate, 112), 6) 
			   AND b.CFlag IS NULL
			   AND a.CDepartCode like 'EPX%'
			   -- 2014.06.10 수정내용 추가
			   AND a.CDepartCode not in ('EPXBRANCH','EPXDIRECT','EPXHEAD')

			-- 반복용 일자에 한달 더하기
			SET @dLoopDate = DATEADD(Month, 1, @dLoopDate)
		END

	-- 7.월평균콤마수
	SET @dCFlag		= '7'
	SET @dLoopDate	= @dStartDate
	WHILE @dEndDate >= @dLoopDate
		BEGIN
			INSERT INTO TEightIndicator
			(CDepartCode ,CFirstDate ,CFlag ,CValue ,CRegist_Count ,CTotal_Count ,CClass ,CTotal_Avg ,CS_Avg ,CA_Avg ,CB_Avg ,CC_Avg ,CD_Avg ,CF_Avg ,CDetail_Leave_Rate) 
			SELECT CStdDepartCode, @dLoopDate, @dCFlag, SUM(ISNULL(CPayCommas, 0)), 
				   0, 0, '', 0, 0, 0, 0, 0, 0, 0, 0 -- 값, 전체(%에서 사용), 등급, 전국평균, S평균, A평균, B평균, C평균, D평균, F평균, 상세사용이탈율
			  FROM TStudentTutoring(NOLOCK)
			 WHERE CStdDepartCode like 'EPX%'
			   -- 2014.06.10 수정내용 추가
			   AND CStdDepartCode not in ('EPXBRANCH','EPXDIRECT','EPXHEAD')
			   AND LEFT(CONVERT(VARCHAR(10), CPayDate, 112), 6)  = LEFT(CONVERT(VARCHAR(10), @dLoopDate, 112), 6) 
			 GROUP BY CStdDepartCode
			  	
			-- 저장값이 있을 경우
			IF @@ROWCOUNT > 0
				BEGIN
					-- 랭킹구하기
					UPDATE A SET
						A.CClass = B.CClass
					  FROM TEightIndicator A 
					  LEFT JOIN (
								SELECT CDepartCode, RANK() OVER (ORDER BY CValue DESC) AS CClass
								  FROM TEightIndicator(NOLOCK)
								 WHERE CFirstDate = @dLoopDate
								   AND CFlag = @dCFlag
								) B ON A.CDepartCode = B.CDepartCode
					 WHERE A.CFirstDate = @dLoopDate
					   AND A.CFlag = @dCFlag

					-- 최고등급 확인
					SELECT @dRank = MAX(CClass)
					  FROM TEightIndicator(NOLOCK)
					 WHERE CFirstDate = @dLoopDate
					   AND CFlag = @dCFlag

					-- 1.랭킹이 20개 미만이면 바로 고냥 업데이트
					IF @dRank < 20
						BEGIN
							UPDATE TEightIndicator SET
								CClass = CASE 
								              WHEN CClass = 1 THEN 'S'
											  WHEN CClass >  1 AND CClass <= 4  THEN 'A'
											  WHEN CClass >  4 AND CClass <= 8  THEN 'B'
											  WHEN CClass >  8 AND CClass <= 12 THEN 'C'
											  WHEN CClass > 12 AND CClass <= 16 THEN 'D'
											  WHEN CClass > 16 THEN 'F'
										 END   
							 WHERE CFirstDate = @dLoopDate
							   AND CFlag = @dCFlag
						END
					-- 2.랭킹이 20개 이상이면 비율로 등급업데이트
					ELSE
						BEGIN
							-- 상위  5% 이상 - S
							-- 상위  5% 미만 20%이상 - A
							-- 상위 20% 미만 50%이상 - B
							-- 상위 50% 미만 80%이상 - C
							-- 상위 80% 미만 95%이상 - D
							-- 상위 95% 미만 - F
							-- 특이사항 Integer을 계산 시 정수화 되므로 1.0을 곱해서 계산식 처리
							UPDATE TEightIndicator SET
								CClass = CASE WHEN CONVERT(INT, CClass) * 1.0 / @dRank <= 0.05 THEN 'S'
											  WHEN CONVERT(INT, CClass) * 1.0 / @dRank >  0.05 AND CONVERT(INT, CClass) * 1.0 / @dRank <= 0.2  THEN 'A'
											  WHEN CONVERT(INT, CClass) * 1.0 / @dRank >  0.2  AND CONVERT(INT, CClass) * 1.0 / @dRank <= 0.5  THEN 'B'
											  WHEN CONVERT(INT, CClass) * 1.0 / @dRank >  0.5  AND CONVERT(INT, CClass) * 1.0 / @dRank <= 0.8  THEN 'C'
											  WHEN CONVERT(INT, CClass) * 1.0 / @dRank >  0.8  AND CONVERT(INT, CClass) * 1.0 / @dRank <= 0.95 THEN 'D'
											  WHEN CONVERT(INT, CClass) * 1.0 / @dRank >  0.95 THEN 'F'
										 END   
							 WHERE CFirstDate = @dLoopDate
							   AND CFlag = @dCFlag
						END

					-- 월별총합(전체, 등급별 평균)
					INSERT INTO TEightIndicator
					(CDepartCode ,CFirstDate ,CFlag ,CValue ,CRegist_Count ,CTotal_Count ,CClass ,CTotal_Avg ,CS_Avg ,CA_Avg ,CB_Avg ,CC_Avg ,CD_Avg ,CF_Avg ,CDetail_Leave_Rate) 
					SELECT 'EPX0000', @dLoopDate, @dCFlag, SUM(CValue), 0, 0, '', 
					       ROUND(AVG(CValue), 1), 
						   ROUND(AVG(CASE WHEN CClass = 'S' THEN CValue * 1.0 ELSE NULL END), 1), 
						   ROUND(AVG(CASE WHEN CClass = 'A' THEN CValue * 1.0 ELSE NULL END), 1), 
						   ROUND(AVG(CASE WHEN CClass = 'B' THEN CValue * 1.0 ELSE NULL END), 1), 
						   ROUND(AVG(CASE WHEN CClass = 'C' THEN CValue * 1.0 ELSE NULL END), 1),  
						   ROUND(AVG(CASE WHEN CClass = 'D' THEN CValue * 1.0 ELSE NULL END), 1), 
						   ROUND(AVG(CASE WHEN CClass = 'F' THEN CValue * 1.0 ELSE NULL END), 1), 0
					  FROM TEightIndicator(NOLOCK)
					 WHERE CFirstDate = @dLoopDate
					   AND CFlag = @dCFlag

					-- 합계에서 구한 평균값을 업데이트
					UPDATE A SET
						A.CTotal_Avg = B.CTotal_Avg,
						A.CS_Avg = B.CS_Avg,
						A.CA_Avg = B.CA_Avg,
						A.CB_Avg = B.CB_Avg,
						A.CC_Avg = B.CC_Avg,
						A.CD_Avg = B.CD_Avg,
						A.CF_Avg = B.CF_Avg
					  FROM TEightIndicator A
					  LEFT JOIN (SELECT * FROM TEightIndicator(NOLOCK) WHERE CFirstDate = @dLoopDate AND CFlag = @dCFlag AND CDepartCode = 'EPX0000') B ON 1=1
					 WHERE A.CFirstDate = @dLoopDate
					   AND A.CFlag = @dCFlag

				END
			
			-- 데이터 집계 안된 지점자료 생성
			INSERT INTO TEightIndicator
			(CDepartCode ,CFirstDate ,CFlag) 
			SELECT a.CDepartCode, @dLoopDate, @dCFlag
			  FROM TFacility a(NOLOCK)
			  LEFT JOIN TEightIndicator b(NOLOCK) ON a.CDepartCode = b.CDepartCode AND b.CFirstDate = @dLoopDate and b.CFlag = @dCFlag
			 WHERE LEFT(CONVERT(VARCHAR(10), CDepartStartDate, 112), 6)  <= LEFT(CONVERT(VARCHAR(10), @dLoopDate, 112), 6) 
			   AND b.CFlag IS NULL
			   AND a.CDepartCode like 'EPX%'
			   -- 2014.06.10 수정내용 추가
			   AND a.CDepartCode not in ('EPXBRANCH','EPXDIRECT','EPXHEAD')

			-- 반복용 일자에 한달 더하기
			SET @dLoopDate = DATEADD(Month, 1, @dLoopDate)
		END

	-- 8.월평균순이익
	-- 2014.05.20 : 간단하게 수입에서 지출을 빼는건데...구조가 그닥 간단하지 않을거 같은데..나중에 어따 안쓰일려나?...수입은 구했고...지출을 별도 구한담에 빼야 하남...쩝..
	--              고냥 바로 구합쎄다...수입에서 지출을 뺀걸로...그까이꺼 조인 좀 걸지 머!!!
	--              일단 순수익 이니깐 매출액이 없는 지점은 뺍시다...모양이 이상해지니깐
	SET @dCFlag		= '8'
	SET @dLoopDate	= @dStartDate
	WHILE @dEndDate >= @dLoopDate
		BEGIN

			INSERT INTO TEightIndicator
			(CDepartCode ,CFirstDate ,CFlag ,CValue ,CRegist_Count ,CTotal_Count ,CClass ,CTotal_Avg ,CS_Avg ,CA_Avg ,CB_Avg ,CC_Avg ,CD_Avg ,CF_Avg ,CDetail_Leave_Rate) 
			SELECT ISNULL(a.CBrDepartCode, b.CBrDepartCode), @dLoopDate, @dCFlag, SUM(ISNULL(a.CCash,0)-ISNULL(b.CCash,0)+ISNULL(b.CCard, 0)),
				   0, 0, '', 0, 0, 0, 0, 0, 0, 0, 0 -- 값, 전체(%에서 사용), 등급, 전국평균, S평균, A평균, B평균, C평균, D평균, F평균, 상세사용이탈율
			  FROM TAccountingIncome a(NOLOCK)
			  FULL OUTER JOIN TAccountingExpense b(NOLOCK) -- FULL조인 사용
					 ON a.CBaDepartCode = b.CBaDepartCode
					AND LEFT(CONVERT(VARCHAR(10), b.CAccountingDate, 112), 6) = LEFT(CONVERT(VARCHAR(10), @dLoopDate, 112), 6)
			 WHERE LEFT(CONVERT(VARCHAR(10), a.CAccountingDate, 112), 6) = LEFT(CONVERT(VARCHAR(10), @dLoopDate, 112), 6)
			   AND a.CBrDepartCode like 'EPX%'
			   -- 2014.06.10 수정내용 추가
			   AND a.CBrDepartCode not in ('EPXBRANCH','EPXDIRECT','EPXHEAD')
			 GROUP BY ISNULL(a.CBrDepartCode, b.CBrDepartCode)

			-- 저장값이 있을 경우
			IF @@ROWCOUNT > 0
				BEGIN
					-- 랭킹구하기
					UPDATE A SET
						A.CClass = B.CClass
					  FROM TEightIndicator A 
					  LEFT JOIN (
								SELECT CDepartCode, RANK() OVER (ORDER BY CValue DESC) AS CClass
								  FROM TEightIndicator(NOLOCK)
								 WHERE CFirstDate = @dLoopDate
								   AND CFlag = @dCFlag
								) B ON A.CDepartCode = B.CDepartCode
					 WHERE A.CFirstDate = @dLoopDate
					   AND A.CFlag = @dCFlag

					-- 최고등급 확인
					SELECT @dRank = MAX(CClass)
					  FROM TEightIndicator(NOLOCK)
					 WHERE CFirstDate = @dLoopDate
					   AND CFlag = @dCFlag

					-- 1.랭킹이 20개 미만이면 바로 고냥 업데이트
					IF @dRank < 20
						BEGIN
							UPDATE TEightIndicator SET
								CClass = CASE 
								              WHEN CClass = 1 THEN 'S'
											  WHEN CClass >  1 AND CClass <= 4  THEN 'A'
											  WHEN CClass >  4 AND CClass <= 8  THEN 'B'
											  WHEN CClass >  8 AND CClass <= 12 THEN 'C'
											  WHEN CClass > 12 AND CClass <= 16 THEN 'D'
											  WHEN CClass > 16 THEN 'F'
										 END   
							 WHERE CFirstDate = @dLoopDate
							   AND CFlag = @dCFlag
						END
					-- 2.랭킹이 20개 이상이면 비율로 등급업데이트
					ELSE
						BEGIN
							-- 상위  5% 이상 - S
							-- 상위  5% 미만 20%이상 - A
							-- 상위 20% 미만 50%이상 - B
							-- 상위 50% 미만 80%이상 - C
							-- 상위 80% 미만 95%이상 - D
							-- 상위 95% 미만 - F
							-- 특이사항 Integer을 계산 시 정수화 되므로 1.0을 곱해서 계산식 처리
							UPDATE TEightIndicator SET
								CClass = CASE WHEN CONVERT(INT, CClass) * 1.0 / @dRank <= 0.05 THEN 'S'
											  WHEN CONVERT(INT, CClass) * 1.0 / @dRank >  0.05 AND CONVERT(INT, CClass) * 1.0 / @dRank <= 0.2  THEN 'A'
											  WHEN CONVERT(INT, CClass) * 1.0 / @dRank >  0.2  AND CONVERT(INT, CClass) * 1.0 / @dRank <= 0.5  THEN 'B'
											  WHEN CONVERT(INT, CClass) * 1.0 / @dRank >  0.5  AND CONVERT(INT, CClass) * 1.0 / @dRank <= 0.8  THEN 'C'
											  WHEN CONVERT(INT, CClass) * 1.0 / @dRank >  0.8  AND CONVERT(INT, CClass) * 1.0 / @dRank <= 0.95 THEN 'D'
											  WHEN CONVERT(INT, CClass) * 1.0 / @dRank >  0.95 THEN 'F'
										 END   
							 WHERE CFirstDate = @dLoopDate
							   AND CFlag = @dCFlag
						END

					-- 월별총합(전체, 등급별 평균)
					INSERT INTO TEightIndicator
					(CDepartCode ,CFirstDate ,CFlag ,CValue ,CRegist_Count ,CTotal_Count ,CClass ,CTotal_Avg ,CS_Avg ,CA_Avg ,CB_Avg ,CC_Avg ,CD_Avg ,CF_Avg ,CDetail_Leave_Rate) 
					SELECT 'EPX0000', @dLoopDate, @dCFlag, SUM(CValue), 0, 0, '', 
						   ROUND(AVG(CValue), 1), 
					       ROUND(AVG(CASE WHEN CClass = 'S' THEN CValue ELSE NULL END), 1), 
					       ROUND(AVG(CASE WHEN CClass = 'A' THEN CValue ELSE NULL END), 1), 
					       ROUND(AVG(CASE WHEN CClass = 'B' THEN CValue ELSE NULL END), 1), 
					       ROUND(AVG(CASE WHEN CClass = 'C' THEN CValue ELSE NULL END), 1), 
					       ROUND(AVG(CASE WHEN CClass = 'D' THEN CValue ELSE NULL END), 1), 
					       ROUND(AVG(CASE WHEN CClass = 'F' THEN CValue ELSE NULL END), 1), 0
					  FROM TEightIndicator(NOLOCK)
					 WHERE CFirstDate = @dLoopDate
					   AND CFlag = @dCFlag

					-- 합계에서 구한 평균값을 업데이트
					UPDATE A SET
						A.CTotal_Avg = B.CTotal_Avg,
						A.CS_Avg = B.CS_Avg,
						A.CA_Avg = B.CA_Avg,
						A.CB_Avg = B.CB_Avg,
						A.CC_Avg = B.CC_Avg,
						A.CD_Avg = B.CD_Avg,
						A.CF_Avg = B.CF_Avg
					  FROM TEightIndicator A
					  LEFT JOIN (SELECT * FROM TEightIndicator(NOLOCK) WHERE CFirstDate = @dLoopDate AND CFlag = @dCFlag AND CDepartCode = 'EPX0000') B ON 1=1
					 WHERE A.CFirstDate = @dLoopDate
					   AND A.CFlag = @dCFlag

				END

			-- 데이터 집계 안된 지점자료 생성
			INSERT INTO TEightIndicator
			(CDepartCode ,CFirstDate ,CFlag) 
			SELECT a.CDepartCode, @dLoopDate, @dCFlag
			  FROM TFacility a(NOLOCK)
			  LEFT JOIN TEightIndicator b(NOLOCK) ON a.CDepartCode = b.CDepartCode AND b.CFirstDate = @dLoopDate and b.CFlag = @dCFlag
			 WHERE LEFT(CONVERT(VARCHAR(10), CDepartStartDate, 112), 6)  <= LEFT(CONVERT(VARCHAR(10), @dLoopDate, 112), 6) 
			   AND b.CFlag IS NULL
			   AND a.CDepartCode like 'EPX%'
			   -- 2014.06.10 수정내용 추가
			   AND a.CDepartCode not in ('EPXBRANCH','EPXDIRECT','EPXHEAD')

			-- 반복용 일자에 한달 더하기
			SET @dLoopDate = DATEADD(Month, 1, @dLoopDate)
		END


	
	-- 분기별 데이터 생성
	--   : 쿼리로 월별데이터를 가지고 처리할려고 했는데..분기별의 검색조건이 참~~ 아름답게 유동적으로 움직여야 하고
	--     분기별 합산에 따른 랭킹이 변경되니깐 이러나 저러나 계산식이 마이드갈거 같으니 일찍감치 고냥 분리
	-- 	, 단 위에 생성된 월별데이터를 이용하여 쓰기~~~그러니 조금은 간편할려나?
	--   : 분기기준 - 신학기 2~월, 1학기 5~6월, 여름방학 7~8월, 2학기 9~11월, 겨울방학 12~익년1월
	--   : 2014.05.20 - 분기별 합계가 아닌 단순 분기별 평균으로 구함...그렇다니깐 그렇게 해야죵..~~~용어에 헷깔리지 마삼(나중에 멤이 바뀔수도 있지만)
	
	-- 시작일자를(위에 맹글어둔거) 기준으로 삭제할 기준년도와 분기를 구한다.
	SELECT @dYear   = CASE 
						WHEN DATEPART(mm, @dStartDate) = 1 THEN CONVERT(VARCHAR(4), DATEPART(yy, @dStartDate) - 1) -- 1월이면 이전년도 12월부터 구해야 하니깐
						ELSE CONVERT(VARCHAR(4), DATEPART(yy, @dStartDate))
					  END,
		   @dPeriod = CASE DATEPART(mm, @dStartDate)
						WHEN  2 THEN '1' WHEN  3 THEN '1' WHEN 4 THEN '1'
						WHEN  5 THEN '2' WHEN  6 THEN '2'
						WHEN  7 THEN '3' WHEN  8 THEN '3'
						WHEN  9 THEN '4' WHEN 10 THEN '4' WHEN 11 THEN '4'
						WHEN 12 THEN '5' WHEN  1 THEN '5'
					  END
	
	-- 분기별집계자료 지우기
	DELETE FROM TEightIndicatorPeriod WHERE CYearPeriod >= @dYear + @dPeriod

	-- 분기별자료 생성을 위한 시작일 재 설정(종료일은 무조건 오늘기준월이니깐 재 설정 안해도 됨)
	SELECT @dStartDate = CONVERT(DATETIME, @dYear + CASE @dPeriod WHEN '1' THEN '02' WHEN '2' THEN '05' WHEN '3' THEN '07' WHEN '4' THEN '09' ELSE '12' END + '01')
	
	-- 쿼리한방 생성
	INSERT INTO TEightIndicatorPeriod
	SELECT CDepartCode, 
		   CASE 
			WHEN DATEPART(mm, CFirstDate) = 1 THEN CONVERT(VARCHAR(4), DATEPART(yy, CFirstDate) - 1) -- 1월이면 이전년도 12월부터 구해야 하니깐
			ELSE CONVERT(VARCHAR(4), DATEPART(yy, CFirstDate))
		   END
		   +
		   CASE DATEPART(mm, CFirstDate)
			 WHEN  2 THEN '1' WHEN  3 THEN '1' WHEN 4 THEN '1'
			 WHEN  5 THEN '2' WHEN  6 THEN '2'
			 WHEN  7 THEN '3' WHEN  8 THEN '3'
			 WHEN  9 THEN '4' WHEN 10 THEN '4' WHEN 11 THEN '4'
			 WHEN 12 THEN '5' WHEN  1 THEN '5'
		   END 
		   AS CYearPeriod, 
		   CFlag, 
-- 2014.05.20 : 평균도 그냥 분기로 구할 땐 고냥 분기의 평균이래요...실제값의 평균이 아니라...(희안하다..~~~ 그지??)
--		   CASE WHEN CFlag = '4' AND SUM(CTotal_Count) <> 0 THEN  ROUND(SUM(CRegist_Count) * 1.0 /SUM(CTotal_Count) * 100, 1) ELSE SUM(CValue) END, -- %의 계산은 별도 처리
		   ROUND(AVG(ISNULL(CValue, 0)), 1), -- %의 계산은 별도 처리
		   SUM(CRegist_Count),
		   SUM(CTotal_Count),
	       '' , 0, 0, 0, 0, 0, 0, 0 -- 등급, 전국평균, S평균, A평균, B평균, C평균, D평균, F평균
	  FROM TEightIndicator(NOLOCK)
	 WHERE CDepartCode <> 'EPX0000' -- 합계제외
	   AND CFirstDate  >= @dStartDate
	 GROUP BY CDepartCode, 
		   CASE 
			WHEN DATEPART(mm, CFirstDate) = 1 THEN CONVERT(VARCHAR(4), DATEPART(yy, CFirstDate) - 1) -- 1월이면 이전년도 12월부터 구해야 하니깐
			ELSE CONVERT(VARCHAR(4), DATEPART(yy, CFirstDate))
		   END
		   +
		   CASE DATEPART(mm, CFirstDate)
			 WHEN  2 THEN '1' WHEN  3 THEN '1' WHEN 4 THEN '1'
			 WHEN  5 THEN '2' WHEN  6 THEN '2'
			 WHEN  7 THEN '3' WHEN  8 THEN '3'
			 WHEN  9 THEN '4' WHEN 10 THEN '4' WHEN 11 THEN '4'
			 WHEN 12 THEN '5' WHEN  1 THEN '5'
		   END, CFlag
	
	-- 저장값이 있을 경우
	IF @@ROWCOUNT > 0
		BEGIN
			-- 랭킹구하기
			UPDATE A SET
				A.CClass = B.CClass
			  FROM TEightIndicatorPeriod A 
			  LEFT JOIN (
						SELECT CDepartCode, CYearPeriod, CFlag, RANK() OVER (PARTITION BY CYearPeriod, CFlag ORDER BY CValue DESC) AS CClass
						  FROM TEightIndicatorPeriod(NOLOCK)
						) B ON A.CDepartCode = B.CDepartCode AND A.CYearPeriod = B.CYearPeriod AND A.CFlag = B.CFlag
			 WHERE A.CYearPeriod >= @dYear + @dPeriod

			-- 랭킹 => 등급 변경(이건 한방처리다 보니 등급계산 미만 데이터의 보정을 위해 LOOP를 좀 돌려야 쓰겠네)
			DECLARE CURSOR1 CURSOR FOR
			SELECT CYearPeriod, CFlag, MAX(CClass)
			  FROM TEightIndicatorPeriod(NOLOCK)
			 WHERE CYearPeriod >= @dYear + @dPeriod
			 GROUP BY CYearPeriod, CFlag

			OPEN CURSOR1

			FETCH NEXT FROM CURSOR1 INTO @cCYearPeriod, @cCFlag, @cCClass

			WHILE @@FETCH_STATUS = 0
				BEGIN
					-- 1.랭킹이 20개 미만이면 바로 고냥 업데이트
					IF @cCFlag < 20
						BEGIN
							UPDATE TEightIndicatorPeriod SET
								CClass = CASE 
								              WHEN CClass = 1 THEN 'S'
											  WHEN CClass >  1 AND CClass <= 4  THEN 'A'
											  WHEN CClass >  4 AND CClass <= 8  THEN 'B'
											  WHEN CClass >  8 AND CClass <= 12 THEN 'C'
											  WHEN CClass > 12 AND CClass <= 16 THEN 'D'
											  WHEN CClass > 16 THEN 'F'
										 END   
							 WHERE CYearPeriod = @cCYearPeriod
							   AND CFlag = @cCFlag
						END
					-- 2.랭킹이 20개 이상이면 비율로 등급업데이트
					ELSE 
						BEGIN
							UPDATE TEightIndicatorPeriod SET
								CClass = CASE WHEN CONVERT(INT, CClass) * 1.0 / @cCFlag <= 0.05 THEN 'S'
											  WHEN CONVERT(INT, CClass) * 1.0 / @cCFlag >  0.05 AND CONVERT(INT, CClass) * 1.0 / @cCFlag <= 0.2  THEN 'A'
											  WHEN CONVERT(INT, CClass) * 1.0 / @cCFlag >  0.2  AND CONVERT(INT, CClass) * 1.0 / @cCFlag <= 0.5  THEN 'B'
											  WHEN CONVERT(INT, CClass) * 1.0 / @cCFlag >  0.5  AND CONVERT(INT, CClass) * 1.0 / @cCFlag <= 0.8  THEN 'C'
											  WHEN CONVERT(INT, CClass) * 1.0 / @cCFlag >  0.8  AND CONVERT(INT, CClass) * 1.0 / @cCFlag <= 0.95 THEN 'D'
											  WHEN CONVERT(INT, CClass) * 1.0 / @cCFlag >  0.95 THEN 'F'
										 END   

							 WHERE CYearPeriod = @cCYearPeriod
							   AND CFlag = @cCFlag
						END
					FETCH NEXT FROM CURSOR1 INTO @cCYearPeriod, @cCFlag, @cCClass
				END
			CLOSE CURSOR1
			DEALLOCATE CURSOR1
			
			-- 분기별총합(전체, 등급별 평균)
			INSERT INTO TEightIndicatorPeriod
			SELECT 'EPX0000', CYearPeriod, CFlag, 
-- 2014.05.20 : 분기별도 그냥 평균...그래서 이건 그냥 합
					SUM(ISNULL(CValue, 0)),
--					CASE WHEN CFlag = '4' AND SUM(CTotal_Count) <> 0 THEN ROUND(SUM(CRegist_Count) * 1.0 / SUM(CTotal_Count) * 100, 1)
--					ELSE SUM(CValue) END, 
					SUM(CRegist_Count), 
					SUM(CTotal_Count),
					'', 
-- 2014.05.20 : 분기별도 그냥 평균...이거 겁나 희안해지는데..
					ROUND(AVG(ISNULL(CValue, 0)) * 1.0, 1),
--					CASE WHEN CFlag = '4' AND SUM(CTotal_Count) <> 0 THEN ROUND(SUM(CRegist_Count) * 1.0 / SUM(CTotal_Count) * 100, 1)
--					ELSE ROUND(AVG(CValue * 1.0), 2) END, 
--					ROUND(AVG(CValue * 1.0), 2), 
					ROUND(AVG(CASE WHEN CClass = 'S' THEN CValue * 1.0 ELSE NULL END), 1), 
					ROUND(AVG(CASE WHEN CClass = 'A' THEN CValue * 1.0 ELSE NULL END), 1), 
					ROUND(AVG(CASE WHEN CClass = 'B' THEN CValue * 1.0 ELSE NULL END), 1), 
					ROUND(AVG(CASE WHEN CClass = 'C' THEN CValue * 1.0 ELSE NULL END), 1),  
					ROUND(AVG(CASE WHEN CClass = 'D' THEN CValue * 1.0 ELSE NULL END), 1), 
					ROUND(AVG(CASE WHEN CClass = 'F' THEN CValue * 1.0 ELSE NULL END), 1)
			  FROM TEightIndicatorPeriod(NOLOCK)
			 WHERE CYearPeriod >= @dYear + @dPeriod
			 GROUP BY CYearPeriod, CFlag

			-- 합계에서 구한 평균값을 업데이트
			UPDATE A SET
				A.CTotal_Avg = B.CTotal_Avg,
				A.CS_Avg = B.CS_Avg,
				A.CA_Avg = B.CA_Avg,
				A.CB_Avg = B.CB_Avg,
				A.CC_Avg = B.CC_Avg,
				A.CD_Avg = B.CD_Avg,
				A.CF_Avg = B.CF_Avg
				FROM TEightIndicatorPeriod A
				LEFT JOIN (SELECT * FROM TEightIndicatorPeriod(NOLOCK) WHERE CYearPeriod >= @dYear + @dPeriod AND CDepartCode = 'EPX0000') B ON A.CYearPeriod = B.CYearPeriod AND A.CFlag = B.CFlag
				WHERE A.CYearPeriod >= @dYear + @dPeriod

		END
--*/	
	--*******************************
	--개인랭킹 구하기
	-- .학생별매니져를 활용해야 하는데 이전자료는 주구난방이라 과거는 구해두고 오늘기준 2달만 구하기
	-- 학생코드 45094(박서윤)이관데이터에 코드가 중복되지만 일단 상담이든 개별 등록내역이 없으니 참고만 하삼
	--*******************************
	DECLARE @dLastDate DATETIME

	-- 오늘기준 13개월 전 데이터 산출
--	SELECT @dStartDate = DATEADD(Month, -12, @dEndDate) - (day(@dEndDate)-1)
	-- 오늘기준 2개월의 데이터 산출
	SELECT @dStartDate = DATEADD(Month, -1, @dEndDate) - (day(@dEndDate)-1)

	-- 기존데이터 삭제
	DELETE FROM TPersonalRank WHERE CFirstDate >= @dStartDate

	-- 1.상담관리 평균유지개월
	SET @dCFlag = '1'
	SET @dLoopDate = @dStartDate
	WHILE @dEndDate >= @dLoopDate
		BEGIN

			-- 마지막일 구하기
			SELECT @dLastDate = dateadd(d,-1,dateadd(m,1,dateadd(dd,1,dateadd(dd,-datepart(dd,@dLoopDate),@dLoopDate))))
			-- 월말기준 매니져별 학생
			SELECT @dLoopDate AS CFirstDate, a.CScDepartCode AS CDepartCode, a.CScDepartStartDate AS CDepartStartDate, a.CScCode AS CStudentCode, 
					CASE WHEN b.CManagerId IS NOT NULL AND a.CManager <> b.CManagerId THEN b.CManagerId ELSE a.CManager END CManagerCode,
					ROUND(SUM(c.CGapDay) * 1.0 / 365 * 12, 2) AS CGapDay
			  INTO #TEMP0
			  FROM TStudentCounsel a(NOLOCK)
			  LEFT JOIN ( --학생 매니져 이력
						SELECT CBranchCode, CBranchStartDate, CStudentCode, CManagerId
						  FROM TStudentManager(NOLOCK)
						 WHERE CManagerType = 'Counsel'
						   AND CStartDate <= @dLastDate
						   AND CEndDate   >= @dLastDate AND CEndDate <> '2200-12-31'
						 GROUP BY CBranchCode, CBranchStartDate, CStudentCode, CManagerId
						) b
				ON a.CScDepartCode = b.CBranchCode AND a.CScDepartStartDate = b.CBranchStartDate AND a.CScCode = b.CStudentCode
			  LEFT JOIN ( --학생유지일수
						SELECT b.CScCode, SUM(DATEDIFF(DD, b.CStartDate, CASE WHEN isnull(c.CLeaveEndDate, b.CEndDate) > @dLastDate THEN @dLastDate ELSE isnull(c.CLeaveEndDate, b.CEndDate) END)) + 1 AS CGapDay
						  FROM TStudentCounsel b(NOLOCK)
						  LEFT JOIN TStudentCounselLeave c(NOLOCK)
							ON b.CScDepartCode = c.CStdBrcDptCode and b.CScCode = c.CStdCode and b.cno = c.CNo
						 WHERE b.CScDepartCode like 'EPX%'
			               AND b.CScDepartCode not in ('EPXBRANCH','EPXDIRECT','EPXHEAD')
							-- 시작일이 월말보다 작거나 같은것만(그래야 월별 구해지죠)
						   AND b.CStartDate <= @dLastDate
						 GROUP BY b.CScCode
						) c 
				ON a.CScCode = c.CScCode
			 WHERE a.CScDepartCode like 'EPX%'
			   AND a.CScDepartCode not in ('EPXBRANCH','EPXDIRECT','EPXHEAD')
			   AND a.CStartDate <= @dLastDate
			   AND a.CEndDate   >= @dLastDate
			 GROUP BY a.CScDepartCode, a.CScDepartStartDate, a.CScCode, CASE WHEN b.CManagerId IS NOT NULL AND a.CManager <> b.CManagerId THEN b.CManagerId ELSE a.CManager END

			-- 상담관리 학생이 5명이하인 매니져는 제외
			DELETE FROM #TEMP0
			 WHERE CFirstDate = @dLoopDate
			   AND CManagerCode IN (
									SELECT CManagerCode
									  FROM #TEMP0
									 GROUP BY CManagerCode
									HAVING COUNT(CManagerCode) <= 5
									)

			-- 집계테이블에 넣기
			INSERT INTO TPersonalRank(CManagerCode, CFirstDate, CFlag, CValue) -- , CClass, CTotal_Avg, CS_Avg CA_Avg CB_Avg CC_Avg CD_Avg CF_Avg
			SELECT CManagerCode, @dLoopDate, @dCFlag, ROUND(AVG(CGapDay), 2)
			  FROM #TEMP0
			 WHERE CFirstDate = @dLoopDate
			 GROUP BY CManagerCode, CFirstDate
			
			
			IF @@ROWCOUNT > 0
				BEGIN
					-- 랭킹 업데이트
					UPDATE A SET
						A.CRank = B.CRank
					  FROM TPersonalRank A 
					  LEFT JOIN (
								SELECT CManagerCode, RANK() OVER (ORDER BY CValue DESC) AS CRank
								  FROM TPersonalRank(NOLOCK)
								 WHERE CFirstDate = @dLoopDate
								   AND CFlag = @dCFlag
								) B ON A.CManagerCode = B.CManagerCode
					WHERE A.CFirstDate = @dLoopDate
					  AND A.CFlag = @dCFlag

					-- 등급산정
					SELECT @dRank = MAX(CRank)
					  FROM TPersonalRank(NOLOCK)
					 WHERE CFirstDate = @dLoopDate
					   AND CFlag = @dCFlag

					-- 1.랭킹이 20개 미만이면 바로 고냥 업데이트
					IF @dRank < 20
						BEGIN
							UPDATE TPersonalRank SET
								CClass = CASE 
								              WHEN CRank = 1 THEN 'S'
											  WHEN CRank >  1 AND CRank <= 4  THEN 'A'
											  WHEN CRank >  4 AND CRank <= 8  THEN 'B'
											  WHEN CRank >  8 AND CRank <= 12 THEN 'C'
											  WHEN CRank > 12 AND CRank <= 16 THEN 'D'
											  WHEN CRank > 16 THEN 'F'
										 END   
							 WHERE CFirstDate = @dLoopDate
							   AND CFlag      = @dCFlag
						END
					-- 2.랭킹이 20개 이상이면 비율로 등급업데이트
					ELSE
						BEGIN
							-- 상위  5% 이상 - S
							-- 상위  5% 미만 20%이상 - A
							-- 상위 20% 미만 50%이상 - B
							-- 상위 50% 미만 80%이상 - C
							-- 상위 80% 미만 95%이상 - D
							-- 상위 95% 미만 - F
							-- 특이사항 Integer을 계산 시 정수화 되므로 1.0을 곱해서 계산식 처리
							UPDATE TPersonalRank SET
								CClass = CASE WHEN CRank * 1.0 / @dRank <= 0.05 THEN 'S'
											  WHEN CRank * 1.0 / @dRank >  0.05 AND CRank * 1.0 / @dRank <= 0.2  THEN 'A'
											  WHEN CRank * 1.0 / @dRank >  0.2  AND CRank * 1.0 / @dRank <= 0.5  THEN 'B'
											  WHEN CRank * 1.0 / @dRank >  0.5  AND CRank * 1.0 / @dRank <= 0.8  THEN 'C'
											  WHEN CRank * 1.0 / @dRank >  0.8  AND CRank * 1.0 / @dRank <= 0.95 THEN 'D'
											  WHEN CRank * 1.0 / @dRank >  0.95 THEN 'F'
										 END   
							 WHERE CFirstDate = @dLoopDate
							   AND CFlag      = @dCFlag
						END

					-- 월별총합(전체, 등급별 평균)
					INSERT INTO TPersonalRank
		           (CFirstDate, CManagerCode, CFlag ,CValue ,CTotal_Avg ,CS_Avg ,CA_Avg ,CB_Avg ,CC_Avg ,CD_Avg ,CF_Avg) 
					SELECT @dLoopDate, '000000', @dCFlag, SUM(CValue),
						   ROUND(AVG(CValue), 2), 
					       ROUND(AVG(CASE WHEN CClass = 'S' THEN CValue ELSE NULL END), 2), 
					       ROUND(AVG(CASE WHEN CClass = 'A' THEN CValue ELSE NULL END), 2), 
					       ROUND(AVG(CASE WHEN CClass = 'B' THEN CValue ELSE NULL END), 2), 
					       ROUND(AVG(CASE WHEN CClass = 'C' THEN CValue ELSE NULL END), 2), 
					       ROUND(AVG(CASE WHEN CClass = 'D' THEN CValue ELSE NULL END), 2), 
					       ROUND(AVG(CASE WHEN CClass = 'F' THEN CValue ELSE NULL END), 2)
					  FROM TPersonalRank(NOLOCK)
					 WHERE CFirstDate = @dLoopDate
					   AND CFlag      = @dCFlag

					-- 합계에서 구한 평균값을 업데이트
					UPDATE A SET
						A.CTotal_Avg = B.CTotal_Avg,
						A.CS_Avg = B.CS_Avg,
						A.CA_Avg = B.CA_Avg,
						A.CB_Avg = B.CB_Avg,
						A.CC_Avg = B.CC_Avg,
						A.CD_Avg = B.CD_Avg,
						A.CF_Avg = B.CF_Avg
					  FROM TPersonalRank A
					  LEFT JOIN (SELECT * FROM TPersonalRank(NOLOCK) WHERE CFirstDate = @dLoopDate AND CFlag = @dCFlag AND CManagerCode = '000000') B ON 1=1
					 WHERE A.CFirstDate = @dLoopDate
					   AND A.CFlag = @dCFlag
				END

			-- 반복용 일자에 한달 더하기
			SET @dLoopDate = DATEADD(Month, 1, @dLoopDate)
			-- 임시테이블 삭제
			DROP TABLE #TEMP0
		END

	-- 2.상담관리 이탈율
	-- 월초 매니저 학생수가 5명 이상인 것만 대상(전월말 인원을 구하믄 되겠지요....)
	SET @dCFlag = '2'
	SET @dLoopDate = @dStartDate
	WHILE @dEndDate >= @dLoopDate
		BEGIN

			-- 마지막일 구하기
			SELECT @dLastDate = dateadd(d,-1,dateadd(m,1,dateadd(dd,1,dateadd(dd,-datepart(dd,@dLoopDate),@dLoopDate))))
			-- 전월말기준 매니져별 학생(월초 학생목록)
			--INSERT INTO @TEMP1 (CFirstDate, CStudentCode, CManagerCode)
			SELECT DISTINCT a.CScCode, CASE WHEN c.CManagerId IS NOT NULL AND a.CManager <> c.CManagerId THEN c.CManagerId ELSE a.CManager END CManagerCode
			  INTO #TEMP1
			  FROM TStudentCounsel a(NOLOCK)
			  LEFT JOIN TStudentCounselLeave b(NOLOCK)
				ON a.CScDepartCode = b.CStdBrcDptCode and a.CScCode = b.CStdCode and a.cno = b.CNo
			  LEFT JOIN ( --학생 매니져 이력
						SELECT CBranchCode, CBranchStartDate, CStudentCode, CManagerId
							FROM TStudentManager(NOLOCK)
							WHERE CManagerType = 'Counsel'
							AND CStartDate <= DATEADD(dd, -1, @dLoopDate)
							AND CEndDate   >= DATEADD(dd, -1, @dLoopDate) AND CEndDate <> '2200-12-31'
							GROUP BY CBranchCode, CBranchStartDate, CStudentCode, CManagerId
						) c
				ON a.CScDepartCode = c.CBranchCode AND a.CScDepartStartDate = c.CBranchStartDate AND a.CScCode = c.CStudentCode
			 WHERE a.CScDepartCode like 'EPX%'
			   AND a.CScDepartCode not in ('EPXBRANCH','EPXDIRECT','EPXHEAD')
				-- 시작일이 월말보다 작고 종료일이 월말보다 크거나 같은거
			   AND a.CStartDate < DATEADD(dd, -1, @dLoopDate) AND isnull(b.CLeaveEndDate, a.CEndDate) >= DATEADD(dd, -1, @dLoopDate)

			-- 상담관리 학생이 5명이하인 직원 제외
			DELETE FROM #TEMP1
			 WHERE CManagerCode IN (
									SELECT CManagerCode
									  FROM #TEMP1
									 GROUP BY CManagerCode
									HAVING COUNT(CManagerCode) <= 5
									)

			-- 월말기준 매니져별 학생(월말 학생목록)
			SELECT DISTINCT a.CScCode, CASE WHEN c.CManagerId IS NOT NULL AND a.CManager <> c.CManagerId THEN c.CManagerId ELSE a.CManager END CManagerCode
			  INTO #TEMP2
			  FROM TStudentCounsel a(NOLOCK)
			  LEFT JOIN TStudentCounselLeave b(NOLOCK)
				ON a.CScDepartCode = b.CStdBrcDptCode and a.CScCode = b.CStdCode and a.cno = b.CNo
			  LEFT JOIN ( --학생 매니져 이력
						SELECT CBranchCode, CBranchStartDate, CStudentCode, CManagerId
							FROM TStudentManager(NOLOCK)
							WHERE CManagerType = 'Counsel'
							AND CStartDate <= @dLastDate
							AND CEndDate   >= @dLastDate AND CEndDate <> '2200-12-31'
							GROUP BY CBranchCode, CBranchStartDate, CStudentCode, CManagerId
						) c
				ON a.CScDepartCode = c.CBranchCode AND a.CScDepartStartDate = c.CBranchStartDate AND a.CScCode = c.CStudentCode
			 WHERE a.CScDepartCode like 'EPX%'
			   AND a.CScDepartCode not in ('EPXBRANCH','EPXDIRECT','EPXHEAD')
				-- 시작일이 월말보다 작고 종료일이 월말보다 크거나 같은거
			   AND a.CStartDate < @dLastDate AND isnull(b.CLeaveEndDate, a.CEndDate) >= @dLastDate
			
			-- 집계테이블에 넣기 
			INSERT INTO TPersonalRank(CManagerCode, CFirstDate, CFlag, CValue)
			SELECT A.CManagerCode, @dLoopDate, @dCFlag, ROUND((CMonth - ISNULL(CRetire, 0)) * 1.0  / CMonth, 2)
			  FROM 
					(SELECT CManagerCode, COUNT(CScCode) AS CMonth
			           FROM #TEMP1
					  GROUP BY CManagerCode
					) A
			  LEFT JOIN -- 월초학생목록과 월말학생목록을 조인하여 COUNT
					(SELECT a.CManagerCode, COUNT(a.CScCode) AS CRetire
			           FROM #TEMP1 a
					  INNER JOIN #TEMP2 b ON a.CManagerCode = b.CManagerCode AND a.CScCode = b.CScCode
					  GROUP BY a.CManagerCode
					) B 
				ON A.CManagerCode = B.CManagerCode

			IF @@ROWCOUNT > 0
				BEGIN
					-- 랭킹 업데이트
					UPDATE A SET
						A.CRank = B.CRank
					  FROM TPersonalRank A 
					  LEFT JOIN (
								SELECT CManagerCode, RANK() OVER (ORDER BY CValue) AS CRank -- 이탈율 낮은게 등급이 높음
								  FROM TPersonalRank(NOLOCK)
								 WHERE CFirstDate = @dLoopDate
								   AND CFlag = @dCFlag
								) B ON A.CManagerCode = B.CManagerCode
					WHERE A.CFirstDate = @dLoopDate
					  AND A.CFlag = @dCFlag

					-- 등급산정
					SELECT @dRank = MAX(CRank)
					  FROM TPersonalRank(NOLOCK)
					 WHERE CFirstDate = @dLoopDate
					   AND CFlag = @dCFlag

					-- 1.랭킹이 20개 미만이면 바로 고냥 업데이트
					IF @dRank < 20
						BEGIN
							UPDATE TPersonalRank SET
								CClass = CASE 
								              WHEN CRank = 1 THEN 'S'
											  WHEN CRank >  1 AND CRank <= 4  THEN 'A'
											  WHEN CRank >  4 AND CRank <= 8  THEN 'B'
											  WHEN CRank >  8 AND CRank <= 12 THEN 'C'
											  WHEN CRank > 12 AND CRank <= 16 THEN 'D'
											  WHEN CRank > 16 THEN 'F'
										 END   
							 WHERE CFirstDate = @dLoopDate
							   AND CFlag      = @dCFlag
						END
					-- 2.랭킹이 20개 이상이면 비율로 등급업데이트
					ELSE
						BEGIN
							-- 상위  5% 이상 - S
							-- 상위  5% 미만 20%이상 - A
							-- 상위 20% 미만 50%이상 - B
							-- 상위 50% 미만 80%이상 - C
							-- 상위 80% 미만 95%이상 - D
							-- 상위 95% 미만 - F
							-- 특이사항 Integer을 계산 시 정수화 되므로 1.0을 곱해서 계산식 처리
							-- ※※※※ 2.값이 낮을수록 등급을 높게 처리이지만 위에 랭킹의 순서가 먼저 정해졌으니 동일 ※※※※
							UPDATE TPersonalRank SET
								CClass = CASE WHEN CRank * 1.0 / @dRank <= 0.05 THEN 'S'
											  WHEN CRank * 1.0 / @dRank >  0.05 AND CRank * 1.0 / @dRank <= 0.2  THEN 'A'
											  WHEN CRank * 1.0 / @dRank >  0.2  AND CRank * 1.0 / @dRank <= 0.5  THEN 'B'
											  WHEN CRank * 1.0 / @dRank >  0.5  AND CRank * 1.0 / @dRank <= 0.8  THEN 'C'
											  WHEN CRank * 1.0 / @dRank >  0.8  AND CRank * 1.0 / @dRank <= 0.95 THEN 'D'
											  WHEN CRank * 1.0 / @dRank >  0.95 THEN 'F'
										 END   
							 WHERE CFirstDate = @dLoopDate
							   AND CFlag      = @dCFlag
						END

					-- 월별총합(전체, 등급별 평균)
					INSERT INTO TPersonalRank
		           (CFirstDate, CManagerCode, CFlag ,CValue ,CTotal_Avg ,CS_Avg ,CA_Avg ,CB_Avg ,CC_Avg ,CD_Avg ,CF_Avg) 
					SELECT @dLoopDate, '000000', @dCFlag, SUM(CValue),
						   ROUND(AVG(CValue), 2), 
					       ROUND(AVG(CASE WHEN CClass = 'S' THEN CValue ELSE NULL END), 2), 
					       ROUND(AVG(CASE WHEN CClass = 'A' THEN CValue ELSE NULL END), 2), 
					       ROUND(AVG(CASE WHEN CClass = 'B' THEN CValue ELSE NULL END), 2), 
					       ROUND(AVG(CASE WHEN CClass = 'C' THEN CValue ELSE NULL END), 2), 
					       ROUND(AVG(CASE WHEN CClass = 'D' THEN CValue ELSE NULL END), 2), 
					       ROUND(AVG(CASE WHEN CClass = 'F' THEN CValue ELSE NULL END), 2)
					  FROM TPersonalRank(NOLOCK)
					 WHERE CFirstDate = @dLoopDate
					   AND CFlag      = @dCFlag

					-- 합계에서 구한 평균값을 업데이트
					UPDATE A SET
						A.CTotal_Avg = B.CTotal_Avg,
						A.CS_Avg = B.CS_Avg,
						A.CA_Avg = B.CA_Avg,
						A.CB_Avg = B.CB_Avg,
						A.CC_Avg = B.CC_Avg,
						A.CD_Avg = B.CD_Avg,
						A.CF_Avg = B.CF_Avg
					  FROM TPersonalRank A
					  LEFT JOIN (SELECT * FROM TPersonalRank(NOLOCK) WHERE CFirstDate = @dLoopDate AND CFlag = @dCFlag AND CManagerCode = '000000') B ON 1=1
					 WHERE A.CFirstDate = @dLoopDate
					   AND A.CFlag = @dCFlag
				END

			-- 반복용 일자에 한달 더하기
			SET @dLoopDate = DATEADD(Month, 1, @dLoopDate)
			-- 임시테이블 삭제
			DROP TABLE #TEMP1
			DROP TABLE #TEMP2
		END

	-- 3.개별지도 콤마수
	SET @dCFlag = '3'
	SET @dLoopDate = @dStartDate
	WHILE @dEndDate >= @dLoopDate
		BEGIN
			-- 마지막일 구하기
			SELECT @dLastDate = dateadd(d,-1,dateadd(m,1,dateadd(dd,1,dateadd(dd,-datepart(dd,@dLoopDate),@dLoopDate))))
			-- 월말기준 매니져별 학생
			SELECT DISTINCT a.CStdCode, CASE WHEN c.CManagerId IS NOT NULL AND a.CManager <> c.CManagerId THEN c.CManagerId ELSE a.CManager END CManagerCode
			      ,d.CTutoring
			  INTO #TEMP3
			  FROM TStudentTutoring a(NOLOCK)
			  LEFT JOIN TStudentTutoringLeave b(NOLOCK)
				ON a.CStdDepartCode = b.CStdBrcDptCode and a.CStdCode = b.CStdCode and a.CNo = b.CNo
			  LEFT JOIN ( --학생 매니져 이력
						SELECT CBranchCode, CBranchStartDate, CStudentCode, CManagerId
							FROM TStudentManager(NOLOCK)
							WHERE CManagerType = 'Tutoring'
							AND CStartDate <= @dLastDate
							AND CEndDate   >= @dLastDate AND CEndDate <> '2200-12-31'
							GROUP BY CBranchCode, CBranchStartDate, CStudentCode, CManagerId
						) c
				ON a.CStdDepartCode = c.CBranchCode AND a.CStdDepartStartDate = c.CBranchStartDate AND a.CStdCode = c.CStudentCode
			  LEFT JOIN ( --학생수업콤마수
						SELECT CStudentCode, COUNT(1) AS CTutoring
						  FROM TTimeScheduleStudent(NOLOCK)
						 WHERE CScheduleType = 'EdSt'
						   AND CDate >= @dLoopDate AND CDate <= @dLastDate -- 월
						 GROUP BY CBranchCode, CBranchStartDate, CStudentCode
						) d
				ON a.CStdCode = d.CStudentCode
			 WHERE a.CStdDepartCode like 'EPX%'
			   AND a.CStdDepartCode not in ('EPXBRANCH','EPXDIRECT','EPXHEAD')
				-- 시작일이 월말보다 작고 종료일이 월말보다 크거나 같은거
			   AND a.CStartDate < @dLastDate AND isnull(b.CLeaveEndDate, a.CEndDate) >= @dLastDate

			-- 개별지도 학생이 10명이하인 직원 제외
			DELETE FROM #TEMP3
			 WHERE CManagerCode IN (
									SELECT CManagerCode
									  FROM #TEMP3
									 GROUP BY CManagerCode
									HAVING COUNT(CManagerCode) <= 10
									)

			-- 집계테이블에 넣기 
			INSERT INTO TPersonalRank(CManagerCode, CFirstDate, CFlag, CValue)
			SELECT CManagerCode, @dLoopDate, @dCFlag, SUM(CTutoring)
			  FROM #TEMP3
			 GROUP BY CManagerCode

			IF @@ROWCOUNT > 0
				BEGIN
					-- 랭킹 업데이트
					UPDATE A SET
						A.CRank = B.CRank
					  FROM TPersonalRank A 
					  LEFT JOIN (
								SELECT CManagerCode, RANK() OVER (ORDER BY CValue DESC) AS CRank
								  FROM TPersonalRank(NOLOCK)
								 WHERE CFirstDate = @dLoopDate
								   AND CFlag = @dCFlag
								) B ON A.CManagerCode = B.CManagerCode
					WHERE A.CFirstDate = @dLoopDate
					  AND A.CFlag = @dCFlag

					-- 등급산정
					SELECT @dRank = MAX(CRank)
					  FROM TPersonalRank(NOLOCK)
					 WHERE CFirstDate = @dLoopDate
					   AND CFlag = @dCFlag
					-- 1.랭킹이 20개 미만이면 바로 고냥 업데이트
					IF @dRank < 20
						BEGIN
							UPDATE TPersonalRank SET
								CClass = CASE 
								              WHEN CRank = 1 THEN 'S'
											  WHEN CRank >  1 AND CRank <= 4  THEN 'A'
											  WHEN CRank >  4 AND CRank <= 8  THEN 'B'
											  WHEN CRank >  8 AND CRank <= 12 THEN 'C'
											  WHEN CRank > 12 AND CRank <= 16 THEN 'D'
											  WHEN CRank > 16 THEN 'F'
										 END   
							 WHERE CFirstDate = @dLoopDate
							   AND CFlag      = @dCFlag
						END
					-- 2.랭킹이 20개 이상이면 비율로 등급업데이트
					ELSE
						BEGIN
							-- 상위  5% 이상 - S
							-- 상위  5% 미만 20%이상 - A
							-- 상위 20% 미만 50%이상 - B
							-- 상위 50% 미만 80%이상 - C
							-- 상위 80% 미만 95%이상 - D
							-- 상위 95% 미만 - F
							-- 특이사항 Integer을 계산 시 정수화 되므로 1.0을 곱해서 계산식 처리
							-- ※※※※ 2.값이 낮을수록 등급을 높게 처리이지만 위에 랭킹의 순서가 먼저 정해졌으니 동일 ※※※※
							UPDATE TPersonalRank SET
								CClass = CASE WHEN CRank * 1.0 / @dRank <= 0.05 THEN 'S'
											  WHEN CRank * 1.0 / @dRank >  0.05 AND CRank * 1.0 / @dRank <= 0.2  THEN 'A'
											  WHEN CRank * 1.0 / @dRank >  0.2  AND CRank * 1.0 / @dRank <= 0.5  THEN 'B'
											  WHEN CRank * 1.0 / @dRank >  0.5  AND CRank * 1.0 / @dRank <= 0.8  THEN 'C'
											  WHEN CRank * 1.0 / @dRank >  0.8  AND CRank * 1.0 / @dRank <= 0.95 THEN 'D'
											  WHEN CRank * 1.0 / @dRank >  0.95 THEN 'F'
										 END   
							 WHERE CFirstDate = @dLoopDate
							   AND CFlag      = @dCFlag
						END

					-- 월별총합(전체, 등급별 평균)
					INSERT INTO TPersonalRank
		           (CFirstDate, CManagerCode, CFlag ,CValue ,CTotal_Avg ,CS_Avg ,CA_Avg ,CB_Avg ,CC_Avg ,CD_Avg ,CF_Avg) 
					SELECT @dLoopDate, '000000', @dCFlag, SUM(CValue),
						   ROUND(AVG(CValue), 2), 
					       ROUND(AVG(CASE WHEN CClass = 'S' THEN CValue ELSE NULL END), 2), 
					       ROUND(AVG(CASE WHEN CClass = 'A' THEN CValue ELSE NULL END), 2), 
					       ROUND(AVG(CASE WHEN CClass = 'B' THEN CValue ELSE NULL END), 2), 
					       ROUND(AVG(CASE WHEN CClass = 'C' THEN CValue ELSE NULL END), 2), 
					       ROUND(AVG(CASE WHEN CClass = 'D' THEN CValue ELSE NULL END), 2), 
					       ROUND(AVG(CASE WHEN CClass = 'F' THEN CValue ELSE NULL END), 2)
					  FROM TPersonalRank(NOLOCK)
					 WHERE CFirstDate = @dLoopDate
					   AND CFlag      = @dCFlag

					-- 합계에서 구한 평균값을 업데이트
					UPDATE A SET
						A.CTotal_Avg = B.CTotal_Avg,
						A.CS_Avg = B.CS_Avg,
						A.CA_Avg = B.CA_Avg,
						A.CB_Avg = B.CB_Avg,
						A.CC_Avg = B.CC_Avg,
						A.CD_Avg = B.CD_Avg,
						A.CF_Avg = B.CF_Avg
					  FROM TPersonalRank A
					  LEFT JOIN (SELECT * FROM TPersonalRank(NOLOCK) WHERE CFirstDate = @dLoopDate AND CFlag = @dCFlag AND CManagerCode = '000000') B ON 1=1
					 WHERE A.CFirstDate = @dLoopDate
					   AND A.CFlag = @dCFlag
				END

			-- 반복용 일자에 한달 더하기
			SET @dLoopDate = DATEADD(Month, 1, @dLoopDate)
			-- 임시테이블 삭제
			DROP TABLE #TEMP3

		END

	-- 4.개별지도 이탈율(이건 상담관리와 동일하게 처리하는 수밖에 읍써욤)
	-- 월초 매니저 학생수가 5명 이상인 것만 대상(전월말 인원을 구하믄 되겠지요....)
	SET @dCFlag = '4'
	SET @dLoopDate = @dStartDate
	WHILE @dEndDate >= @dLoopDate
		BEGIN

			-- 마지막일 구하기
			SELECT @dLastDate = dateadd(d,-1,dateadd(m,1,dateadd(dd,1,dateadd(dd,-datepart(dd,@dLoopDate),@dLoopDate))))
			-- 전월말기준 매니져별 학생(월초 학생목록)
			--INSERT INTO @TEMP1 (CFirstDate, CStudentCode, CManagerCode)
			SELECT DISTINCT a.CStdCode, CASE WHEN c.CManagerId IS NOT NULL AND a.CManager <> c.CManagerId THEN c.CManagerId ELSE a.CManager END CManagerCode
			  INTO #TEMP5
			  FROM TStudentTutoring a(NOLOCK)
			  LEFT JOIN TStudentTutoringLeave b(NOLOCK)
				ON a.CStdDepartCode = b.CStdBrcDptCode and a.CStdCode = b.CStdCode and a.CNo = b.CNo
			  LEFT JOIN ( --학생 매니져 이력
						SELECT CBranchCode, CBranchStartDate, CStudentCode, CManagerId
							FROM TStudentManager(NOLOCK)
							WHERE CManagerType = 'Tutoring'
							AND CStartDate <= DATEADD(dd, -1, @dLoopDate)
							AND CEndDate   >= DATEADD(dd, -1, @dLoopDate) AND CEndDate <> '2200-12-31'
							GROUP BY CBranchCode, CBranchStartDate, CStudentCode, CManagerId
						) c
				ON a.CStdDepartCode = c.CBranchCode AND a.CStdDepartStartDate = c.CBranchStartDate AND a.CStdCode = c.CStudentCode
			 WHERE a.CStdDepartCode like 'EPX%'
			   AND a.CStdDepartCode not in ('EPXBRANCH','EPXDIRECT','EPXHEAD')
				-- 시작일이 월말보다 작고 종료일이 월말보다 크거나 같은거
			   AND a.CStartDate < DATEADD(dd, -1, @dLoopDate) AND isnull(b.CLeaveEndDate, a.CEndDate) >= DATEADD(dd, -1, @dLoopDate)

			-- 개별지도 학생이 10명이하인 직원 제외
			DELETE FROM #TEMP5
			 WHERE CManagerCode IN (
									SELECT CManagerCode
									  FROM #TEMP5
									 GROUP BY CManagerCode
									HAVING COUNT(CManagerCode) <= 10
									)

			-- 월말기준 매니져별 학생(월말 학생목록)
			SELECT DISTINCT a.CStdCode, CASE WHEN c.CManagerId IS NOT NULL AND a.CManager <> c.CManagerId THEN c.CManagerId ELSE a.CManager END CManagerCode
			  INTO #TEMP6
			  FROM TStudentTutoring a(NOLOCK)
			  LEFT JOIN TStudentTutoringLeave b(NOLOCK)
				ON a.CStdDepartCode = b.CStdBrcDptCode and a.CStdCode = b.CStdCode and a.CNo = b.CNo
			  LEFT JOIN ( --학생 매니져 이력
						SELECT CBranchCode, CBranchStartDate, CStudentCode, CManagerId
							FROM TStudentManager(NOLOCK)
							WHERE CManagerType = 'Tutoring'
							AND CStartDate <= @dLastDate
							AND CEndDate   >= @dLastDate AND CEndDate <> '2200-12-31'
							GROUP BY CBranchCode, CBranchStartDate, CStudentCode, CManagerId
						) c
				ON a.CStdDepartCode = c.CBranchCode AND a.CStdDepartStartDate = c.CBranchStartDate AND a.CStdCode = c.CStudentCode
			 WHERE a.CStdDepartCode like 'EPX%'
			   AND a.CStdDepartCode not in ('EPXBRANCH','EPXDIRECT','EPXHEAD')
				-- 시작일이 월말보다 작고 종료일이 월말보다 크거나 같은거
			   AND a.CStartDate < @dLastDate AND isnull(b.CLeaveEndDate, a.CEndDate) >= @dLastDate
			
			-- 집계테이블에 넣기 
			INSERT INTO TPersonalRank(CManagerCode, CFirstDate, CFlag, CValue)
			SELECT A.CManagerCode, @dLoopDate, @dCFlag, ROUND((CMonth - ISNULL(CRetire, 0)) * 1.0  / CMonth, 2)
			  FROM 
					(SELECT CManagerCode, COUNT(CStdCode) AS CMonth
			           FROM #TEMP5
					  GROUP BY CManagerCode
					) A
			  LEFT JOIN -- 월초학생목록과 월말학생목록을 조인하여 COUNT
					(SELECT a.CManagerCode, COUNT(a.CStdCode) AS CRetire
			           FROM #TEMP5 a
					  INNER JOIN #TEMP6 b ON a.CManagerCode = b.CManagerCode AND a.CStdCode = b.CStdCode
					  GROUP BY a.CManagerCode
					) B 
				ON A.CManagerCode = B.CManagerCode

			IF @@ROWCOUNT > 0
				BEGIN
					-- 랭킹 업데이트
					UPDATE A SET
						A.CRank = B.CRank
					  FROM TPersonalRank A 
					  LEFT JOIN (
								SELECT CManagerCode, RANK() OVER (ORDER BY CValue) AS CRank -- 이탈율 낮은게 등급이 높음
								  FROM TPersonalRank(NOLOCK)
								 WHERE CFirstDate = @dLoopDate
								   AND CFlag = @dCFlag
								) B ON A.CManagerCode = B.CManagerCode
					WHERE A.CFirstDate = @dLoopDate
					  AND A.CFlag = @dCFlag

					-- 등급산정
					SELECT @dRank = MAX(CRank)
					  FROM TPersonalRank(NOLOCK)
					 WHERE CFirstDate = @dLoopDate
					   AND CFlag = @dCFlag

					-- 1.랭킹이 20개 미만이면 바로 고냥 업데이트
					IF @dRank < 20
						BEGIN
							UPDATE TPersonalRank SET
								CClass = CASE 
								              WHEN CRank = 1 THEN 'S'
											  WHEN CRank >  1 AND CRank <= 4  THEN 'A'
											  WHEN CRank >  4 AND CRank <= 8  THEN 'B'
											  WHEN CRank >  8 AND CRank <= 12 THEN 'C'
											  WHEN CRank > 12 AND CRank <= 16 THEN 'D'
											  WHEN CRank > 16 THEN 'F'
										 END   
							 WHERE CFirstDate = @dLoopDate
							   AND CFlag      = @dCFlag
						END
					-- 2.랭킹이 20개 이상이면 비율로 등급업데이트
					ELSE
						BEGIN
							-- 상위  5% 이상 - S
							-- 상위  5% 미만 20%이상 - A
							-- 상위 20% 미만 50%이상 - B
							-- 상위 50% 미만 80%이상 - C
							-- 상위 80% 미만 95%이상 - D
							-- 상위 95% 미만 - F
							-- 특이사항 Integer을 계산 시 정수화 되므로 1.0을 곱해서 계산식 처리
							-- ※※※※ 2.값이 낮을수록 등급을 높게 처리이지만 위에 랭킹의 순서가 먼저 정해졌으니 동일 ※※※※
							UPDATE TPersonalRank SET
								CClass = CASE WHEN CRank * 1.0 / @dRank <= 0.05 THEN 'S'
											  WHEN CRank * 1.0 / @dRank >  0.05 AND CRank * 1.0 / @dRank <= 0.2  THEN 'A'
											  WHEN CRank * 1.0 / @dRank >  0.2  AND CRank * 1.0 / @dRank <= 0.5  THEN 'B'
											  WHEN CRank * 1.0 / @dRank >  0.5  AND CRank * 1.0 / @dRank <= 0.8  THEN 'C'
											  WHEN CRank * 1.0 / @dRank >  0.8  AND CRank * 1.0 / @dRank <= 0.95 THEN 'D'
											  WHEN CRank * 1.0 / @dRank >  0.95 THEN 'F'
										 END   
							 WHERE CFirstDate = @dLoopDate
							   AND CFlag      = @dCFlag
						END

					-- 월별총합(전체, 등급별 평균)
					INSERT INTO TPersonalRank
		           (CFirstDate, CManagerCode, CFlag ,CValue ,CTotal_Avg ,CS_Avg ,CA_Avg ,CB_Avg ,CC_Avg ,CD_Avg ,CF_Avg) 
					SELECT @dLoopDate, '000000', @dCFlag, SUM(CValue),
						   ROUND(AVG(CValue), 2), 
					       ROUND(AVG(CASE WHEN CClass = 'S' THEN CValue ELSE NULL END), 2), 
					       ROUND(AVG(CASE WHEN CClass = 'A' THEN CValue ELSE NULL END), 2), 
					       ROUND(AVG(CASE WHEN CClass = 'B' THEN CValue ELSE NULL END), 2), 
					       ROUND(AVG(CASE WHEN CClass = 'C' THEN CValue ELSE NULL END), 2), 
					       ROUND(AVG(CASE WHEN CClass = 'D' THEN CValue ELSE NULL END), 2), 
					       ROUND(AVG(CASE WHEN CClass = 'F' THEN CValue ELSE NULL END), 2)
					  FROM TPersonalRank(NOLOCK)
					 WHERE CFirstDate = @dLoopDate
					   AND CFlag      = @dCFlag

					-- 합계에서 구한 평균값을 업데이트
					UPDATE A SET
						A.CTotal_Avg = B.CTotal_Avg,
						A.CS_Avg = B.CS_Avg,
						A.CA_Avg = B.CA_Avg,
						A.CB_Avg = B.CB_Avg,
						A.CC_Avg = B.CC_Avg,
						A.CD_Avg = B.CD_Avg,
						A.CF_Avg = B.CF_Avg
					  FROM TPersonalRank A
					  LEFT JOIN (SELECT * FROM TPersonalRank(NOLOCK) WHERE CFirstDate = @dLoopDate AND CFlag = @dCFlag AND CManagerCode = '000000') B ON 1=1
					 WHERE A.CFirstDate = @dLoopDate
					   AND A.CFlag = @dCFlag
				END

			-- 반복용 일자에 한달 더하기
			SET @dLoopDate = DATEADD(Month, 1, @dLoopDate)
			-- 임시테이블 삭제
			DROP TABLE #TEMP5
			DROP TABLE #TEMP6
		END

	-- 분기별 데이터 생성
	-- 시작일자를(위에 맹글어둔거) 기준으로 삭제할 기준년도와 분기를 구한다.
	SELECT @dYear   = CASE 
						WHEN DATEPART(mm, @dStartDate) = 1 THEN CONVERT(VARCHAR(4), DATEPART(yy, @dStartDate) - 1) -- 1월이면 이전년도 12월부터 구해야 하니깐
						ELSE CONVERT(VARCHAR(4), DATEPART(yy, @dStartDate))
					  END,
		   @dPeriod = CASE DATEPART(mm, @dStartDate)
						WHEN  2 THEN '1' WHEN  3 THEN '1' WHEN 4 THEN '1'
						WHEN  5 THEN '2' WHEN  6 THEN '2'
						WHEN  7 THEN '3' WHEN  8 THEN '3'
						WHEN  9 THEN '4' WHEN 10 THEN '4' WHEN 11 THEN '4'
						WHEN 12 THEN '5' WHEN  1 THEN '5'
					  END

	-- 분기별집계자료 지우기
	DELETE FROM TPersonalRankPeriod WHERE CYearPeriod >= @dYear + @dPeriod

	-- 분기별자료 생성을 위한 시작일 재 설정(종료일은 무조건 오늘기준월이니깐 재 설정 안해도 됨)
	SELECT @dStartDate = CONVERT(DATETIME, @dYear + CASE @dPeriod WHEN '1' THEN '02' WHEN '2' THEN '05' WHEN '3' THEN '07' WHEN '4' THEN '09' ELSE '12' END + '01')

	-- 쿼리한방 생성
	INSERT INTO TPersonalRankPeriod
	SELECT CManagerCode, 
		   CASE 
			WHEN DATEPART(mm, CFirstDate) = 1 THEN CONVERT(VARCHAR(4), DATEPART(yy, CFirstDate) - 1) -- 1월이면 이전년도 12월부터 구해야 하니깐
			ELSE CONVERT(VARCHAR(4), DATEPART(yy, CFirstDate))
		   END
		   +
		   CASE DATEPART(mm, CFirstDate)
			 WHEN  2 THEN '1' WHEN  3 THEN '1' WHEN 4 THEN '1'
			 WHEN  5 THEN '2' WHEN  6 THEN '2'
			 WHEN  7 THEN '3' WHEN  8 THEN '3'
			 WHEN  9 THEN '4' WHEN 10 THEN '4' WHEN 11 THEN '4'
			 WHEN 12 THEN '5' WHEN  1 THEN '5'
		   END 
		   AS CYearPeriod, 
		   CFlag, 
		   ROUND(AVG(ISNULL(CValue, 0)), 2) AS CValue, 0,
	       '' , 0, 0, 0, 0, 0, 0, 0 -- 등급, 전국평균, S평균, A평균, B평균, C평균, D평균, F평균
	  FROM TPersonalRank(NOLOCK)
	 WHERE CManagerCode <> '000000' -- 합계제외
	   AND CFirstDate  >= @dStartDate
	 GROUP BY CManagerCode, 
		   CASE 
			WHEN DATEPART(mm, CFirstDate) = 1 THEN CONVERT(VARCHAR(4), DATEPART(yy, CFirstDate) - 1) -- 1월이면 이전년도 12월부터 구해야 하니깐
			ELSE CONVERT(VARCHAR(4), DATEPART(yy, CFirstDate))
		   END
		   +
		   CASE DATEPART(mm, CFirstDate)
			 WHEN  2 THEN '1' WHEN  3 THEN '1' WHEN 4 THEN '1'
			 WHEN  5 THEN '2' WHEN  6 THEN '2'
			 WHEN  7 THEN '3' WHEN  8 THEN '3'
			 WHEN  9 THEN '4' WHEN 10 THEN '4' WHEN 11 THEN '4'
			 WHEN 12 THEN '5' WHEN  1 THEN '5'
		   END, CFlag

	-- 저장값이 있을 경우
	IF @@ROWCOUNT > 0
		BEGIN
			-- 랭킹구하기
			UPDATE A SET
				A.CRank = B.CRank
			  FROM TPersonalRankPeriod A 
			  LEFT JOIN (
						SELECT CManagerCode, CYearPeriod, CFlag, RANK() OVER (PARTITION BY CYearPeriod, CFlag ORDER BY CValue DESC) AS CRank
						  FROM TPersonalRankPeriod(NOLOCK)
						) B ON A.CManagerCode = B.CManagerCode AND A.CYearPeriod = B.CYearPeriod AND A.CFlag = B.CFlag
			 WHERE A.CYearPeriod >= @dYear + @dPeriod

			-- 랭킹 => 등급 변경(이건 한방처리다 보니 등급계산 미만 데이터의 보정을 위해 LOOP를 좀 돌려야 쓰겠네)
			DECLARE CURSOR2 CURSOR FOR
			SELECT CYearPeriod, CFlag, MAX(CRank)
			  FROM TPersonalRankPeriod(NOLOCK)
			 WHERE CYearPeriod >= @dYear + @dPeriod
			 GROUP BY CYearPeriod, CFlag
		
			OPEN CURSOR2

			FETCH NEXT FROM CURSOR2 INTO @cCYearPeriod, @cCFlag, @cCClass
			WHILE @@FETCH_STATUS = 0
				BEGIN
		
					-- 1.랭킹이 20개 미만이면 바로 고냥 업데이트
					IF @cCFlag < 20
						BEGIN
							UPDATE TPersonalRankPeriod SET
								CClass = CASE 
								              WHEN CRank = 1 THEN 'S'
											  WHEN CRank >  1 AND CRank <= 4  THEN 'A'
											  WHEN CRank >  4 AND CRank <= 8  THEN 'B'
											  WHEN CRank >  8 AND CRank <= 12 THEN 'C'
											  WHEN CRank > 12 AND CRank <= 16 THEN 'D'
											  WHEN CRank > 16 THEN 'F'
										 END   
							 WHERE CYearPeriod = @cCYearPeriod
							   AND CFlag = @cCFlag
						END
					-- 2.랭킹이 20개 이상이면 비율로 등급업데이트
					ELSE 
						BEGIN
							UPDATE TPersonalRankPeriod SET
								CClass = CASE WHEN CRank * 1.0 / @cCFlag <= 0.05 THEN 'S'
											  WHEN CRank * 1.0 / @cCFlag >  0.05 AND CRank * 1.0 / @cCFlag <= 0.2  THEN 'A'
											  WHEN CRank * 1.0 / @cCFlag >  0.2  AND CRank * 1.0 / @cCFlag <= 0.5  THEN 'B'
											  WHEN CRank * 1.0 / @cCFlag >  0.5  AND CRank * 1.0 / @cCFlag <= 0.8  THEN 'C'
											  WHEN CRank * 1.0 / @cCFlag >  0.8  AND CRank * 1.0 / @cCFlag <= 0.95 THEN 'D'
											  WHEN CRank * 1.0 / @cCFlag >  0.95 THEN 'F'
										 END   

							 WHERE CYearPeriod = @cCYearPeriod
							   AND CFlag       = @cCFlag
						END
					FETCH NEXT FROM CURSOR2 INTO @cCYearPeriod, @cCFlag, @cCClass
				END
			CLOSE CURSOR2
			DEALLOCATE CURSOR2

			-- 분기별총합(전체, 등급별 평균)
			INSERT INTO TPersonalRankPeriod
			SELECT '000000', CYearPeriod, CFlag, 
					SUM(ISNULL(CValue, 0)),
					0, '', 
					ROUND(AVG(ISNULL(CValue, 0)) * 1.0, 2),
					ROUND(AVG(CASE WHEN CClass = 'S' THEN CValue * 1.0 ELSE NULL END), 2), 
					ROUND(AVG(CASE WHEN CClass = 'A' THEN CValue * 1.0 ELSE NULL END), 2), 
					ROUND(AVG(CASE WHEN CClass = 'B' THEN CValue * 1.0 ELSE NULL END), 2), 
					ROUND(AVG(CASE WHEN CClass = 'C' THEN CValue * 1.0 ELSE NULL END), 2),  
					ROUND(AVG(CASE WHEN CClass = 'D' THEN CValue * 1.0 ELSE NULL END), 2), 
					ROUND(AVG(CASE WHEN CClass = 'F' THEN CValue * 1.0 ELSE NULL END), 2)
			  FROM TPersonalRankPeriod(NOLOCK)
			 WHERE CYearPeriod >= @dYear + @dPeriod
			 GROUP BY CYearPeriod, CFlag

			-- 합계에서 구한 평균값을 업데이트
			UPDATE A SET
				A.CTotal_Avg = B.CTotal_Avg,
				A.CS_Avg = B.CS_Avg,
				A.CA_Avg = B.CA_Avg,
				A.CB_Avg = B.CB_Avg,
				A.CC_Avg = B.CC_Avg,
				A.CD_Avg = B.CD_Avg,
				A.CF_Avg = B.CF_Avg
				FROM TPersonalRankPeriod A
				LEFT JOIN (SELECT * FROM TPersonalRankPeriod(NOLOCK) WHERE CYearPeriod >= @dYear + @dPeriod AND CManagerCode = '000000') B ON A.CYearPeriod = B.CYearPeriod AND A.CFlag = B.CFlag
				WHERE A.CYearPeriod >= @dYear + @dPeriod


		END

	-- 2016.02.22. 월초, 월말 학생수 구하기 추가
	BEGIN TRY
     EXEC SP_FACILITY_STUDENT_COUNT_CALC
	END TRY
	BEGIN CATCH
     RETURN
	END CATCH


	RETURN
END

GO

--/*******************************************************************************************************
--/* 단위업무 : 월 계좌잔액 생성
--/* 작 성 자 : 김 길 명
--/* 작 성 일 : 2014.02.19
--/* 작성내용 : 조회 시작일자(월)를 기준으로 이후 데이터 삭제 및 재 생성
--/* 수 정 일 :	
--/* 수 정 자 :	
--/* 수정내용 :	
--/* 비    고 :	
--/* 실행코드 : EXEC SP_TAccountBalance  'BRANCH01', '2013-10-28 00:00:00.000', '2014-01-01' select * from TAccountingExpense
--/*******************************************************************************************************
CREATE PROCEDURE [dbo].[SP_TAccountBalance](  
	@pCBranchCode			VARCHAR(20), -- 지점코드
	@pCBranchStartDate	DATETIME,	-- 지점시작일자
	@pCBalanceMonth		DATETIME  	-- 기준일자(월)
)                                                                                      
AS                                                                                                  

DECLARE @dCCode			VARCHAR(20)	-- 계좌
DECLARE @dCBalanceMonth	VARCHAR(6)	-- 월
DECLARE @dIncomeAmt		BIGINT		-- 수입
DECLARE @dExpenseAmt		BIGINT		-- 지출

DECLARE @dCStartBalance	BIGINT -- 기초금액
DECLARE @dCEndBalance		BIGINT -- 기말잔액
DECLARE @dCDecreaseCash	BIGINT -- 증감금액

--BEGIN TRY
BEGIN	
	
	-- 기준일 이후 데이터 삭제
	DELETE
	  FROM TAccountBalance
	 WHERE CBaDepartCode		= @pCBranchCode		
	   AND CBaDepartStartDate	= @pCBranchStartDate
	   AND CBalanceMonth		>= CONVERT(DATETIME, LEFT(CONVERT(VARCHAR, @pCBalanceMonth, 112), 6) + '01') --(매월 1일자가 넘어오겠지만 믿을 수 읍써서 보정함돠)
	
	-- 커서생성(계좌, 월. 수입합계, 지출합계)
	DECLARE CURSOR1 CURSOR FOR

	SELECT CCode, CBalanceMonth,
	      SUM(IncomeAmt) AS IncomeAmt,  SUM(ExpenseAmt) AS ExpenseAmt
	  FROM
		  (
			SELECT a.CCode, LEFT(CONVERT(VARCHAR, a.CAccountingDate, 112), 6) AS CBalanceMonth,
				  SUM(a.CCash) AS IncomeAmt, 0 AS ExpenseAmt
			  FROM TAccountingIncome a -- 수입
			 WHERE a.CBrDepartCode			= @pCBranchCode
			   AND a.CBrDepartStartDate	= @pCBranchStartDate
			   AND a.CAccountingDate		>= CONVERT(DATETIME, LEFT(CONVERT(VARCHAR, @pCBalanceMonth, 112), 6) + '01')
			 GROUP BY a.CCode, LEFT(CONVERT(VARCHAR, a.CAccountingDate, 112), 6)
			UNION ALL
			SELECT a.CBrCode AS CCode, LEFT(CONVERT(VARCHAR, a.CAccountingDate, 112), 6) AS CBalanceMonth,
				  0 AS IncomeAmt, SUM(a.CCash) AS ExpenseAmt
			  FROM TAccountingExpense a -- 지출
			 WHERE a.CBrDepartCode			= @pCBranchCode
			   AND a.CBrDepartStartDate	= @pCBranchStartDate
			   AND a.CAccountingDate		>= CONVERT(DATETIME, LEFT(CONVERT(VARCHAR, @pCBalanceMonth, 112), 6) + '01')
			   AND a.CCash <> 0 -- 계좌로 지출된것만 
			 GROUP BY a.CBrCode, LEFT(CONVERT(VARCHAR, a.CAccountingDate, 112), 6)
		  ) a GROUP BY CCode, CBalanceMonth
	
	OPEN CURSOR1

	FETCH NEXT FROM CURSOR1 INTO @dCCode, @dCBalanceMonth, @dIncomeAmt, @dExpenseAmt

	WHILE @@FETCH_STATUS = 0
		BEGIN
			-- 이전데이터의 기말자료를 기초잔액으로 가져오고
			-- 수입은 더하고 지출은 제하여 기말잔액 계산
			-- 기초금액에서 기말잔액을 빼서 증감컬럼에 넣어주기

			SELECT TOP 1 -- 젤 처음껄로만 처리
				  @pCBranchCode,
				  @pCBranchStartDate,
				  @dCCode,
				  CONVERT(DATETIME, @dCBalanceMonth + '01'),
				  CEndBalance,
				  CEndBalance + @dIncomeAmt - @dExpenseAmt,
				  CEndBalance - (CEndBalance + @dIncomeAmt - @dExpenseAmt)
			  FROM TAccountBalance
			 WHERE CBaDepartCode		= @pCBranchCode
			   AND CBaDepartStartDate	= @pCBranchStartDate
			   AND CCode				= @dCCode
			   AND CBalanceMonth		< CONVERT(DATETIME, @dCBalanceMonth + '01')
			 ORDER BY CBalanceMonth DESC

			FETCH NEXT FROM CURSOR1 INTO @dCCode, @dCBalanceMonth, @dIncomeAmt, @dExpenseAmt
		END
	CLOSE CURSOR1
	DEALLOCATE CURSOR1

--END TRY
--BEGIN CATCH
--	SELECT 'ER', ERROR_MESSAGE() AS ErrorMessage
--    RETURN -1
--END CATCH
END

GO

--/*******************************************************************************************************
--/* 단위업무 : KnowRe 정산
--/* 작 성 자 : 고 재 균
--/* 작 성 일 : 2015. 05. 11
--/* 작성내용 : 
--/* 수 정 일 :	
--/* 수 정 자 :	
--/* 수정내용 : []
--/* 비    고 :	
--/* 실행코드 : EXEC SP_KnowreExactCalculation '2016-03-01', '2016-03-31', 'DEV_njhina48'
--/*******************************************************************************************************
CREATE PROCEDURE [dbo].[SP_KnowreExactCalculation](  
	@StartDate VARCHAR(10),
	@EndDate VARCHAR(10),
	@StaffId VARCHAR(20)
)                                                                                      
AS                                                                                                  
BEGIN 

--SET @StartDate = '2015-05-01'
--SET @EndDate = '2015-05-31'
--SET @StaffId = 'DEV_100meta'

--월초
DECLARE @StartMonthStartDate VARCHAR(10)
DECLARE @StartMonthEndDate VARCHAR(10)
--월말
DECLARE @EndMonthStartDate VARCHAR(10)
DECLARE @EndMonthEndDate VARCHAR(10)

SET @StartMonthStartDate = DATEADD(day,-1,@StartDate) --종료일이 월에 마지막 일자일 경우 포함시켜야 한다.(종료학생 구하기 위해서)
SET @StartMonthEndDate = @EndDate

SET @EndMonthStartDate = @EndDate --종료일이 월에 마지막 일자일 경우 포함시켜야 한다.(종료학생 구하기 위해서)
SET @EndMonthEndDate = DATEADD(day, -1,DATEADD(MONTH, 2,DATENAME(YEAR,dateadd(month,2,@EndDate)) + DATENAME(month,@EndDate)+'01')) --월말일경우 전월 마지막일자


PRINT @StartMonthStartDate

PRINT @StartMonthEndDate

PRINT @EndMonthStartDate

PRINT @EndMonthEndDate

SELECT TS1.CDepartCode --지점코드
      ,TS1.CDepartStartDate --지점시작일자
	  ,TS1.CName0 --지점명
	  ,ISNull(TS2.CStartMonthCnt,0) AS MonthCnt --월초
	  ,ISNull(TS2.CStartMonthAmt,0) AS MonthAmt --월초 금액
	  ,ISNull(TS3.CNewcomer,0) AS Newcomer --신규
	  ,ISNull(TS3.CReturning,0) AS Returning --복회
	  ,ISNull(TS2.CStartMonthCnt,0) + ISNull(TS3.CNewcomer,0) + ISNull(TS3.CReturning,0) - ISNull(TS4.CEndMonthCnt,0) AS EndEnd --종료=월초+신규+복회-월말
	  ,ISNull(TS4.CEndMonthCnt,0) AS EndMonth
	  ,ISNull(TS4.CEndMonthAmt,0) AS TotalAmount --계정이용료
	  ,(TS1.CDepartCode
		+'|'+CONVERT(char(8), TS1.CDepartStartDate,112)
	   ) as _pk --지점PK (지점 pk가 있음 편할 것 같아서 추가했습니다(njhina48)
  FROM (--소속원 사업장
		SELECT T2.CDepartCode, T2.CDepartStartDate, T2.CName0, T2.CParentDepartCode, T1.CSortOrder
		  FROM TFacilityNowStaffPerm(NOLOCK) T1
		       JOIN TDepartment(NOLOCK)      T2 
			   ON T2.CDepartCode = T1.CFacilityCode
			   AND T2.CDepartStartDate = T1.CFacilityStartDate
		 WHERE T1.CStaffId = @StaffId
		   AND T1.CAccessPerm = 1
		   --AND T2.CDepartType = 'FACILITY'
		   AND (T1.CFacilityType = 'BRANCH' OR T1.CFacilityType ='DIRECT') --(HEAD:본사,FACTORY:공장,BRANCH:지점,DIRECT:직영,GROUP:사업장그룹)
		   AND (T2.CDepartCode LIKE 'ECH%' OR T2.CDepartCode LIKE 'EPX%')
		) AS TS1
  LEFT OUTER JOIN ( --월초 
        SELECT T2.CDepartCode, T2.CDepartStartDate, COUNT(1) AS CStartMonthCnt, SUM(T1.CAmount) AS CStartMonthAmt
	      FROM TKnowreAccountMonth(NOLOCK) T1
               JOIN TKnowreAccount(NOLOCK) T2 ON T2.CLoginId = T1.CKnowreAccount
		 WHERE T1.CStartDate < @StartDate
		   AND T1.CEndDate BETWEEN @StartMonthStartDate AND @StartMonthEndDate
		 GROUP BY T2.CDepartCode, T2.CDepartStartDate
		) AS TS2 
		ON TS1.CDepartCode = TS2.CDepartCode 
		AND TS1.CDepartStartDate = TS2.CDepartStartDate
  LEFT OUTER JOIN ( --월말 
        SELECT T2.CDepartCode, T2.CDepartStartDate, COUNT(1) AS CEndMonthCnt, SUM(T1.CAmount) AS CEndMonthAmt
	      FROM TKnowreAccountMonth(NOLOCK) T1
               JOIN TKnowreAccount(NOLOCK) T2 ON T2.CLoginId = T1.CKnowreAccount
		 WHERE T1.CStartDate < DATEADD(day, 1, @EndDate)
		   AND T1.CEndDate BETWEEN @EndMonthStartDate AND @EndMonthEndDate
		 GROUP BY T2.CDepartCode, T2.CDepartStartDate
		) AS TS4
		ON TS1.CDepartCode = TS4.CDepartCode 
		AND TS1.CDepartStartDate = TS4.CDepartStartDate
  LEFT OUTER JOIN ( --당월
		SELECT M1.CDepartCode, M1.CDepartStartDate
			  ,SUM(M1.Newcomer) AS CNewcomer
			  ,SUM(M1.Returning) As CReturning
			  --,SUM(M1.EndEnd) AS CEndEnd
			  ,SUM(M1.NewcomerAmount) AS NewcomerAmount
			  ,SUM(M1.ReturningAmount) AS ReturningAmount
			  --,SUM(M1.EndEndAmount) AS EndEndAmount
		  FROM (
				SELECT T2.CDepartCode, T2.CDepartStartDate
					  ,CASE WHEN T1.CStatus = 'Newcomer' THEN 1 ELSE 0 END AS Newcomer
					  ,CASE WHEN T1.CStatus = 'Returning' THEN 1 ELSE 0 END AS Returning
					  --,CASE WHEN T1.CStatus = 'End' THEN 1 ELSE 0 END AS EndEnd
					  ,CASE WHEN T1.CStatus = 'Newcomer' THEN T1.CAmount ELSE 0 END AS NewcomerAmount
					  ,CASE WHEN T1.CStatus = 'Returning' THEN T1.CAmount ELSE 0 END AS ReturningAmount
					  --,CASE WHEN T1.CStatus = 'End' THEN T1.CAmount ELSE 0 END AS EndEndAmount
				  FROM TKnowreAccountMonth(NOLOCK) T1
					   JOIN TKnowreAccount(NOLOCK) T2 ON T2.CLoginId = T1.CKnowreAccount
				 WHERE T1.CStartDate BETWEEN @StartDate AND @EndDate
				) M1
		 GROUP BY M1.CDepartCode, M1.CDepartStartDate
		) AS TS3
		ON TS1.CDepartCode = TS3.CDepartCode 
		AND TS1.CDepartStartDate = TS3.CDepartStartDate
 ORDER BY TS1.CSortOrder

END

GO

-- ==================================================================
-- Author:		김길명
-- Create date: 2014-10-28
-- Description:	학생관리 > 홍보이벤트관리(전국전년대비추이)
-- Modify date: 
-- Description: 
-- exec SP_Effect_Analysis @pTYPE = 'S9', @P_FACILITY = 'EPX0017', @P_TARGET = '1', @P_START_YM = '2013/12', @P_END_YM = '2014/10', @P_FLAG = '2'
-- ==================================================================
CREATE PROCEDURE [dbo].[SP_Effect_Analysis] 
  @pTYPE			VARCHAR(3)  = '' -- 구분(비교항목(노출효과 1~2, 구매결정1~2, 유입회원수, 등록자수(초중고), 등록자수(서비스), 결제콤마수(초중고), 홍보비용))
 ,@P_FACILITY		VARCHAR(20) = '' -- 비교지점
 ,@P_TARGET			VARCHAR(20) = '' -- 비교대상(1.동일기간전국, 2.동일기간지역, 3.이전연도우리)
 ,@P_START_YM		VARCHAR(7)  = '' -- 검색시작월(YYYY/MM)
 ,@P_END_YM			VARCHAR(7)  = '' -- 검색종료월(YYYY/MM)
 ,@P_FLAG			VARCHAR(1)  = '' -- 1.비교대상, 2.우리지점
AS

DECLARE @SQL VARCHAR(MAX)

DECLARE @dBRANCHINFO02 NVARCHAR(20) -- 지역코드
DECLARE @dStartDate DATETIME
DECLARE @dEndDate   DATETIME
DECLARE @dLoopDate  DATETIME

-- 비교대상지점 리스트(지역 또는 전국)
DECLARE @FACILITY TABLE
(
	CFACILITY NVARCHAR(20)	-- 지점코드
)

-- 임시테이블
CREATE TABLE #TMPTB 
(
    CFirstDate    DATETIME		-- 월
  , CDepartCode   NVARCHAR(20)	-- 지점코드
  , CCode         NVARCHAR(30)	-- 인지코드
  , CValue		  BIGINT		-- 값
  , CValue2		  NUMERIC(3,2)	-- 값(구매결정)
  , CCognitiveSort INT          -- 인지순번
  , _PK           NVARCHAR(100) -- PK값
)

SET NOCOUNT ON

--*************************
-- 지점 리스트 생성
--*************************
-- 동일기간전국
IF      @P_TARGET = '1'
	BEGIN
		IF @P_FLAG = '1'
			BEGIN
				INSERT INTO @FACILITY
				SELECT CIdDepartCode
				  FROM TPromoteBranch (NOLOCK)
				 WHERE CExposure1		= CASE WHEN @pTYPE = 'S1' THEN 1 ELSE CExposure1		END
				   AND CExposure2		= CASE WHEN @pTYPE = 'S2' THEN 1 ELSE CExposure2		END
				   AND CPurchase1		= CASE WHEN @pTYPE = 'S3' THEN 1 ELSE CPurchase1		END
				   AND CPurchase2		= CASE WHEN @pTYPE = 'S4' THEN 1 ELSE CPurchase2		END
				   AND CInflowMemeber	= CASE WHEN @pTYPE = 'S5' THEN 1 ELSE CInflowMemeber	END
				   AND CRegistSchool	= CASE WHEN @pTYPE = 'S6' THEN 1 ELSE CRegistSchool		END
				   AND CRegistService	= CASE WHEN @pTYPE = 'S7' THEN 1 ELSE CRegistService	END
				   AND CPayCommas		= CASE WHEN @pTYPE = 'S8' THEN 1 ELSE CPayCommas		END
				   AND CPromoteCost		= CASE WHEN @pTYPE = 'S9' THEN 1 ELSE CPromoteCost		END
			END
		-- 조회대상이 우리지점이면 그냥 지점값 할당
		ELSE
			BEGIN
				INSERT INTO @FACILITY SELECT @P_FACILITY
			END
	END
-- 지역
ELSE IF @P_TARGET = '2'
	BEGIN
		IF @P_FLAG = '1'
			BEGIN
				-- 우리지점의 지역을 읽어온다.(없을 경우 에러 처리 후 무시)
				SELECT @dBRANCHINFO02 = CTmpCode2 
				  FROM TFacility(NOLOCK)
				 WHERE CTmpGroup2		= 'BRANCHINFO02'
				   AND CFacilityCode	= @P_FACILITY

				-- 지역정보가 없으면 에러처리
				IF @@ROWCOUNT = 0
					BEGIN
						RAISERROR ('해당지점의 지역을 알 수 없습니다!', -- Message text.
							   16, -- Severity.
							   1 -- State.
							   );
					END

				INSERT INTO @FACILITY
				SELECT CIdDepartCode
				  FROM TPromoteBranch t1(NOLOCK)
				 INNER JOIN TFacility t2(NOLOCK)
					ON t1.CIdDepartCode = t2.CDepartCode
				 WHERE t1.CExposure1		= CASE WHEN @pTYPE = 'S1' THEN 1 ELSE t1.CExposure1		END
				   AND t1.CExposure2		= CASE WHEN @pTYPE = 'S2' THEN 1 ELSE t1.CExposure2		END
				   AND t1.CPurchase1		= CASE WHEN @pTYPE = 'S3' THEN 1 ELSE t1.CPurchase1		END
				   AND t1.CPurchase2		= CASE WHEN @pTYPE = 'S4' THEN 1 ELSE t1.CPurchase2		END
				   AND t1.CInflowMemeber	= CASE WHEN @pTYPE = 'S5' THEN 1 ELSE t1.CInflowMemeber	END
				   AND t1.CRegistSchool		= CASE WHEN @pTYPE = 'S6' THEN 1 ELSE t1.CRegistSchool	END
				   AND t1.CRegistService	= CASE WHEN @pTYPE = 'S7' THEN 1 ELSE t1.CRegistService	END
				   AND t1.CPayCommas		= CASE WHEN @pTYPE = 'S8' THEN 1 ELSE t1.CPayCommas		END
				   AND t1.CPromoteCost		= CASE WHEN @pTYPE = 'S9' THEN 1 ELSE t1.CPromoteCost	END
				-- 해당지점의 지역과 같은것만 추리기(본인지점이 있기에 데이터가 없는 경우는 없음)
				   AND t2.CTmpCode2			= @dBRANCHINFO02
			END
		-- 조회대상이 우리지점이면 그냥 지점값 할당
		ELSE
			BEGIN
				INSERT INTO @FACILITY SELECT @P_FACILITY
			END
		
	END
-- 전년우리지점
ELSE IF @P_TARGET = '3'
	BEGIN
		-- 비교대상이 우리지점이면 그냥 값 넣기(조회대상의 기간은 아래에서 보정처리 함)
		INSERT INTO @FACILITY SELECT @P_FACILITY
	END

--**********
-- 날자 변환
--**********
SELECT @dStartDate = CONVERT(DATETIME, @P_START_YM + '/01')
      ,@dEndDate   = CONVERT(DATETIME, @P_END_YM   + '/01')
-- 조회대상이 비교지점이고 비교대상이 이전연도 우리지점이면 날자를 1년전으로 변경처리
IF @P_FLAG = '1' AND @P_TARGET = '3'
	BEGIN
		SELECT @dStartDate = DATEADD(Year, -1, @dStartDate)
			  ,@dEndDate   = DATEADD(Year, -1, @dEndDate)
	END
	

IF      @pTYPE = 'S1' GOTO S1_RTN   -- 1.노출효과인지 1차
ELSE IF @pTYPE = 'S2' GOTO S2_RTN   -- 2.노출효과인지 2차
ELSE IF @pTYPE = 'S3' GOTO S3_RTN   -- 3.구매결정인지 1차
ELSE IF @pTYPE = 'S4' GOTO S4_RTN   -- 4.구매결정인지 2차
ELSE IF @pTYPE = 'S5' GOTO S5_RTN   -- 5.유입회원수
ELSE IF @pTYPE = 'S6' GOTO S6_RTN   -- 6.등록자 수 - 초중고
ELSE IF @pTYPE = 'S7' GOTO S6_RTN   -- 7.등록자 수 - 서비스별(S6_RTN 같이 사용)
ELSE IF @pTYPE = 'S8' GOTO S8_RTN   -- 8.결제콤마수 -  초중고
ELSE IF @pTYPE = 'S9' GOTO S9_RTN   -- 9.홍보비용
ELSE RETURN

-- 1.노출효과인지 1차
S1_RTN:
BEGIN
	SELECT CCode, CName
      INTO #TMP_COGNITIVE_PATH1
	  FROM TCognitivePath (NOLOCK) 
	 WHERE CDepth   = 1 -- 1차인지경로(실제 데이터는 2차경로로만 등록되니 이 조건을 주믄 안됨)
	   AND CEnabled = 1 -- 사용함
	   AND CApprovalStatus = 'Signed' -- 결제완료
	 ORDER BY CSort
	 
	SET @dLoopDate = @dStartDate
	WHILE @dEndDate >= @dLoopDate
		BEGIN
			INSERT INTO #TMPTB(CFirstDate, CDepartCode, CCode, CValue)
			SELECT @dLoopDate, a.CStdDepartCode, c.CParentCode, 1
			  FROM TRegistCounsel a(NOLOCK)
			 INNER JOIN TRegistCounselCognitive b(NOLOCK)
			    ON a.CStdDepartCode = b.CRcDepartCode AND a.CStdDepartStartDate = b.CRcDepartStartDate AND
				   a.CStdCode = b.CRcCode AND a.CNo = b.CRcNo
			 INNER JOIN TCognitivePath c(NOLOCK)
			    ON b.CCognitivePath = c.CCode
			 WHERE EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CStdDepartCode)  -- 해당지점
			   AND a.CCallDate >= @dLoopDate                    -- 시작일이 1일보다 크거나 같고
			   AND a.CCallDate <  DATEADD(Month, 1, @dLoopDate) -- 시작일이 담달 1일보다 작은거
--			   AND c.CDepth   = 1 -- 1차인지경로(실제 데이터는 2차경로만 등록되니 이 조건을 주믄 안됨)
			   AND c.CEnabled = 1 -- 사용함
			   AND c.CApprovalStatus = 'Signed' -- 결제완료
			
			-- 반복용 일자에 한달 더하기
			SET @dLoopDate = DATEADD(Month, 1, @dLoopDate)
		END

	-- 비교대상의 조회이고 이전연도우리가 아니면 평균값으로 반환
	SET @SQL = ''
	IF @P_FLAG = '1' AND @P_TARGET <> '3'
		BEGIN
			SET @SQL = @SQL + 'SELECT CONVERT(VARCHAR, datepart(mm, CFirstDate)) AS "월"  '

			SELECT @SQL = @SQL + ', MAX(CASE WHEN CCode = ''' +CCode+ ''' THEN CValue ELSE 0 END) AS ''' + CName + ''' '
			FROM   #TMP_COGNITIVE_PATH1
			SET @SQL = @SQL + '  FROM '
			SET @SQL = @SQL + '      ('
			SET @SQL = @SQL + '       SELECT CFirstDate, CCode, ROUND(AVG(CValue*1.0), 2) AS CValue '
			SET @SQL = @SQL + '         FROM ( '
			SET @SQL = @SQL + '               SELECT CFirstDate, CDepartCode, CCode, SUM(CValue) AS CValue '
			SET @SQL = @SQL + '                 FROM #TMPTB '
			SET @SQL = @SQL + '                GROUP BY CFirstDate, CDepartCode, CCode '
			SET @SQL = @SQL + '              ) SUB1 '
			SET @SQL = @SQL + '        GROUP BY CFirstDate, CCode '
			SET @SQL = @SQL + '      ) T1 '
			SET @SQL = @SQL + ' GROUP BY CFirstDate ORDER BY CFirstDate '

			EXEC(@SQL)   
		END
	ELSE
		BEGIN
			SET @SQL = @SQL + 'SELECT CONVERT(VARCHAR, datepart(mm, CFirstDate)) AS "월"  '

			SELECT @SQL = @SQL + ', SUM(CASE WHEN CCode = ''' +CCode+ ''' THEN CValue ELSE 0 END) AS ''' + CName + ''' '
			FROM   #TMP_COGNITIVE_PATH1
			SET @SQL = @SQL + ' FROM #TMPTB '
			SET @SQL = @SQL + ' GROUP BY CFirstDate ORDER BY CFirstDate '
			EXEC(@SQL)   
		END
	RETURN
END

-- 2.노출효과인지 2차
S2_RTN:
BEGIN
	SELECT a.CCode, a.CName
      INTO #TMP_COGNITIVE_PATH2
	  FROM TCognitivePath a(NOLOCK)
	 INNER JOIN TCognitivePath b(NOLOCK)
	    ON a.CParentCode = b.CCode
	 WHERE a.CDepth   = 2 -- 1차인지경로(실제 데이터는 2차경로로만 등록되니 이 조건을 주믄 안됨)
	   AND a.CEnabled = 1 -- 사용함
	   AND a.CApprovalStatus = 'Signed' -- 결제완료
	 ORDER BY b.CSort, a.CSort

	SET @dLoopDate = @dStartDate
	WHILE @dEndDate >= @dLoopDate
		BEGIN
			INSERT INTO #TMPTB(CFirstDate, CDepartCode, CCode, CValue)
			SELECT @dLoopDate, a.CStdDepartCode, b.CCognitivePath, 1
			  FROM TRegistCounsel a(NOLOCK)
			 INNER JOIN TRegistCounselCognitive b(NOLOCK)
			    ON a.CStdDepartCode = b.CRcDepartCode AND a.CStdDepartStartDate = b.CRcDepartStartDate AND
				   a.CStdCode = b.CRcCode AND a.CNo = b.CRcNo
			 INNER JOIN TCognitivePath c(NOLOCK)
			    ON b.CCognitivePath = c.CCode
			 WHERE EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CStdDepartCode)  -- 해당지점
			   AND a.CCallDate >= @dLoopDate                    -- 시작일이 1일보다 크거나 같고
			   AND a.CCallDate <  DATEADD(Month, 1, @dLoopDate) -- 시작일이 담달 1일보다 작은거
--			   AND c.CDepth   = 1 -- 1차인지경로(실제 데이터는 2차경로만 등록되니 이 조건을 주믄 안됨)
			   AND c.CEnabled = 1 -- 사용함
			   AND c.CApprovalStatus = 'Signed' -- 결제완료

			-- 반복용 일자에 한달 더하기
			SET @dLoopDate = DATEADD(Month, 1, @dLoopDate)
		END

	-- 비교대상의 조회이고 이전연도우리가 아니면 평균값으로 반환
	SET @SQL = ''
	IF @P_FLAG = '1' AND @P_TARGET <> '3'
		BEGIN
			SET @SQL = @SQL + 'SELECT CONVERT(VARCHAR, datepart(mm, CFirstDate)) AS "월"  '

			SELECT @SQL = @SQL + ', MAX(CASE WHEN CCode = ''' +CCode+ ''' THEN CValue ELSE 0 END) AS ''' + CName + ''' '
			FROM   #TMP_COGNITIVE_PATH2
			SET @SQL = @SQL + '  FROM '
			SET @SQL = @SQL + '      ('
			SET @SQL = @SQL + '       SELECT CFirstDate, CCode, ROUND(AVG(CValue*1.0), 2) AS CValue '
			SET @SQL = @SQL + '         FROM ( '
			SET @SQL = @SQL + '               SELECT CFirstDate, CDepartCode, CCode, SUM(CValue) AS CValue '
			SET @SQL = @SQL + '                 FROM #TMPTB '
			SET @SQL = @SQL + '                GROUP BY CFirstDate, CDepartCode, CCode '
			SET @SQL = @SQL + '              ) SUB1 '
			SET @SQL = @SQL + '        GROUP BY CFirstDate, CCode '
			SET @SQL = @SQL + '      ) T1 '
			SET @SQL = @SQL + ' GROUP BY CFirstDate ORDER BY CFirstDate '

			EXEC(@SQL)   
		END
	ELSE
		BEGIN
			SET @SQL = @SQL + 'SELECT CONVERT(VARCHAR, datepart(mm, CFirstDate)) AS "월"  '

			SELECT @SQL = @SQL + ', SUM(CASE WHEN CCode = ''' +CCode+ ''' THEN CValue ELSE 0 END) AS ''' + CName + ''' '
			FROM   #TMP_COGNITIVE_PATH2
			SET @SQL = @SQL + ' FROM #TMPTB '
			SET @SQL = @SQL + ' GROUP BY CFirstDate ORDER BY CFirstDate '
			EXEC(@SQL)   
		END

	RETURN
END

-- 3.구매결정인지 1차
-- 노출효과인지와 동일하나 체크된 항목에 따른 보정처리만 한번 더
--   (1건 - 1점, 2건 - 1:0.62, 2:0.38, 3건 - 1:0.62, 2:0.24, 3:0.14)
S3_RTN:
BEGIN

	SELECT CCode, CName
      INTO #TMP_COGNITIVE_PATH3
	  FROM TCognitivePath (NOLOCK) 
	 WHERE CDepth   = 1 -- 1차인지경로(실제 데이터는 2차경로로만 등록되니 이 조건을 주믄 안됨)
	   AND CEnabled = 1 -- 사용함
	   AND CApprovalStatus = 'Signed' -- 결제완료
	 ORDER BY CSort

	SET @dLoopDate = @dStartDate
	WHILE @dEndDate >= @dLoopDate
		BEGIN
			-- 보정을 위한 추가컬럼 생성
			INSERT INTO #TMPTB(CFirstDate, CDepartCode, CCode, CValue2, CCognitiveSort, _PK)
			SELECT @dLoopDate, a.CStdDepartCode, c.CParentCode, 1, b.CCognitiveSort, 
			       b.CRcDepartCode + CONVERT(VARCHAR, b.CRcDepartStartDate, 112) + b.CRcCode + CONVERT(VARCHAR, b.CRcNo)
			  FROM TRegistCounsel a(NOLOCK)
			 INNER JOIN TRegistCounselCognitive b(NOLOCK)
			    ON a.CStdDepartCode = b.CRcDepartCode AND a.CStdDepartStartDate = b.CRcDepartStartDate AND
				   a.CStdCode = b.CRcCode AND a.CNo = b.CRcNo
			 INNER JOIN TCognitivePath c(NOLOCK)
			    ON b.CCognitivePath = c.CCode
			 WHERE EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CStdDepartCode)  -- 해당지점
			   AND a.CCallDate >= @dLoopDate                    -- 시작일이 1일보다 크거나 같고
			   AND a.CCallDate <  DATEADD(Month, 1, @dLoopDate) -- 시작일이 담달 1일보다 작은거
--			   AND c.CDepth   = 1 -- 1차인지경로(실제 데이터는 2차경로만 등록되니 이 조건을 주믄 안됨)
			   AND c.CEnabled = 1 -- 사용함
			   AND c.CApprovalStatus = 'Signed' -- 결제완료

			-- 반복용 일자에 한달 더하기
			SET @dLoopDate = DATEADD(Month, 1, @dLoopDate)
		END
	--*********
	-- 점수보정
	-- 3번과 동일한 PK값을 업데이트 하고 2번중 점수가 1인 데이터의 보정 처리하믄 끗!!!
	--*********
	UPDATE A SET
		A.CValue2 = CASE WHEN A.CCognitiveSort = 1 THEN 0.62 
		                 WHEN A.CCognitiveSort = 2 THEN 0.24
		            ELSE 0.14 END
	  FROM #TMPTB A
	 INNER JOIN #TMPTB B
	    ON A._PK = B._PK
	 WHERE B.CCognitiveSort = 3
	-- 2번째만 넣은 경우 처리
	UPDATE A SET
		A.CValue2 = CASE WHEN A.CCognitiveSort = 1 THEN 0.62 
		            ELSE 0.38 END
	  FROM #TMPTB A
	 INNER JOIN #TMPTB B
	    ON A._PK = B._PK
	 WHERE B.CCognitiveSort = 2 AND B.CValue2 = 1 -- 2단계이고 점수가 1인 것

	-- 비교대상의 조회이고 이전연도우리가 아니면 평균값으로 반환
	SET @SQL = ''
	IF @P_FLAG = '1' AND @P_TARGET <> '3'
		BEGIN
			SET @SQL = @SQL + 'SELECT CONVERT(VARCHAR, datepart(mm, CFirstDate)) AS "월"  '

			SELECT @SQL = @SQL + ', MAX(CASE WHEN CCode = ''' +CCode+ ''' THEN CValue2 ELSE 0 END) AS ''' + CName + ''' '
			FROM   #TMP_COGNITIVE_PATH3
			SET @SQL = @SQL + '  FROM '
			SET @SQL = @SQL + '      ('
			SET @SQL = @SQL + '       SELECT CFirstDate, CCode, ROUND(AVG(CValue2), 2) AS CValue2 '
			SET @SQL = @SQL + '         FROM ( '
			SET @SQL = @SQL + '               SELECT CFirstDate, CDepartCode, CCode, SUM(CValue2) AS CValue2 '
			SET @SQL = @SQL + '                 FROM #TMPTB '
			SET @SQL = @SQL + '                GROUP BY CFirstDate, CDepartCode, CCode '
			SET @SQL = @SQL + '              ) SUB1 '
			SET @SQL = @SQL + '        GROUP BY CFirstDate, CCode '
			SET @SQL = @SQL + '      ) T1 '
			SET @SQL = @SQL + ' GROUP BY CFirstDate ORDER BY CFirstDate '

			EXEC(@SQL)   
		END
	ELSE
		BEGIN
			SET @SQL = @SQL + 'SELECT CONVERT(VARCHAR, datepart(mm, CFirstDate)) AS "월"  '

			SELECT @SQL = @SQL + ', SUM(CASE WHEN CCode = ''' +CCode+ ''' THEN CValue2 ELSE 0 END) AS ''' + CName + ''' '
			FROM   #TMP_COGNITIVE_PATH3
			SET @SQL = @SQL + ' FROM #TMPTB '
			SET @SQL = @SQL + ' GROUP BY CFirstDate ORDER BY CFirstDate '
			EXEC(@SQL)   
		END
	RETURN
END

-- 4.구매결정인지 2차
S4_RTN:
BEGIN
	SELECT a.CCode, a.CName
      INTO #TMP_COGNITIVE_PATH4
	  FROM TCognitivePath a(NOLOCK)
	 INNER JOIN TCognitivePath b(NOLOCK)
	    ON a.CParentCode = b.CCode
	 WHERE a.CDepth   = 2 -- 1차인지경로(실제 데이터는 2차경로로만 등록되니 이 조건을 주믄 안됨)
	   AND a.CEnabled = 1 -- 사용함
	   AND a.CApprovalStatus = 'Signed' -- 결제완료
	 ORDER BY b.CSort, a.CSort

	SET @dLoopDate = @dStartDate
	WHILE @dEndDate >= @dLoopDate
		BEGIN
			INSERT INTO #TMPTB(CFirstDate, CDepartCode, CCode, CValue2, CCognitiveSort, _PK)
			SELECT @dLoopDate, a.CStdDepartCode, b.CCognitivePath, 1, b.CCognitiveSort, 
			       b.CRcDepartCode + CONVERT(VARCHAR, b.CRcDepartStartDate, 112) + b.CRcCode + CONVERT(VARCHAR, b.CRcNo)
			  FROM TRegistCounsel a(NOLOCK)
			 INNER JOIN TRegistCounselCognitive b(NOLOCK)
			    ON a.CStdDepartCode = b.CRcDepartCode AND a.CStdDepartStartDate = b.CRcDepartStartDate AND
				   a.CStdCode = b.CRcCode AND a.CNo = b.CRcNo
			 INNER JOIN TCognitivePath c(NOLOCK)
			    ON b.CCognitivePath = c.CCode
			 WHERE EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CStdDepartCode)  -- 해당지점
			   AND a.CCallDate >= @dLoopDate                    -- 시작일이 1일보다 크거나 같고
			   AND a.CCallDate <  DATEADD(Month, 1, @dLoopDate) -- 시작일이 담달 1일보다 작은거
--			   AND c.CDepth   = 1 -- 1차인지경로(실제 데이터는 2차경로만 등록되니 이 조건을 주믄 안됨)
			   AND c.CEnabled = 1 -- 사용함
			   AND c.CApprovalStatus = 'Signed' -- 결제완료
			-- 반복용 일자에 한달 더하기
			SET @dLoopDate = DATEADD(Month, 1, @dLoopDate)
		END

	--*********
	-- 점수보정
	-- 3번과 동일한 PK값을 업데이트 하고 2번중 점수가 1인 데이터의 보정 처리하믄 끗!!!
	--*********
	UPDATE A SET
		A.CValue2 = CASE WHEN A.CCognitiveSort = 1 THEN 0.62 
		                 WHEN A.CCognitiveSort = 2 THEN 0.24
		            ELSE 0.14 END
	  FROM #TMPTB A
	 INNER JOIN #TMPTB B
	    ON A._PK = B._PK
	 WHERE B.CCognitiveSort = 3

	-- 2번째만 넣은 경우 처리
	UPDATE A SET
		A.CValue2 = CASE WHEN A.CCognitiveSort = 1 THEN 0.62 
		            ELSE 0.38 END
	  FROM #TMPTB A
	 INNER JOIN #TMPTB B
	    ON A._PK = B._PK
	 WHERE B.CCognitiveSort = 2 AND B.CValue2 = 1 -- 2단계이고 점수가 1인 것
	-- 비교대상의 조회이고 이전연도우리가 아니면 평균값으로 반환
	SET @SQL = ''
	IF @P_FLAG = '1' AND @P_TARGET <> '3'
		BEGIN
			SET @SQL = @SQL + 'SELECT CONVERT(VARCHAR, datepart(mm, CFirstDate)) AS "월"  '

			SELECT @SQL = @SQL + ', MAX(CASE WHEN CCode = ''' +CCode+ ''' THEN CValue2 ELSE 0 END) AS ''' + CName + ''' '
			FROM   #TMP_COGNITIVE_PATH4
			SET @SQL = @SQL + '  FROM '
			SET @SQL = @SQL + '      ('
			SET @SQL = @SQL + '       SELECT CFirstDate, CCode, ROUND(AVG(CValue2), 2) AS CValue2 '
			SET @SQL = @SQL + '         FROM ( '
			SET @SQL = @SQL + '               SELECT CFirstDate, CDepartCode, CCode, SUM(CValue2) AS CValue2 '
			SET @SQL = @SQL + '                 FROM #TMPTB '
			SET @SQL = @SQL + '                GROUP BY CFirstDate, CDepartCode, CCode '
			SET @SQL = @SQL + '              ) SUB1 '
			SET @SQL = @SQL + '        GROUP BY CFirstDate, CCode '
			SET @SQL = @SQL + '      ) T1 '
			SET @SQL = @SQL + ' GROUP BY CFirstDate ORDER BY CFirstDate '

			EXEC(@SQL)   
		END
	ELSE
		BEGIN
			SET @SQL = @SQL + 'SELECT CONVERT(VARCHAR, datepart(mm, CFirstDate)) AS "월"  '

			SELECT @SQL = @SQL + ', SUM(CASE WHEN CCode = ''' +CCode+ ''' THEN CValue2 ELSE 0 END) AS ''' + CName + ''' '
			FROM   #TMP_COGNITIVE_PATH4
			SET @SQL = @SQL + ' FROM #TMPTB '
			SET @SQL = @SQL + ' GROUP BY CFirstDate ORDER BY CFirstDate '
			EXEC(@SQL)   
		END
	RETURN
END

-- 5.유입회원수
S5_RTN:
BEGIN
	-- 비교대상의 조회이고 이전연도우리가 아니면 평균값으로 반환
	IF @P_FLAG = '1' AND @P_TARGET <> '3'
		BEGIN
			SELECT CFirstDate, CONVERT(VARCHAR, datepart(mm, CFirstDate)) AS CMonth,
				   ROUND(AVG(CInquire*1.0), 2) AS CInquire, 
				   ROUND(AVG(CVisit*1.0), 2) AS CVisit, 
				   ROUND(AVG(CRegist*1.0), 2) AS CRegist
			  FROM (
					SELECT CDepartCode, CFirstDate,
							MAX(CASE WHEN CFlag = '2' THEN CValue ELSE NULL END)        AS CInquire, -- 문의자
							MAX(CASE WHEN CFlag = '4' THEN CTotal_Count ELSE NULL END)  AS CVisit,   -- 방문자
							MAX(CASE WHEN CFlag = '4' THEN CRegist_Count ELSE NULL END) AS CRegist   -- 등록성공자
					  FROM TEightIndicator a(NOLOCK)
					 WHERE EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CDepartCode)
					   AND CFirstDate	>= @dStartDate
					   AND CFirstDate	<= @dEndDate
					   AND CFlag IN ('2', '4') -- 문의(2), 방문(3), 성공율(4)인데 성공율에 방문데이터가 있으니깐 2, 4번으로만 조합
					 GROUP BY CDepartCode, CFirstDate
				   ) SUB GROUP BY CFirstDate
		END
	ELSE
		BEGIN
			SELECT CFirstDate, CONVERT(VARCHAR, datepart(mm, CFirstDate)) AS CMonth,
					MAX(CASE WHEN CFlag = '2' THEN CValue ELSE NULL END)        AS CInquire, -- 문의자
					MAX(CASE WHEN CFlag = '4' THEN CTotal_Count ELSE NULL END)  AS CVisit,   -- 방문자
					MAX(CASE WHEN CFlag = '4' THEN CRegist_Count ELSE NULL END) AS  CRegist  -- 등록성공자
			  FROM TEightIndicator a(NOLOCK)
			 WHERE EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CDepartCode)
			   AND CFirstDate	>= @dStartDate
			   AND CFirstDate	<= @dEndDate
			   AND CFlag IN ('2', '4') -- 문의(2), 방문(3), 성공율(4)인데 성공율에 방문데이터가 있으니깐 2, 4번으로만 조합
			 GROUP BY CFirstDate
		END
	RETURN
END

-- 6.등록자 수 - 초중고, 7.등록자 수 - 서비스별
S6_RTN:
BEGIN
	-- 임시테이블에 넣어놓고 리턴처리
	SELECT CStdDepartCode, CStdDepartStartDate, CCallDate,
		   SUM(CPremium) AS CPremium, SUM(CCounselOnly) AS CCounselOnly, SUM(CTutoring) AS CTutoringOnly,
		   SUM(CASE WHEN CGrade < 7 THEN 1 ELSE NULL END) AS CG6,
		   SUM(CASE WHEN CGrade >= 7  AND CGrade <=  9 THEN 1 ELSE NULL END) AS CG7,
		   SUM(CASE WHEN CGrade >= 10 AND CGrade <= 12 THEN 1 ELSE NULL END) AS CG10,
		   SUM(CASE WHEN CGrade > 12 THEN 1 ELSE NULL END) AS CG13
	  INTO #TEMP1
	  FROM (
			SELECT CASE WHEN c.CPayDate = d.CPayDate THEN 1 ELSE NULL END AS CPremium,
				   CASE WHEN d.CPayDate IS NULL OR c.CPayDate < d.CPayDate THEN 1 ELSE NULL END AS CCounselOnly,
				   CASE WHEN c.CPayDate IS NULL OR c.CPayDate > d.CPayDate THEN 1 ELSE NULL END AS CTutoring,
				   CONVERT(INT, SUBSTRING(b.CGrade, 2, 2)) -
				   (
				   DATEPART(YEAR, GETDATE()) - 
				   DATEPART(YEAR,
					   CASE WHEN c.CPayDate = d.CPayDate THEN c.CPayDate 
							WHEN d.CPayDate IS NULL OR c.CPayDate < d.CPayDate THEN c.CPayDate
							WHEN c.CPayDate IS NULL OR c.CPayDate > d.CPayDate THEN d.CPayDate
					   END )
				   ) AS CGrade, 
				   a.CStdDepartCode, a.CStdDepartStartDate, 
				   DATEADD(Day, -(Day(a.CCallDate)-1), a.CCallDate) AS CCallDate
			  FROM TRegistCounsel a(NOLOCK)
			 INNER JOIN TStudent b(NOLOCK)
				ON a.CStdDepartCode = b.CBranchCode AND a.CStdDepartStartDate = b.CBranchStartDate AND a.CStdCode = b.CCode
			-- 상담관리 첫번째 등록 데이터
			  LEFT JOIN
						(
						SELECT s1.CScDepartCode, s1.CScDepartStartDate, s1.CScCode, s1.CNo, s1.CPayDate
						  FROM TStudentCounsel s1(NOLOCK)
						 INNER JOIN	(
									SELECT CScDepartCode, CScDepartStartDate, CScCode, MIN(CNo) AS CNo
									  FROM TStudentCounsel(NOLOCK)
									 GROUP BY CScDepartCode, CScDepartStartDate, CScCode
									) s2
							ON s1.CScDepartCode = s2.CScDepartCode AND s1.CScDepartStartDate = s2.CScDepartStartDate AND s1.CScCode = s2.CScCode AND s1.CNo = s2.CNo
						 ) c
				ON a.CStdDepartCode = c.CScDepartCode AND a.CStdDepartStartDate = c.CScDepartStartDate AND a.CStdCode = c.CScCode
			-- 개별지도 첫번째 등록 데이터
			  LEFT JOIN
						(
						SELECT s1.CStdDepartCode, s1.CStdDepartStartDate, s1.CStdCode, s1.CNo, s1.CPayDate
						  FROM TStudentTutoring s1(NOLOCK)
						 INNER JOIN	(
									SELECT CStdDepartCode, CStdDepartStartDate, CStdCode, MIN(CNo) AS CNo
									  FROM TStudentTutoring(NOLOCK)
									 GROUP BY CStdDepartCode, CStdDepartStartDate, CStdCode
									) s2
							ON s1.CStdDepartCode = s2.CStdDepartCode AND s1.CStdDepartStartDate = s2.CStdDepartStartDate AND s1.CStdCode = s2.CStdCode AND s1.CNo = s2.CNo
						 ) d
				ON a.CStdDepartCode = d.CStdDepartCode AND a.CStdDepartStartDate = d.CStdDepartStartDate AND a.CStdCode = d.CStdCode
			 WHERE a.CStdDepartCode like 'EPX%'
			   AND a.CStdDepartCode not in ('EPXBRANCH','EPXDIRECT','EPXHEAD')
			   AND a.CStatus = 'Regist' -- 등록자
			   -- 상담, 개별중 하나도 등록되지 않은 학생이 존재함
			   AND c.CPayDate IS NOT NULL AND d.CPayDate IS NOT NULL
			) T1
	 GROUP BY CStdDepartCode, CStdDepartStartDate, CCallDate

	IF @P_FLAG = '1' AND @P_TARGET <> '3'
		BEGIN
			SELECT CCallDate, CONVERT(VARCHAR, datepart(mm, CCallDate)) AS CMonth,
				   ROUND(AVG(CASE WHEN @pTYPE = 'S6' THEN CG6*1.0  ELSE CPremium*1.0      END), 2) AS COLS1,
				   ROUND(AVG(CASE WHEN @pTYPE = 'S6' THEN CG7*1.0  ELSE CCounselOnly*1.0  END), 2) AS COLS2,
				   ROUND(AVG(CASE WHEN @pTYPE = 'S6' THEN CG10*1.0 ELSE CTutoringOnly*1.0 END), 2) AS COLS3,
				   ROUND(AVG(CASE WHEN @pTYPE = 'S6' THEN CG13*1.0 ELSE NULL              END), 2) AS COLS4
			  FROM #TEMP1 a
			 WHERE EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CStdDepartCode)
			   AND CCallDate	>= @dStartDate
			   AND CCallDate	<= @dEndDate
			 GROUP BY CCallDate 
			 ORDER BY CCallDate
		END
	ELSE
		BEGIN
			SELECT CCallDate, CONVERT(VARCHAR, datepart(mm, CCallDate)) AS CMonth,
				   CASE WHEN @pTYPE = 'S6' THEN CG6  ELSE CPremium      END AS COLS1,
				   CASE WHEN @pTYPE = 'S6' THEN CG7  ELSE CCounselOnly  END AS COLS2,
				   CASE WHEN @pTYPE = 'S6' THEN CG10 ELSE CTutoringOnly END AS COLS3,
				   CASE WHEN @pTYPE = 'S6' THEN CG13 ELSE NULL          END AS COLS4
			  FROM #TEMP1 a
			 WHERE EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CStdDepartCode)
			   AND CCallDate	>= @dStartDate
			   AND CCallDate	<= @dEndDate
			 ORDER BY CCallDate
		END

	RETURN
END

-- 8.결제콤마수 -  초중고
S8_RTN:
BEGIN
	-- 임시테이블에 넣어놓고 리턴처리
	SELECT CStdDepartCode, CStdDepartStartDate, CPayDate,
		   SUM(CASE WHEN CGrade < 7 THEN CPayCommas ELSE NULL END) AS CG6,
		   SUM(CASE WHEN CGrade >= 7  AND CGrade <=  9 THEN CPayCommas ELSE NULL END) AS CG7,
		   SUM(CASE WHEN CGrade >= 10 AND CGrade <= 12 THEN CPayCommas ELSE NULL END) AS CG10,
		   SUM(CASE WHEN CGrade > 12 THEN CPayCommas ELSE NULL END) AS CG13
	  INTO #TEMP2
	  FROM (
			SELECT CONVERT(INT, SUBSTRING(b.CGrade, 2, 2)) -
				   (
					DATEPART(YEAR, GETDATE()) -  DATEPART(YEAR, a.CPayDate)
				   ) AS CGrade, 
				   a.CStdDepartCode, a.CStdDepartStartDate, a.CPayCommas,
				   DATEADD(Day, -(Day(a.CPayDate)-1), a.CPayDate) AS CPayDate
			  FROM TStudentTutoring a(NOLOCK)
			 INNER JOIN TStudent b(NOLOCK)
				ON a.CStdDepartCode = b.CBranchCode AND a.CStdDepartStartDate = b.CBranchStartDate AND a.CStdCode = b.CCode
			 -- 느려지면 나중에 여기다가 지점을 넣으면....머 조금 빨라질려나?
			 WHERE a.CStdDepartCode like 'EPX%'
			   AND a.CStdDepartCode not in ('EPXBRANCH','EPXDIRECT','EPXHEAD')
			   AND a.CRegistType <> 'Refund' -- 전액환불제외
			) T1
	 GROUP BY CStdDepartCode, CStdDepartStartDate, CPayDate

	IF @P_FLAG = '1' AND @P_TARGET <> '3'
		BEGIN
			SELECT CPayDate, CONVERT(VARCHAR, datepart(mm, CPayDate)) AS CMonth,
				   ROUND(AVG(CG6 *1.0), 2) AS COLS1,
				   ROUND(AVG(CG7 *1.0), 2) AS COLS2,
				   ROUND(AVG(CG10*1.0), 2) AS COLS3,
				   ROUND(AVG(CG13*1.0), 2) AS COLS4
			  FROM #TEMP2 a
			 WHERE EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CStdDepartCode)
			   AND CPayDate	>= @dStartDate
			   AND CPayDate	<= @dEndDate
			 GROUP BY CPayDate
			 ORDER BY CPayDate
		END
	ELSE
		BEGIN
			SELECT CPayDate, CONVERT(VARCHAR, datepart(mm, CPayDate)) AS CMonth,
				   CG6  AS COLS1,
				   CG7  AS COLS2,
				   CG10 AS COLS3,
				   CG13 AS COLS4
			  FROM #TEMP2 a
			 WHERE EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CStdDepartCode)
			   AND CPayDate	>= @dStartDate
			   AND CPayDate	<= @dEndDate
			 ORDER BY CPayDate
		END

	RETURN
END

-- 9.홍보비용
S9_RTN:
BEGIN
	IF @P_FLAG = '1' AND @P_TARGET <> '3'
		BEGIN
			-- 지점별 월 평균을 구하기
			INSERT INTO #TMPTB(CFirstDate, CValue)
			SELECT CStartDate, AVG(CMoney) AS CMoney
			  FROM
					(
					SELECT CPromoDepartCode,
						   DATEADD(Day, -(Day(CStartDate)-1), CStartDate) AS CStartDate,
						   ISNULL(CMakeCost, 0) + ISNULL(CDistributeCost, 0) AS CMoney
					  FROM TPromoEvent a(NOLOCK)
					 WHERE EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CPromoDepartCode)
					   AND CStartDate >= @dStartDate
					   AND CStartDate <= @dEndDate
					) SUB
			 GROUP BY CStartDate
			 ORDER BY CStartDate
		END
	ELSE
		BEGIN
			INSERT INTO #TMPTB(CFirstDate, CValue)
			SELECT CStartDate, SUM(CMoney) AS CMoney
			  FROM
					(
					SELECT CPromoDepartCode,
						   DATEADD(Day, -(Day(CStartDate)-1), CStartDate) AS CStartDate,
						   ISNULL(CMakeCost, 0) + ISNULL(CDistributeCost, 0) AS CMoney
					  FROM TPromoEvent a(NOLOCK)
					 WHERE EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CPromoDepartCode)
					   AND CStartDate >= @dStartDate
					   AND CStartDate <= @dEndDate
					) SUB
			 GROUP BY CStartDate
			 ORDER BY CStartDate
		END
	
	-- 누락된 월을 저장
	SET @dLoopDate = @dStartDate
	WHILE @dEndDate >= @dLoopDate
		BEGIN
			IF (SELECT COUNT(1) FROM #TMPTB WHERE CFirstDate = @dLoopDate) = 0
				BEGIN
					INSERT INTO #TMPTB(CFirstDate)
					SELECT @dLoopDate
				END
			-- 반복용 일자에 한달 더하기
			SET @dLoopDate = DATEADD(Month, 1, @dLoopDate)
		END
	
	SELECT '홍보비용' AS CTitle, CFirstDate, CValue, CONVERT(VARCHAR, datepart(mm, CFirstDate)) AS CMonth
	  FROM #TMPTB
	 ORDER BY CFirstDate

	RETURN
END

GO

-- =============================================
-- Author:		김길명
-- Create date: 2016-02-12
-- Description:	지점운영현황(신규)
-- Modify:      
-- Modify date: 
-- Description:	
-- EXEC SP_FACILITY_STUDENT_COUNT @pTYPE = 'S1', @pFLAG = 'EPX', @pFACILITY = '', @pBRAND = '', @pAREA  = '', @pZONE  = '', @pSTART_DATE = '2017/04', @pEND_DATE   = '2017/04'
-- EXEC SP_FACILITY_STUDENT_COUNT @pTYPE = 'S2', @pFACILITY = 'ECH0002', @pSTART_DATE = '2016-01', @pEND_DATE   = '2016-01', @pSTAFFID = ''
-- =============================================
CREATE PROCEDURE [dbo].[SP_FACILITY_STUDENT_COUNT]
	@pTYPE			VARCHAR(3)  = '',	-- 구분(S1 : 현황, S2 : 미등록 학생)
	@pFLAG			VARCHAR(3)  = '',	-- 구분(에듀플렉스, 에듀코치)
	@pFACILITY		VARCHAR(20) = '',	-- 지점(지점을 클릭했을 때)
	@pBRAND         VARCHAR(255)= '',	-- 브랜드
	@pAREA          VARCHAR(255)= '',	-- 지역
	@pZONE          VARCHAR(255)= '',	-- 권역
	@pSTART_DATE	VARCHAR(7)  = '',	-- 시작월(YYYY/MM)
	@pEND_DATE		VARCHAR(7)  = '',	-- 종료월(YYYY/MM)
	@pSTAFFID       VARCHAR(30) = ''	-- 로그인유저ID
AS
-- 2016.02.02. 구분자 처리를 위한 테이블 함수 생성
-- SELECT VAL1 FROM  dbo.[FN_SPLIT]('2,3',',') A

-- 임시테이블을 이용하여 지점처리
DECLARE @FACILITY TABLE
(
	CFACILITY NVARCHAR(20)	-- 지점코드
)

-- 기준테이블(월별)
CREATE TABLE #MONTH
(
	CMonth			NVARCHAR(7),	-- 월
	CFacility		NVARCHAR(20) 	-- 지점코드
)
CREATE NONCLUSTERED INDEX #Idx00 ON #MONTH (CMonth, CFacility)
-- 상담관리 월초, 월말을 구하기 위한 임시테이블
CREATE TABLE #dTEMP0
(
	CMonth			NVARCHAR(7),	-- 월
	CFacility		NVARCHAR(20),	-- 지점코드
	CStudentCode	NVARCHAR(50)	-- 학생코드
)

-- 월초회원(상담관리)
CREATE TABLE #TEMP00
(
	CMonth			NVARCHAR(7),	-- 월
	CFacility		NVARCHAR(20),	-- 지점코드
	CStudentCode	NVARCHAR(50)	-- 학생코드
)
CREATE NONCLUSTERED INDEX #Idx01 ON #TEMP00 (CMonth, CFacility, CStudentCode)

-- 월말회원(상담관리)
CREATE TABLE #TEMP98 
(
	CMonth			NVARCHAR(7),	-- 월
	CFacility		NVARCHAR(20),	-- 지점코드
	CStudentCode	NVARCHAR(50)	-- 학생코드
)
CREATE NONCLUSTERED INDEX #Idx02 ON #TEMP98 (CMonth, CFacility, CStudentCode)

-- 월초회원(개별지도)
CREATE TABLE #TEMP11 
(
	CMonth			NVARCHAR(7),	-- 월
	CFacility		NVARCHAR(20),	-- 지점코드
	CStudentCode	NVARCHAR(50),	-- 학생코드
	CStartDate      DATETIME,		-- 미연장을 구하기 위한 기준시작일자
	CEndDate        DATETIME 		-- 미연장을 구하기 위한 기준종료일자
)
CREATE NONCLUSTERED INDEX #Idx03 ON #TEMP11 (CMonth, CFacility, CStudentCode, CStartDate, CEndDate)

-- 월말회원(개별지도)
CREATE TABLE #TEMP99 
(
	CMonth			NVARCHAR(7),	-- 월
	CFacility		NVARCHAR(20),	-- 지점코드
	CStudentCode	NVARCHAR(50)	-- 학생코드
)
CREATE NONCLUSTERED INDEX #Idx04 ON #TEMP99 (CMonth, CFacility, CStudentCode)


-- 변수선언
DECLARE 
	@dSTART_DATE DATETIME,
	@dEND_DATE   DATETIME,
	@dLOOP_DATE	 DATETIME,
	@dLOOP_CHK   INT

-- 검색기간 변환
SET @dSTART_DATE = CONVERT(DATETIME, REPLACE(REPLACE(@pSTART_DATE, '/', ''), '-', '')+'01')
SET @dEND_DATE   = CONVERT(DATETIME, REPLACE(REPLACE(@pEND_DATE, '/', ''), '-', '')+'01')
SET @dEND_DATE   = DATEADD(d,-1,DATEADD(m,1,DATEADD(dd,1,DATEADD(dd,-DATEPART(dd,@dEND_DATE),@dEND_DATE)))) -- 월말


----------------------------------------------------- 지점목록 설정 Start
-- 지점에 값이 없을 경우 브랜드, 지역, 권역의 지점리스트 처리
-- 동적쿼리를 써볼까 했지만 이게 테이블 반환함수까지 써야해서 그냥 날코딩
IF ISNULL(@pFACILITY, '') = ''
	BEGIN
		IF ISNULL(@pBRAND, '') <> '' AND ISNULL(@pAREA, '') = '' AND ISNULL(@pZONE, '') = ''
		-- 1)브랜드의 데이터만 넘어온 경우
			BEGIN
				INSERT INTO @FACILITY (CFACILITY)  
				SELECT a.CDepartCode 
					FROM TFacility a(NOLOCK)
					INNER JOIN TDepartment b(NOLOCK)
					ON a.CDepartCode = b.CDepartCode AND a.CDepartStartDate = b.CDepartStartDate 
					WHERE a.CDepartCode LIKE @pFLAG + '%'
					AND (  -- 기간내에 존재하는 지점만 세팅
		 				(a.CDepartStartDate <= @dSTART_DATE AND b.CEndDate >= @dSTART_DATE) OR
						(a.CDepartStartDate <= @dEND_DATE   AND b.CEndDate >= @dEND_DATE) 
						) 
					AND a.CTmpGroup1 = 'BRANCHINFO01'
					AND a.CTmpCode1 IN (SELECT VAL1 FROM dbo.[FN_SPLIT](@pBRAND,',') A )
			END
		ELSE IF ISNULL(@pBRAND, '') = '' AND ISNULL(@pAREA, '') <> '' AND ISNULL(@pZONE, '') = ''
		-- 2)지역의 데이터만 넘어온 경우
			BEGIN
				INSERT INTO @FACILITY (CFACILITY)  
				SELECT a.CDepartCode 
					FROM TFacility a(NOLOCK)   
					INNER JOIN TDepartment b(NOLOCK) 
					ON a.CDepartCode = b.CDepartCode AND a.CDepartStartDate = b.CDepartStartDate 
					WHERE a.CDepartCode LIKE @pFLAG + '%'
					AND (  -- 기간내에 존재하는 지점만 세팅
		 				(a.CDepartStartDate <= @dSTART_DATE AND b.CEndDate >= @dSTART_DATE) OR
						(a.CDepartStartDate <= @dEND_DATE   AND b.CEndDate >= @dEND_DATE) 
						) 
					AND a.CTmpGroup2 = 'BRANCHINFO02'
					AND a.CTmpCode2 IN (SELECT VAL1 FROM dbo.[FN_SPLIT](@pAREA,',') A )
			END
		ELSE IF ISNULL(@pBRAND, '') = '' AND ISNULL(@pAREA, '') = '' AND ISNULL(@pZONE, '') <> ''
		-- 3)권역의 전체 데이터 넘어 온 경우 
			BEGIN
				INSERT INTO @FACILITY (CFACILITY)  
				SELECT a.CDepartCode 
					FROM TFacility a(NOLOCK)   
					INNER JOIN TDepartment b(NOLOCK) 
					ON a.CDepartCode = b.CDepartCode AND a.CDepartStartDate = b.CDepartStartDate 
					WHERE a.CDepartCode LIKE @pFLAG + '%'
					AND (  -- 기간내에 존재하는 지점만 세팅
		 				(a.CDepartStartDate <= @dSTART_DATE AND b.CEndDate >= @dSTART_DATE) OR
						(a.CDepartStartDate <= @dEND_DATE   AND b.CEndDate >= @dEND_DATE) 
						) 
					AND a.CTmpGroup3 = 'BRANCHINFO03'
					AND a.CTmpCode3 IN (SELECT VAL1 FROM dbo.[FN_SPLIT](@pZONE,',') A )
			END
		ELSE IF ISNULL(@pBRAND, '') <> '' AND ISNULL(@pAREA, '') <> '' AND ISNULL(@pZONE, '') = ''
		-- 1)브랜드, 2)지역의 데이터만 넘어온 경우
			BEGIN
				INSERT INTO @FACILITY (CFACILITY)  
				SELECT a.CDepartCode 
					FROM TFacility a(NOLOCK)   
					INNER JOIN TDepartment b(NOLOCK)
					ON a.CDepartCode = b.CDepartCode AND a.CDepartStartDate = b.CDepartStartDate 
					WHERE a.CDepartCode LIKE @pFLAG + '%'
					AND (  -- 기간내에 존재하는 지점만 세팅
		 				(a.CDepartStartDate <= @dSTART_DATE AND b.CEndDate >= @dSTART_DATE) OR
						(a.CDepartStartDate <= @dEND_DATE   AND b.CEndDate >= @dEND_DATE) 
						) 
					AND a.CTmpGroup1 = 'BRANCHINFO01'
					AND a.CTmpCode1 IN (SELECT VAL1 FROM dbo.[FN_SPLIT](@pBRAND,',') A )
					AND a.CTmpGroup2 = 'BRANCHINFO02'
					AND a.CTmpCode2 IN (SELECT VAL1 FROM dbo.[FN_SPLIT](@pAREA,',') A )
			END
		ELSE IF ISNULL(@pBRAND, '') <> '' AND ISNULL(@pAREA, '') = '' AND ISNULL(@pZONE, '') <> ''
		-- 1)브랜드, 3)권역의 전체 데이터 넘어 온 경우 
			BEGIN
				INSERT INTO @FACILITY (CFACILITY)  
				SELECT a.CDepartCode 
					FROM TFacility a(NOLOCK)   
					INNER JOIN TDepartment b(NOLOCK) 
					ON a.CDepartCode = b.CDepartCode AND a.CDepartStartDate = b.CDepartStartDate 
					WHERE a.CDepartCode LIKE @pFLAG + '%'
					AND (  -- 기간내에 존재하는 지점만 세팅
		 				(a.CDepartStartDate <= @dSTART_DATE AND b.CEndDate >= @dSTART_DATE) OR
						(a.CDepartStartDate <= @dEND_DATE   AND b.CEndDate >= @dEND_DATE) 
						) 
					AND a.CTmpGroup1 = 'BRANCHINFO01'
					AND a.CTmpCode1 IN (SELECT VAL1 FROM dbo.[FN_SPLIT](@pBRAND,',') A )
					AND a.CTmpGroup3 = 'BRANCHINFO03'
					AND a.CTmpCode3 IN (SELECT VAL1 FROM dbo.[FN_SPLIT](@pZONE,',') A )
			END
		ELSE IF ISNULL(@pBRAND, '') = '' AND ISNULL(@pAREA, '') <> '' AND ISNULL(@pZONE, '') <> ''
		-- 2)지역, 3)권역의 전체 데이터 넘어 온 경우 
			BEGIN
				INSERT INTO @FACILITY (CFACILITY)  
				SELECT a.CDepartCode 
					FROM TFacility a(NOLOCK)   
					INNER JOIN TDepartment b(NOLOCK) 
					ON a.CDepartCode = b.CDepartCode AND a.CDepartStartDate = b.CDepartStartDate 
					WHERE a.CDepartCode LIKE @pFLAG + '%'
					AND (  -- 기간내에 존재하는 지점만 세팅
		 				(a.CDepartStartDate <= @dSTART_DATE AND b.CEndDate >= @dSTART_DATE) OR
						(a.CDepartStartDate <= @dEND_DATE   AND b.CEndDate >= @dEND_DATE) 
						) 
					AND a.CTmpGroup2 = 'BRANCHINFO02'
					AND a.CTmpCode2 IN (SELECT VAL1 FROM dbo.[FN_SPLIT](@pAREA,',') A )
					AND a.CTmpGroup3 = 'BRANCHINFO03'
					AND a.CTmpCode3 IN (SELECT VAL1 FROM dbo.[FN_SPLIT](@pZONE,',') A )
			END
		ELSE IF ISNULL(@pBRAND, '') <> '' AND ISNULL(@pAREA, '') <> '' AND ISNULL(@pZONE, '') <> ''
		-- 1)브랜드, 2)지역, 3)권역의 전체 데이터 넘어 온 경우 
			BEGIN
				INSERT INTO @FACILITY (CFACILITY)  
				SELECT a.CDepartCode 
					FROM TFacility a(NOLOCK)   
					INNER JOIN TDepartment b(NOLOCK) 
					ON a.CDepartCode = b.CDepartCode AND a.CDepartStartDate = b.CDepartStartDate 
					WHERE a.CDepartCode LIKE @pFLAG + '%'
					AND (  -- 기간내에 존재하는 지점만 세팅
		 				(a.CDepartStartDate <= @dSTART_DATE AND b.CEndDate >= @dSTART_DATE) OR
						(a.CDepartStartDate <= @dEND_DATE   AND b.CEndDate >= @dEND_DATE) 
						) 
					AND a.CTmpGroup1 = 'BRANCHINFO01'
					AND a.CTmpCode1 IN (SELECT VAL1 FROM dbo.[FN_SPLIT](@pBRAND,',') A )
					AND a.CTmpGroup2 = 'BRANCHINFO02'
					AND a.CTmpCode2 IN (SELECT VAL1 FROM dbo.[FN_SPLIT](@pAREA,',') A )
					AND a.CTmpGroup3 = 'BRANCHINFO03'
					AND a.CTmpCode3 IN (SELECT VAL1 FROM dbo.[FN_SPLIT](@pZONE,',') A )
			END
		ELSE IF ISNULL(@pBRAND, '') = '' AND ISNULL(@pAREA, '') = '' AND ISNULL(@pZONE, '') = ''
		-- 전부값이 없을 경우
			BEGIN
				INSERT INTO @FACILITY (CFACILITY)  
				SELECT a.CDepartCode 
					FROM TFacility a(NOLOCK)   
					INNER JOIN TDepartment b(NOLOCK) 
					ON a.CDepartCode = b.CDepartCode AND a.CDepartStartDate = b.CDepartStartDate 
					WHERE a.CDepartCode LIKE @pFLAG + '%'
					AND (  -- 기간내에 존재하는 지점만 세팅
		 				(a.CDepartStartDate <= @dSTART_DATE AND b.CEndDate >= @dSTART_DATE) OR
						(a.CDepartStartDate <= @dEND_DATE   AND b.CEndDate >= @dEND_DATE) 
						) 
			END

		
	END
ELSE
-- 지점을 클릭했을 때 하나의 지점에 대해서만 처리
	BEGIN
		-- 사용자별 지점권한 테이블에서 하위지점리스트 찾아서 생성
		with cte (CName0, CParentFacilityCode, CFacilityCode, LEV, CFacilityType)
		as
		(
		SELECT T2.CName0, T2.CParentFacilityCode, T1.CFacilityCode, 1 AS LEV, T1.CFacilityType
			FROM TFacilityNowStaffPerm T1(NOLOCK)
			INNER JOIN TDepartment T2(NOLOCK)
			ON T1.CFacilityCode = T2.CDepartCode
			WHERE T1.CStaffId = @pSTAFFID
			AND T1.CFacilityCode = @pFACILITY
		UNION ALL
		SELECT a.CName0, a.CParentFacilityCode, a.CFacilityCode, LEV + 1, a.CFacilityType
			FROM
				(
				SELECT T2.CName0, T2.CParentFacilityCode, T1.CFacilityCode, T1.CFacilityType
					FROM TFacilityNowStaffPerm T1(NOLOCK)
					INNER JOIN TDepartment T2(NOLOCK)
					ON T1.CFacilityCode = T2.CDepartCode
					WHERE T1.CStaffId = @pSTAFFID
					AND T1.CAccessPerm = '1' -- 접근가능한 지점만 처리
				) a, cte b
			WHERE a.CParentFacilityCode = b.CFacilityCode
		)
		INSERT INTO @FACILITY
		SELECT CFacilityCode
			FROM cte
			WHERE CFacilityType <> 'GROUP' -- 그룹용지점은 제외시킨다.(본사의 제외여부는 확인 후 수정)

	END
--------------------------------------------------------------- 지점목록 End
-- 지점목록에서 필요없는 데이터는 한번 걸러준다
DELETE FROM @FACILITY
	WHERE CFACILITY IN ('EPXBRANCH', 'EPXDIRECT', 'EPXHEAD', 'ECHBRANCH', 'ECHDIRECT', 'ECHHEAD')


IF (SELECT COUNT(*) FROM @FACILITY) = 0
	BEGIN
		RAISERROR ('집계할 지점이 없습니다!', -- Message text.
								16, -- Severity.
								1 -- State.
								);
		RETURN
	END

IF      @pTYPE = 'S1' GOTO S1_RTN   --지점현황(신규)
ELSE IF @pTYPE = 'S2' GOTO S2_RTN   --미등록 학생리스트
ELSE IF @pTYPE = 'S3' GOTO S3_RTN   --상담관리월말 학생리스트
ELSE IF @pTYPE = 'S4' GOTO S4_RTN   --개별지도월말 학생리스트
ELSE RETURN

S1_RTN:
BEGIN

	-- 기준테이블 생성(월별, 지점별)
	SET @dLOOP_DATE = @dSTART_DATE
	WHILE @dEND_DATE >= @dLOOP_DATE
		BEGIN
			INSERT INTO #MONTH(CMonth, CFacility)
			SELECT LEFT(CONVERT(VARCHAR, @dLOOP_DATE, 23), 7), CFACILITY
			  FROM @FACILITY
			-- 반복용 일자에 한달 더하기
			SET @dLOOP_DATE = DATEADD(Month, 1, @dLOOP_DATE)
		END

	-- 0.월초,월말회원(2016.02.22. 일년치를 조회하면 여기서 5~6초이상 걸려버리네요...너무 오래걸려서 따로 계산하기 프로시저로 빼버린다.)
	-- 상담관리 월초,월말회원 정리 끝

PRINT '상담관리 신규복회휴원 : ' + CONVERT(VARCHAR, GETDATE(),  21)
	-- 1.신규회원(상담)
	SELECT LEFT(CONVERT(VARCHAR, a.CStartDate, 23), 7) AS CMonth, a.CScDepartCode, a.CScCode, a.CStartDate
	  INTO #TEMP01
	  FROM TStudentCounsel a(NOLOCK)
	 WHERE EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CScDepartCode)  -- 해당지점
	   AND a.CStartDate >= @dSTART_DATE
	   AND a.CStartDate <= @dEND_DATE
	   AND a.CRegistType = 'Newcomer'

	CREATE NONCLUSTERED INDEX #Idx90 ON #TEMP01 (CMonth, CScDepartCode)

	-- 2.복회회원(상담-복회 이전 7일 상담데이터가 있으면 복회가 아니지만 이전데이터는 이런거 없이 처리되었으니...ㅠㅠ)
	SELECT LEFT(CONVERT(VARCHAR, a.CStartDate, 23), 7) AS CMonth, a.CScDepartCode, a.CScCode, a.CStartDate
	  INTO #TEMP02
	  FROM TStudentCounsel a(NOLOCK)
	 WHERE EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CScDepartCode)  -- 해당지점
	   AND a.CStartDate >= @dSTART_DATE
	   AND a.CStartDate <= @dEND_DATE
	   AND a.CRegistType = 'Returning'
	   -- 복회 이전 7일 상담데이터가 있으면 복회회원에서 제외
	   AND (SELECT COUNT(1) FROM TStudentCounsel(NOLOCK) WHERE CScDepartCode = a.CScDepartCode AND CScCode = a.CScCode AND CNo < a.CNo AND CEndDate >= DATEADD(dd, -7, a.CStartDate) AND CRegistType <> 'Refund') = 0
	
	CREATE NONCLUSTERED INDEX #Idx91 ON #TEMP02 (CMonth, CScDepartCode)

	-- 4.휴원회원(이건 두개가 같이 움직이는데...상담일때만 골라내가가 참 까다롭기에...개별은 휴원 안하는걸로~~)
	SELECT LEFT(CONVERT(VARCHAR, a.CLeaveStartDate, 23), 7) AS CMonth, a.CDepartCode, a.CStudentCode, a.CLeaveStartDate
	  INTO #TEMP04
	  FROM TStudentLeave a(NOLOCK)
	 WHERE EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CDepartCode)  -- 해당지점
	   AND a.CLeaveStartDate >= @dSTART_DATE
	   AND a.CLeaveStartDate <= @dEND_DATE
	
	CREATE NONCLUSTERED INDEX #Idx92 ON #TEMP04 (CMonth, CDepartCode)

	-- 5.휴원해제회원(이건 두개가 같이 움직이는데...상담일때만 골라내가가 참 까다롭기에...개별은 휴원 안하는걸로~~)
	SELECT LEFT(CONVERT(VARCHAR, a.CLeaveEndDate, 23), 7) AS CMonth, a.CDepartCode, a.CStudentCode, a.CLeaveEndDate
	  INTO #TEMP05
	  FROM TStudentLeave a(NOLOCK)
	 WHERE EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CDepartCode)  -- 해당지점
	   AND a.CLeaveEndDate >= @dSTART_DATE
	   AND a.CLeaveEndDate <= @dEND_DATE

	CREATE NONCLUSTERED INDEX #Idx93 ON #TEMP05 (CMonth, CDepartCode)

	-- 6.실제종료학생(월초, 신규, 복회학생에서 연장되지 않은 학생 수)
	

PRINT '상담관리 신규복회휴원 : ' + CONVERT(VARCHAR, GETDATE(),  21)
	--**************
	-- 개별지도 처리
	--**************
	-- 0.월초,월말회원
	-- 기준월보다 작은 일자의 신규나 복회를 기준으로 월초 회원을 구하기(시간표 업데이트를 활용)
	-- 2016.02.22. 일년치를 조회하면 여기서 5~6초이상 걸려버리네요...너무 오래걸려서 따로 계산하기 프로시저로 빼버린다.
	-- 개별지도 월초,월말회원 정리 끝

PRINT '개별지도 신규복회콤마수 : ' + CONVERT(VARCHAR, GETDATE(),  21)
	-- 1.신규회원(개별)
	SELECT LEFT(CONVERT(VARCHAR, a.CStartDate, 23), 7) AS CMonth, a.CStdDepartCode, a.CStdCode
	  INTO #TEMP12
	  FROM TStudentTutoring a(NOLOCK)
	 WHERE EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CStdDepartCode)  -- 해당지점
	   AND a.CStartDate >= @dSTART_DATE
	   AND a.CStartDate <= @dEND_DATE
	   AND a.CRegistType = 'Newcomer'
	   AND isnull(a.TranYn, 'N') <> 'Y' -- 2018.04.05. 이관데이터 제외처리조건 추가

	CREATE NONCLUSTERED INDEX #Idx94 ON #TEMP12 (CMonth, CStdDepartCode)

	-- 2.복회회원(개별지도-복회는 개별지도를 종료하게되면 무조건 카운팅 되도록 바꿈)
	SELECT LEFT(CONVERT(VARCHAR, a.CStartDate, 23), 7) AS CMonth, a.CStdDepartCode, a.CStdCode
	  INTO #TEMP13
	  FROM TStudentTutoring a(NOLOCK)
	 WHERE EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CStdDepartCode)  -- 해당지점
	   AND a.CStartDate >= @dSTART_DATE
	   AND a.CStartDate <= @dEND_DATE
	   AND a.CRegistType = 'Returning'
	   AND isnull(a.TranYn, 'N') <> 'Y' -- 2018.04.05. 이관데이터 제외처리조건 추가

	CREATE NONCLUSTERED INDEX #Idx95 ON #TEMP13 (CMonth, CStdDepartCode)

	-- 3.미연장 학생 구하기(월초에도 있고 월말에도 있으나 해당월에 개별지도 등록 건이 없는 학생 리스트)
	-- 이것도 월초, 월말 구할 떄 같이 구해둔다.(왜? 화면에서 미연장 학생 눌렀을때 리스트를 보여달라고 하니깐)

	-- 4.개별지도 콤마수 구하기(개별지도등록, 개별지도 환불등을 쿼리해 옴)
	SELECT CMonth, CStdDepartCode, SUM(CModifiedCommas) AS CCnt
	  INTO #TEMP15
	  FROM
			(
			-- 개별지도
			SELECT LEFT(CONVERT(VARCHAR, a.CStartDate, 23), 7) AS CMonth, CStdDepartCode, SUM(ISNULL(a.CModifiedCommas, 0)) AS CModifiedCommas
				FROM TStudentTutoring a(NOLOCK)
				WHERE EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CStdDepartCode)  -- 해당지점
				AND a.CStartDate >= @dSTART_DATE
				AND a.CStartDate <= @dEND_DATE
				AND isnull(a.TranYn, 'N') <> 'Y' -- 2018.04.05. 이관데이터 제외처리조건 추가
				GROUP BY LEFT(CONVERT(VARCHAR, a.CStartDate, 23), 7), CStdDepartCode
			UNION ALL
			-- 개별지도 환불(환불은 (-)처리해야 함)
			SELECT LEFT(CONVERT(VARCHAR, a.CEndDateRefund, 23), 7) AS CMonth, a.CStdBrcDptCode, SUM(ISNULL(a.CRefundModifiedCommas, 0)*-1) AS CModifiedCommas
				FROM TStudentTutoringRefund a(NOLOCK)
				WHERE EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CStdBrcDptCode)  -- 해당지점
				AND a.CEndDateRefund >= @dSTART_DATE
				AND a.CEndDateRefund <= @dEND_DATE
				GROUP BY LEFT(CONVERT(VARCHAR, a.CEndDateRefund, 23), 7), a.CStdBrcDptCode
			-- 개별지도 기타
			UNION ALL
			SELECT LEFT(CONVERT(VARCHAR, a.CSateDate, 23), 7) AS CMonth, a.CDepartCode, SUM(ISNULL(a.CCommas, 0)) AS CModifiedCommas
			  FROM TOtherSale a(NOLOCK)
			 WHERE EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CDepartCode)  -- 해당지점
			   AND a.CSateDate >= @dSTART_DATE
			   AND a.CSateDate <= @dEND_DATE
			   AND a.CSaleTypeCode = '45'
			 GROUP BY LEFT(CONVERT(VARCHAR, a.CSateDate, 23), 7), a.CDepartCode
			) TModifiedCommas
	 GROUP BY CMonth, CStdDepartCode

	CREATE NONCLUSTERED INDEX #Idx97 ON #TEMP15 (CMonth, CStdDepartCode)


	-- 4.개별지도 콤마수 구하기(Only개별지도, Premium개별지도)
	SELECT LEFT(CONVERT(VARCHAR, a.CStartDate, 23), 7) AS CMonth, CStdDepartCode, 
			SUM(case when b.CScCode is null then ISNULL(a.CModifiedCommas, 0) else 0 end) AS COnlyCommas,
			SUM(case when b.CScCode is not null then ISNULL(a.CModifiedCommas, 0) else 0 end) AS CPremiumCommas
	  INTO #TEMP150
	  FROM TStudentTutoring a(NOLOCK)
	  left join TStudentCounsel b(nolock)
		on a.CStdDepartCode = b.CScDepartCode and a.CStdCode = b.CScCode and a.CStartDate between b.CStartDate and b.CEndDate
	 WHERE EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CStdDepartCode)  -- 해당지점
	   AND a.CStartDate >= @dSTART_DATE
	   AND a.CStartDate <= @dEND_DATE
	   AND isnull(a.TranYn, 'N') <> 'Y' -- 2018.04.05. 이관데이터 제외처리조건 추가
	 GROUP BY LEFT(CONVERT(VARCHAR, a.CStartDate, 23), 7), CStdDepartCode


PRINT '개별지도 신규복회미연장콤마수 : ' + CONVERT(VARCHAR, GETDATE(),  21)

PRINT '지점데이터 평균합계 : ' + CONVERT(VARCHAR, GETDATE(),  21)
	-- 지점데이터 생성
	SELECT a.CMonth,
		   a.CFacility,
		   CAST(ISNULL(a0.CCnt, 0) AS NUMERIC(18, 2)) AS CCounselBeginMonth,
		   CAST(ISNULL(b.CCnt,  0) AS NUMERIC(18, 2)) AS CCounselNew,
		   CAST(ISNULL(c.CCnt,  0) AS NUMERIC(18, 2)) AS CCounselRtn,
		   --상담관리 종료회원
		   CAST(ISNULL(a0.CCnt, 0) + ISNULL(b.CCnt, 0) + ISNULL(c.CCnt,  0) - ISNULL(g.CCnt,  0) AS NUMERIC(18, 2)) AS CCounselEnd,
		   CAST(ISNULL(g.CCnt,  0) AS NUMERIC(18, 2)) AS CCounselEndMonth,
		   -- 상담관리 이탈율
		   --CASE WHEN ISNULL(a0.CCnt, 0) > 0 THEN CONVERT(nvarchar,ROUND((ISNULL(a0.CCnt, 0) - ISNULL(g.CCnt,  0) + ISNULL(b.CCnt,  0) + ISNULL(c.CCnt,  0)) / CONVERT(FLOAT, ISNULL(a0.CCnt, 0)), 4) *100) + '%'		                        
		   --ELSE '0%' END AS CCounselLeaveRate,
		   --2017-07-05 이탈율을 현재 컬럼 [종료]/[월초]x100에서 [실종료]/[월초]x100 으로 변경 
		   CASE WHEN ISNULL(a0.CCnt, 0) > 0 THEN CONVERT(nvarchar,ROUND((ISNULL(a00.CCnt, 0)) / CONVERT(FLOAT, ISNULL(a0.CCnt, 0)), 4) *100) + '%'		                        	                        
		   ELSE '0%' END AS CCounselLeaveRate,
		   -- 2017.05.27 추가
		   CAST(ISNULL(a00.CCnt,  0) AS NUMERIC(18, 2)) AS CCounselRealEnd, -- 상담관리 실제종료
		   CAST(ISNULL(a0.CCnt, 0) + ISNULL(b.CCnt,  0) + ISNULL(c.CCnt,  0) - ISNULL(a00.CCnt,  0) AS NUMERIC(18, 2)) AS CCounselReal, -- 상담관리 실등원(월초+신규+복회-실종료)
		   
		   CAST(ISNULL(e.CCnt,  0) AS NUMERIC(18, 2)) AS CLeaveOn,
		   CAST(ISNULL(f.CCnt,  0) AS NUMERIC(18, 2)) AS CLeaveEnd,
		   CAST(ISNULL(j.CCnt,  0) AS NUMERIC(18, 2)) AS CTutoringBeginMonth,
		   CAST(ISNULL(h.CCnt,  0) AS NUMERIC(18, 2)) AS CTutoringNew,
		   CAST(ISNULL(i.CCnt,  0) AS NUMERIC(18, 2)) AS CTutoringRtn,
		   --개별지도 종료회원
		   CAST(ISNULL(j.CCnt, 0) + ISNULL(h.CCnt, 0) + ISNULL(i.CCnt,  0) - ISNULL(k.CCnt,  0) AS NUMERIC(18, 2)) AS CTutoringEnd,
		   CAST(ISNULL(l.CCnt,  0) AS NUMERIC(18, 2)) AS CTutoringNotReg,
		   CAST(ISNULL(k.CCnt,  0) AS NUMERIC(18, 2)) AS CTutoringEndMonth,
		   -- 개별지도 이탈율
		   CASE WHEN ISNULL(j.CCnt, 0) > 0 THEN CONVERT(nvarchar,ROUND((ISNULL(j.CCnt, 0) - ISNULL(k.CCnt,  0) + ISNULL(h.CCnt,  0) + ISNULL(i.CCnt,  0)) / CONVERT(FLOAT, ISNULL(j.CCnt, 0)), 4) * 100) + '%'
		   ELSE '0%' END AS CTutoringLeaveRate,		   
		   CAST(ISNULL(z.CSalesTotal, 0) AS NUMERIC(18, 2)) AS CTotalSale,
		   CAST(ISNULL(z.CSalesCounsel, 0) AS NUMERIC(18, 2)) AS CCounselSale,
		   CAST(ISNULL(m.CCnt,  0) AS NUMERIC(18, 2)) AS CCommas,
		   -- 2017.05.27 추가
		   CAST(ISNULL(n.COnlyCommas,    0) AS NUMERIC(18, 2)) AS COnlyCommas,
		   CAST(ISNULL(n.CPremiumCommas, 0) AS NUMERIC(18, 2)) AS CPremiumCommas,
		   
		   CAST(ISNULL(z.CSalesTutoring, 0) AS NUMERIC(18, 2)) AS CTutoringSale
		   -- 프로그램별 회원수
		  ,CAST(ISNULL(x.COnlyCounsel, 0) AS NUMERIC(18, 2)) AS COnlyCounsel
		  ,CAST(ISNULL(x.CPremium, 0) AS NUMERIC(18, 2)) AS CPremium
		  ,CAST(ISNULL(x.COnlyTutoring, 0) AS NUMERIC(18, 2)) AS COnlyTutoring
		  ,CAST(ISNULL(x.CCg4, 0) AS NUMERIC(18, 2))  AS CCg4,  CAST(ISNULL(x.CCg5,  0) AS NUMERIC(18, 2)) AS CCg5,  CAST(ISNULL(x.CCg6, 0) AS NUMERIC(18, 2))  AS CCg6
		  ,CAST(ISNULL(x.CCg7, 0) AS NUMERIC(18, 2))  AS CCg7,  CAST(ISNULL(x.CCg8,  0) AS NUMERIC(18, 2)) AS CCg8,  CAST(ISNULL(x.CCg9, 0) AS NUMERIC(18, 2))  AS CCg9
		  ,CAST(ISNULL(x.CCg10, 0) AS NUMERIC(18, 2)) AS CCg10, CAST(ISNULL(x.CCg11, 0) AS NUMERIC(18, 2)) AS CCg11, CAST(ISNULL(x.CCg12, 0) AS NUMERIC(18, 2)) AS CCg12
		  ,CAST(ISNULL(x.CCounsel, 0) AS NUMERIC(18, 2)) AS CCounsel
		  ,CAST(ISNULL(x.CTg4,  0) AS NUMERIC(18, 2)) AS CTg4,  CAST(ISNULL(x.CTg5,  0) AS NUMERIC(18, 2)) AS CTg5,  CAST(ISNULL(x.CTg6, 0) AS NUMERIC(18, 2))  AS CTg6
		  ,CAST(ISNULL(x.CTg7,  0) AS NUMERIC(18, 2)) AS CTg7,  CAST(ISNULL(x.CTg8,  0) AS NUMERIC(18, 2)) AS CTg8,  CAST(ISNULL(x.CTg9, 0) AS NUMERIC(18, 2))  AS CTg9
		  ,CAST(ISNULL(x.CTg10, 0) AS NUMERIC(18, 2)) AS CTg10, CAST(ISNULL(x.CTg11, 0) AS NUMERIC(18, 2)) AS CTg11, CAST(ISNULL(x.CTg12, 0) AS NUMERIC(18, 2)) AS CTg12
		  ,CAST(ISNULL(x.CTutoring, 0) AS NUMERIC(18, 2)) AS CTutoring
		  ,1 AS CSORT
	  INTO #STUDENT_COUNT
	  FROM #MONTH a
	  LEFT JOIN ( -- 상담관리 월초
					SELECT a.CMonth, a.CFacility, COUNT(a.CStudentCode) AS CCnt
					  FROM TFacilityStudentCount a(NOLOCK)
					 WHERE EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CFacility)
					   AND a.CMonth >= LEFT(CONVERT(VARCHAR, @dSTART_DATE, 23), 7)
					   AND a.Cmonth <= LEFT(CONVERT(VARCHAR, @dEND_DATE, 23), 7)
					   AND a.CType = 'Counsel' AND a.CFlag = 'Begin'
					 GROUP BY a.CMonth, a.CFacility
				) a0
		ON a.CMonth = a0.CMonth AND a.CFacility = a0.CFacility
	  LEFT JOIN ( -- 상담관리 실종료
					SELECT a.CMonth, a.CFacility, COUNT(a.CStudentCode) AS CCnt
					  FROM TFacilityStudentCount a(NOLOCK)
					 WHERE EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CFacility)
					   AND a.CMonth >= LEFT(CONVERT(VARCHAR, @dSTART_DATE, 23), 7)
					   AND a.Cmonth <= LEFT(CONVERT(VARCHAR, @dEND_DATE, 23), 7)
					   AND a.CType = 'Counsel' AND a.CFlag = 'RealEnd'
					 GROUP BY a.CMonth, a.CFacility
				) a00
		ON a.CMonth = a00.CMonth AND a.CFacility = a00.CFacility
	  LEFT JOIN ( -- 상담관리 신규
					SELECT CMonth, CScDepartCode, COUNT(CScCode) AS CCnt
					  FROM #TEMP01
					 GROUP BY CMonth, CScDepartCode
				) b
		ON a.CMonth = b.CMonth AND a.CFacility = b.CScDepartCode
	  LEFT JOIN ( -- 상담관리 복회
					SELECT CMonth, CScDepartCode, COUNT(CScCode) AS CCnt
					  FROM #TEMP02
					 GROUP BY CMonth, CScDepartCode
				) c
		ON a.CMonth = c.CMonth AND a.CFacility = c.CScDepartCode
	  LEFT JOIN ( -- 휴원
					SELECT CMonth, CDepartCode, COUNT(CStudentCode) AS CCnt
					  FROM #TEMP04
					 GROUP BY CMonth, CDepartCode
				) e
		ON a.CMonth = e.CMonth AND a.CFacility = e.CDepartCode
	  LEFT JOIN ( -- 휴원해제
					SELECT CMonth, CDepartCode, COUNT(CStudentCode) AS CCnt
					  FROM #TEMP05
					 GROUP BY CMonth, CDepartCode
				) f
		ON a.CMonth = f.CMonth AND a.CFacility = f.CDepartCode
	  LEFT JOIN ( -- 상담관리 월말
					SELECT a.CMonth, a.CFacility, COUNT(a.CStudentCode) AS CCnt
					  FROM TFacilityStudentCount a(NOLOCK)
					 WHERE EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CFacility)
					   AND a.CMonth >= LEFT(CONVERT(VARCHAR, @dSTART_DATE, 23), 7)
					   AND a.Cmonth <= LEFT(CONVERT(VARCHAR, @dEND_DATE, 23), 7)
					   AND a.CType = 'Counsel' AND a.CFlag = 'End'
					 GROUP BY a.CMonth, a.CFacility
				) g
		ON a.CMonth = g.CMonth AND a.CFacility = g.CFacility
	  LEFT JOIN ( -- 개별지도 월초
					SELECT a.CMonth, a.CFacility, COUNT(a.CStudentCode) AS CCnt
					  FROM TFacilityStudentCount a(NOLOCK)
					 WHERE EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CFacility)
					   AND a.CMonth >= LEFT(CONVERT(VARCHAR, @dSTART_DATE, 23), 7)
					   AND a.Cmonth <= LEFT(CONVERT(VARCHAR, @dEND_DATE, 23), 7)
					   AND a.CType = 'Tutoring' AND a.CFlag = 'Begin'
					 GROUP BY a.CMonth, a.CFacility
				) j
		ON a.CMonth = j.CMonth AND a.CFacility = j.CFacility
	  LEFT JOIN ( -- 개별지도 신규
					SELECT CMonth, CStdDepartCode, COUNT(CStdCode) AS CCnt
					  FROM #TEMP12 
					 GROUP BY CMonth, CStdDepartCode
				) h
		ON a.CMonth = h.CMonth AND a.CFacility = h.CStdDepartCode
	  LEFT JOIN ( -- 개별지도 복회
					SELECT CMonth, CStdDepartCode, COUNT(CStdCode) AS CCnt
					  FROM #TEMP13 
					 GROUP BY CMonth, CStdDepartCode
				) i
		ON a.CMonth = i.CMonth AND a.CFacility = i.CStdDepartCode
	  LEFT JOIN ( -- 개별지도 월말
					SELECT a.CMonth, a.CFacility, COUNT(a.CStudentCode) AS CCnt
					  FROM TFacilityStudentCount a(NOLOCK)
					 WHERE EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CFacility)
					   AND a.CMonth >= LEFT(CONVERT(VARCHAR, @dSTART_DATE, 23), 7)
					   AND a.Cmonth <= LEFT(CONVERT(VARCHAR, @dEND_DATE, 23), 7)
					   AND a.CType = 'Tutoring' AND a.CFlag = 'End'
					 GROUP BY a.CMonth, a.CFacility
				) k
		ON a.CMonth = k.CMonth AND a.CFacility = k.CFacility
	  LEFT JOIN ( -- 개별지도 미등록
					SELECT a.CMonth, a.CFacility, COUNT(a.CStudentCode) AS CCnt
					  FROM TFacilityStudentCount a(NOLOCK)      -- 월초학생리스트
					 INNER JOIN TFacilityStudentCount b(NOLOCK) -- 월말학생리스트
						ON a.CMonth    = b.CMonth AND a.CFacility = b.CFacility AND a.CStudentCode = b.CStudentCode AND a.CType = b.CType AND b.CFlag = 'End'
					 WHERE EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CFacility)
					   AND a.CMonth >= LEFT(CONVERT(VARCHAR, @dSTART_DATE, 23), 7)
					   AND a.Cmonth <= LEFT(CONVERT(VARCHAR, @dEND_DATE, 23), 7)
					   AND a.CType = 'Tutoring' AND a.CFlag = 'Begin'    -- 개별지도 월초학생
					   AND (SELECT COUNT(1) FROM TStudentTutoring(NOLOCK) WHERE CStdDepartCode = a.CFacility AND CStdCode = a.CStudentCode AND CStartDate BETWEEN a.CStartDate AND a.CEndDate AND CRegistType <> 'Refund') = 0
					 GROUP BY a.CMonth, a.CFacility
				) l
		ON a.CMonth = l.CMonth AND a.CFacility = l.CFacility
	  LEFT JOIN ( -- 개별지도 콤마수
					SELECT CMonth, CStdDepartCode, CCnt
					  FROM #TEMP15
				) m
		ON a.CMonth = m.CMonth AND a.CFacility = m.CStdDepartCode
	  LEFT JOIN ( -- 개별지도 콤마수(Only개별지도, Premium개별지도)
					SELECT CMonth, CStdDepartCode, COnlyCommas, CPremiumCommas
					  FROM #TEMP150
				) n
		ON a.CMonth = n.CMonth AND a.CFacility = n.CStdDepartCode
	  LEFT JOIN TTradeRoyaltyMonth z
		ON a.CMonth = LEFT(CONVERT(VARCHAR, z.CRoyaltyMonth, 23), 7) AND a.CFacility = z.CBranchCode AND z.CRoyaltyStatus = 'Confirm'
	  LEFT JOIN ( 
					SELECT b.CMonth, b.CFacility, -- b.CStudentCode, a.CGrade
						   SUM(b.CCounsel) AS CCounsel,
						   SUM(b.CTutoring) AS CTutoring,
						   SUM(b.COnlyTutoring) AS COnlyTutoring,
						   SUM(b.COnlyCounsel) AS COnlyCounsel,
						   SUM(b.CPremium) AS CPremium,
						   -- 상담관리
						   SUM(CASE WHEN b.CCounsel = 1 AND CONVERT(INT, SUBSTRING(b.CCounselGrade, 2, 2)) <=  4 THEN 1 ELSE NULL END) AS CCg4,
						   SUM(CASE WHEN b.CCounsel = 1 AND b.CCounselGrade =  'g5'  THEN 1 ELSE NULL END) AS CCg5,
						   SUM(CASE WHEN b.CCounsel = 1 AND b.CCounselGrade =  'g6'  THEN 1 ELSE NULL END) AS CCg6,
						   SUM(CASE WHEN b.CCounsel = 1 AND b.CCounselGrade =  'g7'  THEN 1 ELSE NULL END) AS CCg7,
						   SUM(CASE WHEN b.CCounsel = 1 AND b.CCounselGrade =  'g8'  THEN 1 ELSE NULL END) AS CCg8,
						   SUM(CASE WHEN b.CCounsel = 1 AND b.CCounselGrade IN ('g9', 'g13', 'g14')  THEN 1 ELSE NULL END) AS CCg9,
						   SUM(CASE WHEN b.CCounsel = 1 AND b.CCounselGrade =  'g10' THEN 1 ELSE NULL END) AS CCg10,
						   SUM(CASE WHEN b.CCounsel = 1 AND b.CCounselGrade =  'g11' THEN 1 ELSE NULL END) AS CCg11,
						   SUM(CASE WHEN b.CCounsel = 1 AND b.CCounselGrade IN ('g12', 'g15', 'g16') THEN 1 ELSE NULL END) AS CCg12,
						   -- 개별지도
						   SUM(CASE WHEN b.CTutoring = 1 AND CONVERT(INT, SUBSTRING(b.CTutoringGrade, 2, 2)) <=  4 THEN 1 ELSE NULL END) AS CTg4,
						   SUM(CASE WHEN b.CTutoring = 1 AND b.CTutoringGrade =  'g5'  THEN 1 ELSE NULL END) AS CTg5,
						   SUM(CASE WHEN b.CTutoring = 1 AND b.CTutoringGrade =  'g6'  THEN 1 ELSE NULL END) AS CTg6,
						   SUM(CASE WHEN b.CTutoring = 1 AND b.CTutoringGrade =  'g7'  THEN 1 ELSE NULL END) AS CTg7,
						   SUM(CASE WHEN b.CTutoring = 1 AND b.CTutoringGrade =  'g8'  THEN 1 ELSE NULL END) AS CTg8,
						   SUM(CASE WHEN b.CTutoring = 1 AND b.CTutoringGrade IN ('g9', 'g13', 'g14')  THEN 1 ELSE NULL END) AS CTg9,
						   SUM(CASE WHEN b.CTutoring = 1 AND b.CTutoringGrade =  'g10' THEN 1 ELSE NULL END) AS CTg10,
						   SUM(CASE WHEN b.CTutoring = 1 AND b.CTutoringGrade =  'g11' THEN 1 ELSE NULL END) AS CTg11,
						   SUM(CASE WHEN b.CTutoring = 1 AND b.CTutoringGrade IN ('g12', 'g15', 'g16') THEN 1 ELSE NULL END) AS CTg12
					  FROM	 ( -- 상담관리 학생리스트(월말기준)
									SELECT isnull(a.CMonth, b.CMonth) as CMonth,
										   isnull(a.CFacility, b.CFacility) as CFacility,
										   isnull(a.CStudentCode, b.CStudentCode) as CStudentCode,
										   CASE WHEN a.CMonth IS NOT NULL THEN 1 ELSE 0 END AS CCounsel,
										   CASE WHEN b.CMonth IS NOT NULL THEN 1 ELSE 0 END AS CTutoring,
										   CASE WHEN a.CMonth IS NOT NULL AND b.CMonth IS NULL     THEN 1 ELSE 0 END AS COnlyCounsel,
										   CASE WHEN b.CMonth IS NOT NULL AND a.CMonth IS NULL     THEN 1 ELSE 0 END AS COnlyTutoring,
										   CASE WHEN a.CMonth IS NOT NULL AND b.CMonth IS NOT NULL THEN 1 ELSE 0 END AS CPremium,
										   CASE WHEN a.CMonth IS NOT NULL THEN a.CGrade ELSE NULL END AS CCounselGrade,
										   CASE WHEN b.CMonth IS NOT NULL THEN b.CGrade ELSE NULL END AS CTutoringGrade
									  FROM (
											SELECT a.CMonth, a.CFacility, a.CStudentCode, a.cGrade
											  FROM TFacilityStudentCount a(NOLOCK)
											 WHERE EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CFacility)
											   AND a.CMonth >= LEFT(CONVERT(VARCHAR, @dSTART_DATE, 23), 7)
											   AND a.Cmonth <= LEFT(CONVERT(VARCHAR, @dEND_DATE, 23), 7)
											   AND a.CType = 'Counsel' AND a.CFlag = 'End'
										   ) a-- 상담관리 월말
									  FULL OUTER JOIN 
											(
											SELECT a.CMonth, a.CFacility, a.CStudentCode, a.cGrade
											  FROM TFacilityStudentCount a(NOLOCK)
											 WHERE EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CFacility)
											   AND a.CMonth >= LEFT(CONVERT(VARCHAR, @dSTART_DATE, 23), 7)
											   AND a.Cmonth <= LEFT(CONVERT(VARCHAR, @dEND_DATE, 23), 7)
											   AND a.CType = 'Tutoring' AND a.CFlag = 'End'
											) b-- 개별지도 월말
										ON a.CMonth = b.CMonth AND a.CFacility = b.CFacility AND a.CStudentCode = b.CStudentCode
								) b
					 GROUP BY b.CMonth, b.CFacility
				) x
		ON a.CMonth = x.CMonth AND a.CFacility = x.CFacility
	-- ORDER BY a.CFacility, a.CMonth

	-- 지점합계 생성(조회월의 시작과 종료가 같으면 지점 평균 및 소계는 구하지 않는다)
	IF (@pSTART_DATE <> @pEND_DATE AND (SELECT COUNT(*) FROM @FACILITY) > 1)
		BEGIN
			-- 지점평균 생성
			INSERT INTO #STUDENT_COUNT
			SELECT '', CFacility,
				   AVG(CCounselBeginMonth*1.0) AS CCounselBeginMonth,
				   AVG(CCounselNew*1.0) AS CCounselNew,
				   AVG(CCounselRtn*1.0) AS CCounselRtn,
				   AVG(CCounselEnd*1.0) AS CCounselEnd,
				   AVG(CCounselEndMonth*1.0) AS CCounselEndMonth,
				   -- 상담관리 이탈율
				   --CASE WHEN AVG(CCounselBeginMonth*1.0) > 0 
					--	THEN CONVERT(nvarchar,ROUND((AVG(CCounselBeginMonth*1.0) - AVG(CCounselEndMonth*1.0) + AVG(CCounselNew*1.0) + AVG(CCounselRtn*1.0)) / CONVERT(FLOAT,AVG(CCounselBeginMonth*1.0)), 4) * 100 ) + '%' 
				   --ELSE '0%' END AS CCounselLeaveRate, 
				   -- 2017.05.27 추가(실종료)
				   -- 2017-07-05 이탈율을 현재 컬럼 [종료]/[월초]x100에서 [실종료]/[월초]x100 으로 변경 
				   CASE WHEN AVG(CCounselBeginMonth*1.0) > 0 
						THEN CONVERT(nvarchar,ROUND((AVG(CCounselRealEnd*1.0)) / CONVERT(FLOAT,AVG(CCounselBeginMonth*1.0)), 4) * 100 ) + '%' 
				   ELSE '0%' END AS CCounselLeaveRate, 
				   AVG(CCounselRealEnd*1.0) AS CCounselRealEnd,
				   AVG(CCounselReal*1.0) AS CCounselReal,
				   AVG(CLeaveOn*1.0) AS CLeaveOn,
				   AVG(CLeaveEnd*1.0) AS CLeaveEnd,
				   AVG(CTutoringBeginMonth*1.0) AS CTutoringBeginMonth,
				   AVG(CTutoringNew*1.0) AS CTutoringNew,
				   AVG(CTutoringRtn*1.0) AS CTutoringRtn,
				   AVG(CTutoringEnd*1.0) AS CTutoringEnd,
				   AVG(CTutoringNotReg*1.0) AS CTutoringNotReg,
				   AVG(CTutoringEndMonth*1.0) AS CTutoringEndMonth,
				   -- 개별지도 이탈율
				   CASE WHEN AVG(CTutoringBeginMonth*1.0) > 0 
						THEN CONVERT(nvarchar,ROUND((AVG(CTutoringBeginMonth*1.0) - AVG(CTutoringEndMonth*1.0) + AVG(CTutoringNew*1.0) + AVG(CTutoringRtn*1.0)) / CONVERT(FLOAT,AVG(CTutoringBeginMonth*1.0)), 4) * 100 ) +'%'  
				   ELSE '0%' END AS CTutoringLeaveRate,
				   AVG(CTotalSale*1.0) AS CTotalSale,
				   AVG(CCounselSale*1.0) AS CCounselSale,
				   AVG(CCommas*1.0) AS CCommas,
				   -- 2017.05.27 추가
				   AVG(COnlyCommas*1.0) AS COnlyCommas,
				   AVG(CPremiumCommas*1.0) AS CPremiumCommas,

				   AVG(CTutoringSale*1.0) AS CTutoringSale,
				   AVG(COnlyCounsel*1.0) AS COnlyCounsel,
				   AVG(CPremium*1.0) AS CPremium,
				   AVG(COnlyTutoring*1.0) AS COnlyTutoring,
				   AVG(CCg4*1.0) AS CCg4, AVG(CCg5*1.0) AS CCg5, AVG(CCg6*1.0) AS CCg6,
				   AVG(CCg7*1.0) AS CCg7, AVG(CCg8*1.0) AS CCg8, AVG(CCg9*1.0) AS CCg6,
				   AVG(CCg10*1.0) AS CCg10, AVG(CCg11*1.0) AS CCg11, AVG(CCg12*1.0) AS CCg6,
				   AVG(CCounsel*1.0) AS CCounsel,
				   AVG(CTg4*1.0) AS CTg4, AVG(CTg5*1.0) AS CTg5, AVG(CTg6*1.0) AS CCg6,
				   AVG(CTg7*1.0) AS CTg7, AVG(CTg8*1.0) AS CTg8, AVG(CTg9*1.0) AS CCg6,
				   AVG(CTg10*1.0) AS CTg10, AVG(CTg11*1.0) AS CTg11, AVG(CTg12*1.0) AS CCg6,
				   AVG(CTutoring*1.0) AS CTutoring,
				   2 AS CSORT
			  FROM #STUDENT_COUNT
			 WHERE CSORT = 1
			 GROUP BY CFacility

			INSERT INTO #STUDENT_COUNT
			SELECT '', CFacility,
				   SUM(CCounselBeginMonth) AS CCounselBeginMonth,
				   SUM(CCounselNew) AS CCounselNew,
				   SUM(CCounselRtn) AS CCounselRtn,
				   SUM(CCounselEnd) AS CCounselEnd,
				   SUM(CCounselEndMonth) AS CCounselEndMonth,
				   -- 상담관리 이탈율
				  -- CASE WHEN SUM(CCounselBeginMonth) > 0 
						--THEN CONVERT(nvarchar,ROUND((SUM(CCounselBeginMonth) - SUM(CCounselEndMonth) + SUM(CCounselNew) + SUM(CCounselRtn)) / CONVERT(FLOAT,SUM(CCounselBeginMonth)), 4) * 100) + '%'
				  -- ELSE '0%' END AS CCounselLeaveRate,
				  -- 2017-07-05 이탈율을 현재 컬럼 [종료]/[월초]x100에서 [실종료]/[월초]x100 으로 변경 
				   CASE WHEN SUM(CCounselBeginMonth) > 0 
						THEN CONVERT(nvarchar,ROUND((SUM(CCounselRealEnd)) / CONVERT(FLOAT,SUM(CCounselBeginMonth)), 4) * 100) + '%'
				   ELSE '0%' END AS CCounselLeaveRate,
				   -- 2017.05.27 추가(실종료)
				   SUM(CCounselRealEnd) AS CCounselRealEnd,
				   SUM(CCounselReal) AS CCounselReal,

				   SUM(CLeaveOn) AS CLeaveOn,
				   SUM(CLeaveEnd) AS CLeaveEnd,
				   SUM(CTutoringBeginMonth) AS CTutoringBeginMonth,
				   SUM(CTutoringNew) AS CTutoringNew,
				   SUM(CTutoringRtn) AS CTutoringRtn,
				   SUM(CTutoringEnd) AS CTutoringEnd,
				   SUM(CTutoringNotReg) AS CTutoringNotReg,
				   SUM(CTutoringEndMonth) AS CTutoringEndMonth,
				   -- 개별지도 이탈율
				   CASE WHEN SUM(CTutoringBeginMonth) > 0 
						THEN CONVERT(nvarchar,ROUND((SUM(CTutoringBeginMonth) - SUM(CTutoringEndMonth) + SUM(CTutoringNew) + SUM(CTutoringRtn)) / CONVERT(FLOAT,SUM(CTutoringBeginMonth)), 4) * 100) +'%' 
				   ELSE '0%' END AS CTutoringLeaveRate,
				   SUM(CTotalSale) AS CTotalSale,
				   SUM(CCounselSale) AS CCounselSale,
				   SUM(CCommas) AS CCommas,
				   -- 2017.05.27 추가
				   SUM(COnlyCommas) AS COnlyCommas,
				   SUM(CPremiumCommas) AS CPremiumCommas,

				   SUM(CTutoringSale) AS CTutoringSale,
				   SUM(COnlyCounsel) AS COnlyCounsel,
				   SUM(CPremium) AS CPremium,
				   SUM(COnlyTutoring) AS COnlyTutoring,
				   SUM(CCg4) AS CCg4, SUM(CCg5) AS CCg5, SUM(CCg6) AS CCg6,
				   SUM(CCg7) AS CCg7, SUM(CCg8) AS CCg8, SUM(CCg9) AS CCg6,
				   SUM(CCg10) AS CCg10, SUM(CCg11) AS CCg11, SUM(CCg12) AS CCg6,
				   SUM(CCounsel) AS CCounsel,
				   SUM(CTg4) AS CTg4, SUM(CTg5) AS CTg5, SUM(CTg6) AS CCg6,
				   SUM(CTg7) AS CTg7, SUM(CTg8) AS CTg8, SUM(CTg9) AS CCg6,
				   SUM(CTg10) AS CTg10, SUM(CTg11) AS CTg11, SUM(CTg12) AS CCg6,
				   SUM(CTutoring) AS CTutoring,
				   3 AS CSORT
			  FROM #STUDENT_COUNT
			 WHERE CSORT = 1
			 GROUP BY CFacility
		END

	-- 전체평균 생성
	INSERT INTO #STUDENT_COUNT
	SELECT '', '0000000',
			AVG(CCounselBeginMonth*1.0) AS CCounselBeginMonth,
			AVG(CCounselNew*1.0) AS CCounselNew,
			AVG(CCounselRtn*1.0) AS CCounselRtn,
			AVG(CCounselEnd*1.0) AS CCounselEnd,
			AVG(CCounselEndMonth*1.0) AS CCounselEndMonth,
			-- 상담관리 이탈율
			--CASE WHEN AVG(CCounselBeginMonth*1.0) > 0 
			--	THEN CONVERT(nvarchar,ROUND((AVG(CCounselBeginMonth*1.0) - AVG(CCounselEndMonth*1.0) + AVG(CCounselNew*1.0) + AVG(CCounselRtn*1.0)) / CONVERT(FLOAT,AVG(CCounselBeginMonth*1.0)), 4) * 100) + '%' 
			--ELSE '0%' END AS CCounselLeaveRate, 
			CASE WHEN AVG(CCounselBeginMonth*1.0) > 0 
				THEN CONVERT(nvarchar,ROUND((AVG(CCounselRealEnd*1.0)) / CONVERT(FLOAT,AVG(CCounselBeginMonth*1.0)), 4) * 100) + '%' 
			ELSE '0%' END AS CCounselLeaveRate, 
			-- 2017-07-05 이탈율을 현재 컬럼 [종료]/[월초]x100에서 [실종료]/[월초]x100 으로 변경
			-- 2017.05.27 추가
			AVG(CCounselRealEnd*1.0) AS CCounselRealEnd,
			AVG(CCounselReal*1.0) AS CCounselReal,

			AVG(CLeaveOn*1.0) AS CLeaveOn,
			AVG(CLeaveEnd*1.0) AS CLeaveEnd,
			AVG(CTutoringBeginMonth*1.0) AS CTutoringBeginMonth,
			AVG(CTutoringNew*1.0) AS CTutoringNew,
			AVG(CTutoringRtn*1.0) AS CTutoringRtn,
			AVG(CTutoringEnd*1.0) AS CTutoringEnd,
			AVG(CTutoringNotReg*1.0) AS CTutoringNotReg,
			AVG(CTutoringEndMonth*1.0) AS CTutoringEndMonth,
			-- 개별지도 이탈율
			CASE WHEN AVG(CTutoringBeginMonth*1.0) > 0 
				THEN CONVERT(nvarchar,ROUND((AVG(CTutoringBeginMonth*1.0) - AVG(CTutoringEndMonth*1.0) + AVG(CTutoringNew*1.0) + AVG(CTutoringRtn*1.0)) / CONVERT(FLOAT,AVG(CTutoringBeginMonth*1.0)), 4) * 100) + '%'  
			ELSE '0%' END AS CTutoringLeaveRate,
			AVG(CTotalSale*1.0) AS CTotalSale,
			AVG(CCounselSale*1.0) AS CCounselSale,
			AVG(CCommas*1.0) AS CCommas,
			-- 2017.05.27 추가
			AVG(COnlyCommas*1.0) AS COnlyCommas,
			AVG(CPremiumCommas*1.0) AS CPremiumCommas,

			AVG(CTutoringSale*1.0) AS CTutoringSale,
			AVG(COnlyCounsel*1.0) AS COnlyCounsel,
			AVG(CPremium*1.0) AS CPremium,
			AVG(COnlyTutoring*1.0) AS COnlyTutoring,
			AVG(CCg4*1.0) AS CCg4, AVG(CCg5*1.0) AS CCg5, AVG(CCg6*1.0) AS CCg6,
			AVG(CCg7*1.0) AS CCg7, AVG(CCg8*1.0) AS CCg8, AVG(CCg9*1.0) AS CCg6,
			AVG(CCg10*1.0) AS CCg10, AVG(CCg11*1.0) AS CCg11, AVG(CCg12*1.0) AS CCg6,
			AVG(CCounsel*1.0) AS CCounsel,
			AVG(CTg4*1.0) AS CTg4, AVG(CTg5*1.0) AS CTg5, AVG(CTg6*1.0) AS CCg6,
			AVG(CTg7*1.0) AS CTg7, AVG(CTg8*1.0) AS CTg8, AVG(CTg9*1.0) AS CCg6,
			AVG(CTg10*1.0) AS CTg10, AVG(CTg11*1.0) AS CTg11, AVG(CTg12*1.0) AS CCg6,
			AVG(CTutoring*1.0) AS CTutoring,
			2 AS CSORT
		FROM #STUDENT_COUNT
		WHERE CSORT = 1

	-- 전체합계 생성
	INSERT INTO #STUDENT_COUNT
	SELECT '', '0000000',
		   SUM(CCounselBeginMonth) AS CCounselBeginMonth,
		   SUM(CCounselNew) AS CCounselNew,
		   SUM(CCounselRtn) AS CCounselRtn,
		   SUM(CCounselEnd) AS CCounselEnd,
		   SUM(CCounselEndMonth) AS CCounselEndMonth,
		   -- 상담관리 이탈율
		  -- CASE WHEN SUM(CCounselBeginMonth) > 0 
				--THEN CONVERT(nvarchar,ROUND((SUM(CCounselBeginMonth) - SUM(CCounselEndMonth) + SUM(CCounselNew) + SUM(CCounselRtn)) / CONVERT(FLOAT,SUM(CCounselBeginMonth)), 4) * 100) + '%' 
		  -- ELSE '0%' END AS CCounselLeaveRate, 
		   -- 2017-07-05 이탈율을 현재 컬럼 [종료]/[월초]x100에서 [실종료]/[월초]x100 으로 변경
		   CASE WHEN SUM(CCounselBeginMonth) > 0 
				THEN CONVERT(nvarchar,ROUND((SUM(CCounselRealEnd)) / CONVERT(FLOAT,SUM(CCounselBeginMonth)), 4) * 100) + '%' 
		   ELSE '0%' END AS CCounselLeaveRate, 
		   -- 2017.05.27 추가
		   SUM(CCounselRealEnd) AS CCounselRealEnd,
		   SUM(CCounselReal) AS CCounselReal,
		   
		   SUM(CLeaveOn) AS CLeaveOn,
		   SUM(CLeaveEnd) AS CLeaveEnd,
		   SUM(CTutoringBeginMonth) AS CTutoringBeginMonth,
		   SUM(CTutoringNew) AS CTutoringNew,
		   SUM(CTutoringRtn) AS CTutoringRtn,
		   SUM(CTutoringEnd) AS CTutoringEnd,
		   SUM(CTutoringNotReg) AS CTutoringNotReg,
		   SUM(CTutoringEndMonth) AS CTutoringEndMonth,
		   -- 개별지도 이탈율
		   CASE WHEN SUM(CTutoringBeginMonth) > 0 
				THEN CONVERT(nvarchar,ROUND((SUM(CTutoringBeginMonth) - SUM(CTutoringEndMonth) + SUM(CTutoringNew) + SUM(CTutoringRtn)) / CONVERT(FLOAT,SUM(CTutoringBeginMonth)), 4) * 100) + '%'  
		   ELSE '0%' END AS CTutoringLeaveRate,
		   SUM(CTotalSale) AS CTotalSale,
		   SUM(CCounselSale) AS CCounselSale,
		   SUM(CCommas) AS CCommas,
		   -- 2017.05.27 추가
		   SUM(COnlyCommas) AS COnlyCommas,
		   SUM(CPremiumCommas) AS CPremiumCommas,

		   SUM(CTutoringSale) AS CTutoringSale,
		   SUM(COnlyCounsel) AS COnlyCounsel,
		   SUM(CPremium) AS CPremium,
		   SUM(COnlyTutoring) AS COnlyTutoring,
		   SUM(CCg4) AS CCg4, SUM(CCg5) AS CCg5, SUM(CCg6) AS CCg6,
		   SUM(CCg7) AS CCg7, SUM(CCg8) AS CCg8, SUM(CCg9) AS CCg6,
		   SUM(CCg10) AS CCg10, SUM(CCg11) AS CCg11, SUM(CCg12) AS CCg6,
		   SUM(CCounsel) AS CCounsel,
		   SUM(CTg4) AS CTg4, SUM(CTg5) AS CTg5, SUM(CTg6) AS CCg6,
		   SUM(CTg7) AS CTg7, SUM(CTg8) AS CTg8, SUM(CTg9) AS CCg6,
		   SUM(CTg10) AS CTg10, SUM(CTg11) AS CTg11, SUM(CTg12) AS CCg6,
		   SUM(CTutoring) AS CTutoring,
		   3 AS CSORT
	  FROM #STUDENT_COUNT
	 WHERE CSORT = 1
PRINT '지점데이터 평균합계 : ' + CONVERT(VARCHAR, GETDATE(),  21)

	-- 쿼리리턴
	SELECT CASE WHEN b.COpenName0 IS NOT NULL AND a.CSORT = 2 THEN '[' + b.COpenName0 + '] 평균'
				WHEN b.COpenName0 IS NOT NULL AND a.CSORT = 3 THEN '[' + b.COpenName0 + '] 소계'
				WHEN b.COpenName0 IS NULL AND a.CSORT = 2 THEN '[평균]'
				WHEN b.COpenName0 IS NULL AND a.CSORT = 3 THEN '[합계]'
		   ELSE b.COpenName0 END AS CFacilityName,
		   a.*
	  FROM #STUDENT_COUNT a
	  LEFT JOIN TFacility b(NOLOCK)
		ON a.CFacility = b.CDepartCode
	 ORDER BY CFacility, CSORT, CMonth, b.COpenName0

	 RETURN
END -- 지점현황 끝

S2_RTN: -- 미등록 학생리스트
--2016.02.25 학생리스트 보여줄때 지점과 함께 보여주면 좋을것 같아서 지점명 추가합니다. (njhina48)
BEGIN

	SELECT a.CMonth, a.CFacility, a.CStudentCode, c.CName AS CStudentName, c.CSchoolCode, d.CName AS CSchoolName, b.CGrade, e.COpenName0
	  FROM TFacilityStudentCount a(NOLOCK)      -- 월초학생리스트
	 INNER JOIN TFacilityStudentCount b(NOLOCK) -- 월말학생리스트
	    ON a.CMonth    = b.CMonth AND a.CFacility = b.CFacility AND a.CStudentCode = b.CStudentCode AND a.CType = b.CType AND b.CFlag = 'End'
	 INNER JOIN TStudent c(NOLOCK)
	    ON a.CFacility = c.CBranchCode AND a.CStudentCode = c.CCode
	 LEFT JOIN TSchool d(NOLOCK)
	    ON c.CSchoolCode = d.CCode
	 LEFT JOIN TFacility e(NOLOCK)
	    ON a.CFacility =e.CDepartCode
	 WHERE EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CFacility)
	   AND a.CMonth >= LEFT(CONVERT(VARCHAR, @dSTART_DATE, 23), 7)
	   AND a.CMonth <= LEFT(CONVERT(VARCHAR, @dEND_DATE, 23), 7)
	   AND a.CType  = 'Tutoring' AND a.CFlag = 'Begin'    -- 개별지도 월초학생
	   AND (SELECT COUNT(1) FROM TStudentTutoring(NOLOCK) WHERE CStdDepartCode = a.CFacility AND CStdCode = a.CStudentCode AND CStartDate BETWEEN a.CStartDate AND a.CEndDate AND CRegistType <> 'Refund') = 0
	 ORDER BY a.CFacility, c.CName, a.CMonth

	 RETURN
END

S3_RTN: -- 상담관리월말 학생리스트
BEGIN

	SELECT a.CMonth, a.CFacility, a.CStudentCode, c.CName AS CStudentName, c.CSchoolCode, d.CName AS CSchoolName, a.CGrade, e.COpenName0
	  FROM TFacilityStudentCount a(NOLOCK)      -- 월말학생리스트
	 INNER JOIN TStudent c(NOLOCK)
	    ON a.CFacility = c.CBranchCode AND a.CStudentCode = c.CCode
	 LEFT JOIN TSchool d(NOLOCK)
	    ON c.CSchoolCode = d.CCode
	 LEFT JOIN TFacility e(NOLOCK)
	    ON a.CFacility =e.CDepartCode
	 WHERE EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CFacility)
	   AND a.CMonth >= LEFT(CONVERT(VARCHAR, @dSTART_DATE, 23), 7)
	   AND a.CMonth <= LEFT(CONVERT(VARCHAR, @dEND_DATE, 23), 7)
	   AND a.CType  = 'Counsel' AND a.CFlag = 'End'    -- 상담관리월말
	 ORDER BY a.CFacility, c.CName, a.CMonth

	 RETURN
END

S4_RTN: -- 개별지도월말 학생리스트
BEGIN

	SELECT a.CMonth, a.CFacility, a.CStudentCode, c.CName AS CStudentName, c.CSchoolCode, d.CName AS CSchoolName, a.CGrade, e.COpenName0
	  FROM TFacilityStudentCount a(NOLOCK)      -- 월말학생리스트
	 INNER JOIN TStudent c(NOLOCK)
	    ON a.CFacility = c.CBranchCode AND a.CStudentCode = c.CCode
	 LEFT JOIN TSchool d(NOLOCK)
	    ON c.CSchoolCode = d.CCode
	 LEFT JOIN TFacility e(NOLOCK)
	    ON a.CFacility =e.CDepartCode
	 WHERE EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CFacility)
	   AND a.CMonth >= LEFT(CONVERT(VARCHAR, @dSTART_DATE, 23), 7)
	   AND a.CMonth <= LEFT(CONVERT(VARCHAR, @dEND_DATE, 23), 7)
	   AND a.CType  = 'Tutoring' AND a.CFlag = 'End'    -- 개별지도 월초학생
	 ORDER BY a.CFacility, c.CName, a.CMonth

	 RETURN
END

GO

--/*******************************************************************************************************
--/* 단위업무 : 근무중인 원장,매니저들의 원커리큘럼 취득학점과 2018년도 누적 취득학점의 합계를 분야별로 반환.
--/* 상담관리, 개별지도, 학습법, 입시, 교양동호회 각 온라인 & 오프라인
--/* 작 성 일 : 2019.04.10 이재근
--/*******************************************************************************************************

CREATE PROCEDURE [dbo].[SP_OneCur_Member_Credit]
@endDate		NVARCHAR(10) = ''

AS

SELECT
MLIST.CStaffId as CStaffId,
MLIST.CLoginId as CLoginId,
MLIST.이름 as '이름',
MLIST.직급 as '직급',
-- b.CDepartCode as '지점코드',
MLIST.지점명 as '지점명',
-- (case when c.CFacilityType = 'DIRECT' then '직영'
--     when c.CFacilityType = 'BRANCH' then 'FC' end) AS '지점구분',
--(case when a.COutDate = '2200-12-31' then '근무중'
--	else '퇴사' end) as '근무상태',
ISNULL((SELECT 
	SUM(aa.class_duration) AS class_minute
from dbo.otbl_Lecture_class aa (NOLOCK)
	left join otbl_Lecture bb (NOLOCK) on bb.lecture_idx = aa.lecture_id
where 
	aa.del_yn = 'N'
	AND aa.profile_id = MLIST.profile_idx
	and CONVERT(VARCHAR(10),aa.class_startdatetime,23) <= @endDate
	AND bb.del_yn = 'N'
	AND bb.lecture_closed_yn = 'Y'),0) AS '총강의시간_분', 	
ISNULL((SELECT 
	SUM(aa.gain_credit)
	from otbl_Lecture_attend_student aa (NOLOCK)
	left join otbl_Lecture bb (NOLOCK) on bb.lecture_idx = aa.lecture_id
	where 
	aa.del_yn = 'N'
	AND aa.pass_yn = 'Y'
	AND aa.review is not NULL AND cast(aa.review AS VARCHAR) <> ''
	AND aa.staff_id = MLIST.CStaffId
	AND bb.lecture_category_id = 1
	and (select MAX(class_startdatetime) from otbl_Lecture_class (NOLOCK) where lecture_id = aa.lecture_id AND del_yn = 'N') <= @endDate
	group by bb.lecture_category_id),0) + ISNULL(e.manage_off, 0) AS '상담관리_오프라인', 
ISNULL(e.manage_on, 0) AS '상담관리_온라인', 
ISNULL((SELECT 
	SUM(aa.gain_credit)
	from otbl_Lecture_attend_student aa (NOLOCK)
	left join otbl_Lecture bb (NOLOCK) on bb.lecture_idx = aa.lecture_id
	where 
	aa.del_yn = 'N'
	AND aa.pass_yn = 'Y'
	AND aa.review is not NULL AND cast(aa.review AS VARCHAR) <> ''
	AND aa.staff_id = MLIST.CStaffId
	AND bb.lecture_category_id = 2
	and (select MAX(class_startdatetime) from otbl_Lecture_class (NOLOCK) where lecture_id = aa.lecture_id AND del_yn = 'N') <= @endDate
	group by bb.lecture_category_id),0) + ISNULL(e.teaching_off, 0) AS '개별지도_오프라인', 
ISNULL(e.teaching_on, 0) AS '개별지도_온라인', 
ISNULL((SELECT 
	SUM(aa.gain_credit)
	from otbl_Lecture_attend_student aa (NOLOCK)
	left join otbl_Lecture bb (NOLOCK) on bb.lecture_idx = aa.lecture_id
	where 
	aa.del_yn = 'N'
	AND aa.pass_yn = 'Y'
	AND aa.review is not NULL AND cast(aa.review AS VARCHAR) <> ''
	AND aa.staff_id = MLIST.CStaffId
	AND bb.lecture_category_id = 3
	and (select MAX(class_startdatetime) from otbl_Lecture_class (NOLOCK) where lecture_id = aa.lecture_id AND del_yn = 'N') <= @endDate
	group by bb.lecture_category_id),0) + ISNULL(e.learning_off,0) AS '학습법_오프라인', 
ISNULL(e.learning_on, 0) AS '학습법_온라인',

ISNULL((SELECT 
	SUM(aa.gain_credit)
	from otbl_Lecture_attend_student aa (NOLOCK)
	left join otbl_Lecture bb (NOLOCK) on bb.lecture_idx = aa.lecture_id
	where 
	aa.del_yn = 'N'
	AND aa.pass_yn = 'Y'
	AND aa.review is not NULL AND cast(aa.review AS VARCHAR) <> ''
	AND aa.staff_id = MLIST.CStaffId
	AND bb.lecture_category_id = 4
	and (select MAX(class_startdatetime) from otbl_Lecture_class (NOLOCK) where lecture_id = aa.lecture_id AND del_yn = 'N') <= @endDate
	group by bb.lecture_category_id),0) + ISNULL(e.entrance_off, 0) AS '입시_오프라인', 
ISNULL(e.entrance_on, 0) AS '입시_온라인',  

ISNULL((SELECT 
	SUM(aa.gain_credit)
	from otbl_Lecture_attend_student aa (NOLOCK)
	left join otbl_Lecture bb (NOLOCK) on bb.lecture_idx = aa.lecture_id
	where 
	aa.del_yn = 'N'
	AND aa.pass_yn = 'Y'
	AND aa.review is not NULL AND cast(aa.review AS VARCHAR) <> ''
	AND aa.staff_id = MLIST.CStaffId
	AND bb.lecture_category_id = 4
	and (select MAX(class_startdatetime) from otbl_Lecture_class (NOLOCK) where lecture_id = aa.lecture_id AND del_yn = 'N') <= @endDate
	group by bb.lecture_category_id),0) + ISNULL(e.club_off, 0) AS '교양동호회_오프라인', 
ISNULL(e.club_on, 0) AS '교양동호회_온라인',
e.memo
-- -------------------------------
from
 (SELECT 
	a.CStaffId
	,a.CLoginId
	,a.CName0 AS 이름
	,b.CDepartCode AS 지점코드
	,b.CName0 AS 지점명
	,c.CLevelCode
	,c.CName0 AS 직급
	,(CASE 
				WHEN a.COutDate = '2200-12-31' THEN '근무중'
			ELSE
				'퇴사'
			END
		) AS 근무상태
	,d.profile_idx
FROM TStaff a(NOLOCK)
	left join TDepartment b(NOLOCK) on b.CDepartCode = (SELECT TOP 1 CDepartCode FROM TStaffDepartHistory WHERE CStaffId = a.CStaffId AND CMain = 1 ORDER BY CHistoryStartDate DESC)
	left join TStaffLevel c(NOLOCK) on c.CLevelCode = (SELECT TOP 1 CLevelCode FROM TStaffLevelHistory WHERE CStaffId = a.CStaffId and CMain = 1 ORDER BY CStartDate DESC)
	LEFT JOIN otbl_Member_profile d(NOLOCK) ON d.staff_id = a.CStaffId
WHERE 1 =1
	and a.COutDate        >= DATEADD("yy",-1, GETDATE()) -- 최근 1년 이내 퇴직자를 포함하여
--  and .CHistoryEndDate >= '2019-01-01' -- 지점근무 종료이력이 1/1일 이후
	and b.CDepartCode like 'EPX%'
	and b.CDepartCode not in ('EPXHEAD')
	and LEFT(c.CLevelCode, 2) in ('L1','L2','L3','L4','L5','L6')
 ) MLIST
left join otbl_Accrued_credit e (NOLOCK) on e.staff_id = MLIST.CStaffId


/*------

SELECT
MLIST.CStaffId as CStaffId,
MLIST.CLoginId as CLoginId,
MLIST.이름 as '이름',
MLIST.직급 as '직급',
-- b.CDepartCode as '지점코드',
MLIST.지점명 as '지점명',
-- (case when c.CFacilityType = 'DIRECT' then '직영'
--     when c.CFacilityType = 'BRANCH' then 'FC' end) AS '지점구분',
--(case when a.COutDate = '2200-12-31' then '근무중'
--	else '퇴사' end) as '근무상태',
ISNULL((SELECT 
	SUM(aa.gain_credit)
	from otbl_Lecture_attend_student aa (NOLOCK)
	left join otbl_Lecture bb (NOLOCK) on bb.lecture_idx = aa.lecture_id
	where 
	aa.del_yn = 'N'
	AND aa.pass_yn = 'Y'
	AND aa.review is not NULL AND cast(aa.review AS VARCHAR) <> ''
	AND aa.staff_id = MLIST.CStaffId
	AND bb.lecture_category_id = 1
	and (select MAX(class_startdatetime) from otbl_Lecture_class (NOLOCK) where lecture_id = aa.lecture_id AND del_yn = 'N') <= @endDate
	group by bb.lecture_category_id),0) + ISNULL(e.manage_off, 0) AS '상담관리_오프라인', 
ISNULL(e.manage_on, 0) AS '상담관리_온라인', 
ISNULL((SELECT 
	SUM(aa.gain_credit)
	from otbl_Lecture_attend_student aa (NOLOCK)
	left join otbl_Lecture bb (NOLOCK) on bb.lecture_idx = aa.lecture_id
	where 
	aa.del_yn = 'N'
	AND aa.pass_yn = 'Y'
	AND aa.review is not NULL AND cast(aa.review AS VARCHAR) <> ''
	AND aa.staff_id = MLIST.CStaffId
	AND bb.lecture_category_id = 2
	and (select MAX(class_startdatetime) from otbl_Lecture_class (NOLOCK) where lecture_id = aa.lecture_id AND del_yn = 'N') <= @endDate
	group by bb.lecture_category_id),0) + ISNULL(e.teaching_off, 0) AS '개별지도_오프라인', 
ISNULL(e.teaching_on, 0) AS '개별지도_온라인', 
ISNULL((SELECT 
	SUM(aa.gain_credit)
	from otbl_Lecture_attend_student aa (NOLOCK)
	left join otbl_Lecture bb (NOLOCK) on bb.lecture_idx = aa.lecture_id
	where 
	aa.del_yn = 'N'
	AND aa.pass_yn = 'Y'
	AND aa.review is not NULL AND cast(aa.review AS VARCHAR) <> ''
	AND aa.staff_id = MLIST.CStaffId
	AND bb.lecture_category_id = 3
	and (select MAX(class_startdatetime) from otbl_Lecture_class (NOLOCK) where lecture_id = aa.lecture_id AND del_yn = 'N') <= @endDate
	group by bb.lecture_category_id),0) + ISNULL(e.learning_off,0) AS '학습법_오프라인', 
ISNULL(e.learning_on, 0) AS '학습법_온라인',

ISNULL((SELECT 
	SUM(aa.gain_credit)
	from otbl_Lecture_attend_student aa (NOLOCK)
	left join otbl_Lecture bb (NOLOCK) on bb.lecture_idx = aa.lecture_id
	where 
	aa.del_yn = 'N'
	AND aa.pass_yn = 'Y'
	AND aa.review is not NULL AND cast(aa.review AS VARCHAR) <> ''
	AND aa.staff_id = MLIST.CStaffId
	AND bb.lecture_category_id = 4
	and (select MAX(class_startdatetime) from otbl_Lecture_class (NOLOCK) where lecture_id = aa.lecture_id AND del_yn = 'N') <= @endDate
	group by bb.lecture_category_id),0) + ISNULL(e.entrance_off, 0) AS '입시_오프라인', 
ISNULL(e.entrance_on, 0) AS '입시_온라인',  

ISNULL((SELECT 
	SUM(aa.gain_credit)
	from otbl_Lecture_attend_student aa (NOLOCK)
	left join otbl_Lecture bb (NOLOCK) on bb.lecture_idx = aa.lecture_id
	where 
	aa.del_yn = 'N'
	AND aa.pass_yn = 'Y'
	AND aa.review is not NULL AND cast(aa.review AS VARCHAR) <> ''
	AND aa.staff_id = MLIST.CStaffId
	AND bb.lecture_category_id = 4
	and (select MAX(class_startdatetime) from otbl_Lecture_class (NOLOCK) where lecture_id = aa.lecture_id AND del_yn = 'N') <= @endDate
	group by bb.lecture_category_id),0) + ISNULL(e.club_off, 0) AS '교양동호회_오프라인', 
ISNULL(e.club_on, 0) AS '교양동호회_온라인',
e.memo
-- -------------------------------
from
 (SELECT 
	a.CStaffId
	,a.CLoginId
	,a.CName0 AS 이름
	,b.CDepartCode AS 지점코드
	,b.CName0 AS 지점명
	,c.CLevelCode
	,c.CName0 AS 직급
	,(CASE 
				WHEN a.COutDate = '2200-12-31' THEN '근무중'
			ELSE
				'퇴사'
			END
		) AS 근무상태
FROM TStaff a(NOLOCK)
	left join TDepartment b(NOLOCK) on b.CDepartCode = (SELECT TOP 1 CDepartCode FROM TStaffDepartHistory WHERE CStaffId = a.CStaffId AND CMain = 1 ORDER BY CHistoryStartDate DESC)
	left join TStaffLevel c(NOLOCK) on c.CLevelCode = (SELECT TOP 1 CLevelCode FROM TStaffLevelHistory WHERE CStaffId = a.CStaffId and CMain = 1 ORDER BY CStartDate DESC)
WHERE 1 =1
	and a.COutDate        >= DATEADD("yy",-1, GETDATE()) -- 최근 1년 이내 퇴직자를 포함하여
--  and .CHistoryEndDate >= '2019-01-01' -- 지점근무 종료이력이 1/1일 이후
	and b.CDepartCode like 'EPX%'
	and b.CDepartCode not in ('EPXHEAD')
	and LEFT(c.CLevelCode, 2) in ('L1','L2','L3','L4','L5','L6')
 ) MLIST
left join otbl_Accrued_credit e (NOLOCK) on e.staff_id = MLIST.CStaffId
 -- ---------------------------

*/

GO

--/*******************************************************************************************************
--/* 단위업무 : 요청쿼리 모음
--/* 작 성 자 : 김 길 명
--/* 작 성 일 : 2018.07.26
--/* 작성내용 : 
--/* 수 정 일 :	
--/* 수 정 자 :	
--/* 수정내용 : 
--/* 비    고 :	
--/* 실행코드 : EXEC 
--/*******************************************************************************************************
CREATE PROCEDURE [dbo].[SP_EduplexQueryList](  
	@Case			VARCHAR(30),
	@StDt			VARCHAR(10)	= null,
	@EdDt			VARCHAR(10)	= null,
	@CTestType		VARCHAR(20)	= null,
	@CStudentStatus	VARCHAR(20)	= null
)                                                                                      
AS                                                                                                  
BEGIN 
	if @Case = 'testList'		goto TEST_Handler			-- 공부공식자료
	if @Case = 'smsList'		goto SMS_Handler			-- sms문자발송이력
	if @Case = 'tHistory'		goto History_Handler		-- 개별지도 사용이력
	if @Case = 'tEndStudent'	goto EndStudent_Handler		-- 종료학생목록
	if @Case = 'tStudentList'	goto StudentList_Handler	-- 학생목록
	if @Case = 'CounselRenew'	goto StudentCounselRenew_Handler	-- 2월 로얄티 누락
	

	select code='ER', mfg='정의되지 않은 분기코드(' + @Case + ')입니다.'
	return
END

/***********************************************************************************************************************
	공부공식 조회 : 시작일, 종료일
	exec SP_EduplexQueryList @Case = 'testList', @StDt = '2018-07-03', @EdDt = '2018-07-25'
***********************************************************************************************************************/
TEST_Handler:
BEGIN
	select b.COpenName0		as "검사지점"
		  ,a.CNo			as "검사No"
		  ,d.CName0			as "담당매니저"
		  ,a.CRegistDate	as "검사등록일"
		  ,a.CSurveyStatus	as "검사완료여부"
		  ,a.CPrintDate		as "출력일"
		  ,c.CName			as "검사학생명"
		  ,a.CStudentGrade	as "검사당시학년"
		  ,c.CSex			as "성별"
		  ,f.CStartDate		as "상담관리 등원시작일"
		  ,g.CStartDate		as "개별지도 등원시작일"
		  ,case c.CStudentStatus
				when 'Regist' then '재원' 
				when 'Retire' then '종료' 
				when 'Pause'  then '휴원' 
			end as "학생상태"
		  ,a.CTestType		as "검사유형"
		  ,h.[116]
		  ,h.[117]
		  ,h.[118]
		  ,h.[119]
		  ,h.[120]
		  ,h.[121]
		  ,h.[122]
		  ,h.[123]
		  ,h.[124]
		  ,h.[125]
		  ,h.[126]
		  ,h.[127]
		  ,h.[128]
		  ,h.[129]
		  ,h.[130]
		  ,h.[131]
		  ,h.[132]
		  ,h.[133]
		  ,h.[134]
		  ,h.[135]
		  ,h.[136]
		  ,h.[137]
		  ,h.[162]
		  ,h.[163]
		  ,h.[164]
	  from TTestInfo a(nolock)
	  left join TFacility b(nolock) on a.CStdBranchCode = b.CDepartCode and a.CStdBranchStartDate = b.CDepartStartDate
	  left join TStudent  c(nolock) on a.CStdBranchCode = c.CBranchCode and a.CCode = c.CCode
	  left join TStaff    d(nolock) on c.CManagerId = d.CStaffId
	  left join (
					select CScDepartCode, CScCode, min(CStartDate) as CStartDate
					  from TStudentCounsel(nolock)
					 group by CScDepartCode, CScCode
				) f on a.CStdBranchCode = f.CScDepartCode and a.CCode = f.CScCode
	  left join (
					select CStdDepartCode, CStdCode, min(CStartDate) as CStartDate
					  from TStudentTutoring(nolock)
					 group by CStdDepartCode, CStdCode
				) g on a.CStdBranchCode = g.CStdDepartCode and a.CCode = g.CStdCode
	  left join (
					select s1.CBranchCode, s1.CBranchStartDate, s1.CCode, s1.CNo
						  ,max(case when s1.CQuestionNo = 116 then CAnswer else null end) as "116"
						  ,max(case when s1.CQuestionNo = 117 then CAnswer else null end) as "117"
						  ,max(case when s1.CQuestionNo = 118 then CAnswer else null end) as "118"
						  ,max(case when s1.CQuestionNo = 119 then CAnswer else null end) as "119"
						  ,max(case when s1.CQuestionNo = 120 then CAnswer else null end) as "120"
						  ,max(case when s1.CQuestionNo = 121 then CAnswer else null end) as "121"
						  ,max(case when s1.CQuestionNo = 122 then CAnswer else null end) as "122"
						  ,max(case when s1.CQuestionNo = 123 then CAnswer else null end) as "123"
						  ,max(case when s1.CQuestionNo = 124 then CAnswer else null end) as "124"
						  ,max(case when s1.CQuestionNo = 125 then CAnswer else null end) as "125"
						  ,max(case when s1.CQuestionNo = 126 then CAnswer else null end) as "126"
						  ,max(case when s1.CQuestionNo = 127 then CAnswer else null end) as "127"
						  ,max(case when s1.CQuestionNo = 128 then CAnswer else null end) as "128"
						  ,max(case when s1.CQuestionNo = 129 then CAnswer else null end) as "129"
						  ,max(case when s1.CQuestionNo = 130 then CAnswer else null end) as "130"
						  ,max(case when s1.CQuestionNo = 131 then CAnswer else null end) as "131"
						  ,max(case when s1.CQuestionNo = 132 then CAnswer else null end) as "132"
						  ,max(case when s1.CQuestionNo = 133 then CAnswer else null end) as "133"
						  ,max(case when s1.CQuestionNo = 134 then CAnswer else null end) as "134"
						  ,max(case when s1.CQuestionNo = 135 then CAnswer else null end) as "135"
						  ,max(case when s1.CQuestionNo = 136 then CAnswer else null end) as "136"
						  ,max(case when s1.CQuestionNo = 137 then CAnswer else null end) as "137"
						  ,max(case when s1.CQuestionNo = 162 then CAnswer else null end) as "162"
						  ,max(case when s1.CQuestionNo = 163 then CAnswer else null end) as "163"
						  ,max(case when s1.CQuestionNo = 164 then CAnswer else null end) as "164"
					  from TTestSurvey s1(nolock)
					 inner join TTestInfo s2(nolock) on s1.CBranchCode = s2.CStdBranchCode and s1.CBranchStartDate = s2.CStdBranchStartDate and s1.CCode = s2.CCode and s1.CNo = s2.CNo
					 where convert(varchar, s2.CRegistDate, 23) between @StDt and @EdDt
					  and  ((s1.CQuestionNo between 116 and 137)
						or (s1.CQuestionNo between 162 and 164))
					 group by s1.CBranchCode, s1.CBranchStartDate, s1.CCode, s1.CNo	  
				) h on a.CStdBranchCode = h.CBranchCode and a.CStdBranchStartDate = h.CBranchStartDate and a.CCode = h.CCode and a.CNo = h.CNo
	 where convert(varchar, a.CRegistDate, 23) between @StDt and @EdDt
	 order by a.CStdBranchCode, a.CRegistDate desc

	return
END

/***********************************************************************************************************************
	sms문자발송이력 : 시작일, 종료일
	exec SP_EduplexQueryList @Case = 'smsList', @StDt = '2016-01-01', @EdDt = '2018-08-22'
***********************************************************************************************************************/
SMS_Handler:
BEGIN
	select 
		a.cid
		,a.cbranchIdDepartCode
		,b.COpenName0 as branchName
		,a.ctype as type
		,a.csenderName as senderName
		,a.csenderPhone as senderPhone
		,a.creceiverName as receiverName
		,a.creceiverPhone as receiverPhone
		,a.csendTime as sendTime
		,a.ccontent as content
		,a.cisSend as isSend
		,a.crealSendTime as realSendTime
		,CASE WHEN a.cisLong=1 THEN 'LMS' ELSE 'SMS' END as isLong 
		,a.csmsReturnCode as smsReturnCode
		,a.csmsReturnName as smsReturnName
	from TLogSMS a(nolock)
	inner join TFacility b(nolock) on a.cbranchIdDepartCode = b.CDepartCode and a.CBranchIdDepartStartDate = b.CDepartStartDate
	where a.CSendTime >= @StDt
	  and a.CSendTime <= @EdDt
	  and b.CFacilityType = 'BRANCH'
	  and b.CDepartCode like 'EPX%'
	order by a.cbranchIdDepartCode, a.CSendTime

--select * from TFacility
	return
END


/***********************************************************************************************************************
	개별지도 시간표 사용이력
	exec SP_EduplexQueryList @Case = 'tHistory'
***********************************************************************************************************************/
History_Handler:
BEGIN
	select a.CBaseDate, a.CFacilityCode, b.COpenName0, a.CStaffId, c.CName0, a.CInDt, a.CType
	  from TTutoringUploadHistory a
	  left join TFacility b on a.CFacilityCode = b.CDepartCode and a.CFacilityStartDate = b.CDepartStartDate
	  left join TStaff c on a.CStaffId = c.CStaffId

	return
END

/***********************************************************************************************************************
	개별지도 시간표 사용이력
	exec SP_EduplexQueryList @Case = 'tEndStudent', @StDt = '2017-09-01', @EdDt = '2018-08-31', @CStudentStatus = 'Retire'
***********************************************************************************************************************/
EndStudent_Handler:
BEGIN
	select 
		case when a.CEndStatus <> '' and a.CTutorEndStatus <> '' then '프리미엄'
			 when a.CEndStatus <> '' then '상담관리'
			 when a.CTutorEndStatus <> '' then '개별지도'
		end as "종료구분"
		,a.CBranchCode as "지점코드"
		,b.COpenName0 as "지점명"
		,a.CCode as "학생코드"
		,a.CName as "학생명"
		,a.CSex as "성별"
		,a.CSchoolCode as "학교코드"
		,c.CName as "학교명"
		,case a.CGrade 
			when 'g1' then '초1'
			when 'g2' then '초2'
			when 'g3' then '초3'
			when 'g4' then '초4'
			when 'g5' then '초5'
			when 'g6' then '초6'
			when 'g7' then '중1'
			when 'g8' then '중2'
			when 'g9' then '중3'
			when 'g10' then '고1'
			when 'g11' then '고2'
			when 'g12' then '고3'
			when 'g13' then '(중)재수'
			when 'g14' then '(중)검정'
			when 'g15' then '(고)재수'
			when 'g16' then '(고)검정'
		 end as "학년"
		,a.CEmailStudent as "이메일"
		,(case when a.CPhoneMother IS null then a.CPhoneFather else a.CPhoneMother end) as "부모님전화번호"
		,a.CStudentStatus as studentStatus
		,a.CNameFather as "아버지성함"
		,a.CPhoneFather as "아버지핸드폰"
		,a.CNameMother as "어머니성함"
		,a.CPhoneMother as "어머니핸드폰"
		,a.CPhoneStudent as "학생핸드폰"
		,a.CReentryPossibility as "재등록가능성"
		,a.CEndStatus as "상담관리종료"
		,a.CTutorEndStatus as "개별지도종료"
		,a.CEndDay as "상담관리종료일"
		,a.CTutorEndDay as "개별지도종료일"
		,a.CPhoneHome as "집전화번호"
		,a.CAddress1Home as "집주소"
		,a.CVltType as vltType
		,d.CManageCommas as manageCommas
		,f1.CName0 as "개별지도매니저"
		,e.CManageDays as manageDays
		,f2.CName0 as "상담관리매니저"
	from TStudent a
	left join TFacility b on a.CBranchCode = b.CDepartCode and a.CBranchStartDate = b.CDepartStartDate
	left join TSchool   c on a.CSchoolCode = c.CCode
	left join TStudentTutoring d on a.CBranchCode = d.CStdDepartCode and a.CBranchStartDate = d.CStdDepartStartDate and a.CCode = d.CStdCode and a.CLastTutoringNo = d.CNo
	left join TStudentCounsel  e on a.CBranchCode = e.CScDepartCode and a.CBranchStartDate = e.CScDepartStartDate and a.CCode = e.CScCode and a.CLastCounselNo = e.CNo
	left join TStaff f1 on d.CManager = f1.CStaffId
	left join TStaff f2 on e.CManager = f2.CStaffId
	--left join TStudentSchool c on a.CBranchCode = c.CBranchCode and a.CBranchStartDate = c.CBranchStartDate and a.CSchoolCode = c.CSchoolCode
	where a.CStudentStatus = @CStudentStatus
	  and isnull(a.CEndDay, a.CTutorEndDay) >= @StDt
	  and isnull(a.CEndDay, a.CTutorEndDay) <= @EdDt
	  and (a.CBranchCode like 'EPX%' or a.CBranchCode like 'ECH%')
	order by a.CBranchCode, a.CEndDay desc, a.CTutorEndDay desc

	return
END


/***********************************************************************************************************************
	학생목록
	exec SP_EduplexQueryList @Case = 'tStudentList', @CStudentStatus = 'Regist'
***********************************************************************************************************************/
StudentList_Handler:
BEGIN
	select 
		 a.CBranchCode as "지점코드"
		,b.COpenName0 as "지점명"
		,a.CCode as "학생코드"
		,a.CName as "학생명"
		,a.CSex as "성별"
		,a.CSchoolCode as "학교코드"
		,c.CName as "학교명"
		,case a.CGrade 
			when 'g1' then '초1'
			when 'g2' then '초2'
			when 'g3' then '초3'
			when 'g4' then '초4'
			when 'g5' then '초5'
			when 'g6' then '초6'
			when 'g7' then '중1'
			when 'g8' then '중2'
			when 'g9' then '중3'
			when 'g10' then '고1'
			when 'g11' then '고2'
			when 'g12' then '고3'
			when 'g13' then '(중)재수'
			when 'g14' then '(중)검정'
			when 'g15' then '(고)재수'
			when 'g16' then '(고)검정'
		 end as "학년"
		,a.CEmailStudent as "이메일"
		,(case when a.CPhoneMother IS null then a.CPhoneFather else a.CPhoneMother end) as "부모님전화번호"
		,a.CStudentStatus as studentStatus
		,a.CNameFather as "아버지성함"
		,a.CPhoneFather as "아버지핸드폰"
		,a.CNameMother as "어머니성함"
		,a.CPhoneMother as "어머니핸드폰"
		,a.CPhoneStudent as "학생핸드폰"
		,a.CReentryPossibility as "재등록가능성"
		,a.CEndStatus as "상담관리종료"
		,a.CTutorEndStatus as "개별지도종료"
		,a.CEndDay as "상담관리종료일"
		,a.CTutorEndDay as "개별지도종료일"
		,a.CPhoneHome as "집전화번호"
		,a.CAddress1Home as "집주소"
		,a.CVltType as vltType
		,d.CManageCommas as manageCommas
		,f1.CName0 as "개별지도매니저"
		,e.CManageDays as manageDays
		,f2.CName0 as "상담관리매니저"
	from TStudent a
	left join TFacility b on a.CBranchCode = b.CDepartCode and a.CBranchStartDate = b.CDepartStartDate
	left join TSchool   c on a.CSchoolCode = c.CCode
	left join TStudentTutoring d on a.CBranchCode = d.CStdDepartCode and a.CBranchStartDate = d.CStdDepartStartDate and a.CCode = d.CStdCode and a.CLastTutoringNo = d.CNo
	left join TStudentCounsel  e on a.CBranchCode = e.CScDepartCode and a.CBranchStartDate = e.CScDepartStartDate and a.CCode = e.CScCode and a.CLastCounselNo = e.CNo
	left join TStaff f1 on d.CManager = f1.CStaffId
	left join TStaff f2 on e.CManager = f2.CStaffId
	--left join TStudentSchool c on a.CBranchCode = c.CBranchCode and a.CBranchStartDate = c.CBranchStartDate and a.CSchoolCode = c.CSchoolCode
	where a.CStudentStatus = @CStudentStatus
	  and (a.CBranchCode like 'EPX%' or a.CBranchCode like 'ECH%')
	order by a.CBranchCode, a.CEndDay desc, a.CTutorEndDay desc

	return
END

/***********************************************************************************************************************
	학생목록
	018년 5월 1일부터 2018년 10월 31일까지,
	전국 지점에 등원한 기록이 있는 해당기간 내 종료한 학생과 현재 재원하고 있는 학생의 학부모 연락처 데이터가 필요합니다.
	
1. 기간 : 2018년 5월 1일~2018년 10월 31일
2. 대상 : 기간 내 종료 + 재원한 학생의 학부모
3. 필요한 정보 :  대상자의 연락처
4. 기타 : 학생의 최초 등록 시점, 종료 시점, 지점, 학생명, 학부모 연락처 함께 표기되면 좋겠습니다.
***********************************************************************************************************************/
StudentAttendList_Handler:
BEGIN

	select 
		 d1.CStartDate as "개별지도 시작일"
		,e1.CStartDate as "상담관리 시작일"
		,a.CBranchCode as "지점코드"
		,b.COpenName0 as "지점명"
		,a.CCode as "학생코드"
		,a.CName as "학생명"
		,a.CSex as "성별"
		,a.CSchoolCode as "학교코드"
		,c.CName as "학교명"
		,case a.CGrade 
			when 'g1' then '초1'
			when 'g2' then '초2'
			when 'g3' then '초3'
			when 'g4' then '초4'
			when 'g5' then '초5'
			when 'g6' then '초6'
			when 'g7' then '중1'
			when 'g8' then '중2'
			when 'g9' then '중3'
			when 'g10' then '고1'
			when 'g11' then '고2'
			when 'g12' then '고3'
			when 'g13' then '(중)재수'
			when 'g14' then '(중)검정'
			when 'g15' then '(고)재수'
			when 'g16' then '(고)검정'
		 end as "학년"
		,a.CEmailStudent as "이메일"
		,(case when a.CPhoneMother IS null then a.CPhoneFather else a.CPhoneMother end) as "부모님전화번호"
		,a.CStudentStatus as studentStatus
		,a.CNameFather as "아버지성함"
		,a.CPhoneFather as "아버지핸드폰"
		,a.CNameMother as "어머니성함"
		,a.CPhoneMother as "어머니핸드폰"
		,a.CPhoneStudent as "학생핸드폰"
		,a.CReentryPossibility as "재등록가능성"
		,a.CEndStatus as "상담관리종료"
		,a.CTutorEndStatus as "개별지도종료"
		,a.CEndDay as "상담관리종료일"
		,a.CTutorEndDay as "개별지도종료일"
		,a.CPhoneHome as "집전화번호"
		,a.CAddress1Home as "집주소"
		,a.CVltType as vltType
		,d.CManageCommas as manageCommas
		,f1.CName0 as "개별지도매니저"
		,e.CManageDays as manageDays
		,f2.CName0 as "상담관리매니저"
	from (
		select a.CStduentBranchCode, a.CStduentBranchStartDate, a.CStduentcode
		  from TStudentDailyAttend a
		 where (a.CStduentBranchCode like 'EPX%' or a.CStduentBranchCode like 'ECH%')
		   and a.CDate between '2018-05-01' and '2018-10-31'
		 group by a.CStduentBranchCode, a.CStduentBranchStartDate, a.CStduentcode
		) T1
	inner join TStudent a on t1.CStduentBranchCode = a.CBranchCode and t1.CStduentBranchStartDate = a.CBranchStartDate and t1.CStduentcode = a.CCode
	left join TFacility b on a.CBranchCode = b.CDepartCode and a.CBranchStartDate = b.CDepartStartDate
	left join TSchool   c on a.CSchoolCode = c.CCode
	left join TStudentTutoring d on a.CBranchCode = d.CStdDepartCode and a.CBranchStartDate = d.CStdDepartStartDate and a.CCode = d.CStdCode and a.CLastTutoringNo = d.CNo
	left join TStudentCounsel  e on a.CBranchCode = e.CScDepartCode and a.CBranchStartDate = e.CScDepartStartDate and a.CCode = e.CScCode and a.CLastCounselNo = e.CNo
	left join TStaff f1 on d.CManager = f1.CStaffId
	left join TStaff f2 on e.CManager = f2.CStaffId
	left join (
				select CStdDepartCode, CStdDepartStartDate, CStdCode, min(CStartDate) as CStartDate
				  from TStudentTutoring 
				 group by CStdDepartCode, CStdDepartStartDate, CStdCode) d1 on a.CBranchCode = d1.CStdDepartCode and a.CBranchStartDate = d1.CStdDepartStartDate and a.CCode = d1.CStdCode
	left join (
				select CScDepartCode, CScDepartStartDate, CScCode, min(CStartDate) as CStartDate
				  from TStudentCounsel 
				 group by CScDepartCode, CScDepartStartDate, CScCode) e1 on a.CBranchCode = e1.CScDepartCode and a.CBranchStartDate = e1.CScDepartStartDate and a.CCode = e1.CScCode
	where 1=1
	order by a.CBranchCode, a.CEndDay desc, a.CTutorEndDay desc
	return
END

/***********************************************************************************************************************
	학생목록 (화정, 제주이도지점 - 등원카드 사용안함)
	018년 5월 1일부터 2018년 10월 31일까지,
	전국 지점에 등원한 기록이 있는 해당기간 내 종료한 학생과 현재 재원하고 있는 학생의 학부모 연락처 데이터가 필요합니다.
	
1. 기간 : 2018년 5월 1일~2018년 10월 31일
2. 대상 : 기간 내 종료 + 재원한 학생의 학부모
3. 필요한 정보 :  대상자의 연락처
4. 기타 : 학생의 최초 등록 시점, 종료 시점, 지점, 학생명, 학부모 연락처 함께 표기되면 좋겠습니다.
***********************************************************************************************************************/
StudentAttendList2_Handler:
BEGIN
	select 
		 d1.CStartDate as "개별지도 시작일"
		,e1.CStartDate as "상담관리 시작일"
		,a.CBranchCode as "지점코드"
		,b.COpenName0 as "지점명"
		,a.CCode as "학생코드"
		,a.CName as "학생명"
		,a.CSex as "성별"
		,a.CSchoolCode as "학교코드"
		,c.CName as "학교명"
		,case a.CGrade 
			when 'g1' then '초1'
			when 'g2' then '초2'
			when 'g3' then '초3'
			when 'g4' then '초4'
			when 'g5' then '초5'
			when 'g6' then '초6'
			when 'g7' then '중1'
			when 'g8' then '중2'
			when 'g9' then '중3'
			when 'g10' then '고1'
			when 'g11' then '고2'
			when 'g12' then '고3'
			when 'g13' then '(중)재수'
			when 'g14' then '(중)검정'
			when 'g15' then '(고)재수'
			when 'g16' then '(고)검정'
		 end as "학년"
		,a.CEmailStudent as "이메일"
		,(case when a.CPhoneMother IS null then a.CPhoneFather else a.CPhoneMother end) as "부모님전화번호"
		,a.CStudentStatus as studentStatus
		,a.CNameFather as "아버지성함"
		,a.CPhoneFather as "아버지핸드폰"
		,a.CNameMother as "어머니성함"
		,a.CPhoneMother as "어머니핸드폰"
		,a.CPhoneStudent as "학생핸드폰"
		,a.CReentryPossibility as "재등록가능성"
		,a.CEndStatus as "상담관리종료"
		,a.CTutorEndStatus as "개별지도종료"
		,a.CEndDay as "상담관리종료일"
		,a.CTutorEndDay as "개별지도종료일"
		,a.CPhoneHome as "집전화번호"
		,a.CAddress1Home as "집주소"
		,a.CVltType as vltType
		,d.CManageCommas as manageCommas
		,f1.CName0 as "개별지도매니저"
		,e.CManageDays as manageDays
		,f2.CName0 as "상담관리매니저"
	from (
		select a.CStdDepartCode, a.CStdDepartStartDate, a.CStdCode
		  from TStudentTutoring a
		 where a.CStdDepartCode IN ('EPX0025', 'EPX0156')
		   and ( (a.CStartDate between '2018-05-01' and '2018-10-31') or (a.CEndDate between '2018-05-01' and '2018-10-31') )
		 group by a.CStdDepartCode, a.CStdDepartStartDate, a.CStdCode
		 union 
		select a.CScDepartCode, a.CScDepartStartDate, a.CScCode
		  from TStudentCounsel a
		 where a.CScDepartCode IN ('EPX0025', 'EPX0156')
		   and ( (a.CStartDate between '2018-05-01' and '2018-10-31') or (a.CEndDate between '2018-05-01' and '2018-10-31') )
		 group by a.CScDepartCode, a.CScDepartStartDate, a.CScCode
		) T1
	inner join TStudent a on t1.CStdDepartCode = a.CBranchCode and t1.CStdDepartStartDate = a.CBranchStartDate and t1.CStdCode = a.CCode
	left join TFacility b on a.CBranchCode = b.CDepartCode and a.CBranchStartDate = b.CDepartStartDate
	left join TSchool   c on a.CSchoolCode = c.CCode
	left join TStudentTutoring d on a.CBranchCode = d.CStdDepartCode and a.CBranchStartDate = d.CStdDepartStartDate and a.CCode = d.CStdCode and a.CLastTutoringNo = d.CNo
	left join TStudentCounsel  e on a.CBranchCode = e.CScDepartCode and a.CBranchStartDate = e.CScDepartStartDate and a.CCode = e.CScCode and a.CLastCounselNo = e.CNo
	left join TStaff f1 on d.CManager = f1.CStaffId
	left join TStaff f2 on e.CManager = f2.CStaffId
	left join (
				select CStdDepartCode, CStdDepartStartDate, CStdCode, min(CStartDate) as CStartDate
				  from TStudentTutoring 
				 group by CStdDepartCode, CStdDepartStartDate, CStdCode) d1 on a.CBranchCode = d1.CStdDepartCode and a.CBranchStartDate = d1.CStdDepartStartDate and a.CCode = d1.CStdCode
	left join (
				select CScDepartCode, CScDepartStartDate, CScCode, min(CStartDate) as CStartDate
				  from TStudentCounsel 
				 group by CScDepartCode, CScDepartStartDate, CScCode) e1 on a.CBranchCode = e1.CScDepartCode and a.CBranchStartDate = e1.CScDepartStartDate and a.CCode = e1.CScCode
	where 1=1
	order by a.CBranchCode, a.CEndDay desc, a.CTutorEndDay desc
	return
END

/***********************************************************************************************************************
	학생목록 : 2018.11.22.요청
	지난 7월부터 지금까지 전국지점에 신규로 등록한 학생들(개별지도, 상담관리 모두) 리스트를 요청드립니다.
	지점명, 학생이름, 학생연락처, 학부모연락처, 검사등록일, 등록일, 등록비용, 상담관리/개별지도/프리미엄 구분

***********************************************************************************************************************/
StudentNewcomerList_Handler:
BEGIN

	select 
		 d1.CStartDate as "개별지도 시작일"
		,e1.CStartDate as "상담관리 시작일"
		,a.CBranchCode as "지점코드"
		,b.COpenName0 as "지점명"
		,a.CCode as "학생코드"
		,a.CName as "학생명"
		,a.CSex as "성별"
		,a.CSchoolCode as "학교코드"
		,c.CName as "학교명"
		,case a.CGrade 
			when 'g1' then '초1'
			when 'g2' then '초2'
			when 'g3' then '초3'
			when 'g4' then '초4'
			when 'g5' then '초5'
			when 'g6' then '초6'
			when 'g7' then '중1'
			when 'g8' then '중2'
			when 'g9' then '중3'
			when 'g10' then '고1'
			when 'g11' then '고2'
			when 'g12' then '고3'
			when 'g13' then '(중)재수'
			when 'g14' then '(중)검정'
			when 'g15' then '(고)재수'
			when 'g16' then '(고)검정'
		 end as "학년"
		,a.CEmailStudent as "이메일"
		,(case when a.CPhoneMother IS null then a.CPhoneFather else a.CPhoneMother end) as "부모님전화번호"
		,a.CStudentStatus as studentStatus
		,a.CNameFather as "아버지성함"
		,a.CPhoneFather as "아버지핸드폰"
		,a.CNameMother as "어머니성함"
		,a.CPhoneMother as "어머니핸드폰"
		,a.CPhoneStudent as "학생핸드폰"
		,a.CReentryPossibility as "재등록가능성"
		,a.CEndStatus as "상담관리종료"
		,a.CTutorEndStatus as "개별지도종료"
		,a.CEndDay as "상담관리종료일"
		,a.CTutorEndDay as "개별지도종료일"
		,a.CPhoneHome as "집전화번호"
		,a.CAddress1Home as "집주소"
		,a.CVltType as vltType
		,d.CManageCommas as manageCommas
		,f1.CName0 as "개별지도매니저"
		,e.CManageDays as manageDays
		,f2.CName0 as "상담관리매니저"
	from
		--학생대상조건 지정 
		(
			select a.CScDepartCode as FacilityCd, a.CScDepartStartDate as FacilityStartDate, a.CScCode as StudentCd
			  from TStudentCounsel a--상담관리
			 where a.CRegistType = 'Newcomer'
			   and (a.CScDepartCode like 'EPX%' or a.CScDepartCode like 'ECH%')
			   and a.CStartDate between '2017-07-01' and '2018-12-31'
			 group by a.CScDepartCode, a.CScDepartStartDate, a.CScCode
			 union
			select a.CStdDepartCode as FacilityCd, a.CStdDepartStartDate as FacilityStartDate, a.CStdCode as StudentCd
			  from TStudentTutoring a--개별지도
			 where a.CRegistType = 'Newcomer'
			   and (a.CStdDepartCode like 'EPX%' or a.CStdDepartCode like 'ECH%')
			   and a.CStartDate between '2017-07-01' and '2018-12-31'
			 group by a.CStdDepartCode, a.CStdDepartStartDate, a.CStdCode
		) T1
	inner join TStudent a on t1.FacilityCd = a.CBranchCode and t1.FacilityStartDate = a.CBranchStartDate and t1.StudentCd = a.CCode
	left join TFacility b on a.CBranchCode = b.CDepartCode and a.CBranchStartDate = b.CDepartStartDate
	left join TSchool   c on a.CSchoolCode = c.CCode
	left join TStudentTutoring d on a.CBranchCode = d.CStdDepartCode and a.CBranchStartDate = d.CStdDepartStartDate and a.CCode = d.CStdCode and a.CLastTutoringNo = d.CNo
	left join TStudentCounsel  e on a.CBranchCode = e.CScDepartCode and a.CBranchStartDate = e.CScDepartStartDate and a.CCode = e.CScCode and a.CLastCounselNo = e.CNo
	left join TStaff f1 on d.CManager = f1.CStaffId
	left join TStaff f2 on e.CManager = f2.CStaffId
	left join (
				select CStdDepartCode, CStdDepartStartDate, CStdCode, min(CStartDate) as CStartDate
				  from TStudentTutoring 
				 group by CStdDepartCode, CStdDepartStartDate, CStdCode) d1 on a.CBranchCode = d1.CStdDepartCode and a.CBranchStartDate = d1.CStdDepartStartDate and a.CCode = d1.CStdCode
	left join (
				select CScDepartCode, CScDepartStartDate, CScCode, min(CStartDate) as CStartDate
				  from TStudentCounsel 
				 group by CScDepartCode, CScDepartStartDate, CScCode) e1 on a.CBranchCode = e1.CScDepartCode and a.CBranchStartDate = e1.CScDepartStartDate and a.CCode = e1.CScCode
	where 1=1
	order by a.CBranchCode, a.CEndDay desc, a.CTutorEndDay desc
	return
END

/***********************************************************************************************************************
	관리이력 : 2018.11.28
	NEMS의 학생관리>관리이력에서 보이는 리스트의 추출쿼리가 필요하여 요청드립니다.
	더불어 학생을 선택했을때 우측에 보여지는 세부기록 추출 쿼리도 같이 좀 부탁드립니다.
***********************************************************************************************************************/
StudentmanagementList_Handler:
BEGIN
--관리이력 
				SELECT
					tf.CDepartCode
--					,tf.CDepartStartDate
					,tf.COpenName0 as CDepartName
					,_T1.CCode as studentCode
					,(SELECT CName0 FROM TStaff(NOLOCK) WHERE CStaffId=_T1.CManagerId) AS "담당매니저"
					,_T1.CName AS "학생명"
					,(SELECT CName FROM TSchool(NOLOCK) WHERE CCode=_T1.CSchoolCode) AS "학교"
					,case _T1.CGrade 
						when 'g1' then '초1'
						when 'g2' then '초2'
						when 'g3' then '초3'
						when 'g4' then '초4'
						when 'g5' then '초5'
						when 'g6' then '초6'
						when 'g7' then '중1'
						when 'g8' then '중2'
						when 'g9' then '중3'
						when 'g10' then '고1'
						when 'g11' then '고2'
						when 'g12' then '고3'
						when 'g13' then '(중)재수'
						when 'g14' then '(중)검정'
						when 'g15' then '(고)재수'
						when 'g16' then '(고)검정'
					 end as "학년"
					,_T22.CStartDate as "등원시작일"
					,_T2.CEndDate as "등원종료일"
					,case when _T1.CStudentStatus = 'Regist' then '재원'
						  when _T1.CStudentStatus = 'Retire' then '종료'
					 else _T1.CStudentStatus end as "재원상태"
					,_T1.CPhoneStudent AS phoneStudent 
					,_T1.CPhoneFather AS phoneFather
					,_T1.CSmsSendFather AS smsSendFather 
					,_T1.CSmsSendMother AS smsSendMother 
					,_T1.CPhoneMother AS phoneMother
					,_T3.CManager AS tutoringManagerID
					,(SELECT CName0 FROM TStaff(NOLOCK) WHERE CStaffId=_T3.CManager) AS tutoringManagerName
					,_T2.CManager AS counselManagerID
					,(SELECT CName0 FROM TStaff(NOLOCK) WHERE CStaffId=_T2.CManager) AS counselManagerName
					,(tf.CDepartCode
						+'|'+CONVERT(char(8), tf.CDepartStartDate,112)
						+'|'+_T1.CCode
					 ) as _pk 
				FROM TStudent _T1(NOLOCK)
				LEFT JOIN TFacility tf (NOLOCK)
				  ON _T1.CBranchCode=tf.CDepartCode 
				 AND _T1.CBranchStartDate=tf.CDepartStartDate
				LEFT JOIN TStudentCounsel _T2 (NOLOCK)
				  ON _T2.CScCode=_T1.CCode 
				 AND _T2.CScDepartCode=_T1.CBranchCode
				 AND _T2.CScDepartStartDate=_T1.CBranchStartDate
				 AND _T2.CNo=(
				 				SELECT MAX(CNo) 
				 			 	FROM TStudentCounsel tsc (NOLOCK)
							   WHERE tsc.CScDepartCode=_T1.CBranchCode
							     AND tsc.CScDepartStartDate=_T1.CBranchStartDate
								 AND tsc.CScCode=_T1.CCode
							 )
				LEFT OUTER JOIN TStudentCounsel _T22 (NOLOCK)-- 처음하는 상담관리 
				  ON _T1.CBranchCode 		= _T22.CScDepartCode
				 AND _T1.CBranchStartDate 	= _T22.CScDepartStartDate
				 AND _T1.CCode 				= _T22.CScCode 
				 AND _T22.CNo=(
				 				SELECT MIN (CNo) 
				                 FROM TStudentCounsel tsc (NOLOCK)
							    WHERE tsc.CScDepartCode		=_T22.CScDepartCode
							      AND tsc.CScDepartStartDate=_T22.CScDepartStartDate
							      AND tsc.CScCode			=_T22.CScCode
							  )
				LEFT JOIN TStudentTutoring _T3(NOLOCK) ON _T3.CStdCode=_T1.CCode 
										AND _T3.CStdDepartCode=_T1.CBranchCode
										AND _T3.CStdDepartStartDate=_T1.CBranchStartDate
										AND _T3.CNo=(
														SELECT MAX(CNo) 
														  FROM TStudentTutoring tst(NOLOCK) 
														  WHERE tst.CStdCode=_T1.CCode
												     )			  

WHERE tf.CDepartCode = 'ZEMAX' --지점코드
  AND _T1.CStudentStatus IN ('Regist','Retire')	 --재원, 종료

-- 학생관리이력
exec SP_STUDENT_MANAGEMENT_HISTORY 'ZEMAX', 'Student-00000006'

	return
END

/***********************************************************************************************************************
	2월 로얄티 누락대상 학생
***********************************************************************************************************************/
StudentCounselRenew_Handler:
begin

select a.CScDepartCode  as "지점코드"
	  ,c.COpenName0     as "지점명"
	  ,a.CScCode        as "학생코드"
	  ,b.CName          as "학생명"
	  ,a.CStartDate     as "관리시작일"
	  ,a.CEndDate       as "관리종료일"
  from TStudentCounsel a
  left join TStudent b on a.CScDepartCode = b.CBranchCode and a.CScCode = b.CCode
  left join TFacility c on a.CScDepartCode = c.CDepartCode and a.CScDepartStartDate = c.CDepartStartDate
 where a.CEndDate > '2019-01-28'
   and a.CEndDate <= '2019-01-31'
   and a.CScDepartCode like 'EPX%'
   and b.CStudentStatus <> 'Retire'
   and a.CStartDate <> '2019-01-01'
   and not exists(select 1 
					from TStudentCounsel
				   where CNo > a.CNo
				     and CScDepartCode = a.CScDepartCode
				     and CScCode = a.CScCode
				     and CStartDate between '2019-02-01' and '2019-02-28')
  order by a.CScDepartCode, a.CScCode, a.CStartDate

	return
END

GO

-- =============================================
-- Author:		김길명
-- Create date: 2019-01-16
-- Description:	지점운영현황(일별) 신규생성
-- Modify:      
-- Modify date: 
-- Description:	
-- EXEC SP_FACILITY_DAILY_COUNT_CALC @pDt = '2019-01-16'
-- =============================================
CREATE PROCEDURE [dbo].[SP_FACILITY_DAILY_COUNT_CALC]
	@pDt			VARCHAR(10)  = ''	-- 일자 받은걸로 12개월치(없으면 오늘기준)
AS

-- 임시테이블을 이용하여 지점처리
DECLARE @FACILITY TABLE
(
	CFACILITY			NVARCHAR(20)	-- 지점코드
   ,CFACILITYStartDate  DATETIME
)

-- 기준테이블(월별)
CREATE TABLE #MONTH
(
	CMonth			NVARCHAR(7),	-- 월
	CFacility		NVARCHAR(20) 	-- 지점코드
)
CREATE NONCLUSTERED INDEX #Idx00 ON #MONTH (CMonth, CFacility)
-- 상담관리 월초, 월말을 구하기 위한 임시테이블
CREATE TABLE #dTEMP0
(
	CDay				DATETIME,		-- 집계일
	CDepartCode			NVARCHAR(20),	-- 지점코드
	CDepartStartDate	DATETIME,		-- 
	CStudentCode		NVARCHAR(50),	-- 학생코드
	CType				NVARCHAR(20),   -- 상담관리/개별지도
	CFlag				NVARCHAR(20),   -- 월초, 신규, 복회, 휴원, 휴원해제, 월말, 종료(?)
	CStartDate			DATETIME,		-- 상담관리시작일
	CEndDate			DATETIME,		-- 상담관리시작일
	CComer				INT,			-- 콤마수
	CGrade				NVARCHAR(10)    -- 학년
)

-- 변수선언
DECLARE 
	@dSTART_DATE	VARCHAR(10),
	@dEND_DATE		VARCHAR(10)

BEGIN
	-- 검색기간 변환
	IF ISNULL(@pDt, '') = ''
		SET @pDt   = CONVERT(VARCHAR(10), GETDATE(), 23)

--****************************************
-- 2020.09.02. 상담관리 신규등록 학생 처리
--             선 등록 시 상태변경 처리
--****************************************
update a set
a.CStudentStatus = 'Regist'
  from TStudent a
 inner join TStudentCounsel b on a.CLastCounselNo = b.CNo
 where a.CStudentStatus  = 'Visit'
   and b.CStartDate     >= @pDt
--****************************************

	--오류체크
	IF LEN(@pDt) <> 10
	BEGIN
		SELECT '일자오류 : ' + ISNULL(@pDt, '') as Messege
		RETURN
	END

	-- 하루전날을 마감하는 작업이므로 -1일 처리
	SET @pDt = CONVERT(VARCHAR, DATEADD(day, -1, @pDt), 23)

	IF EXISTS(SELECT 1 FROM TFacilityDailyCount WHERE CDay = @pDt)
	BEGIN
		SELECT '생성자료 존재 : '  as Messege
		RETURN
	END

	INSERT INTO @FACILITY (CFACILITY, CFACILITYStartDate)  
	SELECT a.CDepartCode, a.CDepartStartDate
	  FROM TFacility a(NOLOCK)   
	 INNER JOIN TDepartment b(NOLOCK) 
		ON a.CDepartCode = b.CDepartCode AND a.CDepartStartDate = b.CDepartStartDate 
	 WHERE SUBSTRING(a.CDepartCode, 1, 3) IN ('EPX','ECH')
	   AND a.CFacilityType NOT IN ('GROUP', 'HEAD')
	   AND @pDt BETWEEN b.CDepartStartDate AND b.CEndDate -- 기간내에 존재하는 지점만 세팅

	SET @dSTART_DATE = LEFT(@pDt, 7) + '-01'
	SET @dEND_DATE   = CONVERT(VARCHAR, DATEADD(ms,-3,DATEADD(mm, DATEDIFF(m,0,@dSTART_DATE)+1, 0)), 23)
	
--	SELECT @pDt as pDt, @dSTART_DATE as dSTART_DATE, @dEND_DATE as dEND_DATE
--	RETURN

	--************
	--상담관리월초
	--************
	-- 1일 미만등록, 1일이후 종료 학생 리스트 
	INSERT INTO #dTEMP0(CDay, CDepartCode, CDepartStartDate, CStudentCode, CType, CFlag, CStartDate, CEndDate, CGrade)
	SELECT @pDt, a.CScDepartCode, a.CScDepartStartDate, a.CScCode, 'Counsel', 'Begin', MAX(a.CStartDate), MAX(a.CEndDate), MAX(a.CGrade)
	  FROM TStudentCounsel a(NOLOCK)
	 WHERE EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CScDepartCode and CFACILITYStartDate = a.CScDepartStartDate)  -- 해당지점
		-- 상담관리시작일이 1일보다 작고 종료일이 말일자보다 크거나 같은 데이터(월말 종료는 월초에 포함)
	   AND a.CStartDate < @dSTART_DATE AND a.CEndDate >= CONVERT(VARCHAR, DATEADD(DD, -1, @dSTART_DATE), 23)
	   AND a.CRegistType <> 'Refund' -- 환불은 제외처리
	 GROUP BY a.CScDepartCode, a.CScDepartStartDate, a.CScCode

	-- 월말에 종료처리하고 7일 이내 등록한 학생을 월초 회원으로 집계(월초집계에 누락되는 학생 보정)
	INSERT INTO TFacilityDailyCount(CDay, CDepartCode, CDepartStartDate, CStudentCode, CType, CFlag, CStartDate, CEndDate, CGrade)
	SELECT @pDt AS CDay, a.CScDepartCode, a.CScDepartStartDate, a.CScCode, 'Counsel', 'Begin', MAX(a.CStartDate) AS CStartDate, MAX(a.CEndDate) AS CEndDate,  MAX(a.CGrade) AS CGrade
		FROM TStudentCounsel a(NOLOCK)
		WHERE EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CScDepartCode and CFACILITYStartDate = a.CScDepartStartDate)  -- 해당지점
		AND a.CStartDate >= @dSTART_DATE					-- 시작일이 1일보다 크거나 같고
		AND a.CStartDate <= DATEADD(dd, 6, @dSTART_DATE)	-- 시작일이 7일보다 작거나 같은거(6을 해준거 1일을 먹고 들어가기 때문임돠)
		-- 현재등록 이전 데이터가 있으며 상담관리종료일이 상담관리시작일보다 7일 이전
		AND (SELECT COUNT(CScCode) FROM TStudentCounsel(NOLOCK) WHERE CScDepartCode = a.CScDepartCode and CScCode = a.CScCode AND CNo < a.CNo AND CEndDate >= DATEADD(dd, -7, a.CStartDate) ) > 0
		AND a.CRegistType NOT IN ('Newcomer', 'Refund') -- 환불은 제외처리
		-- 데이터가 이상한게 많아..월초리스트에 있는 학생을 제외하는 조건 하나 더 추가
		AND NOT EXISTS  (SELECT 1 FROM #dTEMP0 where CDepartCode = a.CScDepartCode and CDepartStartDate = a.CScDepartStartDate and CStudentCode = a.CScCode)
		GROUP BY a.CScDepartCode, a.CScDepartStartDate, a.CScCode

	-- 먼저 구해뒀던 월초회원을 추가
	INSERT INTO TFacilityDailyCount (CDay, CDepartCode, CDepartStartDate, CStudentCode, CType, CFlag, CStartDate, CEndDate, CGrade)
	SELECT CDay, CDepartCode, CDepartStartDate, CStudentCode, CType, CFlag, CStartDate, CEndDate, CGrade
	  FROM #dTEMP0

	-- 신규회원(상담)
	INSERT INTO TFacilityDailyCount (CDay, CDepartCode, CDepartStartDate, CStudentCode, CType, CFlag, CStartDate, CEndDate, CGrade)
	SELECT @pDt, a.CScDepartCode, a.CScDepartStartDate, a.CScCode, 'Counsel', 'Newcomer', a.CStartDate, a.CEndDate, a.CGrade
	  FROM TStudentCounsel a(NOLOCK)
	 WHERE EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CScDepartCode and CFACILITYStartDate = a.CScDepartStartDate)  -- 해당지점
	   AND a.CStartDate >= @dSTART_DATE
	   AND a.CStartDate <= @dEND_DATE
	   AND a.CRegistType = 'Newcomer'

	--.복회회원(상담-복회 이전 7일 상담데이터가 있으면 복회가 아님)
	INSERT INTO TFacilityDailyCount (CDay, CDepartCode, CDepartStartDate, CStudentCode, CType, CFlag, CStartDate, CEndDate, CGrade)
	SELECT @pDt, a.CScDepartCode, a.CScDepartStartDate, a.CScCode, 'Counsel', 'Returning', a.CStartDate, a.CEndDate, a.CGrade
	  FROM TStudentCounsel a(NOLOCK)
	 WHERE EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CScDepartCode and CFACILITYStartDate = a.CScDepartStartDate)  -- 해당지점
	   AND a.CStartDate >= @dSTART_DATE
	   AND a.CStartDate <= @dEND_DATE
	   AND a.CRegistType = 'Returning'
	   -- 복회 이전 7일 상담데이터가 있으면 복회회원에서 제외
	   AND (SELECT COUNT(1) FROM TStudentCounsel(NOLOCK) WHERE CScDepartCode = a.CScDepartCode AND CScCode = a.CScCode AND CNo < a.CNo AND CEndDate >= DATEADD(dd, -7, a.CStartDate) AND CRegistType <> 'Refund') = 0

	-- 휴원회원(이건 두개가 같이 움직이는데...상담일때만 골라내가가 참 까다롭기에...개별은 휴원 안하는걸로~~)
	INSERT INTO TFacilityDailyCount (CDay, CDepartCode, CDepartStartDate, CStudentCode, CType, CFlag, CStartDate, CEndDate)
	SELECT @pDt, a.CDepartCode, a.CDepartStartDate, a.CStudentCode, 'Counsel', 'Leave', a.CLeaveStartDate, a.CLeaveEndDate
	  FROM TStudentLeave a(NOLOCK)
	 WHERE EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CDepartCode and CFACILITYStartDate = a.CDepartStartDate)  -- 해당지점
	   AND a.CLeaveStartDate >= @dSTART_DATE
	   AND a.CLeaveStartDate <= @dEND_DATE

	-- 휴원해제회원(이건 두개가 같이 움직이는데...상담일때만 골라내가가 참 까다롭기에...개별은 휴원 안하는걸로~~)
	INSERT INTO TFacilityDailyCount (CDay, CDepartCode, CDepartStartDate, CStudentCode, CType, CFlag, CStartDate, CEndDate)
	SELECT @pDt, a.CDepartCode, a.CDepartStartDate, a.CStudentCode, 'Counsel', 'LeaveClose', a.CLeaveStartDate, a.CLeaveEndDate
	  FROM TStudentLeave a(NOLOCK)
	 WHERE EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CDepartCode and CFACILITYStartDate = a.CDepartStartDate)  -- 해당지점
	   AND a.CLeaveEndDate >= @dSTART_DATE
	   AND a.CLeaveEndDate <= @dEND_DATE

	--실종료회원
	INSERT INTO TFacilityDailyCount (CDay, CDepartCode, CDepartStartDate, CStudentCode, CType, CFlag, CStartDate, CEndDate, CGrade)
	SELECT a.CDay, a.CDepartCode, a.CDepartStartDate, a.CStudentCode, a.CType, 'RealEnd', a.CStartDate, a.CEndDate, a.CGrade
	  FROM TFacilityDailyCount a(NOLOCK)
	  LEFT JOIN TStudentCounsel b(NOLOCK)
		on a.CDepartCode = b.CScDepartCode and a.CDepartStartDate = b.CScDepartStartDate and a.CStudentCode = b.CScCode and @pDt between b.CStartDate and b.CEndDate
	 WHERE CDay = @pDt
	   AND a.CType = 'Counsel' AND a.CFlag = 'Begin'
	   AND b.CScDepartCode is null

	--************
	--개별지도월초
	--************
	-- 시작월에 가장 가까운 신규나 복회데이터를 구하고 종료이력일자보다 시작일이 큰것들만 추리기
	INSERT INTO TFacilityDailyCount(CDay, CDepartCode, CDepartStartDate, CStudentCode, CStartDate, CEndDate, CType, CFlag, CGrade)
	SELECT  @pDt, 
			a.CStdDepartCode,
			a.CStdDepartStartDate,
			a.CStdCode,
			@dSTART_DATE,--a.CStartDate,
			@dEND_DATE,  --a.CEndDate,
			'Tutoring', 'Begin',
			d.CGrade
	  FROM TStudentTutoring a(NOLOCK)
	 INNER JOIN ( -- 기준데이터(시작일보다 작은날자의 신규나 복회 데이터)
						SELECT CStdDepartCode, CStdCode, MAX(CNo) AS CNo
						  FROM TStudentTutoring sub(NOLOCK)
						 WHERE EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = sub.CStdDepartCode and CFACILITYStartDate = sub.CStdDepartStartDate)
						   AND CRegistType IN ('Newcomer','Returning')
						   AND sub.CStartDate < @dSTART_DATE 
						   AND isnull(TranYn, 'N') <> 'Y' -- 이관데이터 제외처리조건 추가
						 GROUP BY CStdDepartCode, CStdCode
					) b 
			ON a.CStdDepartCode = b.CStdDepartCode AND a.CStdCode = b.CStdCode AND a.CNo = b.CNo
	  LEFT JOIN ( -- 종료데이터(시작일보다 작은일자의 종료이력)
						SELECT CStdBranchCode, CStdCode, MAX(CHistoryDate) AS CHistoryDate
						  FROM TStudentHistory sub2(NOLOCK)
						 WHERE EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = sub2.CStdBranchCode and CFACILITYStartDate = sub2.CStdBranchStartDate)  -- 해당지점
						   AND sub2.CRegistType = 'Retire' AND sub2.CStudentCounselType = 'Tutoring'
						   AND sub2.CHistoryDate < @dSTART_DATE
						 GROUP BY CStdBranchCode, CStdCode
					) c
			ON a.CStdDepartCode = c.CStdBranchCode AND a.CStdCode = c.CStdCode
	  -- 학년을 가져오는 조인절 추가
	  LEFT JOIN (
						SELECT sub2.CStdDepartCode, sub2.CStdDepartStartDate, sub2.CStdCode, sub2.CGrade
						  FROM TStudentTutoring sub2
						 INNER JOIN (
										SELECT aa.CStdDepartCode, aa.CStdDepartStartDate, aa.CStdCode, MAX(aa.CNo) AS CNo
										  FROM TStudentTutoring aa(NOLOCK)
										 WHERE EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = aa.CStdDepartCode and CFACILITYStartDate = aa.CStdDepartStartDate)
										   AND aa.CStartDate < @dSTART_DATE 
										 GROUP BY aa.CStdDepartCode, aa.CStdDepartStartDate, aa.CStdCode
									) sub3
							ON sub2.CStdDepartCode = sub3.CStdDepartCode AND sub2.CStdDepartStartDate = sub3.CStdDepartStartDate AND sub2.CStdCode = sub3.CStdCode AND sub2.CNo = sub3.CNo
					) d
			ON a.CStdDepartCode = d.CStdDepartCode AND a.CStdDepartStartDate = d.CStdDepartStartDate AND a.CStdCode = d.CStdCode
	 WHERE EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CStdDepartCode and CFACILITYStartDate = a.CStdDepartStartDate)
	   -- 종료이력이 null이거나 관리시작일보다 종료일이 작은 대상만 걸러준다
	   AND (c.CHistoryDate IS NULL OR a.CStartDate > c.CHistoryDate)
	   AND isnull(a.TranYn, 'N') <> 'Y' -- 이관데이터 제외처리조건 추가

	-- 신규회원(개별지도)
	INSERT INTO TFacilityDailyCount (CDay, CDepartCode, CDepartStartDate, CStudentCode, CType, CFlag, CStartDate, CEndDate, CGrade)
	SELECT @pDt, a.CStdDepartCode, a.CStdDepartStartDate, a.CStdCode, 'Tutoring', 'Newcomer', a.CStartDate, a.CEndDate, a.CGrade
	  FROM TStudentTutoring a(NOLOCK)
	 WHERE EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CStdDepartCode and CFACILITYStartDate = a.CStdDepartStartDate)  -- 해당지점
	   AND a.CStartDate >= @dSTART_DATE
	   AND a.CStartDate <= @dEND_DATE
	   AND a.CRegistType = 'Newcomer'
	   AND isnull(a.TranYn, 'N') <> 'Y' -- 이관데이터 제외처리조건 추가

	-- 복회회원(개별지도-복회는 개별지도를 종료하게되면 무조건 카운팅 되도록 바꿈)
	INSERT INTO TFacilityDailyCount (CDay, CDepartCode, CDepartStartDate, CStudentCode, CType, CFlag, CStartDate, CEndDate, CGrade)
	SELECT @pDt, a.CStdDepartCode, a.CStdDepartStartDate, a.CStdCode, 'Tutoring', 'Returning', a.CStartDate, a.CEndDate, a.CGrade
	  FROM TStudentTutoring a(NOLOCK)
	 WHERE EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CStdDepartCode and CFACILITYStartDate = a.CStdDepartStartDate)  -- 해당지점
	   AND a.CStartDate >= @dSTART_DATE
	   AND a.CStartDate <= @dEND_DATE
	   AND a.CRegistType = 'Returning'
	   AND isnull(a.TranYn, 'N') <> 'Y' -- 이관데이터 제외처리조건 추가

	-- 개별지도 전체 콤마수
	INSERT INTO TFacilityDailyCount (CDay, CDepartCode, CDepartStartDate, CStudentCode, CType, CFlag, CStartDate, CComer)
	SELECT @pDt, CStdDepartCode, CStdDepartStartDate, '', 'Tutoring', 'AllCommas', @pDt, SUM(CModifiedCommas) AS CCnt
	  FROM                              
			(
			-- 개별지도
			SELECT CStdDepartCode, CStdDepartStartDate, SUM(ISNULL(a.CModifiedCommas, 0)) AS CModifiedCommas
				FROM TStudentTutoring a(NOLOCK)
				WHERE EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CStdDepartCode and CFACILITYStartDate = a.CStdDepartStartDate)  -- 해당지점
				AND a.CStartDate >= @dSTART_DATE
				AND a.CStartDate <= @dEND_DATE
				AND isnull(a.TranYn, 'N') <> 'Y' -- 이관데이터 제외처리조건 추가
				GROUP BY CStdDepartCode, CStdDepartStartDate
			UNION ALL
			-- 개별지도 환불(환불은 (-)처리해야 함)
			SELECT a.CStdBrcDptCode, a.CStdBrcDptStartDate, SUM(ISNULL(a.CRefundModifiedCommas, 0)*-1) AS CModifiedCommas
				FROM TStudentTutoringRefund a(NOLOCK)
				WHERE EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CStdBrcDptCode and CFACILITYStartDate = a.CStdBrcDptStartDate)  -- 해당지점
				AND a.CEndDateRefund >= @dSTART_DATE
				AND a.CEndDateRefund <= @dEND_DATE
				GROUP BY a.CStdBrcDptCode, a.CStdBrcDptStartDate
			-- 개별지도 기타
			UNION ALL
			SELECT a.CDepartCode, a.CDepartStartDate, SUM(ISNULL(a.CCommas, 0)) AS CModifiedCommas
			  FROM TOtherSale a(NOLOCK)
			 WHERE EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CDepartCode and CFACILITYStartDate = a.CDepartStartDate)  -- 해당지점
			   AND a.CSateDate >= @dSTART_DATE
			   AND a.CSateDate <= @dEND_DATE
			   AND a.CSaleTypeCode = '45'
			 GROUP BY a.CDepartCode, a.CDepartStartDate
			) TModifiedCommas
	 GROUP BY CStdDepartCode, CStdDepartStartDate

	-- 개별지도 콤마수 구하기(Only개별지도)
	INSERT INTO TFacilityDailyCount (CDay, CDepartCode, CDepartStartDate, CStudentCode, CType, CFlag, CStartDate, CComer)
	SELECT @pDt, CStdDepartCode, CStdDepartStartDate,  '', 'Tutoring', 'OnlyCommas', @pDt, SUM(case when b.CScCode is null then ISNULL(a.CModifiedCommas, 0) else 0 end) AS COnlyCommas
	  FROM TStudentTutoring a(NOLOCK)
	  left join TStudentCounsel b(nolock)
		on a.CStdDepartCode = b.CScDepartCode and a.CStdCode = b.CScCode and a.CStartDate between b.CStartDate and b.CEndDate
	 WHERE EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CStdDepartCode and CFACILITYStartDate = a.CStdDepartStartDate)  -- 해당지점
	   AND a.CStartDate >= @dSTART_DATE
	   AND a.CStartDate <= @dEND_DATE
	   AND isnull(a.TranYn, 'N') <> 'Y' -- 이관데이터 제외처리조건 추가
	 GROUP BY CStdDepartCode, CStdDepartStartDate

	-- 개별지도 콤마수 구하기(Premium개별지도)
	INSERT INTO TFacilityDailyCount (CDay, CDepartCode, CDepartStartDate, CStudentCode, CType, CFlag, CStartDate, CComer)
	SELECT @pDt, CStdDepartCode, CStdDepartStartDate,  '', 'Tutoring', 'PremiumCommas',	@pDt, SUM(case when b.CScCode is not null then ISNULL(a.CModifiedCommas, 0) else 0 end) AS CPremiumCommas
	  FROM TStudentTutoring a(NOLOCK)
	  left join TStudentCounsel b(nolock)
		on a.CStdDepartCode = b.CScDepartCode and a.CStdCode = b.CScCode and a.CStartDate between b.CStartDate and b.CEndDate
	 WHERE EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CStdDepartCode and CFACILITYStartDate = a.CStdDepartStartDate)  -- 해당지점
	   AND a.CStartDate >= @dSTART_DATE
	   AND a.CStartDate <= @dEND_DATE
	   AND isnull(a.TranYn, 'N') <> 'Y' -- 이관데이터 제외처리조건 추가
	 GROUP BY CStdDepartCode, CStdDepartStartDate

	--************
	-- 매출금액
	--************
	INSERT INTO TFacilityDailyCount (CDay, CDepartCode, CDepartStartDate, CStudentCode, CType, CFlag, CStartDate, CTotalSale, CCounselSale, CTutoringSale)
	SELECT @pDt, a.CBranchCode, a.CBranchStartDate, '', 'Sale', 'Sale', @dSTART_DATE, a.CSalesTotal, a.CSalesCounsel, a.CSalesTutoring
	  FROM TTradeRoyaltyMonth a
	 WHERE a.CRoyaltyMonth = @dSTART_DATE
	   AND  EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CBranchCode and CFACILITYStartDate = a.CBranchStartDate)  -- 해당지점
	   AND a.CRoyaltyStatus = 'Confirm'

	-- 임시테이블 날려주고
	DELETE FROM #dTEMP0

	-- 반복용 일자에 한달 더하기
	SET @dSTART_DATE = DATEADD(Month, 1, @dSTART_DATE)

	--*************
	-- 상담관리월말
	--*************
	INSERT INTO #dTEMP0 (CDay, CDepartCode, CDepartStartDate, CStudentCode, CType, CFlag, CStartDate, CEndDate, CGrade)
	SELECT @pDt, a.CScDepartCode, a.CScDepartStartDate, a.CScCode, 'Counsel', 'End', MAX(a.CStartDate), MAX(a.CEndDate), MAX(a.CGrade)
	  FROM TStudentCounsel a(NOLOCK)
	 WHERE EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CScDepartCode and CFACILITYStartDate = a.CScDepartStartDate)  -- 해당지점
	   -- 2016.03.10. 이전달 말일자로 끝나는 데이터도 월초에 포함시키도록 한다.
	   AND a.CStartDate < @dSTART_DATE AND a.CEndDate >= CONVERT(VARCHAR, DATEADD(DD, -1, @dSTART_DATE), 23)
	   AND a.CRegistType <> 'Refund' -- 환불은 제외처리
	 GROUP BY a.CScDepartCode, a.CScDepartStartDate, a.CScCode

	-- 월말에 종료처리하고 7일 이내 등록한 학생을 월초 회원으로 집계(월초집계에 누락되는 학생 보정)
	INSERT INTO TFacilityDailyCount(CDay, CDepartCode, CDepartStartDate, CStudentCode, CType, CFlag, CStartDate, CEndDate, CGrade)
	SELECT @pDt, a.CScDepartCode, a.CScDepartStartDate, a.CScCode, 'Counsel', 'End', MAX(a.CStartDate), MAX(a.CEndDate), MAX(a.CGrade)
	  FROM TStudentCounsel a(NOLOCK)
	 WHERE EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CScDepartCode and CFACILITYStartDate = a.CScDepartStartDate)  -- 해당지점
	   AND a.CStartDate >= @dSTART_DATE					-- 시작일이 1일보다 크거나 같고
	   AND a.CStartDate <= DATEADD(dd, 6, @dSTART_DATE)	-- 시작일이 7일보다 작거나 같은거(6을 해준거 1일을 먹고 들어가기 때문임돠)
		-- 현재등록 이전 데이터가 있으며 마지막일자가 시작일보다 7일 이전
	   AND (SELECT COUNT(CScCode) FROM TStudentCounsel(NOLOCK) WHERE CScDepartCode = a.CScDepartCode and CScCode = a.CScCode AND CNo < a.CNo AND CEndDate >= DATEADD(dd, -7, a.CStartDate) ) > 0
	   AND a.CRegistType NOT IN ('Newcomer', 'Refund') -- 환불은 제외처리
	   -- 데이터가 이상한게 많아..리스트에 있는 학생을 제외하는 조건 하나 더 추가
	   AND NOT EXISTS  (SELECT 1 FROM #dTEMP0 where CDepartCode = a.CScDepartCode and CDepartStartDate = a.CScDepartStartDate and CStudentCode = a.CScCode)
	 GROUP BY a.CScDepartCode, a.CScDepartStartDate, a.CScCode

	-- 먼저 구해뒀던 월말회원을 추가
	INSERT INTO TFacilityDailyCount(CDay, CDepartCode, CDepartStartDate, CStudentCode, CType, CFlag, CStartDate, CEndDate, CGrade)
	SELECT CDay, CDepartCode, CDepartStartDate, CStudentCode, CType, CFlag, CStartDate, CEndDate, CGrade
	  FROM #dTEMP0

	--*************
	-- 개별지도월말
	--*************
	INSERT INTO TFacilityDailyCount(CDay, CDepartCode, CDepartStartDate, CStudentCode, CStartDate, CType, CFlag, CGrade)
	SELECT @pDt, 
			a.CStdDepartCode,
			a.CStdDepartStartDate,
			a.CStdCode, 
			@dSTART_DATE,--a.CStartDate,
			'Tutoring', 'End',
			d.CGrade
	  FROM TStudentTutoring a(NOLOCK)
	 INNER JOIN ( -- 기준데이터(시작일보다 작은날자의 신규나 복회 데이터)
						SELECT CStdDepartCode, CStdCode, MAX(CNo) AS CNo
						  FROM TStudentTutoring sub(NOLOCK)
						 WHERE EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = sub.CStdDepartCode and CFACILITYStartDate = sub.CStdDepartStartDate)
						   AND CRegistType IN ('Newcomer','Returning')
						   AND sub.CStartDate < @dSTART_DATE 
						   AND isnull(TranYn, 'N') <> 'Y' -- 2018.04.05. 이관데이터 제외처리조건 추가
							GROUP BY CStdDepartCode, CStdCode
					) b 
			ON a.CStdDepartCode = b.CStdDepartCode AND a.CStdCode = b.CStdCode AND a.CNo = b.CNo
	  LEFT JOIN ( -- 종료데이터(시작일보다 작은일자의 종료이력)
						SELECT CStdBranchCode, CStdCode, MAX(CHistoryDate) AS CHistoryDate
						  FROM TStudentHistory sub2(NOLOCK)
						 WHERE EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = sub2.CStdBranchCode and CFACILITYStartDate = sub2.CStdBranchStartDate)  -- 해당지점
						   AND sub2.CRegistType = 'Retire' AND sub2.CStudentCounselType = 'Tutoring'
						   AND sub2.CHistoryDate < @dSTART_DATE
							GROUP BY CStdBranchCode, CStdCode
					) c
			ON a.CStdDepartCode = c.CStdBranchCode AND a.CStdCode = c.CStdCode
	  -- 학년을 가져오는 조인절 추가
	  LEFT JOIN (
					SELECT sub2.CStdDepartCode, sub2.CStdDepartStartDate, sub2.CStdCode, sub2.CGrade
					  FROM TStudentTutoring sub2
					 INNER JOIN (
									SELECT aa.CStdDepartCode, aa.CStdDepartStartDate, aa.CStdCode, MAX(aa.CNo) AS CNo
									  FROM TStudentTutoring aa(NOLOCK)
									 WHERE EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = aa.CStdDepartCode and CFACILITYStartDate = aa.CStdDepartStartDate)
									   AND aa.CStartDate < @dSTART_DATE 
									 GROUP BY aa.CStdDepartCode, aa.CStdDepartStartDate, aa.CStdCode
								) sub3
						ON sub2.CStdDepartCode = sub3.CStdDepartCode AND sub2.CStdDepartStartDate = sub3.CStdDepartStartDate AND sub2.CStdCode = sub3.CStdCode AND sub2.CNo = sub3.CNo
				) d
			ON a.CStdDepartCode = d.CStdDepartCode AND a.CStdDepartStartDate = d.CStdDepartStartDate AND a.CStdCode = d.CStdCode
	WHERE EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CStdDepartCode and CFACILITYStartDate = a.CStdDepartStartDate)
	-- 종료이력이 null이거나 관리시작일보다 종료일이 작은 대상만 걸러준다
	   AND (c.CHistoryDate IS NULL OR a.CStartDate > c.CHistoryDate)
	   AND isnull(a.TranYn, 'N') <> 'Y' -- 2018.04.05. 이관데이터 제외처리조건 추가
	
	-- 개별지도 미연장 학생 구하기
	INSERT INTO TFacilityDailyCount(CDay, CDepartCode, CDepartStartDate, CStudentCode, CStartDate, CType, CFlag, CGrade)
	SELECT @pDt, a.CDepartCode, a.CDepartStartDate, a.CStudentCode, a.CStartDate, 'Tutoring', 'NotReg', a.CGrade
	  FROM TFacilityDailyCount a(NOLOCK)      -- 월초학생리스트
	 INNER JOIN TFacilityDailyCount b(NOLOCK) -- 월말학생리스트
		ON a.CDay = b.CDay AND a.CDepartCode = b.CDepartCode and a.CDepartStartDate = b.CDepartStartDate AND a.CStudentCode = b.CStudentCode AND a.CType = b.CType AND b.CFlag = 'End'
	 WHERE EXISTS (SELECT 1 FROM @FACILITY WHERE CFACILITY = a.CDepartCode and CFACILITYStartDate = a.CDepartStartDate)
	   AND a.CDay =@pDt
	   AND a.CType = 'Tutoring' AND a.CFlag = 'Begin'    -- 개별지도 월초학생
	   AND (SELECT COUNT(1) FROM TStudentTutoring(NOLOCK) WHERE CStdDepartCode = a.CDepartCode AND CStdCode = a.CStudentCode AND CStartDate BETWEEN a.CStartDate AND a.CEndDate AND CRegistType <> 'Refund') = 0
	
	SELECT 'OK' as Messege
END

GO


CREATE PROCEDURE [dbo].[SP_WB_BranchWork]
	@case			VARCHAR(30),
	@branchCode     NVARCHAR(30) = '',
	@startDate		NVARCHAR(10) = '',
	@endDate		NVARCHAR(10) = '',
	@staffId        NVARCHAR(30) = '',
	@startMonth     NVARCHAR(7) = ''
AS
BEGIN
	if @case = 'GetHRMDataByStaffId'		 goto GetHRMDataByStaffId	 -- 지정된 매니저의 해당분기내의 학생관리이력
	if @case = 'GetStudentListByBranch'		 goto GetStudentListByBranch -- 등원중이거나 종료된지 1년미만인 학생리스트
	if @case = 'GetMemberListByBranch'		 goto GetMemberListByBranch  -- 지점에 근무이력이 있는 모든 멤버들의 리스트 + 최종직급

	select code='ER', mfg='정의되지 않은 분기코드(' + @Case + ')입니다.'
	return
END

/***********************************************************************
지정된 매니저의 해당분기내의 학생관리이력(상담관리, 개별지도)를 가져온다.
@staffId : 매니저코드
@startMonth: 분기의 시작월 // ex) '2018-01' (으로부터 6개월)

2019-09-03 이재근 (feat.김길명)
************************************************************************/
GetHRMDataByStaffId:
BEGIN

-- declare @staffId varchar(50) = '02698', @startMonth varchar(7) = '2018-11'
-- select CName0 from TStaff where CStaffId = @CManager
declare @staffName varchar(50) = (select CName0 from TStaff (NOLOCK) where CStaffId = @staffId)

DECLARE @CstartM int = RIGHT(@startMonth, 2)

declare @tmp table(CCode varchar(50))

	insert into @tmp
	select CScCode
	from TStudentCounsel a (NOLOCK)
	where CManager = @staffId
	and CStartDate >= @startMonth + '-01' 
	and CStartDate < dateadd(m, 6, convert(date, @startMonth + '-01'))
	and CRegistType <> 'Refund'
	group by CScCode

	delete a
	from @tmp a 
	where CCode in (
	select CStdCode
	from TStudentTutoring (NOLOCK)
	where CManager = @staffId
	and CStartDate >= @startMonth + '-01' 
	and CStartDate < dateadd(m, 6, convert(date, @startMonth + '-01'))
	and CRegistType <> 'Refund'
	)

	select CScDepartCode, (select COpenName0 from TFacility (NOLOCK) where CDepartCode = CScDepartCode) AS branchName, CScDepartStartDate, @staffId, @staffName, CScCode, CName, CType
	,isnull(max(case when CMm = @CstartM then CAttendType end), 'N') as C1
	,isnull(max(case when CMm = @CstartM + 1 then CAttendType end), 'N') as C2
	,isnull(max(case when CMm = @CstartM + 2 then CAttendType end), 'N') as C3
	,isnull(max(case when CMm = @CstartM + 3 then CAttendType end), 'N') as C4
	,isnull(max(case when CMm = @CstartM + 4 then CAttendType end), 'N') as C5
	,isnull(max(case when CMm = @CstartM + 5 then CAttendType end), 'N') as C6
	,0 as T1, 0 as T2, 0 as T3, 0 as T4, 0 as T5, 0 as T6
	,'' as M1, '' as M2, '' as M3, '' as M4, '' as M5, '' as M6
	,'' as MN1, '' as MN2, '' as MN3, '' as MN4, '' as MN5, '' as MN6
	from (
	select a.CScDepartCode, a.CScDepartStartDate, a.CScCode, 'Counsel' as CType, a.CNo, substring(a.CAttendType, 2, 1) as CAttendType, a.CManager, month(a.CStartDate) as CMm
	from TStudentCounsel a (NOLOCK)
	where a.CManager = @staffId
	and a.CStartDate >= @startMonth + '-01' 
	and a.CStartDate < dateadd(m, 6, convert(date, @startMonth + '-01'))
	and CRegistType <> 'Refund'
	) t1 
	inner join TStudent t2 (NOLOCK) on t1.CScCode = t2.CCode and substring(t2.CBranchCode, 1, 3) in ('EPX','ECH')
	group by CScDepartCode, CScDepartStartDate, CScCode, CName, CType

	union all
	
	select CStdDepartCode, (select COpenName0 from TFacility (NOLOCK) where CDepartCode = CStdDepartCode) AS branchName, CStdDepartStartDate, @staffId, @staffName, CStdCode, CName, CType
	,'' as C1, '' as C2, '' as C3, '' as T4, '' as T5, '' as T6
	,isnull(sum(case when CMm = @CstartM then CPayCommas end), 0) as T1
	,isnull(sum(case when CMm = @CstartM + 1 then CPayCommas end), 0) as T2
	,isnull(sum(case when CMm = @CstartM + 2 then CPayCommas end), 0) as T3
	,isnull(sum(case when CMm = @CstartM + 3 then CPayCommas end), 0) as T4
	,isnull(sum(case when CMm = @CstartM + 4 then CPayCommas end), 0) as T5
	,isnull(sum(case when CMm = @CstartM + 5 then CPayCommas end), 0) as T6
	,'' as M1, '' as M2, '' as M3, '' as M4, '' as M5, '' as M6
	,'' as MN1, '' as MN2, '' as MN3, '' as MN4, '' as MN5, '' as MN6
	from (
	select a.CStdDepartCode, a.CStdDepartStartDate, a.CStdCode, 'Tutoring' as CType, a.CNo, a.CPayCommas, a.CManager, month(a.CStartDate) as CMm
	from TStudentTutoring a (NOLOCK)
	where a.CManager = @staffId
	and a.CStartDate >= @startMonth + '-01' 
	and a.CStartDate < dateadd(m, 6, convert(date, @startMonth + '-01'))
	and CRegistType <> 'Refund'
	) t1
	inner join TStudent t2 (NOLOCK) on t1.CStdCode = t2.CCode and substring(t2.CBranchCode, 1, 3) in ('EPX','ECH')
	group by CStdDepartCode, CStdDepartStartDate, CStdCode, CName, CType

	union all
	
	select CStdDepartCode, (select COpenName0 from TFacility (NOLOCK) where CDepartCode = CStdDepartCode) AS branchName, CStdDepartStartDate, @staffId, @staffName, CStdCode, CName, CType
	,'' as C1, '' as C2, '' as C3, '' as T4, '' as T5, '' as T6
	,isnull(sum(case when CMm = @CstartM then CPayCommas end), 0) as T1
	,isnull(sum(case when CMm = @CstartM + 1 then CPayCommas end), 0) as T2
	,isnull(sum(case when CMm = @CstartM + 2 then CPayCommas end), 0) as T3
	,isnull(sum(case when CMm = @CstartM + 3 then CPayCommas end), 0) as T4
	,isnull(sum(case when CMm = @CstartM + 4 then CPayCommas end), 0) as T5
	,isnull(sum(case when CMm = @CstartM + 5 then CPayCommas end), 0) as T6
	,isnull(max(case when CMm = @CstartM then CManager end), '') as M1
	,isnull(max(case when CMm = @CstartM + 1 then CManager end), '') as M2
	,isnull(max(case when CMm = @CstartM + 2 then CManager end), '') as M3
	,isnull(max(case when CMm = @CstartM + 3 then CManager end), '') as M4
	,isnull(max(case when CMm = @CstartM + 4 then CManager end), '') as M5
	,isnull(max(case when CMm = @CstartM + 5 then CManager end), '') as M6
	,isnull((SELECT CName0 FROM TStaff x (NOLOCK) WHERE x.CStaffId = isnull(max(case when CMm = 1 then CManager END), '')), '') AS M1_Name
	,isnull((SELECT CName0 FROM TStaff x (NOLOCK) WHERE x.CStaffId = isnull(max(case when CMm = 2 then CManager end), '')), '') AS M2_Name
	,isnull((SELECT CName0 FROM TStaff x (NOLOCK) WHERE x.CStaffId = isnull(max(case when CMm = 3 then CManager end), '')), '') AS M3_Name
	,isnull((SELECT CName0 FROM TStaff x (NOLOCK) WHERE x.CStaffId = isnull(max(case when CMm = 4 then CManager end), '')), '') AS M4_Name
	,isnull((SELECT CName0 FROM TStaff x (NOLOCK) WHERE x.CStaffId = isnull(max(case when CMm = 5 then CManager end), '')), '') AS M5_Name
	,isnull((SELECT CName0 FROM TStaff x (NOLOCK) WHERE x.CStaffId = isnull(max(case when CMm = 6 then CManager end), '')), '') AS M6_Name
	from (
	select a.CStdDepartCode, a.CStdDepartStartDate, a.CStdCode, 'Tutoring2' as CType, a.CNo, a.CPayCommas, a.CManager, month(a.CStartDate) as CMm
	from TStudentTutoring a (NOLOCK)
	where a.CStdCode in (select * from @tmp)
	and a.CStartDate >= @startMonth + '-01' 
	and a.CStartDate < dateadd(m, 6, convert(date, @startMonth + '-01'))
	and CRegistType <> 'Refund'
	) t1
	inner join TStudent t2 (NOLOCK) on t1.CStdCode = t2.CCode and substring(t2.CBranchCode, 1, 3) in ('EPX','ECH')
	group by CStdDepartCode, CStdDepartStartDate, CStdCode, CName, CType

	return
END

/***********************************************************************
선택된 지점의 등원중이거나 종료된지 1년 미만인 학생리스트를 추출한다
@branchCode : 지점코드

2019-10-02 이재근
************************************************************************/
GetStudentListByBranch:
BEGIN
select 
		 a.CBranchCode as "지점코드"
		,b.COpenName0 as "지점명"
		,a.CCode as "학생코드"
		,a.CName as "학생명"
		,a.CSex as "성별"
		,a.CSchoolCode as "학교코드"
		,c.CName as "학교명"
		,case a.CGrade 
			when 'g1' then '초1'
			when 'g2' then '초2'
			when 'g3' then '초3'
			when 'g4' then '초4'
			when 'g5' then '초5'
			when 'g6' then '초6'
			when 'g7' then '중1'
			when 'g8' then '중2'
			when 'g9' then '중3'
			when 'g10' then '고1'
			when 'g11' then '고2'
			when 'g12' then '고3'
			when 'g13' then '(중)재수'
			when 'g14' then '(중)검정'
			when 'g15' then '(고)재수'
			when 'g16' then '(고)검정'
		 end as "학년"
		,a.CEmailStudent as "이메일"
		,(case when a.CPhoneMother IS null then a.CPhoneFather else a.CPhoneMother end) as "부모님전화번호"
		,a.CStudentStatus as studentStatus
		,case a.CStudentStatus
				when 'Regist' then '재원' 
				when 'Retire' then '종료' 
				when 'Pause'  then '휴원' 
			end as "학생상태"
		,a.CNameFather as "아버지성함"
		,a.CPhoneFather as "아버지핸드폰"
		,a.CNameMother as "어머니성함"
		,a.CPhoneMother as "어머니핸드폰"
		,a.CPhoneStudent as "학생핸드폰"
		,a.CReentryPossibility as "재등록가능성"
		,a.CEndStatus as "상담관리종료"
		,a.CTutorEndStatus as "개별지도종료"
		,a.CEndDay as "상담관리종료일"
		,a.CTutorEndDay as "개별지도종료일"
		,a.CPhoneHome as "집전화번호"
		,a.CAddress1Home as "집주소"
		,a.CVltType as vltType
		,d.CManageCommas as manageCommas
		,f1.CName0 as "개별지도매니저"
		,e.CManageDays as manageDays
		,f2.CName0 as "상담관리매니저"
	from TStudent a (NOLOCK)
	left join TFacility b (NOLOCK) on a.CBranchCode = b.CDepartCode and a.CBranchStartDate = b.CDepartStartDate
	left join TSchool   c (NOLOCK) on a.CSchoolCode = c.CCode
	left join TStudentTutoring d (NOLOCK) on a.CBranchCode = d.CStdDepartCode and a.CBranchStartDate = d.CStdDepartStartDate and a.CCode = d.CStdCode and a.CLastTutoringNo = d.CNo
	left join TStudentCounsel  e (NOLOCK) on a.CBranchCode = e.CScDepartCode and a.CBranchStartDate = e.CScDepartStartDate and a.CCode = e.CScCode and a.CLastCounselNo = e.CNo
	left join TStaff f1 (NOLOCK) on d.CManager = f1.CStaffId
	left join TStaff f2 (NOLOCK) on e.CManager = f2.CStaffId
	--left join TStudentSchool c on a.CBranchCode = c.CBranchCode and a.CBranchStartDate = c.CBranchStartDate and a.CSchoolCode = c.CSchoolCode
	WHERE 1 = 1
--		and a.CStudentStatus = @CStudentStatus
		AND a.CBranchCode = @branchCode
		-- 등원중이거나 1년이내 종료한 학생
		AND ((a.CEndDay IS NULL OR a.CEndDay > DATEADD(YEAR, -1, GETDATE()))
			OR (a.CTutorEndDay IS NULL OR a.CTutorEndDay > DATEADD(YEAR, -1, GETDATE())))
		AND CStudentStatus NOT IN ('Visit', 'Call')
	order by a.CStudentStatus, a.CBranchCode, a.CEndDay desc, a.CTutorEndDay desc

	return
END


/***********************************************************************
지점에 근무이력이 있는 모든 멤버들의 리스트 + 최종직급
@branchCode : 지점코드

2019-10-08 이재근
************************************************************************/
GetMemberListByBranch:
BEGIN
	
	select t2.COpenName0 as CDepartName
     , t1.CDepartCode
     , t1.CDepartStartDate
	 , t1.CHistoryStartDate
	 , t1.CHistoryEndDate
	 , t1.CName0 as CStaffName
	 , t1.CStaffNo
	 , t1.CJoinDate
	 , t1.COutDate
	 , t1.CLevelType
	 , t1.CLevelCode
	 , t3.CName0 as CLevelName
	 , t1.CStartDate -- 해당직급의 시작일
	 , t1.CEndDate -- 해당직급의 종료일
  from (
		select a.CDepartCode, a.CDepartStartDate, a.CHistoryStartDate, a.CHistoryEndDate,
			   b.CName0, b.CStaffNo, b.CJoinDate, b.COutDate, c.CLevelType, c.CLevelCode,
			   c.CStartDate, c.CEndDate
		  from TStaffDepartHistory a (NOLOCK)
		  left join TStaff b (NOLOCK)
			on a.CStaffId = b.CStaffId
		  inner join (
						select *
						  from TStaffLevelHistory (NOLOCK)
						 where CMain = 1 --메인
						   -- and CEndDate = '2200-12-31' -- 현재의 직급
						   and CLevelType = 'Rank' -- 직급
						   and left(CLevelCode, 2) in ('L1','L2','L3','L4','L5','L6')
					 ) c
			on a.CStaffId = c.CStaffId
		 where 1 =1
		   -- a.CMain = 1 --메인
		   -- and b.COutDate        >= '2019-01-01' -- 퇴직일자 1/1일 이후인 대상
		   -- and a.CHistoryEndDate >= '2019-01-01' -- 지점 종료이력이 1/1일 이후
		   and a.CDepartCode = @branchCode
		) T1
  left join TFacility   T2 (NOLOCK) on t1.CDepartCode = t2.CDepartCode and T1.CDepartStartDate = t2.CDepartStartDate
  left join TStaffLevel T3 (NOLOCK) on t1.CLevelType = t3.CLevelType and T1.CLevelCode = t3.CLevelCode

  return
END

GO

--/*******************************************************************************************************
--/* 단위업무 : 검사정보 이관
--/* 작 성 자 : 김 길 명
--/* 작 성 일 : 2014.03.08
--/* 작성내용 : 
--/* 수 정 일 :	
--/* 수 정 자 :	
--/* 수정내용 : [TTestInfo], [TTestCT], [TTestMBTI], [TTestSurvey]
--/* 비    고 :	
--/* 실행코드 : EXEC SP_TTestInfo_Create '' , '2014-01-01'
--/*******************************************************************************************************
CREATE PROCEDURE [dbo].[SP_TTestInfo_Create](  
	@pCBranchCode			VARCHAR(20), -- 지점코드
	@pCBranchStartDate	DATETIME		-- 지점시작일자
)                                                                                      
AS                                                                                                  

DECLARE @지점코드    VARCHAR(50)
DECLARE @CBranchCode VARCHAR(50)
DECLARE @CBranchStartDate DATETIME
DECLARE @CStdBranchCode VARCHAR(50)
DECLARE @CStdBranchStartDate DATETIME
DECLARE @학생코드    INT
DECLARE @CNo  INT
DECLARE @성별            VARCHAR(50)
DECLARE @나이            INT
DECLARE @학년            VARCHAR(50)
DECLARE @검사일자        DATETIME
DECLARE @MBTI1           VARCHAR(50)
DECLARE @MBTI2           VARCHAR(50)
DECLARE @MBTI3           VARCHAR(50)
DECLARE @MBTI4           VARCHAR(50)
DECLARE @MBTI5           VARCHAR(50)
DECLARE @MBTI6           VARCHAR(50)
DECLARE @MBTI7           VARCHAR(50)
DECLARE @MBTI8           VARCHAR(50)
DECLARE @MMTIC1          VARCHAR(50)
DECLARE @MMTIC2          VARCHAR(50)
DECLARE @MMTIC3          VARCHAR(50)
DECLARE @MMTIC4          VARCHAR(50)
DECLARE @MBTI9           VARCHAR(50)
DECLARE @MBTI10          VARCHAR(50)
DECLARE @MBTI11          VARCHAR(50)
DECLARE @MBTI12          VARCHAR(50)
DECLARE @MBTI13          VARCHAR(50)
DECLARE @MBTI14          VARCHAR(50)
DECLARE @MBTI15          VARCHAR(50)
DECLARE @MBTI16          VARCHAR(50)
DECLARE @CT학년          INT
DECLARE @CT분기          INT
DECLARE @CT1             INT
DECLARE @CT2             INT
DECLARE @CT3             INT
DECLARE @CT4             INT
DECLARE @CT5             INT
DECLARE @CT6             INT
DECLARE @CT7             INT
DECLARE @CT8             INT
DECLARE @CT9             INT
DECLARE @CT10            INT
DECLARE @CT11            INT
DECLARE @CT12            INT
DECLARE @CT13            INT
DECLARE @CT14            INT
DECLARE @CT15            INT
DECLARE @CT16            INT
DECLARE @CT17            INT
DECLARE @CT18            INT
DECLARE @CT19            INT
DECLARE @CT20            INT
DECLARE @CT21            INT
DECLARE @CT22            INT
DECLARE @CT23            INT
DECLARE @CT24            INT
DECLARE @CT25            INT
DECLARE @CT26            INT
DECLARE @CT27            INT
DECLARE @CT28            INT
DECLARE @CT29            INT
DECLARE @CT30            INT
DECLARE @CT31            INT
DECLARE @CT32            INT
DECLARE @CT33            INT
DECLARE @CT34            INT
DECLARE @CT35            INT
DECLARE @CT36            INT
DECLARE @CT37            INT
DECLARE @CT38            INT
DECLARE @CT39            INT
DECLARE @CT40            INT
DECLARE @CT41            INT
DECLARE @CT42            INT
DECLARE @CT43            INT
DECLARE @CT44            INT
DECLARE @CT45            INT
DECLARE @CT46            INT
DECLARE @CT47            INT
DECLARE @CT48            INT
DECLARE @CT49            INT
DECLARE @CT50            INT
DECLARE @CT51            INT
DECLARE @CT52            INT
DECLARE @CT53            INT
DECLARE @CT54            INT
DECLARE @CT55            INT
DECLARE @CT56            INT
DECLARE @CT57            INT
DECLARE @CT58            INT
DECLARE @CT59            INT
DECLARE @CT60            INT
DECLARE @CT61            INT
DECLARE @CT62            INT
DECLARE @CT63            INT
DECLARE @CT64            INT
DECLARE @CT65            INT
DECLARE @CT66            INT
DECLARE @CT67            INT
DECLARE @CT68            INT
DECLARE @CT69            INT
DECLARE @CT70            INT
DECLARE @CT71            INT
DECLARE @CT72            INT
DECLARE @CT73            INT
DECLARE @CT74            INT
DECLARE @CT75            INT
DECLARE @CT76            INT
DECLARE @CT77            INT
DECLARE @CT78            INT
DECLARE @CT79            INT
DECLARE @CT80            INT
DECLARE @설문1           INT
DECLARE @설문2           INT
DECLARE @설문3           INT
DECLARE @설문4           INT
DECLARE @설문5           INT
DECLARE @설문6           INT
DECLARE @설문7           INT
DECLARE @설문8           INT
DECLARE @설문9           INT
DECLARE @설문10          INT
DECLARE @설문11          INT
DECLARE @설문12          INT
DECLARE @설문13          INT
DECLARE @설문14          INT
DECLARE @설문15          INT
DECLARE @설문16          INT
DECLARE @설문17          INT
DECLARE @설문18          INT
DECLARE @설문19          INT
DECLARE @설문20          INT
DECLARE @설문21          INT
DECLARE @설문22          INT
DECLARE @설문23          INT
DECLARE @설문24          INT
DECLARE @설문25          INT
DECLARE @설문26          INT
DECLARE @설문27          INT
DECLARE @설문28          INT
DECLARE @설문29          INT
DECLARE @설문30          INT
DECLARE @설문31          INT
DECLARE @설문32          INT
DECLARE @설문33          INT
DECLARE @설문34          INT
DECLARE @설문35          INT
DECLARE @설문36          INT
DECLARE @설문37          INT
DECLARE @설문38          INT
DECLARE @설문39          INT
DECLARE @설문40          INT
DECLARE @설문41          INT
DECLARE @설문42          INT
DECLARE @설문43          INT
DECLARE @설문44          INT
DECLARE @설문45          INT
DECLARE @설문46          INT
DECLARE @설문47          INT
DECLARE @설문48          INT
DECLARE @설문49          INT
DECLARE @설문50          INT
DECLARE @설문51          INT
DECLARE @설문52          INT
DECLARE @설문53          INT
DECLARE @설문54          INT
DECLARE @설문55          INT
DECLARE @설문56          INT
DECLARE @설문57          INT
DECLARE @설문58          INT
DECLARE @설문59          INT
DECLARE @설문60          INT
DECLARE @설문61          INT
DECLARE @설문62          INT
DECLARE @설문63          INT
DECLARE @설문64          INT
DECLARE @설문65          INT
DECLARE @설문66          INT
DECLARE @설문67          INT
DECLARE @설문68          INT
DECLARE @설문69          INT
DECLARE @설문70          INT
DECLARE @설문71          INT
DECLARE @설문72          INT
DECLARE @설문73          INT
DECLARE @설문74          INT
DECLARE @설문75          INT
DECLARE @설문76          INT
DECLARE @설문77          INT
DECLARE @설문78          INT
DECLARE @설문79          INT
DECLARE @설문80          INT
DECLARE @설문81          INT
DECLARE @설문82          INT
DECLARE @설문83          INT
DECLARE @설문84          INT
DECLARE @설문85          INT
DECLARE @설문86          INT
DECLARE @설문87          INT
DECLARE @설문88          INT
DECLARE @설문89          INT
DECLARE @설문90          INT
DECLARE @설문91          INT
DECLARE @설문92          INT
DECLARE @설문93          INT
DECLARE @설문94          INT
DECLARE @설문95          INT
DECLARE @설문96          INT
DECLARE @설문97          INT
DECLARE @설문98          INT
DECLARE @설문99          INT
DECLARE @설문100         INT
DECLARE @설문101         INT
DECLARE @설문102         INT
DECLARE @설문103         INT
DECLARE @설문104         INT
DECLARE @설문105         INT
DECLARE @설문106         INT
DECLARE @설문107         INT
DECLARE @설문108         INT
DECLARE @설문109         INT
DECLARE @설문110         INT
DECLARE @설문111         INT
DECLARE @설문112         INT
DECLARE @설문113         INT
DECLARE @설문114         INT
DECLARE @설문115         INT
DECLARE @설문116         INT
DECLARE @설문117         INT
DECLARE @설문118         INT
DECLARE @설문119         INT
DECLARE @설문120         INT
DECLARE @설문121         INT
DECLARE @설문122         INT
DECLARE @설문123         INT
DECLARE @설문124         INT
DECLARE @설문125         INT
DECLARE @설문126         INT
DECLARE @설문127         INT
DECLARE @설문128         INT
DECLARE @설문129         INT
DECLARE @설문130         INT
DECLARE @설문131         INT
DECLARE @설문132         INT
DECLARE @설문133         INT
DECLARE @설문134         INT
DECLARE @설문135         INT
DECLARE @설문136         INT
DECLARE @설문137         INT
DECLARE @설문138         INT
DECLARE @설문139         INT
DECLARE @설문140         INT
DECLARE @설문141         INT
DECLARE @설문142         INT
DECLARE @설문143         INT
DECLARE @설문144         INT
DECLARE @설문145         INT
DECLARE @설문146         INT
DECLARE @설문147         INT
DECLARE @설문148         INT
DECLARE @설문149         INT
DECLARE @설문150         INT
DECLARE @설문151         INT
DECLARE @설문152         INT
DECLARE @설문153         INT
DECLARE @설문154         INT
DECLARE @설문155         INT
DECLARE @설문156         INT
DECLARE @설문157         INT
DECLARE @설문158         INT
DECLARE @설문159         INT
DECLARE @설문160         INT
DECLARE @설문161         INT
DECLARE @설문162         INT
DECLARE @설문163         INT
DECLARE @설문164         INT
DECLARE @설문165         INT
DECLARE @설문166         INT
DECLARE @설문167         INT
DECLARE @설문168         INT
DECLARE @설문169         INT
DECLARE @설문170         INT
DECLARE @설문171         INT
DECLARE @설문172         INT
DECLARE @설문173         INT
DECLARE @설문174         INT
DECLARE @설문175         INT
DECLARE @설문176         INT
DECLARE @설문177         INT
DECLARE @설문178         INT
DECLARE @설문179         INT
DECLARE @설문180         INT
DECLARE @설문181         INT
DECLARE @설문182         INT
DECLARE @설문183         INT
DECLARE @설문184         INT
DECLARE @설문185         INT
DECLARE @설문186         INT
DECLARE @설문187         INT
DECLARE @설문188         INT
DECLARE @설문189         INT
DECLARE @설문190         INT
DECLARE @설문191         INT
DECLARE @설문192         INT
DECLARE @설문193         INT
DECLARE @설문194         INT
DECLARE @설문195         INT
DECLARE @설문196         INT
DECLARE @설문197         INT
DECLARE @설문198         INT
DECLARE @설문199         INT
DECLARE @설문200         INT
DECLARE @설문201         INT
DECLARE @설문202         INT
DECLARE @설문203         INT
DECLARE @설문204         INT
DECLARE @설문205         INT
DECLARE @설문206         INT
DECLARE @설문207         INT
DECLARE @설문208         INT
DECLARE @설문209         INT
DECLARE @설문210         INT
DECLARE @설문211         INT
DECLARE @설문212         INT
DECLARE @설문213         INT
DECLARE @설문214         INT
DECLARE @설문215         INT
DECLARE @설문216         INT
DECLARE @설문217         INT
DECLARE @설문218         INT
DECLARE @설문219         INT
DECLARE @설문220         INT
DECLARE @설문221         INT
DECLARE @설문222         INT
DECLARE @설문223         INT
DECLARE @설문224         INT
DECLARE @설문225         INT
DECLARE @설문226         INT
DECLARE @설문227         INT
DECLARE @설문228         INT
DECLARE @설문229         INT
DECLARE @설문230         INT
DECLARE @설문231         INT
DECLARE @설문232         INT
DECLARE @설문233         INT
DECLARE @설문234         INT
DECLARE @설문235         INT
DECLARE @설문236         INT
DECLARE @설문237         INT
DECLARE @설문238         INT
DECLARE @설문239         INT
DECLARE @설문240         INT
DECLARE @설문241         INT
DECLARE @설문242         INT
DECLARE @설문243         INT
DECLARE @설문244         INT
DECLARE @설문245         INT
DECLARE @설문246         INT
DECLARE @설문247         INT
DECLARE @설문248         INT
DECLARE @설문249         INT

DECLARE @CNT INT
DECLARE @CMbtiStatus  VARCHAR(20)
DECLARE @CMbtiType    VARCHAR(20)
DECLARE @CCtStatus	VARCHAR(20)
DECLARE @CSurveyStatus VARCHAR(20)
BEGIN TRY
	
	BEGIN TRAN

	-- 커서생성
	DECLARE CURSOR1 CURSOR FOR
	SELECT [지점코드(신)]
	  ,T3.[CBranchCode]
	  ,T3.[CBranchStartDate]
	  ,T2.[CDepartCode]
	  ,T2.[CDepartStartDate]
      ,[학생코드(신)]
      ,[성별]
      ,[나이]
      ,[학년]
      ,[검사일자]
      ,[MBTI1]
      ,[MBTI2]
      ,[MBTI3]
      ,[MBTI4]
      ,[MBTI5]
      ,[MBTI6]
      ,[MBTI7]
      ,[MBTI8]
      ,[MMTIC1]
      ,[MMTIC2]
      ,[MMTIC3]
      ,[MMTIC4]
      ,[MBTI9]
      ,[MBTI10]
      ,[MBTI11]
      ,[MBTI12]
      ,[MBTI13]
      ,[MBTI14]
      ,[MBTI15]
      ,[MBTI16]
      ,[CT학년]
      ,[CT분기]
      ,[CT1]
      ,[CT2]
      ,[CT3]
      ,[CT4]
      ,[CT5]
      ,[CT6]
      ,[CT7]
      ,[CT8]
      ,[CT9]
      ,[CT10]
      ,[CT11]
      ,[CT12]
      ,[CT13]
      ,[CT14]
      ,[CT15]
      ,[CT16]
      ,[CT17]
      ,[CT18]
      ,[CT19]
      ,[CT20]
      ,[CT21]
      ,[CT22]
      ,[CT23]
      ,[CT24]
      ,[CT25]
      ,[CT26]
      ,[CT27]
      ,[CT28]
      ,[CT29]
      ,[CT30]
      ,[CT31]
      ,[CT32]
      ,[CT33]
      ,[CT34]
      ,[CT35]
      ,[CT36]
      ,[CT37]
      ,[CT38]
      ,[CT39]
      ,[CT40]
      ,[CT41]
      ,[CT42]
      ,[CT43]
      ,[CT44]
      ,[CT45]
      ,[CT46]
      ,[CT47]
      ,[CT48]
      ,[CT49]
      ,[CT50]
      ,[CT51]
      ,[CT52]
      ,[CT53]
      ,[CT54]
      ,[CT55]
      ,[CT56]
      ,[CT57]
      ,[CT58]
      ,[CT59]
      ,[CT60]
      ,[CT61]
      ,[CT62]
      ,[CT63]
      ,[CT64]
      ,[CT65]
      ,[CT66]
      ,[CT67]
      ,[CT68]
      ,[CT69]
      ,[CT70]
      ,[CT71]
      ,[CT72]
      ,[CT73]
      ,[CT74]
      ,[CT75]
      ,[CT76]
      ,[CT77]
      ,[CT78]
      ,[CT79]
      ,[CT80]
      ,[설문1]
      ,[설문2]
      ,[설문3]
      ,[설문4]
      ,[설문5]
      ,[설문6]
      ,[설문7]
      ,[설문8]
      ,[설문9]
      ,[설문10]
      ,[설문11]
      ,[설문12]
      ,[설문13]
      ,[설문14]
      ,[설문15]
      ,[설문16]
      ,[설문17]
      ,[설문18]
      ,[설문19]
      ,[설문20]
      ,[설문21]
      ,[설문22]
      ,[설문23]
      ,[설문24]
      ,[설문25]
      ,[설문26]
      ,[설문27]
      ,[설문28]
      ,[설문29]
      ,[설문30]
      ,[설문31]
      ,[설문32]
      ,[설문33]
      ,[설문34]
      ,[설문35]
      ,[설문36]
      ,[설문37]
      ,[설문38]
      ,[설문39]
      ,[설문40]
      ,[설문41]
      ,[설문42]
      ,[설문43]
      ,[설문44]
      ,[설문45]
      ,[설문46]
      ,[설문47]
      ,[설문48]
      ,[설문49]
      ,[설문50]
      ,[설문51]
      ,[설문52]
      ,[설문53]
      ,[설문54]
      ,[설문55]
      ,[설문56]
      ,[설문57]
      ,[설문58]
      ,[설문59]
      ,[설문60]
      ,[설문61]
      ,[설문62]
      ,[설문63]
      ,[설문64]
      ,[설문65]
      ,[설문66]
      ,[설문67]
      ,[설문68]
      ,[설문69]
      ,[설문70]
      ,[설문71]
      ,[설문72]
      ,[설문73]
      ,[설문74]
      ,[설문75]
      ,[설문76]
      ,[설문77]
      ,[설문78]
      ,[설문79]
      ,[설문80]
      ,[설문81]
      ,[설문82]
      ,[설문83]
      ,[설문84]
      ,[설문85]
      ,[설문86]
      ,[설문87]
      ,[설문88]
      ,[설문89]
      ,[설문90]
      ,[설문91]
      ,[설문92]
      ,[설문93]
      ,[설문94]
      ,[설문95]
      ,[설문96]
      ,[설문97]
      ,[설문98]
      ,[설문99]
      ,[설문100]
      ,[설문101]
      ,[설문102]
      ,[설문103]
      ,[설문104]
      ,[설문105]
      ,[설문106]
      ,[설문107]
      ,[설문108]
      ,[설문109]
      ,[설문110]
      ,[설문111]
      ,[설문112]
      ,[설문113]
      ,[설문114]
      ,[설문115]
      ,[설문116]
      ,[설문117]
      ,[설문118]
      ,[설문119]
      ,[설문120]
      ,[설문121]
      ,[설문122]
      ,[설문123]
      ,[설문124]
      ,[설문125]
      ,[설문126]
      ,[설문127]
      ,[설문128]
      ,[설문129]
      ,[설문130]
      ,[설문131]
      ,[설문132]
      ,[설문133]
      ,[설문134]
      ,[설문135]
      ,[설문136]
      ,[설문137]
      ,[설문138]
      ,[설문139]
      ,[설문140]
      ,[설문141]
      ,[설문142]
      ,[설문143]
      ,[설문144]
      ,[설문145]
      ,[설문146]
      ,[설문147]
      ,[설문148]
      ,[설문149]
      ,[설문150]
      ,[설문151]
      ,[설문152]
      ,[설문153]
      ,[설문154]
      ,[설문155]
      ,[설문156]
      ,[설문157]
      ,[설문158]
      ,[설문159]
      ,[설문160]
      ,[설문161]
      ,[설문162]
      ,[설문163]
      ,[설문164]
      ,[설문165]
      ,[설문166]
      ,[설문167]
      ,[설문168]
      ,[설문169]
      ,[설문170]
      ,[설문171]
      ,[설문172]
      ,[설문173]
      ,[설문174]
      ,[설문175]
      ,[설문176]
      ,[설문177]
      ,[설문178]
      ,[설문179]
      ,[설문180]
      ,[설문181]
      ,[설문182]
      ,[설문183]
      ,[설문184]
      ,[설문185]
      ,[설문186]
      ,[설문187]
      ,[설문188]
      ,[설문189]
      ,[설문190]
      ,[설문191]
      ,[설문192]
      ,[설문193]
      ,[설문194]
      ,[설문195]
      ,[설문196]
      ,[설문197]
      ,[설문198]
      ,[설문199]
      ,[설문200]
      ,[설문201]
      ,[설문202]
      ,[설문203]
      ,[설문204]
      ,[설문205]
      ,[설문206]
      ,[설문207]
      ,[설문208]
      ,[설문209]
      ,[설문210]
      ,[설문211]
      ,[설문212]
      ,[설문213]
      ,[설문214]
      ,[설문215]
      ,[설문216]
      ,[설문217]
      ,[설문218]
      ,[설문219]
      ,[설문220]
      ,[설문221]
      ,[설문222]
      ,[설문223]
      ,[설문224]
      ,[설문225]
      ,[설문226]
      ,[설문227]
      ,[설문228]
      ,[설문229]
      ,[설문230]
      ,[설문231]
      ,[설문232]
      ,[설문233]
      ,[설문234]
      ,[설문235]
      ,[설문236]
      ,[설문237]
      ,[설문238]
      ,[설문239]
      ,[설문240]
      ,[설문241]
      ,[설문242]
      ,[설문243]
      ,[설문244]
      ,[설문245]
      ,[설문246]
      ,[설문247]
      ,[설문248]
      ,[설문249]
	  FROM [dbo].[검사통합] T1
	  LEFT JOIN [dbo].[TFacility] T2
	    ON T1.[지점코드(신)] = T2.[CDepartCode]
	  LEFT JOIN [dbo].[TStudent] T3
		ON CONVERT(VARCHAR, T1.[학생코드(신)]) = T3.CCode
 ORDER BY [지점코드(신)], [학생코드(신)], [검사일자]
	
	OPEN CURSOR1

	FETCH NEXT FROM CURSOR1 INTO 
		@지점코드, @CStdBranchCode, @CStdBranchStartDate, @CBranchCode, @CBranchStartDate, @학생코드,@성별,@나이,@학년,@검사일자,@MBTI1,@MBTI2,@MBTI3,@MBTI4,
		@MBTI5,@MBTI6,@MBTI7,@MBTI8,@MMTIC1,@MMTIC2,@MMTIC3,@MMTIC4,@MBTI9,
		@MBTI10,@MBTI11,@MBTI12,@MBTI13,@MBTI14,@MBTI15,@MBTI16,@CT학년,@CT분기,
		@CT1,@CT2,@CT3,@CT4,@CT5,@CT6,@CT7,@CT8,@CT9,@CT10,@CT11,@CT12,@CT13,
		@CT14,@CT15,@CT16,@CT17,@CT18,@CT19,@CT20,@CT21,@CT22,@CT23,@CT24,@CT25,
		@CT26,@CT27,@CT28,@CT29,@CT30,@CT31,@CT32,@CT33,@CT34,@CT35,@CT36,@CT37,
		@CT38,@CT39,@CT40,@CT41,@CT42,@CT43,@CT44,@CT45,@CT46,@CT47,@CT48,@CT49,
		@CT50,@CT51,@CT52,@CT53,@CT54,@CT55,@CT56,@CT57,@CT58,@CT59,@CT60,@CT61,
		@CT62,@CT63,@CT64,@CT65,@CT66,@CT67,@CT68,@CT69,@CT70,@CT71,@CT72,@CT73,
		@CT74,@CT75,@CT76,@CT77,@CT78,@CT79,@CT80,@설문1,@설문2,@설문3,@설문4,@설문5,@설문6,
		@설문7,@설문8,@설문9,@설문10,@설문11,@설문12,@설문13,@설문14,@설문15,@설문16,@설문17,@설문18,
		@설문19,@설문20,@설문21,@설문22,@설문23,@설문24,@설문25,@설문26,@설문27,@설문28,@설문29,@설문30,
		@설문31,@설문32,@설문33,@설문34,@설문35,@설문36,@설문37,@설문38,@설문39,@설문40,@설문41,@설문42,
		@설문43,@설문44,@설문45,@설문46,@설문47,@설문48,@설문49,@설문50,@설문51,@설문52,@설문53,@설문54,
		@설문55,@설문56,@설문57,@설문58,@설문59,@설문60,@설문61,@설문62,@설문63,@설문64,@설문65,@설문66,
		@설문67,@설문68,@설문69,@설문70,@설문71,@설문72,@설문73,@설문74,@설문75,@설문76,@설문77,@설문78,
		@설문79,@설문80,@설문81,@설문82,@설문83,@설문84,@설문85,@설문86,@설문87,@설문88,@설문89,@설문90,
		@설문91,@설문92,@설문93,@설문94,@설문95,@설문96,@설문97,@설문98,@설문99,@설문100,@설문101,
		@설문102,@설문103,@설문104,@설문105,@설문106,@설문107,@설문108,@설문109,@설문110,@설문111,
		@설문112,@설문113,@설문114,@설문115,@설문116,@설문117,@설문118,@설문119,@설문120,@설문121,
		@설문122,@설문123,@설문124,@설문125,@설문126,@설문127,@설문128,@설문129,@설문130,@설문131,
		@설문132,@설문133,@설문134,@설문135,@설문136,@설문137,@설문138,@설문139,@설문140,@설문141,
		@설문142,@설문143,@설문144,@설문145,@설문146,@설문147,@설문148,@설문149,@설문150,@설문151,
		@설문152,@설문153,@설문154,@설문155,@설문156,@설문157,@설문158,@설문159,@설문160,@설문161,
		@설문162,@설문163,@설문164,@설문165,@설문166,@설문167,@설문168,@설문169,@설문170,@설문171,
		@설문172,@설문173,@설문174,@설문175,@설문176,@설문177,@설문178,@설문179,@설문180,@설문181,
		@설문182,@설문183,@설문184,@설문185,@설문186,@설문187,@설문188,@설문189,@설문190,@설문191,
		@설문192,@설문193,@설문194,@설문195,@설문196,@설문197,@설문198,@설문199,@설문200,@설문201,
		@설문202,@설문203,@설문204,@설문205,@설문206,@설문207,@설문208,@설문209,@설문210,@설문211,
		@설문212,@설문213,@설문214,@설문215,@설문216,@설문217,@설문218,@설문219,@설문220,@설문221,
		@설문222,@설문223,@설문224,@설문225,@설문226,@설문227,@설문228,@설문229,@설문230,@설문231,
		@설문232,@설문233,@설문234,@설문235,@설문236,@설문237,@설문238,@설문239,@설문240,@설문241,
		@설문242,@설문243,@설문244,@설문245,@설문246,@설문247,@설문248,@설문249

	SET @CNT = 1
	WHILE @@FETCH_STATUS = 0
		BEGIN
			-- 설문에 응답이 없으면 무시(이관 시 중복 데이터 생성은 좀 애매해서리)
			IF @설문1 IS NOT NULL
			BEGIN
				SELECT @CNO = MAX(CNO) + 1 FROM TTestInfo 
				-- [dbo].[TTestInfo] 생성
				INSERT INTO [dbo].[TTestInfo]
				SELECT @CStdBranchCode, @CStdBranchStartDate, @학생코드,@CNO,
					  @검사일자, @CBranchCode, @CBranchStartDate, 'VLT4G',
					  @나이, CASE @학년 WHEN '초1' THEN 'g1' WHEN '초2' THEN 'g2' WHEN '초3' THEN 'g3' 
					                  WHEN '초4' THEN 'g4' WHEN '초5' THEN 'g5' WHEN '초6' THEN 'g6' 
					                  WHEN '중1' THEN 'g7' WHEN '중2' THEN 'g8' WHEN '중3' THEN 'g9' 
					                  WHEN '고1' THEN 'g10' WHEN '고2' THEN 'g11' WHEN '고3' THEN 'g12' END, 
					  '1', '1', NULL, NULL, NULL, NULL, NULL, 0, NULL, NULL,
					  NULL, NULL, 'Complete', NULL, @CT학년, CASE WHEN @CT분기 = '0' THEN 'First' WHEN @CT분기 = '1' THEN 'Later' END,
					  NULL, NULL, NULL, NULL, NULL, NULL

				SELECT @CMbtiStatus = NULL, @CMbtiType = NULL, @CCtStatus = NULL, @CSurveyStatus= NULL

				--MBTI, MMCTI저장
				--@MBTI1, @MMTIC1 둘중 하나는 NULL이 아니어야 한다.
				IF @MBTI1 IS NOT NULL OR @MMTIC1 IS NOT NULL
				BEGIN
					IF @MBTI1 IS NOT NULL
					BEGIN
						--MBTI로 저장
						INSERT INTO [dbo].[TTestMBTI]
						SELECT @CStdBranchCode, @CStdBranchStartDate, @학생코드,@CNO,
						      CType,
							  CNo,
							  CASE CNo WHEN 1 THEN @MBTI1 
							          WHEN 2 THEN @MBTI2 
									  WHEN 3 THEN @MBTI3 
									  WHEN 4 THEN @MBTI4 
									  WHEN 5 THEN @MBTI5 
									  WHEN 6 THEN @MBTI6 
									  WHEN 7 THEN @MBTI7 
									  WHEN 8 THEN @MBTI8 
									  WHEN 9 THEN @MBTI9
									  WHEN 10 THEN @MBTI10
									  WHEN 11 THEN @MBTI11
									  WHEN 12 THEN @MBTI12
									  WHEN 13 THEN @MBTI13
									  WHEN 14 THEN @MBTI14
									  WHEN 15 THEN @MBTI15
									  WHEN 16 THEN @MBTI16
								END 
						  FROM TMBTIQuestion
						 WHERE CType = 'MBTI'

						SET @CMbtiType = 'MBTI'
					END
					ELSE BEGIN
						--MMTIC로 저장
						INSERT INTO [dbo].[TTestMBTI]
						SELECT @CStdBranchCode, @CStdBranchStartDate, @학생코드,@CNO,
						      CType,
							  CNo,
							  CASE CNo WHEN 17 THEN @MMTIC1 
									  WHEN 18 THEN @MMTIC2 
									  WHEN 19 THEN @MMTIC3 
									  WHEN 20 THEN @MMTIC4
									  WHEN 21 THEN @MBTI9
									  WHEN 22 THEN @MBTI10
									  WHEN 23 THEN @MBTI11
									  WHEN 24 THEN @MBTI12
									  WHEN 25 THEN @MBTI13
									  WHEN 26 THEN @MBTI14
									  WHEN 27 THEN @MBTI15
									  WHEN 28 THEN @MBTI16
								END 
						  FROM TMBTIQuestion
						 WHERE CType = 'MMTIC'
						 
						 SET @CMbtiType = 'MMTIC'
					END
					SET @CMbtiStatus = 'Complete'
				END

				-- CT저장
				IF @CT1 IS NOT NULL
				BEGIN
					INSERT INTO [dbo].[TTestCT]
					SELECT @CStdBranchCode, @CStdBranchStartDate, @학생코드,@CNO, CNo,
					      CASE CQuestionNo
							WHEN 1  THEN @CT1  WHEN 2  THEN @CT2  WHEN 3  THEN @CT3  WHEN 4  THEN @CT4 
							WHEN 5  THEN @CT5  WHEN 6  THEN @CT6  WHEN 7  THEN @CT7  WHEN 8  THEN @CT8 
							WHEN 9  THEN @CT9  WHEN 10 THEN @CT10 WHEN 11 THEN @CT11 WHEN 12 THEN @CT12
							WHEN 13 THEN @CT13 WHEN 14 THEN @CT14 WHEN 15 THEN @CT15 WHEN 16 THEN @CT16
							WHEN 17 THEN @CT17 WHEN 18 THEN @CT18 WHEN 19 THEN @CT19 WHEN 20 THEN @CT20
							WHEN 21 THEN @CT21 WHEN 22 THEN @CT22 WHEN 23 THEN @CT23 WHEN 24 THEN @CT24
							WHEN 25 THEN @CT25 WHEN 26 THEN @CT26 WHEN 27 THEN @CT27 WHEN 28 THEN @CT28
							WHEN 29 THEN @CT29 WHEN 30 THEN @CT30 WHEN 31 THEN @CT31 WHEN 32 THEN @CT32
							WHEN 33 THEN @CT33 WHEN 34 THEN @CT34 WHEN 35 THEN @CT35 WHEN 36 THEN @CT36
							WHEN 37 THEN @CT37 WHEN 38 THEN @CT38 WHEN 39 THEN @CT39 WHEN 40 THEN @CT40
							WHEN 41 THEN @CT41 WHEN 42 THEN @CT42 WHEN 43 THEN @CT43 WHEN 44 THEN @CT44
							WHEN 45 THEN @CT45 WHEN 46 THEN @CT46 WHEN 47 THEN @CT47 WHEN 48 THEN @CT48
							WHEN 49 THEN @CT49 WHEN 50 THEN @CT50 WHEN 51 THEN @CT51 WHEN 52 THEN @CT52
							WHEN 53 THEN @CT53 WHEN 54 THEN @CT54 WHEN 55 THEN @CT55 WHEN 56 THEN @CT56
							WHEN 57 THEN @CT57 WHEN 58 THEN @CT58 WHEN 59 THEN @CT59 WHEN 60 THEN @CT60
							WHEN 61 THEN @CT61 WHEN 62 THEN @CT62 WHEN 63 THEN @CT63 WHEN 64 THEN @CT64
							WHEN 65 THEN @CT65 WHEN 66 THEN @CT66 WHEN 67 THEN @CT67 WHEN 68 THEN @CT68
							WHEN 69 THEN @CT69 WHEN 70 THEN @CT70 WHEN 71 THEN @CT71 WHEN 72 THEN @CT72
							WHEN 73 THEN @CT73 WHEN 74 THEN @CT74 WHEN 75 THEN @CT75 WHEN 76 THEN @CT76
							WHEN 77 THEN @CT77 WHEN 78 THEN @CT78 WHEN 79 THEN @CT79 WHEN 80 THEN @CT80
						  END
					  FROM TCTQuestion
					 WHERE CCtGrade = 'g' + CONVERT(VARCHAR, @CT학년)
					   AND CCtPeriod = CASE WHEN @CT분기 = '0' THEN 'First' ELSE 'Later' END

					SET @CCtStatus = 'Complete'
				END

				-- 설문
				IF @설문1 IS NOT NULL
				BEGIN
					INSERT INTO [dbo].[TTestSurvey]
					SELECT @CStdBranchCode, @CStdBranchStartDate, @학생코드,@CNO, CNo,
					      CASE CNo
							WHEN 1   THEN @설문1   WHEN 2   THEN @설문2   WHEN 3   THEN @설문3   WHEN 4   THEN @설문4  
							WHEN 5   THEN @설문5   WHEN 6   THEN @설문6   WHEN 7   THEN @설문7   WHEN 8   THEN @설문8  
							WHEN 9   THEN @설문9   WHEN 10  THEN @설문10  WHEN 11  THEN @설문11  WHEN 12  THEN @설문12 
							WHEN 13  THEN @설문13  WHEN 14  THEN @설문14  WHEN 15  THEN @설문15  WHEN 16  THEN @설문16 
							WHEN 17  THEN @설문17  WHEN 18  THEN @설문18  WHEN 19  THEN @설문19  WHEN 20  THEN @설문20 
							WHEN 21  THEN @설문21  WHEN 22  THEN @설문22  WHEN 23  THEN @설문23  WHEN 24  THEN @설문24 
							WHEN 25  THEN @설문25  WHEN 26  THEN @설문26  WHEN 27  THEN @설문27  WHEN 28  THEN @설문28 
							WHEN 29  THEN @설문29  WHEN 30  THEN @설문30  WHEN 31  THEN @설문31  WHEN 32  THEN @설문32 
							WHEN 33  THEN @설문33  WHEN 34  THEN @설문34  WHEN 35  THEN @설문35  WHEN 36  THEN @설문36 
							WHEN 37  THEN @설문37  WHEN 38  THEN @설문38  WHEN 39  THEN @설문39  WHEN 40  THEN @설문40 
							WHEN 41  THEN @설문41  WHEN 42  THEN @설문42  WHEN 43  THEN @설문43  WHEN 44  THEN @설문44 
							WHEN 45  THEN @설문45  WHEN 46  THEN @설문46  WHEN 47  THEN @설문47  WHEN 48  THEN @설문48 
							WHEN 49  THEN @설문49  WHEN 50  THEN @설문50  WHEN 51  THEN @설문51  WHEN 52  THEN @설문52 
							WHEN 53  THEN @설문53  WHEN 54  THEN @설문54  WHEN 55  THEN @설문55  WHEN 56  THEN @설문56 
							WHEN 57  THEN @설문57  WHEN 58  THEN @설문58  WHEN 59  THEN @설문59  WHEN 60  THEN @설문60 
							WHEN 61  THEN @설문61  WHEN 62  THEN @설문62  WHEN 63  THEN @설문63  WHEN 64  THEN @설문64 
							WHEN 65  THEN @설문65  WHEN 66  THEN @설문66  WHEN 67  THEN @설문67  WHEN 68  THEN @설문68 
							WHEN 69  THEN @설문69  WHEN 70  THEN @설문70  WHEN 71  THEN @설문71  WHEN 72  THEN @설문72 
							WHEN 73  THEN @설문73  WHEN 74  THEN @설문74  WHEN 75  THEN @설문75  WHEN 76  THEN @설문76 
							WHEN 77  THEN @설문77  WHEN 78  THEN @설문78  WHEN 79  THEN @설문79  WHEN 80  THEN @설문80 
							WHEN 81  THEN @설문81  WHEN 82  THEN @설문82  WHEN 83  THEN @설문83  WHEN 84  THEN @설문84 
							WHEN 85  THEN @설문85  WHEN 86  THEN @설문86  WHEN 87  THEN @설문87  WHEN 88  THEN @설문88 
							WHEN 89  THEN @설문89  WHEN 90  THEN @설문90  WHEN 91  THEN @설문91  WHEN 92  THEN @설문92 
							WHEN 93  THEN @설문93  WHEN 94  THEN @설문94  WHEN 95  THEN @설문95  WHEN 96  THEN @설문96 
							WHEN 97  THEN @설문97  WHEN 98  THEN @설문98  WHEN 99  THEN @설문99  WHEN 100 THEN @설문100
							WHEN 101 THEN @설문101 WHEN 102 THEN @설문102 WHEN 103 THEN @설문103 WHEN 104 THEN @설문104
							WHEN 105 THEN @설문105 WHEN 106 THEN @설문106 WHEN 107 THEN @설문107 WHEN 108 THEN @설문108
							WHEN 109 THEN @설문109 WHEN 110 THEN @설문110 WHEN 111 THEN @설문111 WHEN 112 THEN @설문112
							WHEN 113 THEN @설문113 WHEN 114 THEN @설문114 WHEN 115 THEN @설문115 WHEN 116 THEN @설문116
							WHEN 117 THEN @설문117 WHEN 118 THEN @설문118 WHEN 119 THEN @설문119 WHEN 120 THEN @설문120
							WHEN 121 THEN @설문121 WHEN 122 THEN @설문122 WHEN 123 THEN @설문123 WHEN 124 THEN @설문124
							WHEN 125 THEN @설문125 WHEN 126 THEN @설문126 WHEN 127 THEN @설문127 WHEN 128 THEN @설문128
							WHEN 129 THEN @설문129 WHEN 130 THEN @설문130 WHEN 131 THEN @설문131 WHEN 132 THEN @설문132
							WHEN 133 THEN @설문133 WHEN 134 THEN @설문134 WHEN 135 THEN @설문135 WHEN 136 THEN @설문136
							WHEN 137 THEN @설문137 WHEN 138 THEN @설문138 WHEN 139 THEN @설문139 WHEN 140 THEN @설문140
							WHEN 141 THEN @설문141 WHEN 142 THEN @설문142 WHEN 143 THEN @설문143 WHEN 144 THEN @설문144
							WHEN 145 THEN @설문145 WHEN 146 THEN @설문146 WHEN 147 THEN @설문147 WHEN 148 THEN @설문148
							WHEN 149 THEN @설문149 WHEN 150 THEN @설문150 WHEN 151 THEN @설문151 WHEN 152 THEN @설문152
							WHEN 153 THEN @설문153 WHEN 154 THEN @설문154 WHEN 155 THEN @설문155 WHEN 156 THEN @설문156
							WHEN 157 THEN @설문157 WHEN 158 THEN @설문158 WHEN 159 THEN @설문159 WHEN 160 THEN @설문160
							WHEN 161 THEN @설문161 WHEN 162 THEN @설문162 WHEN 163 THEN @설문163 WHEN 164 THEN @설문164
							WHEN 165 THEN @설문165 WHEN 166 THEN @설문166 WHEN 167 THEN @설문167 WHEN 168 THEN @설문168
							WHEN 169 THEN @설문169 WHEN 170 THEN @설문170 WHEN 171 THEN @설문171 WHEN 172 THEN @설문172
							WHEN 173 THEN @설문173 WHEN 174 THEN @설문174 WHEN 175 THEN @설문175 WHEN 176 THEN @설문176
							WHEN 177 THEN @설문177 WHEN 178 THEN @설문178 WHEN 179 THEN @설문179 WHEN 180 THEN @설문180
							WHEN 181 THEN @설문181 WHEN 182 THEN @설문182 WHEN 183 THEN @설문183 WHEN 184 THEN @설문184
							WHEN 185 THEN @설문185 WHEN 186 THEN @설문186 WHEN 187 THEN @설문187 WHEN 188 THEN @설문188
							WHEN 189 THEN @설문189 WHEN 190 THEN @설문190 WHEN 191 THEN @설문191 WHEN 192 THEN @설문192
							WHEN 193 THEN @설문193 WHEN 194 THEN @설문194 WHEN 195 THEN @설문195 WHEN 196 THEN @설문196
							WHEN 197 THEN @설문197 WHEN 198 THEN @설문198 WHEN 199 THEN @설문199 WHEN 200 THEN @설문200
							WHEN 201 THEN @설문201 WHEN 202 THEN @설문202 WHEN 203 THEN @설문203 WHEN 204 THEN @설문204
							WHEN 205 THEN @설문205 WHEN 206 THEN @설문206 WHEN 207 THEN @설문207 WHEN 208 THEN @설문208
							WHEN 209 THEN @설문209 WHEN 210 THEN @설문210 WHEN 211 THEN @설문211 WHEN 212 THEN @설문212
							WHEN 213 THEN @설문213 WHEN 214 THEN @설문214 WHEN 215 THEN @설문215 WHEN 216 THEN @설문216
							WHEN 217 THEN @설문217 WHEN 218 THEN @설문218 WHEN 219 THEN @설문219 WHEN 220 THEN @설문220
							WHEN 221 THEN @설문221 WHEN 222 THEN @설문222 WHEN 223 THEN @설문223 WHEN 224 THEN @설문224
							WHEN 225 THEN @설문225 WHEN 226 THEN @설문226 WHEN 227 THEN @설문227 WHEN 228 THEN @설문228
							WHEN 229 THEN @설문229 WHEN 230 THEN @설문230 WHEN 231 THEN @설문231 WHEN 232 THEN @설문232
							WHEN 233 THEN @설문233 WHEN 234 THEN @설문234 WHEN 235 THEN @설문235 WHEN 236 THEN @설문236
							WHEN 237 THEN @설문237 WHEN 238 THEN @설문238 WHEN 239 THEN @설문239 WHEN 240 THEN @설문240
							WHEN 241 THEN @설문241 WHEN 242 THEN @설문242 WHEN 243 THEN @설문243 WHEN 244 THEN @설문244
							WHEN 245 THEN @설문245 WHEN 246 THEN @설문246 WHEN 247 THEN @설문247 WHEN 248 THEN @설문248
							WHEN 249 THEN @설문249
						  END
					  FROM TSurveyQuestion

					SET @CSurveyStatus = 'Complete'
				END

				UPDATE [TTestInfo] SET
					[CMbtiType] = @CMbtiType,
					[CMbtiStatus] = @CMbtiStatus,
					[CCtStatus] = @CCtStatus,
					[CSurveyStatus] = @CSurveyStatus
				WHERE CNo = @CNo

				SET @CNT = @CNT + 1
			END

			FETCH NEXT FROM CURSOR1 INTO 
				@지점코드,@CStdBranchCode, @CStdBranchStartDate,@CBranchCode, @CBranchStartDate,@학생코드,@성별,@나이,@학년,@검사일자,@MBTI1,@MBTI2,@MBTI3,@MBTI4,
				@MBTI5,@MBTI6,@MBTI7,@MBTI8,@MMTIC1,@MMTIC2,@MMTIC3,@MMTIC4,@MBTI9,
				@MBTI10,@MBTI11,@MBTI12,@MBTI13,@MBTI14,@MBTI15,@MBTI16,@CT학년,@CT분기,
				@CT1,@CT2,@CT3,@CT4,@CT5,@CT6,@CT7,@CT8,@CT9,@CT10,@CT11,@CT12,@CT13,
				@CT14,@CT15,@CT16,@CT17,@CT18,@CT19,@CT20,@CT21,@CT22,@CT23,@CT24,@CT25,
				@CT26,@CT27,@CT28,@CT29,@CT30,@CT31,@CT32,@CT33,@CT34,@CT35,@CT36,@CT37,
				@CT38,@CT39,@CT40,@CT41,@CT42,@CT43,@CT44,@CT45,@CT46,@CT47,@CT48,@CT49,
				@CT50,@CT51,@CT52,@CT53,@CT54,@CT55,@CT56,@CT57,@CT58,@CT59,@CT60,@CT61,
				@CT62,@CT63,@CT64,@CT65,@CT66,@CT67,@CT68,@CT69,@CT70,@CT71,@CT72,@CT73,
				@CT74,@CT75,@CT76,@CT77,@CT78,@CT79,@CT80,@설문1,@설문2,@설문3,@설문4,@설문5,@설문6,
				@설문7,@설문8,@설문9,@설문10,@설문11,@설문12,@설문13,@설문14,@설문15,@설문16,@설문17,@설문18,
				@설문19,@설문20,@설문21,@설문22,@설문23,@설문24,@설문25,@설문26,@설문27,@설문28,@설문29,@설문30,
				@설문31,@설문32,@설문33,@설문34,@설문35,@설문36,@설문37,@설문38,@설문39,@설문40,@설문41,@설문42,
				@설문43,@설문44,@설문45,@설문46,@설문47,@설문48,@설문49,@설문50,@설문51,@설문52,@설문53,@설문54,
				@설문55,@설문56,@설문57,@설문58,@설문59,@설문60,@설문61,@설문62,@설문63,@설문64,@설문65,@설문66,
				@설문67,@설문68,@설문69,@설문70,@설문71,@설문72,@설문73,@설문74,@설문75,@설문76,@설문77,@설문78,
				@설문79,@설문80,@설문81,@설문82,@설문83,@설문84,@설문85,@설문86,@설문87,@설문88,@설문89,@설문90,
				@설문91,@설문92,@설문93,@설문94,@설문95,@설문96,@설문97,@설문98,@설문99,@설문100,@설문101,
				@설문102,@설문103,@설문104,@설문105,@설문106,@설문107,@설문108,@설문109,@설문110,@설문111,
				@설문112,@설문113,@설문114,@설문115,@설문116,@설문117,@설문118,@설문119,@설문120,@설문121,
				@설문122,@설문123,@설문124,@설문125,@설문126,@설문127,@설문128,@설문129,@설문130,@설문131,
				@설문132,@설문133,@설문134,@설문135,@설문136,@설문137,@설문138,@설문139,@설문140,@설문141,
				@설문142,@설문143,@설문144,@설문145,@설문146,@설문147,@설문148,@설문149,@설문150,@설문151,
				@설문152,@설문153,@설문154,@설문155,@설문156,@설문157,@설문158,@설문159,@설문160,@설문161,
				@설문162,@설문163,@설문164,@설문165,@설문166,@설문167,@설문168,@설문169,@설문170,@설문171,
				@설문172,@설문173,@설문174,@설문175,@설문176,@설문177,@설문178,@설문179,@설문180,@설문181,
				@설문182,@설문183,@설문184,@설문185,@설문186,@설문187,@설문188,@설문189,@설문190,@설문191,
				@설문192,@설문193,@설문194,@설문195,@설문196,@설문197,@설문198,@설문199,@설문200,@설문201,
				@설문202,@설문203,@설문204,@설문205,@설문206,@설문207,@설문208,@설문209,@설문210,@설문211,
				@설문212,@설문213,@설문214,@설문215,@설문216,@설문217,@설문218,@설문219,@설문220,@설문221,
				@설문222,@설문223,@설문224,@설문225,@설문226,@설문227,@설문228,@설문229,@설문230,@설문231,
				@설문232,@설문233,@설문234,@설문235,@설문236,@설문237,@설문238,@설문239,@설문240,@설문241,
				@설문242,@설문243,@설문244,@설문245,@설문246,@설문247,@설문248,@설문249
			
				
		END
	CLOSE CURSOR1
	DEALLOCATE CURSOR1

	PRINT @CNT

	COMMIT TRAN

END TRY
BEGIN CATCH
	CLOSE CURSOR1
	DEALLOCATE CURSOR1
	ROLLBACK TRAN
	SELECT 'ER', '행번호:'+CONVERT(VARCHAR, @CNT) + ',' + ERROR_MESSAGE() AS ErrorMessage
    RETURN -1
END CATCH

GO

-- =============================================
-- Author:		김길명
-- Create date: 2019-01-21
-- Description:	지점운영현황(일별)
-- Modify:      
-- Modify date: 
-- Description:	
-- EXEC SP_FACILITY_DAILY_COUNT @pTYPE = 'S1', @pBRAND = 'EPX', @pDATE = '2019-01-21'
-- EXEC SP_FACILITY_DAILY_COUNT @pTYPE = 'S2', @pBRAND = 'EPX', @pFACILITY = 'EPX0126', @cTYPE = 'Counsel', @pFLAG = 'Returning', @pDATE = '2019-01-21'

-- =============================================
CREATE PROCEDURE [dbo].[SP_FACILITY_DAILY_COUNT]
	@pTYPE		VARCHAR(3)   = '',	-- 분기구분
	@pBRAND		VARCHAR(3)   = '',	-- 브랜드(에듀플렉스 / 에듀코치)
	@pDATE		VARCHAR(10)  = '',	-- 조회일
	@pFACILITY	VARCHAR(20)  = '',	-- 지점
	@cTYPE		VARCHAR(20)  = '', 	-- 조회구분
	@pFLAG		VARCHAR(20)  = '' 	-- 리스트 조회 구분
AS

DECLARE @dDATE VARCHAR(10)  = ''--@pDATE	-- 조회일(백업)


SET @dDATE = REPLACE(@pDATE, '/', '-')

IF      @pTYPE = 'S1' GOTO S1_RTN   --지점현황(일별)
ELSE IF @pTYPE = 'S2' GOTO S2_RTN   --학생리스트
ELSE RETURN

--=============================================
--지점현황(일별)
--=============================================
S1_RTN:
BEGIN
	select CONVERT(VARCHAR,  a.CDay, 111) as CDay,
		   c4.CName as CFlagName,
		   c.CName  as CBrandName,
		   c2.CName as CAreaName,
		   c3.CName as CZoneName,
		   b.COpenName0 as CFacilityName, 
		   a.CDepartCode, a.CDepartStartDate, 
		   CAST(ISNULL(a.CCbegin,       0) AS NUMERIC(18, 2)) as CCounselBeginMonth,
		   CAST(ISNULL(a.CCnew,         0) AS NUMERIC(18, 2)) as CCounselNew,
		   --2019.12.28. 신규률
		   case when ISNULL(a.CCbegin, 0) > 0 THEN CONVERT(nvarchar,ROUND((ISNULL(a.CCnew, 0)) / CONVERT(FLOAT, ISNULL(a.CCbegin, 0)),4) *100) + '%' else '0%' end AS CCounselNewRate,
		   CAST(ISNULL(a.CCrtn,         0) AS NUMERIC(18, 2)) as CCounselRtn,
		   --2019.12.28. 복회률
		   case when ISNULL(a.CCbegin, 0) > 0 THEN CONVERT(nvarchar,ROUND((ISNULL(a.CCrtn, 0)) / CONVERT(FLOAT, ISNULL(a.CCbegin, 0)),4) *100) + '%' else '0%' end AS CCounselRtnRate,
		   CAST(ISNULL(a.CCleave,       0) AS NUMERIC(18, 2)) as CLeaveOn,
		   CAST(ISNULL(a.CCleaveClose,  0) AS NUMERIC(18, 2)) as CLeaveEnd,
		   --상담관리 이탈율 = [실종료]/[월초]x100
		   case when ISNULL(a.CCbegin, 0) > 0 THEN CONVERT(nvarchar,ROUND((ISNULL(a.CRend, 0)) / CONVERT(FLOAT, ISNULL(a.CCbegin, 0)),4) *100) + '%' else '0%' end AS CCounselLeaveRate,
		   CAST(ISNULL(a.CRend,         0) AS NUMERIC(18, 2)) as CCounselRealEnd,
		   CAST(ISNULL(a.CCclose,       0) AS NUMERIC(18, 2)) as CCounselReal,
		   --2019.12.28. 순증,순증률
		   CAST(ISNULL(a.CCnew,0)+ISNULL(a.CCrtn,0)-ISNULL(a.CRend,0) AS NUMERIC(18, 2)) as CCounselPur,
		   case when ISNULL(a.CCbegin, 0) > 0 THEN CONVERT(nvarchar,ROUND((ISNULL(a.CCnew,0)+ISNULL(a.CCrtn,0)-ISNULL(a.CRend,0)) / CONVERT(FLOAT, ISNULL(a.CCbegin, 0)),4) *100) + '%' else '0%' end AS CCounselPurRate,
		   CAST(ISNULL(a.CTbegin,       0) AS NUMERIC(18, 2)) as CTutoringBeginMonth,
		   CAST(ISNULL(a.CTnew,         0) AS NUMERIC(18, 2)) as CTutoringNew,
		   --2019.12.28. 신규률
		   case when ISNULL(a.CTbegin, 0) > 0 THEN CONVERT(nvarchar,ROUND((ISNULL(a.CTnew, 0)) / CONVERT(FLOAT, ISNULL(a.CTbegin, 0)), 4) * 100) + '%' else '0%' end AS CTutoringNewRate,
		   CAST(ISNULL(a.CTrtn,         0) AS NUMERIC(18, 2)) as CTutoringRtn,
		   --2019.12.28. 복회률
		   case when ISNULL(a.CTbegin, 0) > 0 THEN CONVERT(nvarchar,ROUND((ISNULL(a.CTrtn, 0)) / CONVERT(FLOAT, ISNULL(a.CTbegin, 0)), 4) * 100) + '%' else '0%' end AS CTutoringRtnRate,
		   CAST(ISNULL(a.CTclose,       0) AS NUMERIC(18, 2)) as CTutoringEnd,
		   --2019.12.28. 순증,순증률
		   CAST(ISNULL(a.CTnew,0)+ISNULL(a.CTrtn,0)-ISNULL(a.CTclose,0) AS NUMERIC(18, 2)) as CTutoringPur,
		   case when ISNULL(a.CTbegin, 0) > 0 THEN CONVERT(nvarchar,ROUND((ISNULL(a.CTnew,0)+ISNULL(a.CTrtn,0)-ISNULL(a.CTclose,0)) / CONVERT(FLOAT, ISNULL(a.CTbegin, 0)), 4) * 100) + '%' else '0%' end AS CTutoringPurRate,
		   CAST(ISNULL(a.CTnotReg,      0) AS NUMERIC(18, 2)) as CTutoringNotReg,
		   CAST(ISNULL(a.CTend,         0) AS NUMERIC(18, 2)) as CTutoringEndMonth,
		   --개별지도 이탈율
		   case when ISNULL(a.CTbegin, 0) > 0 THEN CONVERT(nvarchar,ROUND((ISNULL(a.CTbegin, 0) - ISNULL(a.CTend,  0) + ISNULL(a.CTnew,  0) + ISNULL(a.CTrtn,  0)) / CONVERT(FLOAT, ISNULL(a.CTbegin, 0)), 4) * 100) + '%'
		   else '0%' end AS CTutoringLeaveRate,
		   CAST(ISNULL(e.CTotalSale,    0) AS NUMERIC(18, 2)) as CTotalSale,
		   CAST(ISNULL(e.CCounselSale,  0) AS NUMERIC(18, 2)) as CCounselSale,
		   CAST(ISNULL(f.CComer,        0) AS NUMERIC(18, 2)) as CCommas,
		   CAST(ISNULL(f1.CComer,       0) AS NUMERIC(18, 2)) as COnlyCommas,
		   CAST(ISNULL(f2.CComer,       0) AS NUMERIC(18, 2)) as CPremiumCommas,
		   CAST(ISNULL(e.CTutoringSale, 0) AS NUMERIC(18, 2)) as CTutoringSale,
		   CAST(ISNULL(x.COnlyCounsel,  0) AS NUMERIC(18, 2)) AS COnlyCounsel,
		   CAST(ISNULL(x.CPremium,      0) AS NUMERIC(18, 2)) AS CPremium,
		   CAST(ISNULL(x.COnlyTutoring, 0) AS NUMERIC(18, 2)) AS COnlyTutoring,
		   CAST(ISNULL(x.CCg4, 0)     AS NUMERIC(18, 2))  AS CCg4, CAST(ISNULL(x.CCg5,  0) AS NUMERIC(18, 2)) AS CCg5,  CAST(ISNULL(x.CCg6, 0)  AS NUMERIC(18, 2))  AS CCg6,
		   CAST(ISNULL(x.CCg7, 0)     AS NUMERIC(18, 2))  AS CCg7, CAST(ISNULL(x.CCg8,  0) AS NUMERIC(18, 2)) AS CCg8,  CAST(ISNULL(x.CCg9, 0)  AS NUMERIC(18, 2))  AS CCg9,
		   CAST(ISNULL(x.CCg10, 0)    AS NUMERIC(18, 2)) AS CCg10, CAST(ISNULL(x.CCg11, 0) AS NUMERIC(18, 2)) AS CCg11, CAST(ISNULL(x.CCg12, 0) AS NUMERIC(18, 2)) AS CCg12,
		   CAST(ISNULL(x.CCounsel, 0) AS NUMERIC(18, 2)) AS CCounsel,
		   CAST(ISNULL(x.CTg4,  0)    AS NUMERIC(18, 2)) AS CTg4,  CAST(ISNULL(x.CTg5,  0) AS NUMERIC(18, 2)) AS CTg5,  CAST(ISNULL(x.CTg6, 0)  AS NUMERIC(18, 2))  AS CTg6,
		   CAST(ISNULL(x.CTg7,  0)    AS NUMERIC(18, 2)) AS CTg7,  CAST(ISNULL(x.CTg8,  0) AS NUMERIC(18, 2)) AS CTg8,  CAST(ISNULL(x.CTg9, 0)  AS NUMERIC(18, 2))  AS CTg9,
		   CAST(ISNULL(x.CTg10, 0)    AS NUMERIC(18, 2)) AS CTg10, CAST(ISNULL(x.CTg11, 0) AS NUMERIC(18, 2)) AS CTg11, CAST(ISNULL(x.CTg12, 0) AS NUMERIC(18, 2)) AS CTg12,
		   CAST(ISNULL(x.CTutoring, 0) AS NUMERIC(18, 2)) AS CTutoring,
		   d.CDisplayIndex, 3 as CSORT
	  INTO #STUDENT_COUNT
	  from
			(
			select t1.CDay, t1.CDepartCode, t1.CDepartStartDate, 
				   isnull(sum(CounselBegin) , 0) as CCbegin,	 --월초
				   isnull(sum(CounselNew)   , 0) as CCnew,		 --신규
				   isnull(sum(CounselRtn)   , 0) as CCrtn,		 --복회
				   isnull(sum(CounselLeave) , 0) as CCleave,	 --휴원
				   isnull(sum(LeaveClose)   , 0) as CCleaveClose,--휴원해제
				   isnull(sum(CounselEnd)   , 0) as CCend,		 --월말
				   isnull(sum(RealEnd)      , 0) as CRend,		 --실종료
				   isnull(sum(CounselBegin), 0) + isnull(sum(CounselNew), 0) + isnull(sum(CounselRtn), 0) - isnull(sum(RealEnd), 0) AS CCclose, --실월말(월초+신규+복회-실종료)

				   isnull(sum(TutoringBegin), 0) as CTbegin,
				   isnull(sum(TutoringNew)  , 0) as CTnew,
				   isnull(sum(TutoringlRtn) , 0) as CTrtn,
				   -- 월초+신규+복회-월말
				   isnull(sum(TutoringBegin), 0) + isnull(sum(TutoringNew)  , 0)+isnull(sum(TutoringlRtn) , 0) - isnull(sum(TutoringEnd)  , 0) as CTclose,
				   isnull(sum(TutoringEnd)  , 0) as CTend,
				   isnull(sum(TutoringNotReg),0) as CTnotReg
			  from (
			--상담관리
			select CDay,
				   CDepartCode, CDepartStartDate, 
				   sum(case when CFlag = 'Begin'	  then 1 else null end) as CounselBegin,
				   sum(case when CFlag = 'Newcomer'   then 1 else null end) as CounselNew,
				   sum(case when CFlag = 'Returning'  then 1 else null end) as CounselRtn,
				   sum(case when CFlag = 'Leave'	  then 1 else null end) as CounselLeave,
				   sum(case when CFlag = 'LeaveClose' then 1 else null end) as LeaveClose,
				   sum(case when CFlag = 'End'		  then 1 else null end) as CounselEnd,
				   sum(case when CFlag = 'RealEnd'	  then 1 else null end) as RealEnd,
				   0 as TutoringBegin,
				   0 as TutoringNew,
				   0 as TutoringlRtn,
				   0 as TutoringEnd,
				   0 as TutoringNotReg
			  from TFacilityDailyCount(nolock)
			 where CDay = @dDATE and CDepartCode like @pBRAND + '%'
			   and CType = 'Counsel'
			 group by CDay, CDepartCode, CDepartStartDate
			union all
			--개별지도
			select CDay,
				   CDepartCode, CDepartStartDate,
				   0 as CounselBegin,
				   0 as CounselNew,
				   0 as CounselRtn,
				   0 as CounselLeave,
				   0 as CounselLeaveClose,
				   0 as CounselEnd,
				   0 as RealEnd,
				   sum(case when CFlag = 'Begin'	  then 1 else null end) as TutoringBegin,
				   sum(case when CFlag = 'Newcomer'	  then 1 else null end) as TutoringNew,
				   sum(case when CFlag = 'Returning'  then 1 else null end) as TutoringlRtn,
				   sum(case when CFlag = 'End'		  then 1 else null end) as TutoringEnd,
				   sum(case when CFlag = 'NotReg'	  then 1 else null end) as TutoringNotReg
			  from TFacilityDailyCount(nolock)
			 where CDay = @dDATE and CDepartCode like @pBRAND + '%'
			   and CType = 'Tutoring'
			 group by CDay, CDepartCode, CDepartStartDate
				) t1
			 group by t1.CDay, t1.CDepartCode, t1.CDepartStartDate
			) a
		left join TFacility   b(nolock)  on a.CDepartCode = b.CDepartCode and a.CDepartStartDate = b.CDepartStartDate
		left join TCommonCode c(nolock)  on b.CTmpGroup1  = c.CCodeGroup  and b.CTmpCode1 = c.CCode
		left join TCommonCode c2(nolock) on b.CTmpGroup2  = c2.CCodeGroup and b.CTmpCode2 = c2.CCode
		left join TCommonCode c3(nolock) on b.CTmpGroup3  = c3.CCodeGroup and b.CTmpCode3 = c3.CCode
		left join TCommonCode c4(nolock) on b.CTmpGroup4  = c4.CCodeGroup and b.CTmpCode4 = c4.CCode
		left join TDepartment d(nolock)	 on a.CDepartCode = d.CDepartCode and a.CDepartStartDate = d.CDepartStartDate
		--총매출
		left join TFacilityDailyCount e(nolock)  on a.CDay = e.CDay  and a.CDepartCode = e.CDepartCode  and a.CDepartStartDate = e.CDepartStartDate  and e.CType = 'Sale'
		--총콤마
		left join TFacilityDailyCount f(nolock)  on a.CDay = f.CDay  and a.CDepartCode = f.CDepartCode  and a.CDepartStartDate = f.CDepartStartDate  and f.CType = 'Tutoring'  and f.CFlag = 'AllCommas'
		--Only개별지도
		left join TFacilityDailyCount f1(nolock) on a.CDay = f1.CDay and a.CDepartCode = f1.CDepartCode and a.CDepartStartDate = f1.CDepartStartDate and f1.CType = 'Tutoring' and f1.CFlag = 'OnlyCommas'
		--Premium개별지도
		left join TFacilityDailyCount f2(nolock) on a.CDay = f2.CDay and a.CDepartCode = f2.CDepartCode and a.CDepartStartDate = f2.CDepartStartDate and f2.CType = 'Tutoring' and f2.CFlag = 'PremiumCommas'
		-- 인원수
		LEFT JOIN ( 
						SELECT s3.CDay, s3.CDepartCode, s3.CDepartStartDate,
							   SUM(s3.CCounsel) AS CCounsel,
							   SUM(s3.CTutoring) AS CTutoring,
							   SUM(s3.COnlyTutoring) AS COnlyTutoring,
							   SUM(s3.COnlyCounsel) AS COnlyCounsel,
							   SUM(s3.CPremium) AS CPremium,
							   -- 상담관리
							   SUM(CASE WHEN s3.CCounsel = 1 AND CONVERT(INT, SUBSTRING(s3.CCounselGrade, 2, 2)) <=  4 THEN 1 ELSE NULL END) AS CCg4,
							   SUM(CASE WHEN s3.CCounsel = 1 AND s3.CCounselGrade =  'g5'  THEN 1 ELSE NULL END) AS CCg5,
							   SUM(CASE WHEN s3.CCounsel = 1 AND s3.CCounselGrade =  'g6'  THEN 1 ELSE NULL END) AS CCg6,
							   SUM(CASE WHEN s3.CCounsel = 1 AND s3.CCounselGrade =  'g7'  THEN 1 ELSE NULL END) AS CCg7,
							   SUM(CASE WHEN s3.CCounsel = 1 AND s3.CCounselGrade =  'g8'  THEN 1 ELSE NULL END) AS CCg8,
							   SUM(CASE WHEN s3.CCounsel = 1 AND s3.CCounselGrade IN ('g9', 'g13', 'g14')  THEN 1 ELSE NULL END) AS CCg9,
							   SUM(CASE WHEN s3.CCounsel = 1 AND s3.CCounselGrade =  'g10' THEN 1 ELSE NULL END) AS CCg10,
							   SUM(CASE WHEN s3.CCounsel = 1 AND s3.CCounselGrade =  'g11' THEN 1 ELSE NULL END) AS CCg11,
							   SUM(CASE WHEN s3.CCounsel = 1 AND s3.CCounselGrade IN ('g12', 'g15', 'g16') THEN 1 ELSE NULL END) AS CCg12,
							   -- 개별지도
							   SUM(CASE WHEN s3.CTutoring = 1 AND CONVERT(INT, SUBSTRING(s3.CTutoringGrade, 2, 2)) <=  4 THEN 1 ELSE NULL END) AS CTg4,
							   SUM(CASE WHEN s3.CTutoring = 1 AND s3.CTutoringGrade =  'g5'  THEN 1 ELSE NULL END) AS CTg5,
							   SUM(CASE WHEN s3.CTutoring = 1 AND s3.CTutoringGrade =  'g6'  THEN 1 ELSE NULL END) AS CTg6,
							   SUM(CASE WHEN s3.CTutoring = 1 AND s3.CTutoringGrade =  'g7'  THEN 1 ELSE NULL END) AS CTg7,
							   SUM(CASE WHEN s3.CTutoring = 1 AND s3.CTutoringGrade =  'g8'  THEN 1 ELSE NULL END) AS CTg8,
							   SUM(CASE WHEN s3.CTutoring = 1 AND s3.CTutoringGrade IN ('g9', 'g13', 'g14')  THEN 1 ELSE NULL END) AS CTg9,
							   SUM(CASE WHEN s3.CTutoring = 1 AND s3.CTutoringGrade =  'g10' THEN 1 ELSE NULL END) AS CTg10,
							   SUM(CASE WHEN s3.CTutoring = 1 AND s3.CTutoringGrade =  'g11' THEN 1 ELSE NULL END) AS CTg11,
							   SUM(CASE WHEN s3.CTutoring = 1 AND s3.CTutoringGrade IN ('g12', 'g15', 'g16') THEN 1 ELSE NULL END) AS CTg12
						  FROM	 ( -- 상담관리 학생리스트(월말기준)
										SELECT isnull(s1.CDay, s2.CDay) as CDay,
											   isnull(s1.CDepartCode, s2.CDepartCode) as CDepartCode,
											   isnull(s1.CDepartStartDate, s2.CDepartStartDate) as CDepartStartDate,
											   isnull(s1.CStudentCode, s2.CStudentCode) as CStudentCode,
											   CASE WHEN s1.CDay IS NOT NULL THEN 1 ELSE 0 END AS CCounsel,
											   CASE WHEN s2.CDay IS NOT NULL THEN 1 ELSE 0 END AS CTutoring,
											   CASE WHEN s1.CDay IS NOT NULL AND s2.CDay IS NULL     THEN 1 ELSE 0 END AS COnlyCounsel,
											   CASE WHEN s2.CDay IS NOT NULL AND s1.CDay IS NULL     THEN 1 ELSE 0 END AS COnlyTutoring,
											   CASE WHEN s1.CDay IS NOT NULL AND s2.CDay IS NOT NULL THEN 1 ELSE 0 END AS CPremium,
											   CASE WHEN s1.CDay IS NOT NULL THEN s1.CGrade ELSE NULL END AS CCounselGrade,
											   CASE WHEN s2.CDay IS NOT NULL THEN s2.CGrade ELSE NULL END AS CTutoringGrade
										  FROM (
												-- 상담관리 월말
												SELECT CDay, CDepartCode, CDepartStartDate, CStudentCode, cGrade
												  FROM TFacilityDailyCount (NOLOCK)
												 WHERE CDay = @dDATE and CDepartCode like @pBRAND + '%'
												   AND CType = 'Counsel' AND CFlag = 'End'
											   ) s1
										  FULL OUTER JOIN 
												(
												-- 개별지도 월말
												SELECT CDay, CDepartCode, CDepartStartDate, CStudentCode, cGrade
												  FROM TFacilityDailyCount(NOLOCK)
												 WHERE CDay = @dDATE and CDepartCode like @pBRAND + '%'
												   AND CType = 'Tutoring' AND CFlag = 'End'
												) s2
											ON s1.CDay = s2.CDay AND s1.CDepartCode = s2.CDepartCode AND s1.CDepartStartDate = s2.CDepartStartDate AND s1.CStudentCode = s2.CStudentCode
									) s3
						 GROUP BY s3.CDay, s3.CDepartCode, s3.CDepartStartDate
					) x
			ON a.CDay = x.CDay AND a.CDepartCode = x.CDepartCode and a.CDepartStartDate = x.CDepartStartDate
	 --order by d.CDisplayIndex
	
	--2019.12.18. 학생이 없는 지점 정보를 생성해준다.
	INSERT INTO #STUDENT_COUNT (CDay, CFlagName, CBrandName, CAreaName, CZoneName, CFacilityName, CDepartCode, CDepartStartDate, CSORT, CDisplayIndex)
	SELECT @dDATE,c4.CName, c.CName, c2.CName, c3.CName, a.COpenName0, a.CDepartCode, a.CDepartStartDate, 3, b.CDisplayIndex
	  FROM TFacility a(nolock)
	  left join TDepartment b(nolock)  on a.CDepartCode = b.CDepartCode and a.CDepartStartDate = b.CDepartStartDate
	  left join TCommonCode c(nolock)  on a.CTmpGroup1  = c.CCodeGroup  and a.CTmpCode1 = c.CCode
	  left join TCommonCode c2(nolock) on a.CTmpGroup2  = c2.CCodeGroup and a.CTmpCode2 = c2.CCode
	  left join TCommonCode c3(nolock) on a.CTmpGroup3  = c3.CCodeGroup and a.CTmpCode3 = c3.CCode
	  left join TCommonCode c4(nolock) on a.CTmpGroup4  = c4.CCodeGroup and a.CTmpCode4 = c4.CCode
	 WHERE NOT EXISTS	(
							SELECT 1
							  FROM #STUDENT_COUNT
							 WHERE CDepartCode      = a.CDepartCode
							   AND CDepartStartDate = a.CDepartStartDate
						)
	   AND @dDATE BETWEEN b.CDepartStartDate and b.CEndDate
	   AND a.CDepartCode like @pBRAND + '%'
	   AND a.CFacilityType NOT IN ('HEAD','GROUP')

	-- 전체평균 생성
	INSERT INTO #STUDENT_COUNT
	SELECT @dDATE, '[평균]', '', '', '', '', '0000000', '',
			AVG(CCounselBeginMonth) AS CCounselBeginMonth,
			AVG(CCounselNew) AS CCounselNew,
			--2019.12.28. 신규률
			CASE WHEN AVG(CCounselBeginMonth*1.0) > 0 	THEN CONVERT(nvarchar,ROUND((AVG(CCounselNew*1.0)) / CONVERT(FLOAT,AVG(CCounselBeginMonth*1.0)), 4) * 100) + '%' ELSE '0%' END AS CCounselNewRate, 
			AVG(CCounselRtn) AS CCounselRtn,
			--2019.12.28. 복회률
		    CASE WHEN AVG(CCounselBeginMonth*1.0) > 0 	THEN CONVERT(nvarchar,ROUND((AVG(CCounselRtn*1.0)) / CONVERT(FLOAT,AVG(CCounselBeginMonth*1.0)), 4) * 100) + '%' ELSE '0%' END AS CCounselNewRate, 
			AVG(CLeaveOn) AS CLeaveOn,
			AVG(CLeaveEnd) AS CLeaveEnd,
			-- 상담관리 이탈율
			CASE WHEN AVG(CCounselBeginMonth*1.0) > 0 	THEN CONVERT(nvarchar,ROUND((AVG(CCounselRealEnd*1.0)) / CONVERT(FLOAT,AVG(CCounselBeginMonth*1.0)), 4) * 100) + '%' ELSE '0%' END AS CCounselLeaveRate, 
			AVG(CCounselRealEnd) AS CCounselRealEnd,
			AVG(CCounselReal) AS CCounselReal,
			--2019.12.28. 순증,순증률
		    AVG(CCounselPur) AS CCounselPur,
		    CASE WHEN AVG(CCounselBeginMonth*1.0) > 0 	THEN CONVERT(nvarchar,ROUND((AVG(CCounselPur*1.0)) / CONVERT(FLOAT,AVG(CCounselBeginMonth*1.0)), 4) * 100) + '%' ELSE '0%' END AS CCounselPurRate, 

			AVG(CTutoringBeginMonth) AS CTutoringBeginMonth,
			AVG(CTutoringNew) AS CTutoringNew,
			--2019.12.28. 신규률
			CASE WHEN AVG(CTutoringBeginMonth*1.0) > 0 THEN CONVERT(nvarchar,ROUND((AVG(CTutoringNew*1.0)) / CONVERT(FLOAT,AVG(CTutoringBeginMonth*1.0)), 4) * 100) + '%' ELSE '0%' END AS CTutoringNewRate,
			AVG(CTutoringRtn) AS CTutoringRtn,
			--2019.12.28. 복회률
		    CASE WHEN AVG(CTutoringBeginMonth*1.0) > 0 THEN CONVERT(nvarchar,ROUND((AVG(CTutoringRtn*1.0)) / CONVERT(FLOAT,AVG(CTutoringBeginMonth*1.0)), 4) * 100) + '%' ELSE '0%' END AS CTutoringNewRate,
			AVG(CTutoringEnd) AS CTutoringEnd,
			--2019.12.28. 순증,순증률
			AVG(CTutoringPur) AS CTutoringPur,
		    CASE WHEN AVG(CTutoringBeginMonth*1.0) > 0 THEN CONVERT(nvarchar,ROUND((AVG(CTutoringPur*1.0)) / CONVERT(FLOAT,AVG(CTutoringBeginMonth*1.0)), 4) * 100) + '%' ELSE '0%' END AS CTutoringPurRate,
		    AVG(CTutoringNotReg) AS CTutoringNotReg,
			AVG(CTutoringEndMonth) AS CTutoringEndMonth,
			-- 개별지도 이탈율
			CASE WHEN AVG(CTutoringBeginMonth*1.0) > 0 THEN CONVERT(nvarchar,ROUND((AVG(CTutoringBeginMonth*1.0) - AVG(CTutoringEndMonth*1.0) + AVG(CTutoringNew*1.0) + AVG(CTutoringRtn*1.0)) / CONVERT(FLOAT,AVG(CTutoringBeginMonth*1.0)), 4) * 100) + '%'  
			ELSE '0%' END AS CTutoringLeaveRate,
			AVG(CTotalSale) AS CTotalSale,
			AVG(CCounselSale) AS CCounselSale,
			AVG(CCommas) AS CCommas,
			AVG(COnlyCommas) AS COnlyCommas,
			AVG(CPremiumCommas) AS CPremiumCommas,
			AVG(CTutoringSale) AS CTutoringSale,
			AVG(COnlyCounsel) AS COnlyCounsel,
			AVG(CPremium) AS CPremium,
			AVG(COnlyTutoring) AS COnlyTutoring,
			AVG(CCg4)  AS CCg4,  AVG(CCg5)  AS CCg5,  AVG(CCg6)  AS CCg6,
			AVG(CCg7)  AS CCg7,  AVG(CCg8)  AS CCg8,  AVG(CCg9)  AS CCg6,
			AVG(CCg10) AS CCg10, AVG(CCg11) AS CCg11, AVG(CCg12) AS CCg6,
			AVG(CCounsel) AS CCounsel,
			AVG(CTg4)  AS CTg4,  AVG(CTg5)  AS CTg5,  AVG(CTg6)  AS CCg6,
			AVG(CTg7)  AS CTg7,  AVG(CTg8)  AS CTg8,  AVG(CTg9)  AS CCg6,
			AVG(CTg10) AS CTg10, AVG(CTg11) AS CTg11, AVG(CTg12) AS CCg6,
			AVG(CTutoring) AS CTutoring,
			0, 2 AS CSORT
		FROM #STUDENT_COUNT(nolock)
		WHERE CSORT = 3

	-- 전체합계 생성
	INSERT INTO #STUDENT_COUNT
	SELECT @dDATE, '[합계]', '', '', '', '', '0000000', '',
		   SUM(CCounselBeginMonth) AS CCounselBeginMonth,
		   SUM(CCounselNew) AS CCounselNew,
		   --2019.12.28. 신규률
		   CASE WHEN SUM(CCounselBeginMonth) > 0 THEN CONVERT(nvarchar,ROUND((SUM(CCounselNew)) / CONVERT(FLOAT,SUM(CCounselBeginMonth)), 4) * 100) + '%' ELSE '0%' END AS CCounselNewRate, 
		   SUM(CCounselRtn) AS CCounselRtn,
		   --2019.12.28. 복회률
		   CASE WHEN SUM(CCounselBeginMonth) > 0 THEN CONVERT(nvarchar,ROUND((SUM(CCounselRtn)) / CONVERT(FLOAT,SUM(CCounselBeginMonth)), 4) * 100) + '%' ELSE '0%' END AS CCounselRtnRate, 
		   SUM(CLeaveOn)    AS CLeaveOn,
		   SUM(CLeaveEnd)   AS CLeaveEnd,
		   -- 상담관리 이탈율
		   CASE WHEN SUM(CCounselBeginMonth) > 0 THEN CONVERT(nvarchar,ROUND((SUM(CCounselRealEnd)) / CONVERT(FLOAT,SUM(CCounselBeginMonth)), 4) * 100) + '%' 
		   ELSE '0%' END AS CCounselLeaveRate, 
		   SUM(CCounselRealEnd) AS CCounselRealEnd,
		   SUM(CCounselReal) AS CCounselReal,
		   --2019.12.28. 순증,순증률
		   SUM(CCounselNew)+SUM(CCounselRtn)-SUM(CCounselRealEnd) as CCounselPur,
		   CASE WHEN SUM(CCounselBeginMonth) > 0 THEN CONVERT(nvarchar,ROUND((SUM(CCounselNew)+SUM(CCounselRtn)-SUM(CCounselRealEnd)) / CONVERT(FLOAT,SUM(CCounselBeginMonth)), 4) * 100) + '%' ELSE '0%' END AS CCounselPurRate,
		   SUM(CTutoringBeginMonth) AS CTutoringBeginMonth,
		   SUM(CTutoringNew) AS CTutoringNew,
		   --2019.12.28. 신규률
		   CASE WHEN SUM(CTutoringBeginMonth) > 0 THEN CONVERT(nvarchar,ROUND((SUM(CTutoringNew)) / CONVERT(FLOAT,SUM(CTutoringBeginMonth)), 4) * 100) + '%' ELSE '0%' END AS CTutoringNewRate,
		   SUM(CTutoringRtn) AS CTutoringRtn,
		   --2019.12.28. 복회률
		   CASE WHEN SUM(CTutoringBeginMonth) > 0 THEN CONVERT(nvarchar,ROUND((SUM(CTutoringRtn)) / CONVERT(FLOAT,SUM(CTutoringBeginMonth)), 4) * 100) + '%' ELSE '0%' END AS CTutoringNewRate,
		   SUM(CTutoringEnd) AS CTutoringEnd,
		   --2019.12.28. 순증,순증률
		   SUM(CTutoringNew)+SUM(CTutoringRtn)-SUM(CTutoringEnd) as CTutoringPur,
		   CASE WHEN SUM(CTutoringBeginMonth) > 0 THEN CONVERT(nvarchar,ROUND((SUM(CTutoringNew)+SUM(CTutoringRtn)-SUM(CTutoringEnd)) / CONVERT(FLOAT,SUM(CTutoringBeginMonth)), 4) * 100) + '%' ELSE '0%' END AS CTutoringPurRate,
		   SUM(CTutoringNotReg) AS CTutoringNotReg,
		   SUM(CTutoringEndMonth) AS CTutoringEndMonth,
		   -- 개별지도 이탈율
		   CASE WHEN SUM(CTutoringBeginMonth) > 0 
				THEN CONVERT(nvarchar,ROUND((SUM(CTutoringBeginMonth) - SUM(CTutoringEndMonth) + SUM(CTutoringNew) + SUM(CTutoringRtn)) / CONVERT(FLOAT,SUM(CTutoringBeginMonth)), 4) * 100) + '%'  
		   ELSE '0%' END       AS CTutoringLeaveRate,
		   SUM(CTotalSale)     AS CTotalSale,
		   SUM(CCounselSale)   AS CCounselSale,
		   SUM(CCommas)        AS CCommas,
		   SUM(COnlyCommas)    AS COnlyCommas,
		   SUM(CPremiumCommas) AS CPremiumCommas,
		   SUM(CTutoringSale)  AS CTutoringSale,
		   SUM(COnlyCounsel)   AS COnlyCounsel,
		   SUM(CPremium) AS CPremium,
		   SUM(COnlyTutoring) AS COnlyTutoring,
		   SUM(CCg4)  AS CCg4,  SUM(CCg5)  AS CCg5,  SUM(CCg6)  AS CCg6,
		   SUM(CCg7)  AS CCg7,  SUM(CCg8)  AS CCg8,  SUM(CCg9)  AS CCg6,
		   SUM(CCg10) AS CCg10, SUM(CCg11) AS CCg11, SUM(CCg12) AS CCg6,
		   SUM(CCounsel) AS CCounsel,
		   SUM(CTg4)  AS CTg4,  SUM(CTg5)  AS CTg5,  SUM(CTg6)  AS CCg6,
		   SUM(CTg7)  AS CTg7,  SUM(CTg8)  AS CTg8,  SUM(CTg9)  AS CCg6,
		   SUM(CTg10) AS CTg10, SUM(CTg11) AS CTg11, SUM(CTg12) AS CCg6,
		   SUM(CTutoring) AS CTutoring,
		   0, 1 AS CSORT
	  FROM #STUDENT_COUNT(nolock)
	 WHERE CSORT = 3
	
	--2019.12.28. 직영 및 지점 합계
	INSERT INTO #STUDENT_COUNT
	SELECT @dDATE, CFlagName, '[' + CFlagName +' 합계]', '', '', '', '0000000', '',
		   SUM(CCounselBeginMonth) AS CCounselBeginMonth,
		   SUM(CCounselNew) AS CCounselNew,
		   --2019.12.28. 신규률
		   CASE WHEN SUM(CCounselBeginMonth) > 0 THEN CONVERT(nvarchar,ROUND((SUM(CCounselNew)) / CONVERT(FLOAT,SUM(CCounselBeginMonth)), 4) * 100) + '%' ELSE '0%' END AS CCounselNewRate, 
		   SUM(CCounselRtn) AS CCounselRtn,
		   --2019.12.28. 복회률
		   CASE WHEN SUM(CCounselBeginMonth) > 0 THEN CONVERT(nvarchar,ROUND((SUM(CCounselRtn)) / CONVERT(FLOAT,SUM(CCounselBeginMonth)), 4) * 100) + '%' ELSE '0%' END AS CCounselRtnRate, 
		   SUM(CLeaveOn)    AS CLeaveOn,
		   SUM(CLeaveEnd)   AS CLeaveEnd,
		   -- 상담관리 이탈율
		   CASE WHEN SUM(CCounselBeginMonth) > 0 THEN CONVERT(nvarchar,ROUND((SUM(CCounselRealEnd)) / CONVERT(FLOAT,SUM(CCounselBeginMonth)), 4) * 100) + '%' 
		   ELSE '0%' END AS CCounselLeaveRate, 
		   SUM(CCounselRealEnd) AS CCounselRealEnd,
		   SUM(CCounselReal) AS CCounselReal,
		   --2019.12.28. 순증,순증률
		   SUM(CCounselNew)+SUM(CCounselRtn)-SUM(CCounselRealEnd) as CCounselPur,
		   CASE WHEN SUM(CCounselBeginMonth) > 0 THEN CONVERT(nvarchar,ROUND((SUM(CCounselNew)+SUM(CCounselRtn)-SUM(CCounselRealEnd)) / CONVERT(FLOAT,SUM(CCounselBeginMonth)), 4) * 100) + '%' ELSE '0%' END AS CCounselPurRate,
		   SUM(CTutoringBeginMonth) AS CTutoringBeginMonth,
		   SUM(CTutoringNew) AS CTutoringNew,
		   --2019.12.28. 신규률
		   CASE WHEN SUM(CTutoringBeginMonth) > 0 THEN CONVERT(nvarchar,ROUND((SUM(CTutoringNew)) / CONVERT(FLOAT,SUM(CTutoringBeginMonth)), 4) * 100) + '%' ELSE '0%' END AS CTutoringNewRate,
		   SUM(CTutoringRtn) AS CTutoringRtn,
		   --2019.12.28. 복회률
		   CASE WHEN SUM(CTutoringBeginMonth) > 0 THEN CONVERT(nvarchar,ROUND((SUM(CTutoringRtn)) / CONVERT(FLOAT,SUM(CTutoringBeginMonth)), 4) * 100) + '%' ELSE '0%' END AS CTutoringNewRate,
		   SUM(CTutoringEnd) AS CTutoringEnd,
		   --2019.12.28. 순증,순증률
		   SUM(CTutoringNew)+SUM(CTutoringRtn)-SUM(CTutoringEnd) as CTutoringPur,
		   CASE WHEN SUM(CTutoringBeginMonth) > 0 THEN CONVERT(nvarchar,ROUND((SUM(CTutoringNew)+SUM(CTutoringRtn)-SUM(CTutoringEnd)) / CONVERT(FLOAT,SUM(CTutoringBeginMonth)), 4) * 100) + '%' ELSE '0%' END AS CTutoringPurRate,
		   SUM(CTutoringNotReg) AS CTutoringNotReg,
		   SUM(CTutoringEndMonth) AS CTutoringEndMonth,
		   -- 개별지도 이탈율
		   CASE WHEN SUM(CTutoringBeginMonth) > 0 
				THEN CONVERT(nvarchar,ROUND((SUM(CTutoringBeginMonth) - SUM(CTutoringEndMonth) + SUM(CTutoringNew) + SUM(CTutoringRtn)) / CONVERT(FLOAT,SUM(CTutoringBeginMonth)), 4) * 100) + '%'  
		   ELSE '0%' END       AS CTutoringLeaveRate,
		   SUM(CTotalSale)     AS CTotalSale,
		   SUM(CCounselSale)   AS CCounselSale,
		   SUM(CCommas)        AS CCommas,
		   SUM(COnlyCommas)    AS COnlyCommas,
		   SUM(CPremiumCommas) AS CPremiumCommas,
		   SUM(CTutoringSale)  AS CTutoringSale,
		   SUM(COnlyCounsel)   AS COnlyCounsel,
		   SUM(CPremium) AS CPremium,
		   SUM(COnlyTutoring) AS COnlyTutoring,
		   SUM(CCg4)  AS CCg4,  SUM(CCg5)  AS CCg5,  SUM(CCg6)  AS CCg6,
		   SUM(CCg7)  AS CCg7,  SUM(CCg8)  AS CCg8,  SUM(CCg9)  AS CCg6,
		   SUM(CCg10) AS CCg10, SUM(CCg11) AS CCg11, SUM(CCg12) AS CCg6,
		   SUM(CCounsel) AS CCounsel,
		   SUM(CTg4)  AS CTg4,  SUM(CTg5)  AS CTg5,  SUM(CTg6)  AS CCg6,
		   SUM(CTg7)  AS CTg7,  SUM(CTg8)  AS CTg8,  SUM(CTg9)  AS CCg6,
		   SUM(CTg10) AS CTg10, SUM(CTg11) AS CTg11, SUM(CTg12) AS CCg6,
		   SUM(CTutoring) AS CTutoring,
		   0, 3 AS CSORT
	  FROM #STUDENT_COUNT(nolock)
	 WHERE CSORT = 3
	 GROUP BY CFlagName

	-- 쿼리리턴
	SELECT a.*
	  FROM #STUDENT_COUNT a(nolock)
	 ORDER BY a.CSORT, CFlagName, a.CDisplayIndex

	 RETURN
END -- 지점현황 끝

--=============================================
--학생리스트
--=============================================
S2_RTN: 
BEGIN

	SELECT a.CDay, a.CDepartCode, a.CStudentCode, c.CName AS CStudentName, c.CSchoolCode, d.CName AS CSchoolName, a.CGrade, e.COpenName0
	  FROM TFacilityDailyCount a(NOLOCK)      -- 월말학생리스트
	 INNER JOIN TStudent c(NOLOCK)
	    ON a.CDepartCode = c.CBranchCode AND a.CStudentCode = c.CCode
	 LEFT JOIN TSchool d(NOLOCK)
	    ON c.CSchoolCode = d.CCode
	 LEFT JOIN TFacility e(NOLOCK)
	    ON a.CDepartCode =e.CDepartCode
	 WHERE a.CDepartCode LIKE @pBRAND + '%'
	   AND a.CDay = @dDATE
	   AND a.CDepartCode LIKE @pFACILITY + '%'
	   AND a.CType  = @cTYPE AND a.CFlag = @pFLAG    -- 개별지도 월초학생
	 ORDER BY a.CDepartCode, c.CName

	 RETURN
END

GO

--/*******************************************************************************************************
--/* 단위업무 : 검사정보 이관
--/* 작 성 자 : 김 길 명
--/* 작 성 일 : 2014.03.08
--/* 작성내용 : 
--/* 수 정 일 :	
--/* 수 정 자 :	
--/* 수정내용 : [TTestInfo], [TTestCT], [TTestMBTI], [TTestSurvey]
--/* 비    고 :	
--/* 실행코드 : EXEC SP_TManagementResult_Create '' , '2014-01-01'
--/*******************************************************************************************************
CREATE PROCEDURE [dbo].[SP_TManagementResult_Create](  
	@pCBranchCode			VARCHAR(20) = null, -- 지점코드
	@pCBranchStartDate	DATETIME = null		-- 지점시작일자
)                                                                                      
AS                                                                                                  

DECLARE @CNT INT
DECLARE @CStDepartCode		VARCHAR(20)
DECLARE @CStDepartStartDate   DATETIME
DECLARE @CStCode			VARCHAR(20)
DECLARE @CManageDate		DATETIME
DECLARE @CVltType			INT
DECLARE @CCommonGroupCode VARCHAR(20)
DECLARE @CCommonCode VARCHAR(20)
DECLARE @CStartTime		DATETIME
DECLARE @CEndTime			DATETIME
DECLARE @topic VARCHAR(MAX)
DECLARE @componentName VARCHAR(MAX)
DECLARE @WStartTime		DATETIME
DECLARE @WEndTime			DATETIME

DECLARE @CMangementComment NVARCHAR(MAX)
DECLARE @CCounselComment NVARCHAR(MAX)
DECLARE @CParentComment NVARCHAR(MAX)

DECLARE @CParentMethod NVARCHAR(15)
DECLARE @CParentSide NVARCHAR(15)
DECLARE @CParentSubject NVARCHAR(255)

DECLARE @CManager NVARCHAR(15)

BEGIN TRY
	
	DECLARE CURSOR1 CURSOR FOR

	SELECT T2.CBranchCode,
	       T2.CBranchStartDate,
		   T2.CCode,
		   T1.[상담일자] AS CManageDate,
		   1 AS CVltType,
		   'STUDENTLEVEL' AS CCommonGroupCode, 
		   'Normal' AS CCommonCode,
		   CONVERT(DATETIME, CONVERT(VARCHAR, T1.[상담일자], 23) + ' 18:00:00.000') AS CStartTime,
		   CONVERT(DATETIME, CONVERT(VARCHAR, T1.[상담일자], 23) + ' 19:00:00.000') AS CEndTime,
		   T1.[상담내용] AS CCounselComment,
	       T1.[상담주제] AS topic,
	       T1.[상담컴포넌트] AS componentName,
		   DATEADD(wk, DATEDIFF(wk,0,T1.[상담일자]), 0) AS WStartTime, 
           DATEADD(wk, DATEDIFF(wk,0,T1.[상담일자]), 6) AS WEndTime,
		   T1.[매니저코드(신)]
	  FROM [dbo].[학생상담기록] T1(NOLOCK)
	  LEFT JOIN TStudent T2(NOLOCK)
	   ON CONVERT(VARCHAR, T1.[학생코드(신)]) = T2.CCode
	 ORDER BY T1.[상담일자]


	OPEN CURSOR1

	FETCH NEXT FROM CURSOR1 INTO @CStDepartCode, @CStDepartStartDate, @CStCode, @CManageDate, @CVltType, @CCommonGroupCode, @CCommonCode,
							   @CStartTime, @CEndTime, @CCounselComment, @topic, @componentName, @WStartTime, @WEndTime, @CManager
	SET @CNT = 1
	WHILE @@FETCH_STATUS = 0
		BEGIN
			-- 상담기록 : 데이터의 존재여부 확인 후 신규 또는 업데이트(일자 중복의 체크)
			IF (SELECT COUNT(CStCode) 
			     FROM TManagementResult(NOLOCK)
				WHERE CStDepartCode = @CStDepartCode
				  AND @CStDepartStartDate = @CStDepartStartDate 
				  AND CStCode = @CStCode
				  AND CManageDate = @CManageDate) = 0
			BEGIN
				--신규
				INSERT INTO TManagementResult
				SELECT  @CStDepartCode, @CStDepartStartDate, @CStCode, @CManageDate,
					   @CVltType, @CCommonGroupCode, @CCommonCode, NULL, NULL, NULL,
					   @CStartTime, @CEndTime, @CCounselComment, 0,
					   NULL, NULL, NULL, NULL, NULL, GETDATE(), 'DEV_callmenu', 'Signed'

			END 
			ELSE BEGIN
				--수정
				UPDATE TManagementResult SET 
					CCounselComment = @CCounselComment
				WHERE CStDepartCode = @CStDepartCode
				  AND @CStDepartStartDate = @CStDepartStartDate 
				  AND CStCode = @CStCode
				  AND CManageDate = @CManageDate
			END

			-- 상담기록 등록 시 상담 컴포넌트 배치(ManagementComponent)에 값도 생성 시킨다.(있으면 업데이트-시작일과 종료일이 같은지 체크)
			IF (SELECT COUNT(CStCode)
			     FROM TManagementComponent(NOLOCK)
				WHERE CStDepartCode = @CStDepartCode 
				  AND CStDepartStartDate = @CStDepartStartDate
				  AND CStCode = @CStCode
				  AND CStartDate = @WStartTime
				  AND CEndDate   = @WEndTime) = 0
			BEGIN
				-- 기간으로 체크를 하였지만 PK가 다르므로 일단 한번 더 걸러주고 
				INSERT INTO TManagementComponent
				SELECT @CStDepartCode, @CStDepartStartDate, @CStCode, (SELECT MAX(CNo)+1 FROM TManagementComponent),
				       NULL, NULL, @WStartTime, @WEndTime, 1, @topic, 'Learn', @componentName,
					   NULL, NULL, GETDATE(), 'DEV_callmenu', 'Signed'
			END
			ELSE BEGIN
				UPDATE TManagementComponent SET
					CTopic = @topic,
					CComponentName = @componentName
				WHERE CStDepartCode = @CStDepartCode 
				  AND CStDepartStartDate = @CStDepartStartDate
				  AND CStCode = @CStCode
				  AND CStartDate = @WStartTime
				  AND CEndDate   = @WEndTime
			END

			-- 상담, 개별지도 결제내역에 매니저 정보가 없는 해당기간이 있을 경우 업데이트
			-- 혹 매니저 코드가 없을 경우가 있을 수 있으니 TRY로 처리
			BEGIN 
				UPDATE TStudentCounsel SET 
					CManager = @CManager
				 WHERE @CManageDate BETWEEN CStartDate AND CEndDate
				   AND CManager IS NULL

				UPDATE TStudentTutoring SET 
					CManager = @CManager
				 WHERE @CManageDate BETWEEN CStartDate AND CEndDate
				   AND CManager IS NULL
			END 

			FETCH NEXT FROM CURSOR1 INTO @CStDepartCode, @CStDepartStartDate, @CStCode, @CManageDate, @CVltType, @CCommonGroupCode, @CCommonCode,
									   @CStartTime, @CEndTime, @CCounselComment, @topic, @componentName, @WStartTime, @WEndTime, @CManager
			
				
		END
	CLOSE CURSOR1
	DEALLOCATE CURSOR1



	DECLARE CURSOR2 CURSOR FOR
	
	select T2.CBranchCode,
	       T2.CBranchStartDate,
		   T2.CCode,
		   T1.[상담기록일자],
		   1 AS CVltType,
		   'STUDENTLEVEL' AS CCommonGroupCode, 
		   'Normal' AS CCommonCode,
		   CONVERT(DATETIME, CONVERT(VARCHAR, T1.[상담기록일자], 23) + ' 18:00:00.000') AS CStartTime,
		   CONVERT(DATETIME, CONVERT(VARCHAR, T1.[상담기록일자], 23) + ' 19:00:00.000') AS CEndTime,
		   CASE T1.[상담방법] WHEN '전화' THEN 'Call' WHEN '방문' THEN 'Visit' END AS CParentMethod,
		   CASE T1.[연락주체] WHEN '매니저 to 학부모' THEN 'ManagerCall' WHEN '학부모 to 매니저' THEN 'ParentCall' END AS CParentSide,
		   T1.[상담주제] AS CParentSubject,
		   T1.[상담내용] AS CParentComment,
		   T1.[매니저코드(신)]
    FROM [dbo].[학부모상담] T1(NOLOCK)
	  LEFT JOIN TStudent T2(NOLOCK)
	   ON CONVERT(VARCHAR, T1.[학생코드(신)]) = T2.CCode
	
	OPEN CURSOR2
	
	FETCH NEXT FROM CURSOR2 INTO @CStDepartCode, @CStDepartStartDate, @CStCode, @CManageDate, @CVltType, @CCommonGroupCode, @CCommonCode,
							   @CStartTime, @CEndTime, @CParentMethod, @CParentSide, @CParentSubject, @CParentComment, @CManager
	
	WHILE @@FETCH_STATUS = 0
		BEGIN
			-- 학부모상담기록 : 데이터의 존재여부 확인 후 신규 또는 업데이트(일자 중복의 체크)
			IF (SELECT COUNT(CStCode) 
			     FROM TManagementResult(NOLOCK)
				WHERE CStDepartCode = @CStDepartCode
				  AND @CStDepartStartDate = @CStDepartStartDate 
				  AND CStCode = @CStCode
				  AND CManageDate = @CManageDate) = 0
			BEGIN
				--신규
				INSERT INTO TManagementResult
				SELECT  @CStDepartCode, @CStDepartStartDate, @CStCode, @CManageDate,
					   @CVltType, @CCommonGroupCode, @CCommonCode, NULL, NULL, NULL,
					   @CStartTime, @CEndTime, NULL, 0,
					   @CParentMethod, @CParentSide, @CParentSubject, @CParentComment, NULL, GETDATE(), 'DEV_callmenu', 'Signed'
			END 
			ELSE BEGIN
				--수정
				UPDATE TManagementResult SET 
					CParentMethod = @CParentMethod, 
					CParentSide = @CParentSide, 
					CParentSubject = @CParentSubject, 
					CParentComment = @CParentComment
				WHERE CStDepartCode = @CStDepartCode
				  AND @CStDepartStartDate = @CStDepartStartDate 
				  AND CStCode = @CStCode
				  AND CManageDate = @CManageDate
			END

			-- 상담, 개별지도 결제내역에 매니저 정보가 없는 해당기간이 있을 경우 업데이트
			-- 혹 매니저 코드가 없을 경우가 있을 수 있으니 TRY로 처리
			BEGIN 
				UPDATE TStudentCounsel SET 
					CManager = @CManager
				 WHERE @CManageDate BETWEEN CStartDate AND CEndDate
				   AND CManager IS NULL

				UPDATE TStudentTutoring SET 
					CManager = @CManager
				 WHERE @CManageDate BETWEEN CStartDate AND CEndDate
				   AND CManager IS NULL
			END

			FETCH NEXT FROM CURSOR2 INTO @CStDepartCode, @CStDepartStartDate, @CStCode, @CManageDate, @CVltType, @CCommonGroupCode, @CCommonCode,
									   @CStartTime, @CEndTime, @CParentMethod, @CParentSide, @CParentSubject, @CParentComment, @CManager
		END 
	CLOSE CURSOR2
	DEALLOCATE CURSOR2

	DECLARE CURSOR3 CURSOR FOR

	SELECT T2.CBranchCode,
	       T2.CBranchStartDate,
		   T2.CCode,
		   T1.[관리일자],
		   1 AS CVltType,
		   'STUDENTLEVEL' AS CCommonGroupCode, 
		   'Normal' AS CCommonCode,
		   CONVERT(DATETIME, CONVERT(VARCHAR, T1.[관리일자], 23) + ' 18:00:00.000') AS CStartTime,
		   CONVERT(DATETIME, CONVERT(VARCHAR, T1.[관리일자], 23) + ' 19:00:00.000') AS CEndTime,
		   T1.[기록내용],
		   T1.[매니저코드(신)]
	  FROM [dbo].[학생관리기록] T1(NOLOCK)
	  LEFT JOIN TStudent T2(NOLOCK)
	    ON CONVERT(VARCHAR, T1.[학생코드(신)]) = T2.CCode

	
	OPEN CURSOR3

	FETCH NEXT FROM CURSOR3 INTO @CStDepartCode, @CStDepartStartDate, @CStCode, @CManageDate, @CVltType, @CCommonGroupCode, @CCommonCode,
							   @CStartTime, @CEndTime, @CMangementComment, @CManager

	WHILE @@FETCH_STATUS = 0
		BEGIN
			-- 관리기록 : 데이터의 존재여부 확인 후 신규 또는 업데이트(일자 중복의 체크)
			IF (SELECT COUNT(CStCode) 
			     FROM TManagementResult(NOLOCK)
				WHERE CStDepartCode = @CStDepartCode
				  AND @CStDepartStartDate = @CStDepartStartDate 
				  AND CStCode = @CStCode
				  AND CManageDate = @CManageDate) = 0
			BEGIN
				--신규
				INSERT INTO TManagementResult
				SELECT  @CStDepartCode, @CStDepartStartDate, @CStCode, @CManageDate,
					   @CVltType, @CCommonGroupCode, @CCommonCode, @CMangementComment, NULL, NULL,
					   @CStartTime, @CEndTime, NULL, 0,
					   NULL, NULL, NULL, NULL, NULL, GETDATE(), 'DEV_callmenu', 'Signed'
			END 
			ELSE BEGIN
				--수정
				UPDATE TManagementResult SET 
					CMangementComment = @CMangementComment
				WHERE CStDepartCode = @CStDepartCode
				  AND @CStDepartStartDate = @CStDepartStartDate 
				  AND CStCode = @CStCode
				  AND CManageDate = @CManageDate
			END

			-- 상담, 개별지도 결제내역에 매니저 정보가 없는 해당기간이 있을 경우 업데이트
			-- 혹 매니저 코드가 없을 경우가 있을 수 있으니 TRY로 처리
			BEGIN 
				UPDATE TStudentCounsel SET 
					CManager = @CManager
				 WHERE @CManageDate BETWEEN CStartDate AND CEndDate
				   AND CManager IS NULL

				UPDATE TStudentTutoring SET 
					CManager = @CManager
				 WHERE @CManageDate BETWEEN CStartDate AND CEndDate
				   AND CManager IS NULL
			END

			FETCH NEXT FROM CURSOR3 INTO @CStDepartCode, @CStDepartStartDate, @CStCode, @CManageDate, @CVltType, @CCommonGroupCode, @CCommonCode,
									   @CStartTime, @CEndTime, @CMangementComment, @CManager
		END 
	CLOSE CURSOR3
	DEALLOCATE CURSOR3

END TRY
BEGIN CATCH
	SELECT 'ER', '행번호:'+CONVERT(VARCHAR, @CNT) + ',' + ERROR_MESSAGE() AS ErrorMessage
    RETURN -1
END CATCH

GO


CREATE PROCEDURE [dbo].[SP_WB_TutoringSC]
	@case			VARCHAR(30),
	@branchCode     NVARCHAR(30) = '',
	@startDate		NVARCHAR(10) = '',
	@endDate		NVARCHAR(10) = ''
AS
BEGIN
	if @case = 'GetTutoringStudentList'		 goto GetTutoringStudentList	-- 개별지도를 받는 현재 학생들의 리스트
	if @case = 'GetMamagerList'				 goto GetMamagerList	-- 근무중인 매니저들의 이름과 코드
	if @Case = 'GetTutorList'				 goto GetTutorList	-- 근무중인 튜터들의 이름과 코드
	if @Case = 'GetTutoringSCUserStatistics' goto GetTutoringSCUserStatistics -- 개별지도시간표 사용통계
	if @Case = 'GetCommaCount'               goto GetCommaCount -- 선택한 기간의 튜터배치 갯수와 학생배치갯수를 반환
	if @Case = 'InitBranchComma'               goto InitBranchComma -- 개별지도시간표 저장 후 지점의 콤마 정리

	select code='ER', mfg='정의되지 않은 분기코드(' + @Case + ')입니다.'
	return
END

-- 개별지도를 받는 현재 학생들의 리스트
GetTutoringStudentList:
BEGIN

select 
		a.CBranchCode as '지점코드'
--		,d.CStdDepartCode as 'CStdDepartCode'
--		,d.CStdDepartStartDate as 'CStdDepartStartDate'
		-- 개별지도 취소시 종료학생정보에 나오지 않는 문제로 환불테이블 참조 임시조치
		,ISNULL(d.CStdDepartCode, (SELECT top 1 CStdBrcDptCode FROM TStudentTutoringRefund (NOLOCK) WHERE CStdCode = a.CCode)) as 'CStdDepartCode'
		,ISNULL(d.CStdDepartStartDate, (SELECT top 1 CStdBrcDptStartDate FROM TStudentTutoringRefund (NOLOCK) WHERE CStdCode = a.CCode)) as 'CStdDepartStartDate'
		,b.CName0 as '지점명'
		,a.CCode as '학생코드'
		,a.CName as '학생이름'
		,c.CName as '학교명'
		,CASE a.CGrade 
			when 'g1' then '초1'
			when 'g2' then '초2'
			when 'g3' then '초3'
			when 'g4' then '초4'
			when 'g5' then '초5'
			when 'g6' then '초6'
			when 'g7' then '중1'
			when 'g8' then '중2'
			when 'g9' then '중3'
			when 'g10' then '고1'
			when 'g11' then '고2'
			when 'g12' then '고3'
			when 'g13' then '(중)재수'
			when 'g14' then '(중)검정'
			when 'g15' then '(고)재수'
			when 'g16' then '(고)검정'
		 end as '학년'
		,case when a1.manageType = 'AB' then '프리미엄'
			 when a1.manageType =  'A' then '상담관리'
			 when a1.manageType =  'B' then '개별지도'
			 else '종료'
		end AS '프로그램'
		,e1.CStartDate AS '상담관리 시작일'			
		,case e.CAttendType when 'W0day'  then '상담' 
							when 'W1day'  then '주1회' 
							when 'W2days' then '주2회' 
							when 'W3days' then '주3회' 
							when 'W4days' then '주4회' 
							when 'W5days' then '주5회' 
							when 'W6days' then '주6회' 
							when 'W7days' then '주7회' 
		 end as '주당등원횟수'
		,d1.CStartDate as '개별지도 시작일'
		,(case 
				when a.CStudentStatus = 'Regist' then '등원'
				when a.CStudentStatus = 'Retire' then '종료'
				when a.CStudentStatus = 'Pause' then '휴원'
				else '상태확인'
			end)
			as '상태'
		,a.CPhoneStudent as '학생핸드폰'
		,a.CNameFather as '아버지성함'
		,a.CPhoneFather as '아버지핸드폰'
		,a.CNameMother as '어머니성함'
		,a.CPhoneMother as '어머니핸드폰'
		--,a.CReentryPossibility as '재등록가능성'
		--,a.CEndStatus as '상담관리종료'
		,a.CEndDay as '상담관리종료일'
		--,a.CTutorEndStatus as '개별지도종료'
		,a.CTutorEndDay as '개별지도종료일'
		,d.CCommaPerWeek as '계획콤마수'
		,d.CTutoringCourse as '과목'
		--,a.CPhoneHome as '집전화번호'
		--,a.CAddress1Home as '집주소'
		--,a.CVltType as vltType
		
		,d.CManageCommas as manageCommas
		,d.CCommaPerWeek AS CCommaPerWeek
		,f1.CName0 AS '개별지도매니저'
		,e.CManageDays as manageDays
		,f2.CName0 as '상담관리매니저'
		,(CASE 
				WHEN a1.manageType =  'B' THEN f1.CName0 -- 온리개별지도
				ELSE f2.CName0 
			END) AS '담당매니저'
		,(CASE 
				WHEN a1.manageType =  'B' THEN f1.CStaffId -- 온리개별지도
				ELSE f2.CStaffId 
			END) AS '담당매니저코드'
		,(CASE 
				WHEN a1.manageType =  'B' THEN f1.CTempString5  -- 온리개별지도
				ELSE f2.CTempString5  
			END) AS '담당매니저컬러'
		/*
		,(select top 1 CRegistDate from TTestInfo (NOLOCK) where CCode = a.CCode order by CRegistDate desc) as '검사등록일'
		,(select top 1 CPayMoney from TTestInfo (NOLOCK) where CCode = a.CCode order by CRegistDate desc) as '검사등록비용'
		-- ,e.CTotalPrice as '상_총결제액'
		,e.CPayPrice as '상_실결제액'
		-- ,d.CBillPrice as '개_총결제액'
		,d.CPayPrice  as '개_실결제액'
		,(ISNULL(e.CPayPrice,0) + ISNULL(d.CPayPrice,0)) as '실결제액 합계'
		*/
	from
		--학생대상조건 지정 
		(
/*
			select a.CScDepartCode as FacilityCd, a.CScDepartStartDate as FacilityStartDate, a.CScCode as StudentCd
			  from TStudentCounsel a (NOLOCK) --상담관리
--			  where a.CRegistType = 'Newcomer'
			  WHERE a.CScDepartCode = @branchCode
--			   and a.CStartDate between @startDate and @endDate
			 group by a.CScDepartCode, a.CScDepartStartDate, a.CScCode
			 union
*/			
			select a.CStdDepartCode as FacilityCd, a.CStdDepartStartDate as FacilityStartDate, a.CStdCode as StudentCd
			  from TStudentTutoring a (NOLOCK)--개별지도
--			  where a.CRegistType = 'Newcomer'
			  where a.CStdDepartCode = @branchCode
--			   and a.CStartDate between @startDate and @endDate
			 group by a.CStdDepartCode, a.CStdDepartStartDate, a.CStdCode
		) T1
	inner join TStudent a (NOLOCK) on t1.FacilityCd = a.CBranchCode and t1.FacilityStartDate = a.CBranchStartDate and t1.StudentCd = a.CCode
	left join (select CBranchCode, CCode,
					   case when CLastCounselNo  IS NULL OR CEndStatus IS NOT NULL		then '' else 'A' end +
					   case when CLastTutoringNo IS NULL OR CTutorEndStatus IS NOT NULL	then '' else 'B' end as manageType
				  from TStudent (NOLOCK)) a1 on a.CBranchCode = a1.CBranchCode and a.CCode = a1.CCode
	left join TDepartment b (NOLOCK) on a.CBranchCode = b.CDepartCode and a.CBranchStartDate = b.CDepartStartDate
	left join TSchool   c (NOLOCK) on a.CSchoolCode = c.CCode
	left join TStudentTutoring d (NOLOCK) on a.CBranchCode = d.CStdDepartCode and a.CBranchStartDate = d.CStdDepartStartDate and a.CCode = d.CStdCode and a.CLastTutoringNo = d.CNo
	left join TStudentCounsel  e (NOLOCK) on a.CBranchCode = e.CScDepartCode and a.CBranchStartDate = e.CScDepartStartDate and a.CCode = e.CScCode and a.CLastCounselNo = e.CNo
	left join TStaff f1 (NOLOCK) on d.CManager = f1.CStaffId
	left join TStaff f2 (NOLOCK) on e.CManager = f2.CStaffId
	-- left join TTestInfo z on a.CCode = z.CCode
	left join (
				select CStdDepartCode, CStdDepartStartDate, CStdCode, min(CStartDate) as CStartDate
				  from TStudentTutoring (NOLOCK) 
				 group by CStdDepartCode, CStdDepartStartDate, CStdCode) d1 on a.CBranchCode = d1.CStdDepartCode and a.CBranchStartDate = d1.CStdDepartStartDate and a.CCode = d1.CStdCode
	left join (
				select CScDepartCode, CScDepartStartDate, CScCode, min(CStartDate) as CStartDate
				  from TStudentCounsel (NOLOCK)
				 group by CScDepartCode, CScDepartStartDate, CScCode) e1 on a.CBranchCode = e1.CScDepartCode and a.CBranchStartDate = e1.CScDepartStartDate and a.CCode = e1.CScCode
	where 1=1
	AND 
		(a.CStudentStatus in ('Regist', 'Pause')	 --재원, 종료, 휴원Regist Retire Pause
		OR (a.CStudentStatus = 'Retire' and a.CEndDay > DATEADD(Day, -100, GETDATE()) ) -- 상담관리 종료된지 한달이내 학생
		OR (a.CStudentStatus = 'Retire' and a.CTutorEndDay > DATEADD(Day, -100, GETDATE()) ) -- 개별지도 종료된지 한달이내 학생
		)
	AND CONVERT(VARCHAR(10),b.CEndDate,23) = '2200-12-31'
	order by a.CBranchCode, a.CEndDay desc, a.CTutorEndDay desc	

	return
END

-- 근무중인 매니저 리스트
GetMamagerList:
BEGIN
	SELECT 
		a.CStaffId AS staff_id, 
		b.CName0 AS 이름,
		c.CLevelType,
		a.CMasterLevelCode,
		c.CName0 AS 직급,
		b.CTempString5 AS Color
	FROM TDepartNowMember a (NOLOCK)
	LEFT JOIN TStaff b (NOLOCK) ON b.CStaffId = a.CStaffId
	LEFT JOIN TStaffLevel c (NOLOCK) ON c.CLevelCode = a.CMasterLevelCode

	WHERE a.CDepartCode = @branchCode
		--  AND a.CMasterLevelType = 'Rank'
		 AND a.CMasterLevelCode NOT IN ('L74', 'L76', 'L78', 'L80', 'L82', 'L70')

	return
END


-- 근무중인 튜터 리스트
GetTutorList:
BEGIN 
	SELECT 
		CTutorSeq AS 'id'
		,CTutorName AS '이름'
		,CSocialSecurityNumber AS '주민번호'
		,CBankAccount AS '계좌정보'
		,CContact AS '연락처'
		,CEmail AS '이메일'
		,CAddress AS '주소'
		,CSubjectMain AS '메인과목'
		,CSubjectSub AS '서브과목'
		,CSubjectThird AS '탐구과목'
		,CWorkingWeek AS '근무요일'
		,CSchedule AS '일정'
		,CInformation AS '기본정보'
		,CRemark AS '메모'
		,CASE WHEN CStop = 1 THEN '근무' ELSE '퇴사' END AS 상태
		,CCommaRest AS '누적콤마수'
		,CDCRest AS '누적DC갯수'
		,CColor AS '과목색상'
		,CSubjectNameColor as '폰트색상'
	from TTutorInfo a (NOLOCK)
	LEFT JOIN TTutorSubject b (NOLOCK) on b.CDepartCode = a.CDepartCode and b.CSubject = a.CSubjectMain
	WHERE
		a.CDepartCode = @branchCode
	   AND CStop = 1 -- 근무자만
	order by CStop DESC, CTutorName

	return
END


-- 개별지도시간표 사용현황
GetTutoringSCUserStatistics:
BEGIN

SELECT 
 a.CDepartCode AS 지점코드,
-- a.CDepartStartDate, 
 a.CName0 AS 지점명,
 b.cnt AS '기간내 시간표저장횟수', 
  b.daysPass AS '마지막저장후 경과일수',
 b.recentSave AS '최근저장일시',
 (CASE
			WHEN ISNULL(b.daysPass, 100) < 7 THEN '시간표 사용중'
			ELSE '시간표 미사용'
		END) AS '사용상태'
 from TDepartment a(nolock)
 LEFT JOIN 
(
	 SELECT 
		aa.branchCode,
		COUNT(1) AS 'cnt',
		MAX(aa.actionDate) AS 'recentSave',
		DATEDIFF(Day, MAX(aa.actionDate) , GETDATE()) AS 'daysPass'
	FROM tbl_eTongUserStatics aa (NOLOCK)
	WHERE aa.actionType = 7  
		AND (convert(varchar, aa.actionDate, 23) BETWEEN @startDate AND @endDate)	
	GROUP BY aa.branchCode
  ) b ON b.branchCode = a.CDepartCode
  
 WHERE (a.CDepartCode like 'EPX%' OR a.CDepartCode like 'ECH%')
 AND a.CDepartCode not in ('ECHBRANCH', 'ECHDIRECT', 'ECHHEAD', 'EPXBRANCH', 'EPXDIRECT', 'EPXHEAD')
 AND CONVERT(VARCHAR(10), a.CEndDate, 23) = '2200-12-31'

 return
END


-- 선택한 기간의 튜터배치 갯수와 학생배치갯수를 반환
GetCommaCount:
BEGIN

SELECT 
a.CDepartCode
,a.CName0
,(SELECT COUNT(1) FROM dbo.TTutoringPlan (NOLOCK) WHERE CDepartCode = a.CDepartCode AND CPlanDate >= @startDate AND CPlanDate <= @endDate AND (CTutorInfo IS NOT NULL AND CTutorInfo <> '')) / 3 AS 튜터배치수
,(SELECT COUNT(1) FROM dbo.TTutoringPlan (NOLOCK) WHERE CDepartCode = a.CDepartCode AND CPlanDate >= @startDate AND CPlanDate <= @endDate AND (CStCode IS NOT NULL AND CStCode <> '')) AS 학생배치수
from TDepartment a (nolock)
WHERE a.CDepartCode = @branchCode
AND CONVERT(VARCHAR(10), a.CEndDate, 23) = '2200-12-31'

return
END



-- 개별지도시간표 저장후 콤마 재계산 처리
InitBranchComma:
BEGIN

UPDATE  b 
SET
    b.CBookedCommas = ISNULL(c.Ccnt, 0),
    b.CRemainCommas = b.CManageCommas - ISNULL(c.Ccnt, 0) - ISNULL(d.CRefundCommas, 0) - ISNULL(e.CComma, 0)
    FROM TStudent a
    INNER JOIN TStudentTutoring b
        ON  a.CBranchCode = b.CStdDepartCode 
        AND a.CBranchStartDate = b.CStdDepartStartDate 
        AND a.CCode = b.CStdCode AND a.CLastTutoringNo = b.CNo
    LEFT JOIN (
            SELECT 
                a.CStDepartCode, 
                a.CStDepartStartDate, 
                a.CStCode, 
                COUNT(1) AS Ccnt
            FROM TTutoringPlan a
            INNER JOIN (
                        SELECT 
                            a.CStdDepartCode,
                            a.CStdDepartStartDate,
                            a.CStdCode,
                            a.CStartDate
                        FROM TStudentTutoring a
                        INNER JOIN (
                                SELECT CStdDepartCode, CStdDepartStartDate, CStdCode, MAX(CNo) AS CNo
                                    FROM TStudentTutoring
                                    WHERE CStdDepartCode = @branchCode
										AND CRegistType IN ('Newcomer','Returning')
                                    GROUP BY CStdDepartCode, CStdDepartStartDate, CStdCode
                                    ) b
                            ON a.CStdDepartCode = b.CStdDepartCode AND a.CStdDepartStartDate = b.CStdDepartStartDate AND
                               a.CStdCode = b.CStdCode AND a.CNo = b.CNo
                        WHERE a.CStdDepartCode = @branchCode
                        ) b
                ON a.CDepartCode = b.CStdDepartCode 
                AND a.CDepartStartDate = b.CStdDepartStartDate 
                AND a.CStCode = b.CStdCode AND a.CPlanDate >= b.CStartDate
            WHERE   a.CDepartCode = @branchCode
				AND a.CStCode IS NOT NULL
            GROUP BY a.CStDepartCode, a.CStDepartStartDate, a.CStCode
            ) c
    ON  a.CBranchCode = c.CStDepartCode AND a.CBranchStartDate = c.CStDepartStartDate AND a.CCode = c.CStCode        
    -- 2015.11.02. 종료일 7일 이전 복회 시 연장처리되므로 환불콤마를 제하기 위해 사용
    LEFT JOIN (
            SELECT 
                a.CStdBrcDptCode,
                a.CStdBrcDptStartDate,
                a.CStdCode,
                SUM(a.CRefundCommas) AS CRefundCommas
            FROM TStudentTutoringRefund a
            INNER JOIN (
                        SELECT CStdDepartCode, CStdDepartStartDate, CStdCode, MAX(CNo) AS CNo
                        FROM TStudentTutoring
                        WHERE CStdDepartCode = @branchCode
                        AND CRegistType IN ('Newcomer','Returning')
                        GROUP BY CStdDepartCode, CStdDepartStartDate, CStdCode
						) b
                ON a.CStdBrcDptCode = b.CStdDepartCode AND a.CStdBrcDptStartDate = b.CStdDepartStartDate AND
                   a.CStdCode = b.CStdCode AND a.CNo >= b.CNo
            WHERE a.CStdBrcDptCode = @branchCode
            GROUP BY a.CStdBrcDptCode, a.CStdBrcDptStartDate, a.CStdCode
            ) d
    ON  a.CBranchCode = d.CStdBrcDptCode  AND a.CBranchStartDate = d.CStdBrcDptStartDate  AND a.CCode = d.CStdCode
    -- 2019.08.02. 개별지도 시간표 보정용
    LEFT JOIN (
            SELECT 
                    a.CStdDepartCode,
                    a.CStdDepartStartDate,
                    a.CStdCode,
                    a.CComma
            FROM TTutoringPlanRev a
            INNER JOIN (
                        SELECT CStdDepartCode, CStdDepartStartDate, CStdCode, MAX(CStartDate) AS CStartDate
                        FROM TStudentTutoring
                        WHERE CStdDepartCode = @branchCode
                        AND CRegistType IN ('Newcomer','Returning')
                        GROUP BY CStdDepartCode, CStdDepartStartDate, CStdCode
                        ) b
                ON a.CStdDepartCode = b.CStdDepartCode AND a.CStdDepartStartDate = b.CStdDepartStartDate AND
                    a.CStdCode = b.CStdCode AND a.CStartDate >= b.CStartDate
            ) e
    ON  a.CBranchCode = e.CStdDepartCode  AND a.CBranchStartDate = e.CStdDepartStartDate  AND a.CCode = e.CStdCode
WHERE a.CBranchCode = @branchCode
AND a.CTutorEndStatus IS NULL 
AND a.CLastTutoringNo IS NOT NULL

return
END

GO


CREATE PROCEDURE [dbo].[SP_WB_DirectSales]
	@case			VARCHAR(30),
	@startDate		NVARCHAR(10) = '',
	@endDate		NVARCHAR(10) = '',
	@branchCode     NVARCHAR(30) = ''
AS
BEGIN
	if @case = 'GetDirectSaleRawData'		goto GetDirectSaleRawData	-- 직영매출 Raw data

	select code='ER', mfg='정의되지 않은 분기코드(' + @Case + ')입니다.'
	return
END


-- 직영매출 Raw data
GetDirectSaleRawData:
BEGIN

SELECT 
	a.CDepartCode as '지점코드'
	,c.COpenName0 as '지점명'
	,b.CName as '학생이름'
	,CASE 
		WHEN a.CRegType = 'Counsel' THEN '상담관리'
		WHEN a.CRegType = 'Tutoring' THEN '개별지도'
	END AS '등록구분'
	,a.CStartDate as '시작날짜'
	,a.CEndDate as '종료날짜'
	,a.CPayCommas AS '결제콤마수'
	,(SELECT CName FROM TCommonCode (NOLOCK) WHERE CCodeGroup = a.CSaleFlagGroupCode AND CCode = a.CSaleFlagCode) AS '매출구분'
	,a.CPayMonthCount AS '선결제개월수'
	,(SELECT CName FROM TCommonCode (NOLOCK) WHERE CCodeGroup = a.CPayFlagGroupCode AND CCode = a.CPayFlagCode) AS '결재구분'
	,a.CPayNo AS '매출승인번호'
	,a.CPayPrice AS '매출금액'
	,a.CSaleDate AS '매출일자'
	,a.CSaleMemo AS '매출메모'	
	,a.CRtnDate AS '취소(환불)일자'
	,a.CRtnPrice AS '취소금액'
	,a.CRtnNo AS '취소승인번호'

FROM TStudentSaleHistory a (NOLOCK)
LEFT JOIN TStudent b (NOLOCK) ON b.CCode = a.CCode
LEFT JOIN TFacility c (nolock) on c.CDepartCode = a.CDepartCode and c.CDepartStartDate = a.CDepartStartDate
WHERE 
	1 = 1
	AND ((a.CSaleDate >= @startDate AND a.CSaleDate <= @endDate) 
	OR (a.CRtnDate >= @startDate AND a.CRtnDate <= @endDate))
	and a.CDepartCode = @branchCode


	return
END

GO

-- =============================================
-- Author:		김동우
-- Create date: 2014-02-26
-- Description:	출결 메시지 테이블 INSERT 트리거
-- =============================================
CREATE TRIGGER [dbo].[TR_INS_ATT_MESSAGE] ON [dbo].[TB_ATT_MESSAGE]
	AFTER INSERT
AS 
BEGIN
	SET NOCOUNT ON;

    --변수선언
	DECLARE
	@CBranchCode		NVARCHAR(20),	--지점코드
	@CBranchStartDate	DATETIME,		--지점시작일자
	@CCode				NVARCHAR(20),	--학생코드
	@CManagerId			NVARCHAR(30),	--매니저 ID
	@CRegDate			DATETIME,		--출결일시
	@CMsgType			NVARCHAR(20),	--메시지 유형 (SMS / MSG)
	@CMessage			NVARCHAR(255),	--메시지 내용
	@CFacilityCode		NVARCHAR(20),	--사업장코드
	@CTelephone			NVARCHAR(50)	--사업장 전화번호

	DECLARE
	@CPhoneFather		NVARCHAR(255),	--아버지 전화
	@CSmsSendFather		BIT,			--아버지 수신여부
	@CPhoneMother		NVARCHAR(255),	--어머니 전화
	@CSmsSendMother		BIT,			--어머니 수신여부
	@CStudentName		NVARCHAR(255),			--어머니 수신여부
	@CMsgDate			DATETIME		--메시지 발송(현재)

	--변수할당
	SELECT
		@CBranchCode = CBranchCode
		, @CBranchStartDate = CBranchStartDate
		, @CCode = CCode
		, @CManagerId = CManagerId
		, @CRegDate = CRegDate
		, @CMsgType = CMsgType
		, @CMessage = CMessage
	FROM
		INSERTED

	--지점 정보 읽기
	select @CFacilityCode = CFacilityCode, @CTelephone = left(CTelephone, 20)
	from TFacility (nolock) where CDepartCode = @CBranchCode and CDepartStartDate = @CBranchStartDate

	--학생정보 읽기
	select @CPhoneFather = left(CPhoneFather, 20), @CSmsSendFather = CSmsSendFather
		, @CPhoneMother = left(CPhoneMother, 20), @CSmsSendMother = CSmsSendMother
		, @CStudentName = left(CName, 20)
	from TStudent (nolock) where CBranchCode = @CBranchCode and CBranchStartDate = @CBranchStartDate and CCode = @CCode

	--SMS일때
	IF @CMsgType = 'SMS'
	BEGIN
		IF @CSmsSendMother = 1	--엄마에게 전송
		BEGIN
		
			--로그 테이블 데이터 넣기
			INSERT INTO TLogSMS
				(CBranchIdDepartCode, CBranchIdDepartStartDate, CType, CSenderName, CSenderPhone, CReceiverName, CReceiverPhone, CContent, CSendTime, CIsSend)
			VALUES
				(@CBranchCode, @CBranchStartDate, 'Attendance', '', @CTelephone, @CStudentName, @CPhoneMother, @CMessage, @CRegDate, 'Try')

			--문자 테이블 데이터 넣기
			INSERT INTO SC_TRAN
				(TR_SENDDATE , TR_SENDSTAT ,TR_MSGTYPE ,TR_PHONE ,TR_CALLBACK , TR_MSG, TR_Etc1, TR_Etc2, TR_Etc3) 
			VALUES 
				(@CRegDate, '0', '0', @CPhoneMother, @CTelephone, @CMessage, @CBranchCode, CONVERT(VARCHAR(20), @CBranchStartDate, 20), @CCode);

		END

		IF @CSmsSendFather = 1	--아빠에게 전송
		BEGIN
			--로그 테이블 데이터 넣기
			INSERT INTO TLogSMS
				(CBranchIdDepartCode, CBranchIdDepartStartDate, CType, CSenderName, CSenderPhone, CReceiverName, CReceiverPhone, CContent, CSendTime, CIsSend)
			VALUES
				(@CBranchCode, @CBranchStartDate, 'Attendance', '', @CTelephone, @CStudentName, @CPhoneFather, @CMessage, @CRegDate, 'Try')
			
			--문자 테이블 데이터 넣기
			INSERT INTO SC_TRAN
				(TR_SENDDATE , TR_SENDSTAT ,TR_MSGTYPE ,TR_PHONE ,TR_CALLBACK , TR_MSG, TR_Etc1, TR_Etc2, TR_Etc3) 
			VALUES 
				(@CRegDate, '0', '0', @CPhoneFather, @CTelephone, @CMessage, @CBranchCode, CONVERT(VARCHAR(20), @CBranchStartDate, 20), @CCode);
		END
	END

	-- 직원출퇴근 SMS일때
	-- 2014.06.24 : 직원번호가 아닌 대표번호로 발신된걸로 처리 ㅎㅎ 좀 색다르게 했더니만~~
	IF @CMsgType = 'SMS2'
	BEGIN
		DECLARE @dStaffName NVARCHAR(50), @dReceStaffName NVARCHAR(50)
--		SET @CTelephone   = NULL 
--		SET @CPhoneMother = NULL
		-- 보내는 직원정보 읽기
--		select @CTelephone = a.CMobileNo, @dStaffName = b.CName0
--		  from TStaffAddress a
--		  left join TStaff b
--		    on a.CStaffId = b.CStaffId
--		 where a.CStaffId = @CCode
		-- 문자받을 직원정보 읽기
		select @CPhoneMother = a.CMobileNo, @dReceStaffName = b.CName0
		  from TStaffAddress a
		  left join TStaff b
		    on a.CStaffId = b.CStaffId
		 where a.CStaffId = @CManagerId
		
		IF ISNULL(@CPhoneMother, '') <> '' -- 받는쪽 휴대폰번호가 있을 경우
			BEGIN 
				--로그 테이블 데이터 넣기
				INSERT INTO TLogSMS
					(CBranchIdDepartCode, CBranchIdDepartStartDate, CType, CSenderName, CSenderPhone, CReceiverName, CReceiverPhone, CContent, CSendTime, CIsSend)
				VALUES
					(@CBranchCode, @CBranchStartDate, 'Attendance', '', @CTelephone, @dReceStaffName, @CPhoneMother, @CMessage, @CRegDate, 'Try')		

				--문자 테이블 데이터 넣기
				INSERT INTO SC_TRAN
					(TR_SENDDATE , TR_SENDSTAT ,TR_MSGTYPE ,TR_PHONE ,TR_CALLBACK , TR_MSG, TR_Etc1, TR_Etc2) 
				VALUES 
					(@CRegDate, '0', '0', @CPhoneMother, @CTelephone, @CMessage, @CBranchCode, CONVERT(VARCHAR(20), @CBranchStartDate, 20));
			END
	END

	--MSG일때
	IF @CMsgType = 'MSG'
	BEGIN
		select @CMsgDate = GETDATE()

		INSERT INTO TMessageRoom (CCreaterId, CCreateTime, CType)
			VALUES (@CManagerId, @CRegDate, 'Message')

		INSERT INTO	TMessageParticipant (CParticipantId, CStaffId, CCreateTime, CInTime, COutTime, CConnOutTime, CIsLock, CIsLast, CDeletedTime, CLastSenderId, CLastTime, CLastMessage, CPushRemainCount)
			VALUES (@CManagerId, @CManagerId, @CRegDate, @CRegDate, '2200-12-31', @CRegDate, 'False', 'True', '1900-01-01', @CManagerId, @CMsgDate, @CMessage, 1)

		INSERT INTO TMessage (CStaffId, CCreateTime, CMessageTime, CSenderId, CReceiverId, CType, CStyle, CMessage, CFile)
			VALUES (@CManagerId, @CRegDate, @CMsgDate, @CManagerId, NULL, 'Msg', 'color:;font:;size:', @CMessage, NULL)

	END
END

GO

-- ====================================================
-- Author:		김동우
-- Create date: 2014-03-14
-- Description:	일별등원일정 변경 시 주간 데이터 업데이트
-- =====================================================
CREATE TRIGGER INS_UPD_TStudentDailyAttend
   ON  TStudentDailyAttend
   AFTER INSERT, UPDATE
AS 
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	-- 변수 설정
	DECLARE
		@CStduentBranchCode			NVARCHAR(20)
		, @CStduentBranchStartDate	DATETIME
		, @CStduentcode				NVARCHAR(50)
		, @CDate					DATETIME

	DECLARE
		@CAttendType			NVARCHAR(15)
		, @CWeekFirst				DATETIME
	
	-- 변수 대입
	SELECT
		@CStduentBranchCode = CStduentBranchCode
		,@CStduentBranchStartDate = CStduentBranchStartDate
		,@CStduentcode = CStduentcode
		,@CDate = CDate
		,@CWeekFirst = DATEADD(wk, DATEDIFF(wk,0,CDate), 0)
	FROM inserted

	--------------------------------------------------------------------------------------------------------
	--일간등원 일정 만 있고, 주간등원 일정 없는 학생 주간 등원 데이터 생성
	--------------------------------------------------------------------------------------------------------
	insert into TStudentWeekPlan
	select *
	from
		(
			select
				X.CStduentBranchCode, X.CStduentBranchStartDate, X.CStduentcode, X.CWeekFirst, X.CWeekLast
				, isnull((select count(*) from TStudentDailyAttend (nolock)
					where CStduentBranchCode = X.CStduentBranchCode and CStduentBranchStartDate = X.CStduentBranchStartDate and CStduentcode = X.CStduentcode
						and CDate = DATEADD(DD, 0, X.CWeekFirst)), 0) as CMonday
				, isnull((select count(*) from TStudentDailyAttend (nolock)
					where CStduentBranchCode = X.CStduentBranchCode and CStduentBranchStartDate = X.CStduentBranchStartDate and CStduentcode = X.CStduentcode
						and CDate = DATEADD(DD, 1, X.CWeekFirst)), 0) as CTuesday
				, isnull((select count(*) from TStudentDailyAttend (nolock)
					where CStduentBranchCode = X.CStduentBranchCode and CStduentBranchStartDate = X.CStduentBranchStartDate and CStduentcode = X.CStduentcode
						and CDate = DATEADD(DD, 2, X.CWeekFirst)), 0) as CWednesday
				, isnull((select count(*) from TStudentDailyAttend (nolock)
					where CStduentBranchCode = X.CStduentBranchCode and CStduentBranchStartDate = X.CStduentBranchStartDate and CStduentcode = X.CStduentcode
						and CDate = DATEADD(DD, 3, X.CWeekFirst)), 0) as CThursday
				, isnull((select count(*) from TStudentDailyAttend (nolock)
					where CStduentBranchCode = X.CStduentBranchCode and CStduentBranchStartDate = X.CStduentBranchStartDate and CStduentcode = X.CStduentcode
						and CDate = DATEADD(DD, 4, X.CWeekFirst)), 0) as CFriday
				, isnull((select count(*) from TStudentDailyAttend (nolock)
					where CStduentBranchCode = X.CStduentBranchCode and CStduentBranchStartDate = X.CStduentBranchStartDate and CStduentcode = X.CStduentcode
						and CDate = DATEADD(DD, 5, X.CWeekFirst)), 0) as CSaturday
				, isnull((select count(*) from TStudentDailyAttend (nolock)
					where CStduentBranchCode = X.CStduentBranchCode and CStduentBranchStartDate = X.CStduentBranchStartDate and CStduentcode = X.CStduentcode
						and CDate = DATEADD(DD, 6, X.CWeekFirst)), 0) as CSunday
				, X.CAttendType
			from
				(
					select G.*
						, (select top 1 Y.CAttendType from TStudentCounsel (nolock) Y
							where Y.CScDepartCode = G.CStduentBranchCode and Y.CScDepartStartDate = G.CStduentBranchStartDate and Y.CScCode = G.CStduentcode
								and G.CWeekFirst <= Y.CEndDate order by CEndDate asc) as CAttendType
					from
						(
							select
								CStduentBranchCode, CStduentBranchStartDate, CStduentcode
								,DATEADD(wk, DATEDIFF(wk,0,CDate), 0) as CWeekFirst
								, DATEADD(wk, DATEDIFF(wk,0,CDate), 6) as CWeekLast
							from TStudentDailyAttend (nolock) K
							where CStartPlanTime is not null
								and CStduentBranchCode = @CStduentBranchCode and CStduentBranchStartDate = @CStduentBranchStartDate and CStduentcode = @CStduentcode
							group by CStduentBranchCode, CStduentBranchStartDate, CStduentcode
								, DATEADD(wk, DATEDIFF(wk,0,CDate), 0), DATEADD(wk, DATEDIFF(wk,0,CDate), 6)
						) G
				) X
		) L
	where not exists
		(select * from TStudentWeekPlan (nolock) Z
			where Z.CStudentBranchCode = L.CStduentBranchCode and Z.CStudentBranchStartDate = L.CStduentBranchStartDate and Z.CStudentCode = L.CStduentcode
				and CWeekFirst = L.CWeekFirst)


	--------------------------------------------------------------------------------------------------------
	--일간 등원일정을 주간 등원 일정에 업데이트
	--------------------------------------------------------------------------------------------------------
	update P
	set CMonday = L.CMonday, CTuesday = L.CTuesday, CWednesday = L.CWednesday, CThursday = L.CThursday, CFriday = L.CFriday, CSaturday = L.CSaturday, CSunday = L.CSunday
	from
		TStudentWeekPlan P
		left join
		(
			select
				X.CStduentBranchCode, X.CStduentBranchStartDate, X.CStduentcode, X.CWeekFirst, X.CWeekLast
				, isnull((select count(*) from TStudentDailyAttend (nolock)
					where CStduentBranchCode = X.CStduentBranchCode and CStduentBranchStartDate = X.CStduentBranchStartDate and CStduentcode = X.CStduentcode
						and CDate = DATEADD(DD, 0, X.CWeekFirst)), 0) as CMonday
				, isnull((select count(*) from TStudentDailyAttend (nolock)
					where CStduentBranchCode = X.CStduentBranchCode and CStduentBranchStartDate = X.CStduentBranchStartDate and CStduentcode = X.CStduentcode
						and CDate = DATEADD(DD, 1, X.CWeekFirst)), 0) as CTuesday
				, isnull((select count(*) from TStudentDailyAttend (nolock)
					where CStduentBranchCode = X.CStduentBranchCode and CStduentBranchStartDate = X.CStduentBranchStartDate and CStduentcode = X.CStduentcode
						and CDate = DATEADD(DD, 2, X.CWeekFirst)), 0) as CWednesday
				, isnull((select count(*) from TStudentDailyAttend (nolock)
					where CStduentBranchCode = X.CStduentBranchCode and CStduentBranchStartDate = X.CStduentBranchStartDate and CStduentcode = X.CStduentcode
						and CDate = DATEADD(DD, 3, X.CWeekFirst)), 0) as CThursday
				, isnull((select count(*) from TStudentDailyAttend (nolock)
					where CStduentBranchCode = X.CStduentBranchCode and CStduentBranchStartDate = X.CStduentBranchStartDate and CStduentcode = X.CStduentcode
						and CDate = DATEADD(DD, 4, X.CWeekFirst)), 0) as CFriday
				, isnull((select count(*) from TStudentDailyAttend (nolock)
					where CStduentBranchCode = X.CStduentBranchCode and CStduentBranchStartDate = X.CStduentBranchStartDate and CStduentcode = X.CStduentcode
						and CDate = DATEADD(DD, 5, X.CWeekFirst)), 0) as CSaturday
				, isnull((select count(*) from TStudentDailyAttend (nolock)
					where CStduentBranchCode = X.CStduentBranchCode and CStduentBranchStartDate = X.CStduentBranchStartDate and CStduentcode = X.CStduentcode
						and CDate = DATEADD(DD, 6, X.CWeekFirst)), 0) as CSunday
				, X.CAttendType
			from
				(
					select G.*
						, (select top 1 Y.CAttendType from TStudentCounsel (nolock) Y
							where Y.CScDepartCode = G.CStduentBranchCode and Y.CScDepartStartDate = G.CStduentBranchStartDate and Y.CScCode = G.CStduentcode
								and G.CWeekFirst <= Y.CEndDate order by CEndDate asc) as CAttendType
					from
						(
							select
								CStduentBranchCode, CStduentBranchStartDate, CStduentcode
								,DATEADD(wk, DATEDIFF(wk,0,CDate), 0) as CWeekFirst
								, DATEADD(wk, DATEDIFF(wk,0,CDate), 6) as CWeekLast
							from TStudentDailyAttend (nolock) K
							where CStartPlanTime is not null
							group by CStduentBranchCode, CStduentBranchStartDate, CStduentcode
								, DATEADD(wk, DATEDIFF(wk,0,CDate), 0), DATEADD(wk, DATEDIFF(wk,0,CDate), 6)
						) G
				) X
		) L
		on P.CStudentBranchCode = L.CStduentBranchCode and P.CStudentBranchStartDate = L.CStduentBranchStartDate and P.CStudentCode = L.CStduentcode
			and P.CWeekFirst = L.CWeekFirst
	where P.CStudentBranchCode = @CStduentBranchCode and P.CStudentBranchStartDate = @CStduentBranchStartDate and P.CStudentCode = @CStduentcode
			and P.CWeekFirst = @CWeekFirst

END

GO

-- ==========================================================================================
-- Author:		김동우
-- Create date: 2014-03-17
-- Description:	부서그룹에 사업장그룹 추가 시 하위 사업장까지 자동으로 추가해주기
-- ==========================================================================================
CREATE TRIGGER [dbo].[INS_TDepartGroupMember] 
   ON  [dbo].[TDepartGroupMember] 
   AFTER INSERT
AS 
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- 변수 설정
	DECLARE
		@CGroupId				NVARCHAR(20)
		, @CDepartCode			NVARCHAR(20)
		, @CDepartStartDate		DATETIME

	-- 변수 대입
	SELECT
		@CGroupId = CGroupId
		, @CDepartCode = CDepartCode
		, @CDepartStartDate = CDepartStartDate
	FROM inserted

	------------------------------------------------------------------------------------------------------------
	-- 사업장그룹 선택시 하위 사업장 부서 그룹에 추가해주기
	------------------------------------------------------------------------------------------------------------
	INSERT INTO TDepartGroupMember
	SELECT
		B.CGroupId, B.CDepartCode, B.CDepartStartDate, null, null, null, null
	FROM 
		(
			SELECT
				A.CGroupId, B.CDepartCode, B.CDepartStartDate
			FROM (
					--사업장 그룹만 고르기
					SELECT Z.CGroupId, Z.CDepartCode, Z.CDepartStartDate
					FROM TDepartment X (nolock)
						JOIN TFacility Y ON X.CDepartCode = Y.CDepartCode AND X.CDepartStartDate = Y.CDepartStartDate
						LEFT JOIN TDepartGroupMember Z ON X.CDepartCode = Z.CDepartCode AND X.CDepartStartDate = Z.CDepartStartDate
					WHERE Y.CFacilityCode IS NOT NULL AND Y.CFacilityType = 'GROUP'
						AND X.CEndDate > GETDATE()
						and Z.CGroupId = @CGroupId and Z.CDepartCode = @CDepartCode and Z.CDepartStartDate = @CDepartStartDate
				) A
				JOIN TDepartment B
					ON A.CDepartCode = B.CParentDepartCode AND A.CDepartStartDate = B.CParentDepartStartDate	--하위 사업장
				JOIN TFacility Y ON B.CDepartCode = Y.CDepartCode AND B.CDepartStartDate = Y.CDepartStartDate
			WHERE B.CEndDate > GETDATE() and Y.CFacilityType <> 'GROUP'	--사업장 그룹은 제외
		) B
	WHERE CGroupId+ '|' + CDepartCode + '|' + CONVERT(VARCHAR(20), CDepartStartDate, 23)
		NOT IN (SELECT CGroupId+ '|' + CDepartCode + '|' + CONVERT(VARCHAR(20), CDepartStartDate, 23) FROM TDepartGroupMember (nolock)
			where CGroupId = @CGroupId)

END

GO

-- =============================================
-- Author:		김동우
-- Create date: 2014-07-09
-- Description:	80byte가 넘으면 자르기
-- 2016.09.13. 김길명, SC_LOG의 트리거와 중복. 그래서 작동중지 처리 함
-- =============================================
CREATE TRIGGER [dbo].[TR_UPD_SC_TRAN]
   ON  [dbo].[SC_TRAN]
   AFTER UPDATE
AS 
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for trigger here
	------------------------------------------------------------------------------------------------------------------------------
	-- 전송여부 업데이트 하기
	------------------------------------------------------------------------------------------------------------------------------
	IF UPDATE(TR_RealSendDate)
	BEGIN
		update A
		set A.CIsSend = (CASE WHEN B.TR_RealSendDate is not null THEN 'Send' ELSE 'Try' END)
			, A.CRealSendTime = B.TR_RealSendDate
		  --2016.02.25 추가.
		  , A.CSmsReturnCode = C.TR_RSLTSTAT
		  , A.CSmsReturnName = D.CName
		from TLogSMS A
			join SC_TRAN B
				on A.CReceiverPhone = B.TR_PHONE and A.CSendTime = B.TR_SENDDATE
			join INSERTED C
				on B.TR_PHONE = C.TR_Phone and B.TR_SENDDATE = C.TR_SendDate
			LEFT JOIN TCommonCode D
				ON D.CCode = C.TR_RSLTSTAT AND D.CCodeGroup = 'SMSCODE'
	END

END
GO
DISABLE TRIGGER [dbo].[TR_UPD_SC_TRAN]
    ON [dbo].[SC_TRAN];


GO


-- =============================================
-- Author:		김길명
-- Create date: 2019-06-22
-- Description:	기간,콤마변경 시 매출내역 업데이트
-- =============================================
CREATE TRIGGER [dbo].[TR_UPD_TStudentTutoring]
   ON  [dbo].[TStudentTutoring] AFTER UPDATE
AS 
BEGIN
	SET NOCOUNT ON;

	------------------------------------------------------------------------------------------------------------------------------
	-- 매출내역의 기간 업데이트
	------------------------------------------------------------------------------------------------------------------------------
	IF UPDATE(CStartDate) OR UPDATE(CEndDate) OR UPDATE(CModifiedCommas) BEGIN
		update a set
				a.CStartDate = b.CStartDate,
				a.CEndDate	 = b.CEndDate,
				a.CPayCommas = b.CModifiedCommas
		  from TStudentSaleHistory a
		 inner join inserted b on a.CDepartCode = b.CStdDepartCode and a.CDepartStartDate = b.CStdDepartStartDate and a.CCode = b.CStdCode and a.CDtlNo = b.CNo and a.CRegType = 'Tutoring'

		update a set
				a.CStartDate = b.CStartDate,
				a.CEndDate	 = b.CEndDate,
				a.CPayCommas = b.CModifiedCommas
		  from TStudentSaleHistoryHead a
		 inner join inserted b on a.CDepartCode = b.CStdDepartCode and a.CDepartStartDate = b.CStdDepartStartDate and a.CCode = b.CStdCode and a.CNo = b.CNo and a.CRegType = 'Tutoring'
	END
END

GO

-- =============================================
-- Author:		김동우
-- Create date: 2014-03-07
-- Description:	주간출근이력 생성시 일간 데이터 생성
-- =============================================
CREATE TRIGGER INS_UPD_TStaffWeekPlan
   ON  TStaffWeekPlan
   AFTER INSERT, UPDATE
AS 
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	--select * from TStaffWeekPlan where CWeekFirst = '2014-03-03 00:00:00.000' and CBranchCode = 'BRANCH01'
	--delete TStaffWeekPlan where CWeekFirst = '2014-03-03 00:00:00.000' and CBranchCode = 'BRANCH01'
	--select * from TStaffDailyAttend where CDate >= '2014-03-03 00:00:00.000' and CBranchCode = 'BRANCH01'
	--DELETE TStaffDailyAttend where CDate >= '2014-03-03 00:00:00.000' and CBranchCode = 'BRANCH01'

	-- 변수 설정
	DECLARE
		@CStaffId			NVARCHAR(30)
		, @CWeekFirst		DATETIME
		, @CBranchCode		NVARCHAR(20)
		, @CBranchStartDate	DATETIME
		, @CWeekLast		DATETIME
		, @CMonday			BIT
		, @CTuesday			BIT
		, @CWednesday		BIT
		, @CThursday		BIT
		, @CFriday			BIT
		, @CSaturday		BIT
		, @CSunday			BIT
		, @CAttendStatus	NVARCHAR(15)

	DECLARE
		@THISDATE			DATETIME
		, @CNT				INT
		, @STARTTIME		VARCHAR(20)
		, @ENDTIME			VARCHAR(20)
		, @TODAYSTART		DATETIME
		, @TODAYEND			DATETIME
		, @BEFOREDAY		DATETIME
		, @BEFORESTART		DATETIME
		, @BEFOREEND		DATETIME
	
	-- 변수 대입
	SELECT
		@CStaffId = [CStaffId]
		,@CWeekFirst = [CWeekFirst]
		,@CBranchCode = [CBranchCode]
		,@CBranchStartDate = [CBranchStartDate]
		,@CWeekLast = [CWeekLast]
		,@CMonday = [CMonday]
		,@CTuesday = [CTuesday]
		,@CWednesday = [CWednesday]
		,@CThursday = [CThursday]
		,@CFriday = [CFriday]
		,@CSaturday = [CSaturday]
		,@CSunday = [CSunday]
		,@CAttendStatus = [CAttendStatus]
	FROM inserted


	-- 지점 출근 기준시각
	SELECT
		@STARTTIME = CONVERT(VARCHAR(20), CStartTime, 24)
		, @ENDTIME = CONVERT(VARCHAR(20), CEndTime, 24)
	FROM TBranchAttendMaster (nolock)
	WHERE CBranchCode = @CBranchCode AND CBranchStartDate = @CBranchStartDate

	--------------------------------------------------------------------------------------------------------
	--월요일 정보 넣기
	--------------------------------------------------------------------------------------------------------
	SET @THISDATE = @CWeekFirst
	SET @TODAYSTART = CONVERT(DATETIME, CONVERT(VARCHAR(10), @THISDATE, 23) + ' ' + @STARTTIME)
	SET @TODAYEND = CONVERT(DATETIME, CONVERT(VARCHAR(10), @THISDATE, 23) + ' ' + @ENDTIME)
	
	--지난주 출근정보
	SET @BEFOREDAY = DATEADD(DD, -7, @THISDATE)
	SELECT @CNT = COUNT(*) FROM TStaffDailyAttend (nolock) WHERE [CStaffId] = @CStaffId AND [CDate] = @BEFOREDAY
	IF @CNT > 0
	BEGIN
		SELECT @BEFORESTART = [CStartPlanTime], @BEFOREEND = [CEndPlanTime]
		FROM [dbo].[TStaffDailyAttend]
		WHERE [CStaffId] = @CStaffId AND [CDate] = @BEFOREDAY

		IF @BEFORESTART IS NOT NULL
		BEGIN
			SET @TODAYSTART = CONVERT(DATETIME, CONVERT(VARCHAR(10), @THISDATE, 23) + ' ' + CONVERT(VARCHAR(20), @BEFORESTART, 24))
		END

		IF @BEFOREEND IS NOT NULL
		BEGIN
			SET @TODAYEND = CONVERT(DATETIME, CONVERT(VARCHAR(10), @THISDATE, 23) + ' ' + CONVERT(VARCHAR(20), @BEFOREEND, 24))
		END
	END
	
	--이번주 출근정보
	SELECT @CNT = COUNT(*) FROM TStaffDailyAttend (nolock) WHERE CDate = @THISDATE AND CStaffId = @CStaffId
	IF @CNT = 0 AND @CMonday = 1
	BEGIN
	
		INSERT INTO [dbo].[TStaffDailyAttend]
				   ([CStaffId], [CDate], [CBranchCode], [CBranchStartDate], [CStartPlanTime], [CEndPlanTime], [CPlanHours], [CStartTime], [CEndTime], [CHours], [CAttendStatus])
			 VALUES
				   (@CStaffId, @THISDATE, @CBranchCode, @CBranchStartDate, @TODAYSTART, @TODAYEND, DATEDIFF(HH, @TODAYSTART, @TODAYEND), NULL, NULL, NULL, 'Ready')

	END
	
	IF @CNT > 0 AND @CMonday = 0
	BEGIN
		DELETE TStaffDailyAttend WHERE CDate = @THISDATE AND CStaffId = @CStaffId
	END

	--------------------------------------------------------------------------------------------------------
	--화요일 정보 넣기
	--------------------------------------------------------------------------------------------------------
	SET @THISDATE = DATEADD(DD, 1, @CWeekFirst)
	SET @TODAYSTART = CONVERT(DATETIME, CONVERT(VARCHAR(10), @THISDATE, 23) + ' ' + @STARTTIME)
	SET @TODAYEND = CONVERT(DATETIME, CONVERT(VARCHAR(10), @THISDATE, 23) + ' ' + @ENDTIME)

	--지난주 출근정보
	SET @BEFOREDAY = DATEADD(DD, -7, @THISDATE)
	SELECT @CNT = COUNT(*) FROM TStaffDailyAttend (nolock) WHERE [CStaffId] = @CStaffId AND [CDate] = @BEFOREDAY
	IF @CNT > 0
	BEGIN
		SELECT @BEFORESTART = [CStartPlanTime], @BEFOREEND = [CEndPlanTime]
		FROM [dbo].[TStaffDailyAttend]
		WHERE [CStaffId] = @CStaffId AND [CDate] = @BEFOREDAY

		IF @BEFORESTART IS NOT NULL
		BEGIN
			SET @TODAYSTART = CONVERT(DATETIME, CONVERT(VARCHAR(10), @THISDATE, 23) + ' ' + CONVERT(VARCHAR(20), @BEFORESTART, 24))
		END

		IF @BEFOREEND IS NOT NULL
		BEGIN
			SET @TODAYEND = CONVERT(DATETIME, CONVERT(VARCHAR(10), @THISDATE, 23) + ' ' + CONVERT(VARCHAR(20), @BEFOREEND, 24))
		END
	END
	
	--이번주 출근정보
	SELECT @CNT = COUNT(*) FROM TStaffDailyAttend (nolock) WHERE CDate = @THISDATE AND CStaffId = @CStaffId
	IF @CNT = 0 AND @CTuesday = 1
	BEGIN
	
		INSERT INTO [dbo].[TStaffDailyAttend]
				   ([CStaffId], [CDate], [CBranchCode], [CBranchStartDate], [CStartPlanTime], [CEndPlanTime], [CPlanHours], [CStartTime], [CEndTime], [CHours], [CAttendStatus])
			 VALUES
				   (@CStaffId, @THISDATE, @CBranchCode, @CBranchStartDate, @TODAYSTART, @TODAYEND, DATEDIFF(HH, @TODAYSTART, @TODAYEND), NULL, NULL, NULL, 'Ready')

	END
	
	IF @CNT > 0 AND @CTuesday = 0
	BEGIN
		DELETE TStaffDailyAttend WHERE CDate = @THISDATE AND CStaffId = @CStaffId
	END

	--------------------------------------------------------------------------------------------------------
	--수요일 정보 넣기
	--------------------------------------------------------------------------------------------------------
	SET @THISDATE = DATEADD(DD, 2, @CWeekFirst)
	SET @TODAYSTART = CONVERT(DATETIME, CONVERT(VARCHAR(10), @THISDATE, 23) + ' ' + @STARTTIME)
	SET @TODAYEND = CONVERT(DATETIME, CONVERT(VARCHAR(10), @THISDATE, 23) + ' ' + @ENDTIME)

	--지난주 출근정보
	SET @BEFOREDAY = DATEADD(DD, -7, @THISDATE)
	SELECT @CNT = COUNT(*) FROM TStaffDailyAttend (nolock) WHERE [CStaffId] = @CStaffId AND [CDate] = @BEFOREDAY
	IF @CNT > 0
	BEGIN
		SELECT @BEFORESTART = [CStartPlanTime], @BEFOREEND = [CEndPlanTime]
		FROM [dbo].[TStaffDailyAttend]
		WHERE [CStaffId] = @CStaffId AND [CDate] = @BEFOREDAY

		IF @BEFORESTART IS NOT NULL
		BEGIN
			SET @TODAYSTART = CONVERT(DATETIME, CONVERT(VARCHAR(10), @THISDATE, 23) + ' ' + CONVERT(VARCHAR(20), @BEFORESTART, 24))
		END

		IF @BEFOREEND IS NOT NULL
		BEGIN
			SET @TODAYEND = CONVERT(DATETIME, CONVERT(VARCHAR(10), @THISDATE, 23) + ' ' + CONVERT(VARCHAR(20), @BEFOREEND, 24))
		END
	END
	
	--이번주 출근정보
	SELECT @CNT = COUNT(*) FROM TStaffDailyAttend (nolock) WHERE CDate = @THISDATE AND CStaffId = @CStaffId
	IF @CNT = 0 AND @CWednesday = 1
	BEGIN
	
		INSERT INTO [dbo].[TStaffDailyAttend]
				   ([CStaffId], [CDate], [CBranchCode], [CBranchStartDate], [CStartPlanTime], [CEndPlanTime], [CPlanHours], [CStartTime], [CEndTime], [CHours], [CAttendStatus])
			 VALUES
				   (@CStaffId, @THISDATE, @CBranchCode, @CBranchStartDate, @TODAYSTART, @TODAYEND, DATEDIFF(HH, @TODAYSTART, @TODAYEND), NULL, NULL, NULL, 'Ready')

	END
	
	IF @CNT > 0 AND @CWednesday = 0
	BEGIN
		DELETE TStaffDailyAttend WHERE CDate = @THISDATE AND CStaffId = @CStaffId
	END

	--------------------------------------------------------------------------------------------------------
	--목요일 정보 넣기
	--------------------------------------------------------------------------------------------------------
	SET @THISDATE = DATEADD(DD, 3, @CWeekFirst)
	SET @TODAYSTART = CONVERT(DATETIME, CONVERT(VARCHAR(10), @THISDATE, 23) + ' ' + @STARTTIME)
	SET @TODAYEND = CONVERT(DATETIME, CONVERT(VARCHAR(10), @THISDATE, 23) + ' ' + @ENDTIME)

	--지난주 출근정보
	SET @BEFOREDAY = DATEADD(DD, -7, @THISDATE)
	SELECT @CNT = COUNT(*) FROM TStaffDailyAttend (nolock) WHERE [CStaffId] = @CStaffId AND [CDate] = @BEFOREDAY
	IF @CNT > 0
	BEGIN
		SELECT @BEFORESTART = [CStartPlanTime], @BEFOREEND = [CEndPlanTime]
		FROM [dbo].[TStaffDailyAttend]
		WHERE [CStaffId] = @CStaffId AND [CDate] = @BEFOREDAY

		IF @BEFORESTART IS NOT NULL
		BEGIN
			SET @TODAYSTART = CONVERT(DATETIME, CONVERT(VARCHAR(10), @THISDATE, 23) + ' ' + CONVERT(VARCHAR(20), @BEFORESTART, 24))
		END

		IF @BEFOREEND IS NOT NULL
		BEGIN
			SET @TODAYEND = CONVERT(DATETIME, CONVERT(VARCHAR(10), @THISDATE, 23) + ' ' + CONVERT(VARCHAR(20), @BEFOREEND, 24))
		END
	END
	
	--이번주 출근정보
	SELECT @CNT = COUNT(*) FROM TStaffDailyAttend (nolock) WHERE CDate = @THISDATE AND CStaffId = @CStaffId
	IF @CNT = 0 AND @CThursday = 1
	BEGIN
	
		INSERT INTO [dbo].[TStaffDailyAttend]
				   ([CStaffId], [CDate], [CBranchCode], [CBranchStartDate], [CStartPlanTime], [CEndPlanTime], [CPlanHours], [CStartTime], [CEndTime], [CHours], [CAttendStatus])
			 VALUES
				   (@CStaffId, @THISDATE, @CBranchCode, @CBranchStartDate, @TODAYSTART, @TODAYEND, DATEDIFF(HH, @TODAYSTART, @TODAYEND), NULL, NULL, NULL, 'Ready')

	END
	
	IF @CNT > 0 AND @CThursday = 0
	BEGIN
		DELETE TStaffDailyAttend WHERE CDate = @THISDATE AND CStaffId = @CStaffId
	END

	--------------------------------------------------------------------------------------------------------
	--금요일 정보 넣기
	--------------------------------------------------------------------------------------------------------
	SET @THISDATE = DATEADD(DD, 4, @CWeekFirst)
	SET @TODAYSTART = CONVERT(DATETIME, CONVERT(VARCHAR(10), @THISDATE, 23) + ' ' + @STARTTIME)
	SET @TODAYEND = CONVERT(DATETIME, CONVERT(VARCHAR(10), @THISDATE, 23) + ' ' + @ENDTIME)

	--지난주 출근정보
	SET @BEFOREDAY = DATEADD(DD, -7, @THISDATE)
	SELECT @CNT = COUNT(*) FROM TStaffDailyAttend (nolock) WHERE [CStaffId] = @CStaffId AND [CDate] = @BEFOREDAY
	IF @CNT > 0
	BEGIN
		SELECT @BEFORESTART = [CStartPlanTime], @BEFOREEND = [CEndPlanTime]
		FROM [dbo].[TStaffDailyAttend]
		WHERE [CStaffId] = @CStaffId AND [CDate] = @BEFOREDAY

		IF @BEFORESTART IS NOT NULL
		BEGIN
			SET @TODAYSTART = CONVERT(DATETIME, CONVERT(VARCHAR(10), @THISDATE, 23) + ' ' + CONVERT(VARCHAR(20), @BEFORESTART, 24))
		END

		IF @BEFOREEND IS NOT NULL
		BEGIN
			SET @TODAYEND = CONVERT(DATETIME, CONVERT(VARCHAR(10), @THISDATE, 23) + ' ' + CONVERT(VARCHAR(20), @BEFOREEND, 24))
		END
	END
	
	--이번주 출근정보
	SELECT @CNT = COUNT(*) FROM TStaffDailyAttend (nolock) WHERE CDate = @THISDATE AND CStaffId = @CStaffId
	IF @CNT = 0 AND @CFriday = 1
	BEGIN
	
		INSERT INTO [dbo].[TStaffDailyAttend]
				   ([CStaffId], [CDate], [CBranchCode], [CBranchStartDate], [CStartPlanTime], [CEndPlanTime], [CPlanHours], [CStartTime], [CEndTime], [CHours], [CAttendStatus])
			 VALUES
				   (@CStaffId, @THISDATE, @CBranchCode, @CBranchStartDate, @TODAYSTART, @TODAYEND, DATEDIFF(HH, @TODAYSTART, @TODAYEND), NULL, NULL, NULL, 'Ready')

	END
	
	IF @CNT > 0 AND @CFriday = 0
	BEGIN
		DELETE TStaffDailyAttend WHERE CDate = @THISDATE AND CStaffId = @CStaffId
	END

	--------------------------------------------------------------------------------------------------------
	--토요일 정보 넣기
	--------------------------------------------------------------------------------------------------------
	SET @THISDATE = DATEADD(DD, 5, @CWeekFirst)
	SET @TODAYSTART = CONVERT(DATETIME, CONVERT(VARCHAR(10), @THISDATE, 23) + ' ' + @STARTTIME)
	SET @TODAYEND = CONVERT(DATETIME, CONVERT(VARCHAR(10), @THISDATE, 23) + ' ' + @ENDTIME)

	--지난주 출근정보
	SET @BEFOREDAY = DATEADD(DD, -7, @THISDATE)
	SELECT @CNT = COUNT(*) FROM TStaffDailyAttend (nolock) WHERE [CStaffId] = @CStaffId AND [CDate] = @BEFOREDAY
	IF @CNT > 0
	BEGIN
		SELECT @BEFORESTART = [CStartPlanTime], @BEFOREEND = [CEndPlanTime]
		FROM [dbo].[TStaffDailyAttend]
		WHERE [CStaffId] = @CStaffId AND [CDate] = @BEFOREDAY

		IF @BEFORESTART IS NOT NULL
		BEGIN
			SET @TODAYSTART = CONVERT(DATETIME, CONVERT(VARCHAR(10), @THISDATE, 23) + ' ' + CONVERT(VARCHAR(20), @BEFORESTART, 24))
		END

		IF @BEFOREEND IS NOT NULL
		BEGIN
			SET @TODAYEND = CONVERT(DATETIME, CONVERT(VARCHAR(10), @THISDATE, 23) + ' ' + CONVERT(VARCHAR(20), @BEFOREEND, 24))
		END
	END
	
	IF @CNT > 0 AND @CMonday = 0
	BEGIN
		DELETE TStaffDailyAttend WHERE CDate = @THISDATE AND CStaffId = @CStaffId
	END
	
	--이번주 출근정보
	SELECT @CNT = COUNT(*) FROM TStaffDailyAttend (nolock) WHERE CDate = @THISDATE AND CStaffId = @CStaffId
	IF @CNT = 0 AND @CSaturday = 1
	BEGIN
	
		INSERT INTO [dbo].[TStaffDailyAttend]
				   ([CStaffId], [CDate], [CBranchCode], [CBranchStartDate], [CStartPlanTime], [CEndPlanTime], [CPlanHours], [CStartTime], [CEndTime], [CHours], [CAttendStatus])
			 VALUES
				   (@CStaffId, @THISDATE, @CBranchCode, @CBranchStartDate, @TODAYSTART, @TODAYEND, DATEDIFF(HH, @TODAYSTART, @TODAYEND), NULL, NULL, NULL, 'Ready')

	END
	
	IF @CNT > 0 AND @CSaturday = 0
	BEGIN
		DELETE TStaffDailyAttend WHERE CDate = @THISDATE AND CStaffId = @CStaffId
	END

	--------------------------------------------------------------------------------------------------------
	--일요일 정보 넣기
	--------------------------------------------------------------------------------------------------------
	SET @THISDATE = DATEADD(DD, 6, @CWeekFirst)
	SET @TODAYSTART = CONVERT(DATETIME, CONVERT(VARCHAR(10), @THISDATE, 23) + ' ' + @STARTTIME)
	SET @TODAYEND = CONVERT(DATETIME, CONVERT(VARCHAR(10), @THISDATE, 23) + ' ' + @ENDTIME)

	--지난주 출근정보
	SET @BEFOREDAY = DATEADD(DD, -7, @THISDATE)
	SELECT @CNT = COUNT(*) FROM TStaffDailyAttend (nolock) WHERE [CStaffId] = @CStaffId AND [CDate] = @BEFOREDAY
	IF @CNT > 0
	BEGIN
		SELECT @BEFORESTART = [CStartPlanTime], @BEFOREEND = [CEndPlanTime]
		FROM [dbo].[TStaffDailyAttend]
		WHERE [CStaffId] = @CStaffId AND [CDate] = @BEFOREDAY

		IF @BEFORESTART IS NOT NULL
		BEGIN
			SET @TODAYSTART = CONVERT(DATETIME, CONVERT(VARCHAR(10), @THISDATE, 23) + ' ' + CONVERT(VARCHAR(20), @BEFORESTART, 24))
		END

		IF @BEFOREEND IS NOT NULL
		BEGIN
			SET @TODAYEND = CONVERT(DATETIME, CONVERT(VARCHAR(10), @THISDATE, 23) + ' ' + CONVERT(VARCHAR(20), @BEFOREEND, 24))
		END
	END
	
	--이번주 출근정보
	SELECT @CNT = COUNT(*) FROM TStaffDailyAttend (nolock) WHERE CDate = @THISDATE AND CStaffId = @CStaffId
	IF @CNT = 0 AND @CSunday = 1
	BEGIN
	
		INSERT INTO [dbo].[TStaffDailyAttend]
				   ([CStaffId], [CDate], [CBranchCode], [CBranchStartDate], [CStartPlanTime], [CEndPlanTime], [CPlanHours], [CStartTime], [CEndTime], [CHours], [CAttendStatus])
			 VALUES
				   (@CStaffId, @THISDATE, @CBranchCode, @CBranchStartDate, @TODAYSTART, @TODAYEND, DATEDIFF(HH, @TODAYSTART, @TODAYEND), NULL, NULL, NULL, 'Ready')

	END
	
	IF @CNT > 0 AND @CSunday = 0
	BEGIN
		DELETE TStaffDailyAttend WHERE CDate = @THISDATE AND CStaffId = @CStaffId
	END
END

GO



-- =============================================
-- Author:		이재근
-- Create date: 2019-04-29
-- Description:	SMS 발송성공 여부와 실제발송시간을 DL_MsgLog_All에 반영
--              기존 NEMS 트리거를 참조하여 작성함.
-- =============================================

CREATE TRIGGER [dbo].[TR_INS_UPD_DL_SMS_LOG]
   ON  [dbo].[DL_SMS_LOG]
   AFTER INSERT,UPDATE
AS 
BEGIN
	SET NOCOUNT ON;

	--받는 사람과 발송 시간으로 상태 업데이트
	update a
	set a.send_result = CASE WHEN b.TR_RSLTSTAT = 0 THEN '성공' ELSE '실패' END
	  , a.real_sendtime = isnull(b.TR_REALSENDDATE, b.TR_RSLTDATE)
	  , a.return_code = b.TR_RSLTSTAT

	from DL_MsgLog_All a
		join DL_SMS_LOG b
			on a.receiver_phone = b.TR_PHONE and a.sendTime = b.TR_SENDDATE
		join INSERTED c
				on b.TR_PHONE = c.TR_PHONE and b.TR_SENDDATE = c.TR_SENDDATE

END

GO

-- =============================================
-- Author:		김동우
-- Create date: 2014-02-26
-- Description:	RFID 연동 테이블 INSERT 트리거
-- =============================================
CREATE TRIGGER [dbo].[TR_INS_ATT_TEMP] ON [dbo].[TB_ATT_TEMP]
	AFTER INSERT
AS
BEGIN
	SET NOCOUNT ON;

	--변수선언
	DECLARE
	@CLASS_CODE		NVARCHAR(20),		--지점번호(코드)
	@USER_GUBN		NVARCHAR(1),		--P (학생) / T (직원)
	@USER_SEQ		NVARCHAR(20),		--회원번호(코드)
	@USER_CARDNO		NVARCHAR(20),	--카드번호
	@ATT_STATE		NVARCHAR(2),		--I (In, 등원) / O (Out, 하원)
	@ATT_FLAG		NVARCHAR(1),		--1 (정상) / 2 (자유) / 3 (지각) / 4 (조퇴)
	@ATT_DATE		DATETIME,			--태깅시간
	@DepartCode		NVARCHAR(20),		--지점코드
	@CDepartStartDate	DATETIME		--지점시작일

	--변수할당
	SELECT
		@CLASS_CODE = CLASS_CODE
		, @USER_GUBN = USER_GUBN
		, @USER_SEQ = USER_SEQ
		, @USER_CARDNO = USER_CARDNO
		, @ATT_STATE = ATT_STATE
		, @ATT_FLAG = ATT_FLAG
		, @ATT_DATE = ATT_DATE
	FROM
		INSERTED

	--지점정보
	select
		@DepartCode = CDepartCode
		, @CDepartStartDate = CDepartStartDate
	from TFacility (nolock)
	where REPLACE(REPLACE(REPLACE(CFacilityCode, 'PX', ''), 'ECH', 'C'), 'EHM', 'H') = @CLASS_CODE
	--where CFacilityCode = @CLASS_CODE

	--모든 RFID 로그기록
	IF (select count(*) from TLogRFID (nolock) where CBranchCode = @DepartCode and CBranchStartDate = @CDepartStartDate and CCardNumber = @USER_CARDNO and CTagTime = @ATT_DATE) = 0
	BEGIN
		INSERT INTO TLogRFID
		VALUES (
			@DepartCode,
			@CDepartStartDate,
			@USER_CARDNO,
			@ATT_DATE,
			''
		)
	END

	--10분안에 기록이 없으면
	IF (select count(*) from TB_ATT_UNIQUE (nolock) where CLASS_CODE = @CLASS_CODE and USER_CARDNO = @USER_CARDNO and ATT_DATE > DATEADD(MI,-10, @ATT_DATE)) = 0
	BEGIN
		--TB_ATT_UNIQUE에 기록
		INSERT INTO TB_ATT_UNIQUE
		VALUES (
			@CLASS_CODE,
			@USER_GUBN,
			@USER_SEQ,
			@USER_CARDNO,
			@ATT_STATE,
			@ATT_FLAG,
			@ATT_DATE,
			0
		)

		--SP 호출
		exec SP_ATTEND_RFID
			@CLASS_CODE,
			@USER_GUBN,
			@USER_SEQ,
			@USER_CARDNO,
			@ATT_STATE,
			@ATT_FLAG,
			@ATT_DATE
	END

END

GO

-- =============================================
-- Author:		김동우
-- Create date: 2014-05-01
-- Description:	발송성공 여부 TLogSMS에 반영
-- =============================================
CREATE TRIGGER [dbo].[TR_INS_UPD_SC_LOG]
   ON  dbo.SC_LOG
   AFTER INSERT,UPDATE
AS 
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for trigger here
	------------------------------------------------------------------------------------------------------------------------------
	-- 전송여부 업데이트 하기
	------------------------------------------------------------------------------------------------------------------------------

	--받는 사람과 발송 시간으로 상태 업데이트
	update A
	set --A.CIsSend = (CASE WHEN isnull(B.TR_REALSENDDATE, B.TR_RSLTDATE) is not null THEN 'Send' WHEN B.TR_RSLTSTAT = '00' THEN 'Try' ELSE 'Fail' END)
		A.CIsSend = (CASE WHEN C.TR_RSLTSTAT = '06' THEN 'Send' ELSE 'Fail' END)
	  , A.CRealSendTime = isnull(B.TR_REALSENDDATE, B.TR_RSLTDATE)
	  --2016.02.25 추가.
	  , A.CSmsReturnCode = C.TR_RSLTSTAT
	  , A.CSmsReturnName = D.CName
	from TLogSMS A
		join SC_LOG B
			on A.CReceiverPhone = B.TR_PHONE and A.CSendTime = B.TR_SENDDATE
		join INSERTED C
			on B.TR_PHONE = C.TR_Phone and B.TR_SENDDATE = C.TR_SendDate
		LEFT JOIN TCommonCode D
		    ON D.CCode = C.TR_RSLTSTAT AND D.CCodeGroup = 'SMSCODE'


	--두시간 지난거 fail 처리
	--update TLogSMS set CIsSend = 'Fail' where CIsSend = 'Try' and CSendTime < dateadd(HOUR, -2, getdate())

END

GO

-- =============================================
-- Author:		김동우
-- Create date: 2014-03-17
-- Description:	직원 수정시 추가 작업
-- =============================================
CREATE TRIGGER [dbo].[UPD_TStaff]
   ON  [dbo].[TStaff]
   AFTER UPDATE
AS 
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	-- 변수 설정
	DECLARE
		@CStaffId			NVARCHAR(30)

	-- 변수 대입
	SELECT
		@CStaffId = CStaffId
	FROM inserted

	------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	-- 입사일 > 퇴사일 저장 차단
	------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	IF (SELECT CJoinDate FROM inserted) > (SELECT COutDate FROM inserted)
	BEGIN
		RAISERROR('입사일이 퇴사일보다 큽니다.', 11, 1)
	END
	
	------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	-- 퇴사일 입력시 2200년인 부서이력 퇴사일로 종료 처리, 기존 퇴사일과 종료일이 같은 이력 날짜 변경
	------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	--퇴사일이 변경 되었을 때, 기존 이력의 종료일 UPDATE
	IF (SELECT COutDate FROM deleted) <> (SELECT COutDate FROM inserted)
	BEGIN
		--퇴사일 존재시 2200년인 활성 부서이력을 퇴사일로 종료 처리
		UPDATE A
			SET A.CHistoryEndDate = B.COutDate
		FROM TStaffDepartHistory A
			JOIN TStaff B ON A.CStaffId = B.CStaffId
		WHERE A.CHistoryEndDate = '2200-12-31 00:00:00.000'
			AND B.COutDate < '2200-12-31 00:00:00.000'
			and A.CStaffId = @CStaffId

		--변경된 퇴사일이 존재할 때
		IF (SELECT COutDate FROM inserted) <> '2200-12-31 00:00:00.000'
		BEGIN
			UPDATE TStaffDepartHistory SET CHistoryEndDate = (SELECT COutDate FROM inserted)
			WHERE CStaffId = @CStaffId AND CHistoryEndDate = (SELECT COutDate FROM deleted)
		END

		--퇴사일을 지웠을 때, 입사일의 변동이 없다면, 실수로 퇴사처리한것을 돌린것이므로, 가장 마지막 이력을 활성이력으로 변경
		IF (SELECT COutDate FROM inserted) = '2200-12-31 00:00:00.000' AND (SELECT CJoinDate FROM deleted) = (SELECT CJoinDate FROM inserted)
		BEGIN
			UPDATE TStaffDepartHistory SET CHistoryEndDate = '2200-12-31 00:00:00.000'
			WHERE CStaffId = @CStaffId AND CHistoryEndDate = (SELECT MAX(CHistoryEndDate) FROM TStaffDepartHistory WHERE CStaffId = @CStaffId)
		END

		--시작일과 퇴사일의 관계가 역전된 경우 잘못된 레코드 이므로 지워버리자
		DELETE TStaffDepartHistory WHERE CHistoryStartDate > CHistoryEndDate and CStaffId = @CStaffId
		DELETE TStaffLevelHistory WHERE CStartDate > CEndDate and CStaffId = @CStaffId

		--퇴사일이 입력되어 있는데 퇴사일 이후 이력이 존재하는 경우 지워버리자
		DELETE A
		FROM TStaffDepartHistory A
			LEFT JOIN TStaff B ON A.CStaffId = B.CStaffId
		WHERE A.CHistoryStartDate > B.COutDate
			AND A.CStaffId = @CStaffId
	END

	------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	-- 퇴사일 입력시 2200년인 직급이력 퇴사일로 종료 처리, 기존 퇴사일과 종료일이 같은 이력 날짜 변경
	-- 에듀플렉스 누락된 직급이력 추가 
	-- 2017.4.5 고재균
	------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	--퇴사일이 변경 되었을 때, 기존 이력의 종료일 UPDATE
	IF (SELECT COutDate FROM deleted) <> (SELECT COutDate FROM inserted)
	BEGIN
	    --퇴사일 존재시 2200년인 활성 [직급이력]을 퇴사일로 종료 처리
		UPDATE A
		   SET A.CEndDate = B.COutDate
		  FROM TStaffLevelHistory A
			   JOIN TStaff B ON A.CStaffId = B.CStaffId
		 WHERE A.CEndDate = '2200-12-31 00:00:00.000'
		   AND B.COutDate < '2200-12-31 00:00:00.000'
		   AND A.CStaffId = @CStaffId

		--변경된 퇴사일이 존재할 때
		IF (SELECT COutDate FROM inserted) <> '2200-12-31 00:00:00.000'
		BEGIN
			UPDATE TStaffLevelHistory SET CEndDate = (SELECT COutDate FROM inserted)
			 WHERE CStaffId = @CStaffId AND CEndDate = (SELECT COutDate FROM deleted)
		END

		--퇴사일을 지웠을 때, 입사일의 변동이 없다면, 실수로 퇴사처리한것을 돌린것이므로, 가장 마지막 이력을 활성이력으로 변경
		IF (SELECT COutDate FROM inserted) = '2200-12-31 00:00:00.000' AND (SELECT CJoinDate FROM deleted) = (SELECT CJoinDate FROM inserted)
		BEGIN
			UPDATE TStaffLevelHistory SET CEndDate = '2200-12-31 00:00:00.000'
			 WHERE CStaffId = @CStaffId 
			   AND CEndDate = (SELECT MAX(CEndDate) FROM TStaffLevelHistory WHERE CStaffId = @CStaffId)
		END

		--시작일과 퇴사일의 관계가 역전된 경우 잘못된 레코드 이므로 지워버리자
		DELETE TStaffLevelHistory WHERE CEndDate > CEndDate and CStaffId = @CStaffId
		DELETE TStaffLevelHistory WHERE CStartDate > CEndDate and CStaffId = @CStaffId

		--퇴사일이 입력되어 있는데 퇴사일 이후 이력이 존재하는 경우 지워버리자
		DELETE A
		FROM TStaffLevelHistory A
			LEFT JOIN TStaff B ON A.CStaffId = B.CStaffId
		WHERE A.CEndDate > B.COutDate
			AND A.CStaffId = @CStaffId
	END


	------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	-- 입사일 변경 시 처리
	------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	IF (SELECT CJoinDate FROM deleted) <> (SELECT CJoinDate FROM inserted)
	BEGIN
		--변경전 일사일과 시작일이 동일하고, 종료일이 변경 후 입사일보다 큰 이력에 한해서 변경
		UPDATE A
			SET A.CHistoryStartDate = (SELECT CJoinDate FROM inserted)
		FROM TStaffDepartHistory A
			JOIN TStaff B ON A.CStaffId = B.CStaffId AND A.CHistoryStartDate = (SELECT CJoinDate FROM deleted) AND A.CHistoryEndDate > (SELECT CJoinDate FROM inserted)
		where A.CStaffId = @CStaffId

		--직급이력도 수정
		UPDATE A
			SET A.CStartDate = (SELECT CJoinDate FROM inserted)
		FROM TStaffLevelHistory A
			JOIN TStaff B ON A.CStaffId = B.CStaffId AND A.CStartDate = (SELECT CJoinDate FROM deleted) AND A.CEndDate > (SELECT CJoinDate FROM inserted)
		where A.CStaffId = @CStaffId
	END

END

GO


-- =============================================
-- Author:		김길명
-- Create date: 2019-06-22
-- Description:	디테일 전부 삭제 시 헤더삭제
-- =============================================
CREATE TRIGGER [dbo].[TR_DEL_TStudentSaleHistory]
   ON  [dbo].[TStudentSaleHistory] AFTER DELETE
AS 
BEGIN
	SET NOCOUNT ON;

DECLARE
	@CDepartCode		varchar(20),
	@CDepartStartDate	varchar(10),
	@CCode				varchar(50),
	@CRegType			varchar(50),
	@CDtlNo				int

	SELECT	@CDepartCode		= CDepartCode,
			@CDepartStartDate	= convert(varchar, CDepartStartDate, 23),
			@CCode				= CCode,
			@CRegType			= CRegType,
			@CDtlNo				= CDtlNo
	  FROM deleted
	---------------------
	-- 매출내역 헤더 삭제
	---------------------
	if (select count(1) from TStudentSaleHistory where CDepartCode = @CDepartCode and CDepartStartDate = @CDepartStartDate and CCode = @CCode and CRegType = @CRegType and CDtlNo = @CDtlNo) = 0
	BEGIN
		delete 
		  from TStudentSaleHistoryHead
		 where CDepartCode = @CDepartCode and CDepartStartDate = @CDepartStartDate and CCode = @CCode and CNo = @CDtlNo and CRegType = @CRegType
	END
	ELSE BEGIN
		update a set
				a.CPayPrice = b.CPayPrice,
				a.CRtnPrice = b.CRtnPrice
		  from TStudentSaleHistoryHead a
		  left join (select sum(CPayPrice) as CPayPrice, sum(CRtnPrice) as CRtnPrice from TStudentSaleHistory where CDepartCode = @CDepartCode and CDepartStartDate = @CDepartStartDate and CCode = @CCode and CDtlNo = @CDtlNo and CRegType = @CRegType) b on 1=1
		 where a.CDepartCode = @CDepartCode and a.CDepartStartDate = @CDepartStartDate and a.CCode = @CCode and a.CNo = @CDtlNo and a.CRegType = @CRegType
	END
END

GO



-- =============================================
-- Author:		이재근
-- Create date: 2019-04-29
-- Description:	MMS 발송성공 여부와 실제발송시간을 DL_MsgLog_All에 반영
--              기존 NEMS 트리거를 참조하여 작성함.
-- =============================================

CREATE TRIGGER [dbo].[TR_INS_UPD_DL_MMS_LOG]
   ON  [dbo].[DL_MMS_LOG]
   AFTER INSERT,UPDATE
AS 
BEGIN
	SET NOCOUNT ON;

	--받는 사람과 발송 시간으로 상태 업데이트
	update a
	set a.send_result = CASE WHEN b.RSLT = 0 THEN '성공' ELSE b.RSLT END
	  , a.real_sendtime = isnull(b.SENTDATE, b.TERMINATEDDATE)

	from DL_MsgLog_All a
		join DL_MMS_LOG b
			on a.receiver_phone = b.PHONE and a.sendTime = b.REQDATE
		join INSERTED c
				on b.PHONE = c.PHONE and b.REQDATE = c.REQDATE

END

GO

--/*******************************************************************************************************
--/* 단위업무 : 청구상세내역
--/* 작 성 자 : 김 길 명
--/* 작 성 일 : 2014.02.19
--/* 작성내용 : 발생금액(이자 포함)을 전부 납부 하였을 때 상태를 '완납'으로 변경, 
--/*            상세가 전부 완납이면 청구정보의 상태도 '완납'
--/* 수 정 일 :	
--/* 수 정 자 :	
--/* 수정내용 :	
--/*******************************************************************************************************
-- 참고 : UPDATE 시 : 업데이트 전 데이터는 DELETED, 업데이트 후 데이터는 INSERTED에 정보를 담고 있음
--        INSERT 시 : 저장 후 데이터는 INSERTED
--        DELETE 시 : 삭제 전 데이터는 DELETED
CREATE TRIGGER [dbo].[TR_TTradeDetail_U]
   ON  [NewEMS].[dbo].[TTradeDetail]
   AFTER UPDATE
AS 

DECLARE @dMONEY INT

DECLARE @dCRequireDate			DATETIME
DECLARE @dCTiDepartCode		VARCHAR(20)
DECLARE @dCTiDepartStartDate	DATETIME
DECLARE @dCTradeNo			INT
DECLARE @dCBranchCode			VARCHAR(20)
DECLARE @dCBranchStartDate		DATETIME
DECLARE @dCDetailNo			INT

BEGIN
	
	SET NOCOUNT ON;

	-- 신규저장 일때는 작동하지 않아야 하므로 DELETED 체크
	IF EXISTS (SELECT * FROM DELETED) 
		-- 업데이트 시만 실행
		BEGIN
			-- 납부금액, 납부이자의 변경 시에 동작 처리
			IF UPDATE(CPaidPrice) OR UPDATE(CPaidInterest)
				BEGIN
					-- 청구금액 + 가산이자 - 납부금액 - 납부이자 = 0이면 상태를 완납
					SELECT @dMONEY = ISNULL(CChargePrice, 0) + ISNULL(CChargeInterest, 0) - ISNULL(CPaidPrice, 0) - ISNULL(CPaidInterest, 0)
					      ,@dCRequireDate			= CRequireDate			
					      ,@dCTiDepartCode		= CTiDepartCode		
					      ,@dCTiDepartStartDate	= CTiDepartStartDate	
					      ,@dCTradeNo				= CTradeNo				
					      ,@dCBranchCode			= CBranchCode			
					      ,@dCBranchStartDate		= CBranchStartDate		
					      ,@dCDetailNo			= CDetailNo			
					  FROM INSERTED
					
					IF @dMONEY = 0
						BEGIN
							-- 1.청구상세 완납처리
							UPDATE TTradeDetail SET
									CtradeStatus = 'Complete'
							 WHERE CRequireDate		= @dCRequireDate
							   AND CTiDepartCode		= @dCTiDepartCode
							   AND CTiDepartStartDate	= @dCTiDepartStartDate
							   AND CTradeNo			= @dCTradeNo
							   AND CBranchCode		= @dCBranchCode
							   AND CBranchStartDate	= @dCBranchStartDate
							   AND CDetailNo			= @dCDetailNo
							
							-- 청구상세가 전부 완납이면 청구정보의 상태도 완납
							-- 추가정보 : 완납이후에 상태변경의 마지막은 종료이지만 현재처리에서는 완납만 체크하면 됨(종료에서는 금액 부분이 수정되지 않으니깐)
							IF (SELECT COUNT(CDetailNo) 
								 FROM TTradeDetail
								WHERE CRequireDate		= @dCRequireDate
								  AND CTiDepartCode		= @dCTiDepartCode
								  AND CTiDepartStartDate	= @dCTiDepartStartDate
								  AND CTradeNo			= @dCTradeNo
								  AND CtradeStatus		<> 'Complete') = 0
								BEGIN
									-- 2.청구정보 완납처리
									UPDATE TTradeInfo SET
											CTradeStatus = 'Complete'
									 WHERE CRequireDate		= @dCRequireDate
									   AND CBranchCode		= @dCTiDepartCode
									   AND CBranchStartDate	= @dCTiDepartStartDate
									   AND CTradeNo			= @dCTradeNo
								END

						END -- 미납금액이 0이면(=완납)

				END -- 납부금액, 납부이자 변경 시

		END -- 업데이트 인 경우
END

GO


-- =============================================
-- Author:		김길명
-- Create date: 2019-06-22
-- Description:	기간변경 시 매출내역 업데이트
-- =============================================
CREATE TRIGGER [dbo].[TR_UPD_TStudentCounsel]
   ON  [dbo].[TStudentCounsel] AFTER UPDATE
AS 
BEGIN
	SET NOCOUNT ON;

	------------------------------------------------------------------------------------------------------------------------------
	-- 매출내역의 기간 업데이트
	------------------------------------------------------------------------------------------------------------------------------
	IF UPDATE(CStartDate) OR UPDATE(CEndDate) BEGIN
		update a set
				a.CStartDate = b.CStartDate,
				a.CEndDate	 = b.CEndDate
		  from TStudentSaleHistory a
		 inner join inserted b on a.CDepartCode = b.CScDepartCode and a.CDepartStartDate = b.CScDepartStartDate and a.CCode = b.CScCode and a.CDtlNo = b.CNo and a.CRegType = 'Counsel'

		update a set
				a.CStartDate = b.CStartDate,
				a.CEndDate	 = b.CEndDate
		  from TStudentSaleHistoryHead a
		 inner join inserted b on a.CDepartCode = b.CScDepartCode and a.CDepartStartDate = b.CScDepartStartDate and a.CCode = b.CScCode and a.CNo = b.CNo and a.CRegType = 'Counsel'
	END
END

GO

-- =============================================
-- Author:		김동우
-- Create date: 2014-07-09
-- Description:	@CUTLEN byte가 넘으면 자르기
-- =============================================
CREATE TRIGGER [dbo].[TR_INS_SC_TRAN]
   ON  [dbo].[SC_TRAN]
   AFTER INSERT
AS 
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for trigger here

	------------------------------------------------------------------------------------------------------------------------------
	-- 문자 @CUTLEN byte 자르기, 일단은 INSERTED 테이블에 1개 레코드만 있을 것으로 가정하고 시작한다. 나중에 커서를 추가할 것
	------------------------------------------------------------------------------------------------------------------------------
	--변수선언
	DECLARE
		@TR_NUM			BIGINT		--ID
		,@TR_Msg		VARCHAR(1000)	--메시지
		,@CNT			INT
		,@TOTCNT		INT
		,@CUTLEN		INT

	--변수할당
	SET @CUTLEN = 80

	--INSERTED 테이블 할당 처음부터 길이가 넘는 놈만 고름 (나중에 TOP 1을 없애고 커서로 변경해야 함)
	SELECT
		TOP 1
		@TR_NUM = TR_NUM
		, @TR_Msg = TR_Msg
	FROM
		INSERTED
	WHERE DATALENGTH(TR_Msg) > @CUTLEN

	--나중에 커서 작업을 추가하기 위해 구조화 해둠
	IF DATALENGTH(@TR_Msg) > @CUTLEN
	BEGIN
		--최대반복횟수
		SELECT @TOTCNT = CEILING(CONVERT(FLOAT, DATALENGTH(@TR_Msg)) / @CUTLEN)

		--현재 횟수
		SET @CNT = 0
		
		--처음에는 UPDATE
		UPDATE SC_TRAN SET TR_Msg = '(' + CONVERT(VARCHAR(2), (@CNT + 1)) + '/' + CONVERT(VARCHAR(2), @TOTCNT) + ')' + SUBSTRING(CONVERT(TEXT, @TR_Msg), 1, @CUTLEN) WHERE TR_NUM = @TR_NUM

		--반복문에 넘길 문장
		SELECT @TR_Msg = SUBSTRING(@TR_Msg, LEN(SUBSTRING(CONVERT(TEXT, @TR_Msg), 1, @CUTLEN)) + 1, LEN(@TR_Msg))

		--반복문, 문장이 없거나, 최대반복횟수 작을 때
		WHILE @TR_Msg IS NOT NULL AND @CNT < (@TOTCNT - 1)
		BEGIN
			-- 현재반복 횟수
			SET @CNT = @CNT + 1

			--그 다음에는 잘라서 INSERT
			INSERT INTO [dbo].[SC_TRAN]
			SELECT 
				DATEADD(SS, @CNT * 5, TR_SendDate) AS [TR_SendDate]
				,[TR_SerialNum]
				,[TR_ID]
				,[TR_SendStat]
				,[TR_RsltStat]
				,[TR_MsgType]
				,[TR_Phone]
				,[TR_Callback]
				,[TR_RsltDate]
				,[TR_Modified]
				,'(' + CONVERT(VARCHAR(2), (@CNT + 1)) + '/' + CONVERT(VARCHAR(2), @TOTCNT) + ')' + SUBSTRING(CONVERT(TEXT, @TR_Msg), 1, @CUTLEN) AS [TR_Msg]
				,[TR_Net]
				,[TR_Etc1]
				,[TR_Etc2]
				,[TR_Etc3]
				,[TR_Etc4]
				,[TR_Etc5]
				,[TR_Etc6]
				,[TR_RealSendDate]
				,[TR_ROUTEID]
			FROM INSERTED
				WHERE TR_NUM = @TR_NUM

			--잘라서 넘기기
			SELECT @TR_Msg = SUBSTRING(@TR_Msg, LEN(SUBSTRING(CONVERT(TEXT, @TR_Msg), 1, @CUTLEN)) + 1, LEN(@TR_Msg))
		END
	END
END

GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE TRIGGER [dbo].[INS_UPD_TStaffDepartHistory]
   ON  [dbo].[TStaffDepartHistory]
   AFTER INSERT,UPDATE
AS 
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	-- 변수 설정
	DECLARE
		@CStaffId			NVARCHAR(30)

	-- 변수 대입
	SELECT
		@CStaffId = CStaffId
	FROM inserted

	------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	-- 입사일이 오늘이 아닌데 이력이 오늘부터인 활성 이력이 **최초의 이력이면** 새로 생성된 것임으로 입사일로 부서이력의 시작일을 조정
	------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	UPDATE A
		SET A.CHistoryStartDate = B.CJoinDate
	FROM TStaffDepartHistory A
		LEFT JOIN TStaff B ON A.CStaffId = B.CStaffId
	WHERE A.CHistoryEndDate = '2200-12-31 00:00:00.000'
		AND A.CHistoryStartDate = CONVERT(VARCHAR(10), GETDATE(), 120)
		AND B.CJoinDate <> CONVERT(VARCHAR(10), GETDATE(), 120)
		AND (select count(*) from TStaffDepartHistory where CStaffId = A.CStaffId and CHistoryStartDate < A.CHistoryStartDate) = 0
		AND A.CStaffId = @CStaffId
	
	
	------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	-- 메인이력 중복시 하나 지워버리자
	------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	;with ErrorTStaffDepartHistory as (
		select *
		from (
			select CStaffId, max(CHistoryStartDate) as CHistoryStartDate, CHistoryEndDate, Count(*) as cnt
			from TStaffDepartHistory
			where CMain = '1'
				AND CStaffId = @CStaffId
			group by CStaffId, CHistoryEndDate
		) A
		where A.cnt > 1
	)
	delete O
	from TStaffDepartHistory O
		join (
			select top 1 H.*
			from TStaffDepartHistory H
				join ErrorTStaffDepartHistory X
					on H.CStaffId = x.CStaffId and H.CHistoryStartDate = X.CHistoryStartDate and H.CHistoryEndDate = X.CHistoryEndDate
			where H.CStaffId = @CStaffId
			order by CHistoryStartDate desc
		) F
		on O.CStaffId = F.CStaffId and O.CMain = F.CMain and O.CDepartCode = F.CDepartCode and O.CDepartStartDate = F.CDepartStartDate
			and O.CHistoryStartDate = F.CHistoryStartDate and O.CHistoryEndDate = F.CHistoryEndDate
	where O.CStaffId = @CStaffId


	------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	-- 메인 이력 기간이 중복되면, 앞의 이력을 뒤의 이력의 시작일 전으로 강제 조정
	------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	update A
	set A.CHistoryEndDate =  DATEADD(DD, -1, B.CHistoryStartDate)
	from TStaffDepartHistory A
		join TStaffDepartHistory B
			on A.CStaffId = B.CStaffId and A.CMain = B.CMain and A.CHistoryStartDate <> B.CHistoryStartDate and A.CHistoryEndDate <> B.CHistoryEndDate
				and A.CHistoryEndDate between B.CHistoryStartDate and B.CHistoryEndDate
	where A.CMain = '1'
		and A.CStaffId = @CStaffId


	------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	-- 지점 종료일 변경시, 종료일 이후 출결 정보 삭제하기
	------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	IF (SELECT top 1 CHistoryEndDate FROM deleted) <> (SELECT top 1 CHistoryEndDate FROM inserted)
	BEGIN
		delete TStaffDailyAttend where CStaffId = @CStaffId and CBranchCode = (SELECT top 1 CDepartCode FROM inserted) and CDate > (SELECT top 1 CHistoryEndDate FROM inserted)
	END
END

GO

-- =============================================
-- Author:		김동우
-- Create date: 2014-03-17
-- Description:	직원 등록시 추가 작업
-- =============================================
CREATE TRIGGER [dbo].[INS_TStaff]
   ON  [dbo].[TStaff]
   AFTER INSERT
AS 
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	-- 변수 설정
	DECLARE
		@CStaffId			NVARCHAR(30)

	-- 변수 대입
	SELECT
		@CStaffId = CStaffId
	FROM inserted

	------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	-- LNB 접힙 설정 강제 추가
	------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	insert into TStaffOption
	SELECT [CStaffId]
		  ,'/Display/Menu' as [COptionCode]
		  ,'2' as [CDepth]
		  ,NULL as [CStringValue1]
		  ,NULL as [CStringValue2]
		  ,NULL as [CStringValue3]
		  ,NULL as [CStringValue4]
		  ,NULL as [CStringValue5]
		  ,NULL as [CStringValue6]
		  ,NULL as [CStringValue7]
		  ,NULL as [CStringValue8]
		  ,NULL as [CStringValue9]
		  ,NULL as [CStringValue10]
		  ,'1' as [CLongValue1]
		  ,NULL as [CLongValue2]
		  ,NULL as [CLongValue3]
		  ,NULL as [CLongValue4]
		  ,NULL as [CLongValue5]
		  ,NULL as [CLongValue6]
		  ,NULL as [CLongValue7]
		  ,NULL as [CLongValue8]
		  ,NULL as [CLongValue9]
		  ,NULL as [CLongValue10]
		  ,NULL as [CTextValue1]
		  ,NULL as [CTextValue2]
	from TStaff
	where CStaffId = @CStaffId and CStaffId not in
		(select CStaffId from TStaffOption where CStaffId = @CStaffId and COptionCode = '/Display/Menu' and CDepth = '2')

END

GO


-- =============================================
-- Author:		김길명
-- Create date: 2016-02-03
-- Description:	발송성공 여부 TLogSMS에 반영
-- =============================================
CREATE TRIGGER [dbo].[TR_INS_UPD_MMS_LOG]
   ON  [dbo].[MMS_LOG]
   AFTER INSERT,UPDATE
AS 
BEGIN
	SET NOCOUNT ON;

	------------------------------------------------------------------------------------------------------------------------------
	-- 전송여부 업데이트 하기
	------------------------------------------------------------------------------------------------------------------------------

	--받는 사람과 발송 시간으로 상태 업데이트
	update A
	set A.CIsSend = CASE WHEN C.RSLT = '1000' THEN 'Send' ELSE 'Fail' END
	  , A.CRealSendTime = isnull(B.TERMINATEDDATE, B.SENTDATE)
	  --2016.02.25 추가.
	  , A.CSmsReturnCode = C.RSLT
	  , A.CSmsReturnName = D.CName
	from TLogSMS A
		join MMS_LOG B
			on A.CReceiverPhone = B.PHONE and A.CSendTime = B.REQDATE
		join INSERTED C
				on B.PHONE = C.PHONE and B.REQDATE = C.REQDATE
		LEFT JOIN TCommonCode D
		    ON D.CCode = C.RSLT AND D.CCodeGroup = 'SMSCODE'

END

GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'코칭주당횟수', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_hrm_student', @level2type = N'COLUMN', @level2name = N'c_month4';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'매니저 이수필요학점', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_Category', @level2type = N'COLUMN', @level2name = N'cm_1';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'평균 월결제매출', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_MktSales', @level2type = N'COLUMN', @level2name = N'it_MktSalesMonthEvgDi';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'카드번호', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'TB_ATT_TEMP', @level2type = N'COLUMN', @level2name = N'USER_CARDNO';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'평가내용', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_RootFeedback', @level2type = N'COLUMN', @level2name = N'st_RootFeedbackMemo';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'전공구분', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_Mager', @level2type = N'COLUMN', @level2name = N'title';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'json type', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_hrm_subjective', @level2type = N'COLUMN', @level2name = N'q2_page';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'출결구분', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'TB_ATT_TEMP', @level2type = N'COLUMN', @level2name = N'ATT_STATE';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'주휴수당', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_BusinessIncomeItems', @level2type = N'COLUMN', @level2name = N'week_pay';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'루트코스 시험 답안 제출 테이블', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_RootTestRecord', @level2type = N'COLUMN', @level2name = N'it_RootTestRecordIdx';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'대표강사 teacher_idx', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_Lecture', @level2type = N'COLUMN', @level2name = N'main_teacher_id';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'분류 담당자', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_QnaCat', @level2type = N'COLUMN', @level2name = N'st_CStaffId';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'''Y'' 재연락 상담확정필요', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_branch_customers', @level2type = N'COLUMN', @level2name = N'need_recall_yn';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'학생 이름', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_branch_customers', @level2type = N'COLUMN', @level2name = N'student_name';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'주민번호', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_BusinessIncomeItems', @level2type = N'COLUMN', @level2name = N'social_security_code';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'루트교육생 대상 공지사항', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_RootNotice';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'json type 보정사유 이탈 감산율', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_hrm_instants', @level2type = N'COLUMN', @level2name = N'revise_inst';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'본사추천여부', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_Lecture', @level2type = N'COLUMN', @level2name = N'head_recommend_yn';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'-1 미선택 1 ~ 8 선택', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_hrm_student', @level2type = N'COLUMN', @level2name = N'revise_reason';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'등록1개당 수수료매출', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_MktSales', @level2type = N'COLUMN', @level2name = N'it_MktSalesPerRegFeeDi';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'유입된 DB에 본사에서 입력하는 추가정보를 등록&관리하는 테이블', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_head_customers';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'개별지도 선임튜터 금액', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_BusinessIncomeItems', @level2type = N'COLUMN', @level2name = N'tutoring_pay_lv4';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'후불제금액 합계', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_head_customers', @level2type = N'COLUMN', @level2name = N'deferred_amount';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'등록사유 -1:미선택 1:내부+ 2:전입', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_hrm_student', @level2type = N'COLUMN', @level2name = N'reg_reason';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'색상표시/ 0, 1, 2, 3...', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_appointment', @level2type = N'COLUMN', @level2name = N'label';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'등록1개당 발생매출', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_MktSales', @level2type = N'COLUMN', @level2name = N'it_MktSalesPerRegDi';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'소요시간', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_Lecture_class', @level2type = N'COLUMN', @level2name = N'class_duration';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'수강승인일시', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_Lecture_attend_student', @level2type = N'COLUMN', @level2name = N'confirm_date';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'출결상태', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'TB_ATT_TEMP', @level2type = N'COLUMN', @level2name = N'ATT_FLAG';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'루트코스 Open 상태', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_RootCourse', @level2type = N'COLUMN', @level2name = N'it_RootCourseOpen';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'JSON (푸시허용 시간대)', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_QnaUserInfo', @level2type = N'COLUMN', @level2name = N'st_AlarmTime';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'(트리거)실제보내진시간', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'DL_MsgLog_All', @level2type = N'COLUMN', @level2name = N'real_sendtime';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'개별지도:온라인', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_Accrued_credit', @level2type = N'COLUMN', @level2name = N'teaching_on';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'tbl_head_customers의 idx', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_customer_mkt_raw', @level2type = N'COLUMN', @level2name = N'head_customer_idx';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'전월까지 누적콤마수', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_BusinessIncomeItems', @level2type = N'COLUMN', @level2name = N'comma_accrued';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'교실장(주임매니저) 이수필요학점', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_Category', @level2type = N'COLUMN', @level2name = N'tm_2';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'''F'': 상반기, ''S'': 하반기', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_hrm_staff', @level2type = N'COLUMN', @level2name = N'half_year';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'지점 문의자 정보 테이블', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_branch_customers';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Y:확정, N:미확정', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_BusinessIncome', @level2type = N'COLUMN', @level2name = N'fixed_yn';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'삭제일자', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_RootHomework', @level2type = N'COLUMN', @level2name = N'dt_RootHomeworkDelete';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'json type', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_hrm_subjective', @level2type = N'COLUMN', @level2name = N'q4_page';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'주관적지표평가타입 ''C'':코칭매니저용, ''T'':튜터링매니저용', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_hrm_staff', @level2type = N'COLUMN', @level2name = N'subjective_type';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'마케팅 담당자 idx', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_customer_mkt_raw', @level2type = N'COLUMN', @level2name = N'marketing_member_idx';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'사용유무', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_Mager', @level2type = N'COLUMN', @level2name = N'use_yn';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'최초저장시 설정된 유입분류/ Head, Branch', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_branch_customers', @level2type = N'COLUMN', @level2name = N'db_source_org';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'매출 및 매출총이익 기준표', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_MktSales';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'교재 이북링크', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_RootLecture', @level2type = N'COLUMN', @level2name = N'st_RootLectureEbookLink';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'관리시작일', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_branch_customers', @level2type = N'COLUMN', @level2name = N'program_start_date';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'사용유무', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_Area', @level2type = N'COLUMN', @level2name = N'use_yn';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'분류검색 키워드', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_QnaCat', @level2type = N'COLUMN', @level2name = N'st_QnaKeyword';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'강의 개설자', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_Lecture', @level2type = N'COLUMN', @level2name = N'staff_id';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'교실장(매니저) 이수필요학점', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_Category', @level2type = N'COLUMN', @level2name = N'tm_1';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'lecture_idx', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_Lecture_class', @level2type = N'COLUMN', @level2name = N'lecture_id';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'현재 유입분류/ Head, Branch, HeadBranch', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_branch_customers', @level2type = N'COLUMN', @level2name = N'db_source';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'최초추가날짜', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_BusinessIncome', @level2type = N'COLUMN', @level2name = N'ins_date';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'보내는번호', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'DL_MsgLog_All', @level2type = N'COLUMN', @level2name = N'sender_phone';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = '이탈율점수', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_hrm_student', @level2type = N'COLUMN', @level2name = N'result_leave_score';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'DC 주임튜터 금액', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_BusinessIncomeItems', @level2type = N'COLUMN', @level2name = N'dc_pay_lv3';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_RootClass', @level2type = N'COLUMN', @level2name = N'it_RootCourseIdx';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'파일경로', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_Lecture_file', @level2type = N'COLUMN', @level2name = N'filepath';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = '가산점수', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_hrm_staff', @level2type = N'COLUMN', @level2name = N'added_point';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'최초 작성자', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_RootNotice', @level2type = N'COLUMN', @level2name = N'st_StaffCodeFirst';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'일정예약 최초등록자', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_appointment', @level2type = N'COLUMN', @level2name = N'ins_staff_code';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'후불제마케팅', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_branch_customers', @level2type = N'COLUMN', @level2name = N'head_customer_idx';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'문의고객 최초등록 담당자', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_branch_customers', @level2type = N'COLUMN', @level2name = N'ins_staff_code';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'직무상태(C: 코칭,T: 튜터링,M:코칭/튜터링)', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_hrm_staff', @level2type = N'COLUMN', @level2name = N'job_status';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'참관자', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_QnaCatWatchStaff', @level2type = N'COLUMN', @level2name = N'st_CStaffId';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'null이면 연결전이거나 연결O 상태임', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_head_customers', @level2type = N'COLUMN', @level2name = N'branch_link_fail_reason';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'작성자', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_RootFeedback', @level2type = N'COLUMN', @level2name = N'st_WriteStaffCode';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'제목', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_App_notice', @level2type = N'COLUMN', @level2name = N'title';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'지점코드', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_BusinessIncome', @level2type = N'COLUMN', @level2name = N'branch_code';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'이런분에게 추천', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_Lecture', @level2type = N'COLUMN', @level2name = N'recommend';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'소득세', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_BusinessIncomeItems', @level2type = N'COLUMN', @level2name = N'soduc_tax';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'학습법:온라인', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_Accrued_credit', @level2type = N'COLUMN', @level2name = N'learning_on';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'강의지역', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_Area', @level2type = N'COLUMN', @level2name = N'title';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'매출총이익률(%)', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_MktSales', @level2type = N'COLUMN', @level2name = N'it_MktSalesMarginRateDi';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'유저구분(P:원생,T:직원)', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'TB_ATT_TEMP', @level2type = N'COLUMN', @level2name = N'USER_GUBN';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'인사평가에 사용되는 계산용 상수 저장테이블', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_hrm_instants';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'튜터링콤마수', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_hrm_student', @level2type = N'COLUMN', @level2name = N't_month5';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'학교이름(학교이름 검색용)', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_branch_customers', @level2type = N'COLUMN', @level2name = N'school_name';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'리텐션(개월)', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_MktSales', @level2type = N'COLUMN', @level2name = N'it_MktSalesRetentionDi';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'개별지도 수습튜터 금액', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_BusinessIncomeItems', @level2type = N'COLUMN', @level2name = N'tutoring_pay_lv1';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'유저SEQ', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'TB_ATT_TEMP', @level2type = N'COLUMN', @level2name = N'USER_SEQ';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'영상링크', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_RootLecture', @level2type = N'COLUMN', @level2name = N'st_RootLectureVideoLink';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'''C'':코칭매니저용, ''T'':튜터링매니저용', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_hrm_subjective', @level2type = N'COLUMN', @level2name = N'subjective_type';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'lecture_notice, ...', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'DL_MsgLog_All', @level2type = N'COLUMN', @level2name = N'msg_category';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'고등수당', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_BusinessIncomeItems', @level2type = N'COLUMN', @level2name = N'high_amount_pay';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'만든사람', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_RootCourse', @level2type = N'COLUMN', @level2name = N'st_StaffCode';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'등록비용', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_Lecture', @level2type = N'COLUMN', @level2name = N'charge_amount';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'분야 category_idx', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_Lecture', @level2type = N'COLUMN', @level2name = N'lecture_category_id';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'수업시작날짜시간', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_Lecture_class', @level2type = N'COLUMN', @level2name = N'class_startdatetime';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'실제 진행되는 루트코스의 강의', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_RootClass';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'루트코스 교육과정 테이블', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_RootLecture';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'분류 참관자 테이블', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_QnaCatWatchStaff';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'0:학부모, 1:학생', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_head_customers', @level2type = N'COLUMN', @level2name = N'whois';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'1: 일반일정 2:상담일정', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_appointment', @level2type = N'COLUMN', @level2name = N'type';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'평가기간내담당자', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_hrm_student', @level2type = N'COLUMN', @level2name = N'cur_staff_id';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'수강신청일시', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_Lecture_attend_student', @level2type = N'COLUMN', @level2name = N'reg_date';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = '연계된 항목id (ex: Lecture_idx, customer_idx...)', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'DL_MsgLog_All', @level2type = N'COLUMN', @level2name = N'related_id';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Y:삭제, N:미삭제', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_Lecture_file', @level2type = N'COLUMN', @level2name = N'del_yn';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'마케팅 담당자 테이블', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_marketing_member';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'루트코스 입과등록 날짜', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_RootCourseMember', @level2type = N'COLUMN', @level2name = N'dt_RootCourseMemberMake';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'0 Free, 1 Tentative, 2 Busy, 3 Out Of Office, 4 Working Elsewhere', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_appointment', @level2type = N'COLUMN', @level2name = N'status';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = '겸임 콤마합계', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_hrm_student', @level2type = N'COLUMN', @level2name = N'result_multi_total';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'강사이름', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_RootLecture', @level2type = N'COLUMN', @level2name = N'st_RootLectureTeacher';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Y: 수강신청가능, N: 수강신청불가능', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_Lecture', @level2type = N'COLUMN', @level2name = N'lecture_reg_yn';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'json type 등록사유별 감산율', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_hrm_instants', @level2type = N'COLUMN', @level2name = N'reg_reason_inst';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'인지경로2 tbl_CommonCode>BranchRoute', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_branch_customers', @level2type = N'COLUMN', @level2name = N'route2';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'등록일', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_Lecture_class', @level2type = N'COLUMN', @level2name = N'reg_date';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'구성원고유코드', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_Member_profile', @level2type = N'COLUMN', @level2name = N'staff_id';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'DC 책임튜터 금액', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_BusinessIncomeItems', @level2type = N'COLUMN', @level2name = N'dc_pay_lv5';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'피드백 (0)제출안함 (1)제출함', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_RootClassRecord', @level2type = N'COLUMN', @level2name = N'it_FeedbackSubmitted';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'튜터링콤마수', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_hrm_student', @level2type = N'COLUMN', @level2name = N't_month2';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'FC광고_광고비', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_MktResult', @level2type = N'COLUMN', @level2name = N'it_MktResultAdAmountFcArea';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'연결한 지점(이전DB 이전용)', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_head_customers', @level2type = N'COLUMN', @level2name = N'direct_fc';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'카드번호', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'TB_ATT_UNIQUE', @level2type = N'COLUMN', @level2name = N'USER_CARDNO';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'강의종료일', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_Lecture', @level2type = N'COLUMN', @level2name = N'lecture_enddate';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'문의내용', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_branch_customers', @level2type = N'COLUMN', @level2name = N'call_memo';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'(트리거)전송결과 success / fail', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'DL_MsgLog_All', @level2type = N'COLUMN', @level2name = N'send_result';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'지점코드', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_TutoringSC_xlsx', @level2type = N'COLUMN', @level2name = N'branch_code';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'지점의 확정여부 (Y:확정, N:미확정)', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_hrm_staff', @level2type = N'COLUMN', @level2name = N'fixed_yn';


GO

EXECUTE sp_addextendedproperty @name = N'MS_DiagramPane1', @value = N'[0E232FF0-B466-11cf-A24F-00AA00A3EFFF, 1.00]
Begin DesignProperties = 
   Begin PaneConfigurations = 
      Begin PaneConfiguration = 0
         NumPanes = 4
         Configuration = "(H (1[40] 4[20] 2[20] 3) )"
      End
      Begin PaneConfiguration = 1
         NumPanes = 3
         Configuration = "(H (1 [50] 4 [25] 3))"
      End
      Begin PaneConfiguration = 2
         NumPanes = 3
         Configuration = "(H (1 [50] 2 [25] 3))"
      End
      Begin PaneConfiguration = 3
         NumPanes = 3
         Configuration = "(H (4 [30] 2 [40] 3))"
      End
      Begin PaneConfiguration = 4
         NumPanes = 2
         Configuration = "(H (1 [56] 3))"
      End
      Begin PaneConfiguration = 5
         NumPanes = 2
         Configuration = "(H (2 [66] 3))"
      End
      Begin PaneConfiguration = 6
         NumPanes = 2
         Configuration = "(H (4 [50] 3))"
      End
      Begin PaneConfiguration = 7
         NumPanes = 1
         Configuration = "(V (3))"
      End
      Begin PaneConfiguration = 8
         NumPanes = 3
         Configuration = "(H (1[56] 4[18] 2) )"
      End
      Begin PaneConfiguration = 9
         NumPanes = 2
         Configuration = "(H (1 [75] 4))"
      End
      Begin PaneConfiguration = 10
         NumPanes = 2
         Configuration = "(H (1[66] 2) )"
      End
      Begin PaneConfiguration = 11
         NumPanes = 2
         Configuration = "(H (4 [60] 2))"
      End
      Begin PaneConfiguration = 12
         NumPanes = 1
         Configuration = "(H (1) )"
      End
      Begin PaneConfiguration = 13
         NumPanes = 1
         Configuration = "(V (4))"
      End
      Begin PaneConfiguration = 14
         NumPanes = 1
         Configuration = "(V (2))"
      End
      ActivePaneConfig = 0
   End
   Begin DiagramPane = 
      Begin Origin = 
         Top = 0
         Left = 0
      End
      Begin Tables = 
         Begin Table = "A"
            Begin Extent = 
               Top = 6
               Left = 38
               Bottom = 136
               Right = 284
            End
            DisplayFlags = 280
            TopColumn = 0
         End
      End
   End
   Begin SQLPane = 
   End
   Begin DataPane = 
      Begin ParameterDefaults = ""
      End
      Begin ColumnWidths = 9
         Width = 284
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
      End
   End
   Begin CriteriaPane = 
      Begin ColumnWidths = 12
         Column = 1440
         Alias = 900
         Table = 1170
         Output = 720
         Append = 1400
         NewValue = 1170
         SortType = 1350
         SortOrder = 1410
         GroupBy = 1350
         Filter = 1350
         Or = 1350
         Or = 1350
         Or = 1350
      End
   End
End
', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'VSMSUseage';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'코칭주당횟수 -1:없음 0:상담 1~7: 주당횟수', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_hrm_student', @level2type = N'COLUMN', @level2name = N'c_month1';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'직영광고_클릭수', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_MktResult', @level2type = N'COLUMN', @level2name = N'it_MktResultClickCountDiArea';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'직영광고_노출수', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_MktResult', @level2type = N'COLUMN', @level2name = N'it_MktResultImpressionCountDiArea';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'문의글의 분류 테이블 (지점소통)', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_QnaCat';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'입사일', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_hrm_staff', @level2type = N'COLUMN', @level2name = N'join_date';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'출결구분', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'TB_ATT_UNIQUE', @level2type = N'COLUMN', @level2name = N'ATT_STATE';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'강의지역 area_idx', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_Lecture', @level2type = N'COLUMN', @level2name = N'area_id';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Y:수료, N:미수료', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_Lecture_attend_student', @level2type = N'COLUMN', @level2name = N'pass_yn';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'입시:오프라인,라이브', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_Accrued_credit', @level2type = N'COLUMN', @level2name = N'entrance_off';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'분야', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_Category', @level2type = N'COLUMN', @level2name = N'title';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'튜터이름', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_BusinessIncomeItems', @level2type = N'COLUMN', @level2name = N'name';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'지점코드', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_branch_customers', @level2type = N'COLUMN', @level2name = N'branch_code';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'지점코드', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_appointment', @level2type = N'COLUMN', @level2name = N'branch_code';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'추가된 날짜', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_TutoringSC_xlsx', @level2type = N'COLUMN', @level2name = N'ins_date';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'교양동호회:온라인', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_Accrued_credit', @level2type = N'COLUMN', @level2name = N'club_on';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'등록일', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_App_notice', @level2type = N'COLUMN', @level2name = N'reg_date';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'직영광고_광고비', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_MktResult', @level2type = N'COLUMN', @level2name = N'it_MktResultAdAmountDiArea';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'필요한 콜조치 타입', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_head_customers', @level2type = N'COLUMN', @level2name = N'need_call_type';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'출결시간', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'TB_ATT_UNIQUE', @level2type = N'COLUMN', @level2name = N'ATT_DATE';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'출결상태', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'TB_ATT_UNIQUE', @level2type = N'COLUMN', @level2name = N'ATT_FLAG';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'작성자', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_QnaReply', @level2type = N'COLUMN', @level2name = N'st_CstaffId';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = '매출액점수', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_hrm_student', @level2type = N'COLUMN', @level2name = N'result_sales_score';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Y:외부멤버, N:내부엠버', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_Member_profile', @level2type = N'COLUMN', @level2name = N'outside_member_yn';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'엑셀데이터', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_TutoringSC_xlsx', @level2type = N'COLUMN', @level2name = N'xlsx_data';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'전역광고_노출수', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_MktResult', @level2type = N'COLUMN', @level2name = N'it_MktResultImpressionCountAllArea';


GO

EXECUTE sp_addextendedproperty @name = N'MS_DiagramPane1', @value = N'[0E232FF0-B466-11cf-A24F-00AA00A3EFFF, 1.00]
Begin DesignProperties = 
   Begin PaneConfigurations = 
      Begin PaneConfiguration = 0
         NumPanes = 4
         Configuration = "(H (1[25] 4[17] 2[37] 3) )"
      End
      Begin PaneConfiguration = 1
         NumPanes = 3
         Configuration = "(H (1 [50] 4 [25] 3))"
      End
      Begin PaneConfiguration = 2
         NumPanes = 3
         Configuration = "(H (1 [50] 2 [25] 3))"
      End
      Begin PaneConfiguration = 3
         NumPanes = 3
         Configuration = "(H (4 [30] 2 [40] 3))"
      End
      Begin PaneConfiguration = 4
         NumPanes = 2
         Configuration = "(H (1 [56] 3))"
      End
      Begin PaneConfiguration = 5
         NumPanes = 2
         Configuration = "(H (2 [66] 3))"
      End
      Begin PaneConfiguration = 6
         NumPanes = 2
         Configuration = "(H (4 [50] 3))"
      End
      Begin PaneConfiguration = 7
         NumPanes = 1
         Configuration = "(V (3))"
      End
      Begin PaneConfiguration = 8
         NumPanes = 3
         Configuration = "(H (1[56] 4[18] 2) )"
      End
      Begin PaneConfiguration = 9
         NumPanes = 2
         Configuration = "(H (1 [75] 4))"
      End
      Begin PaneConfiguration = 10
         NumPanes = 2
         Configuration = "(H (1[66] 2) )"
      End
      Begin PaneConfiguration = 11
         NumPanes = 2
         Configuration = "(H (4 [60] 2))"
      End
      Begin PaneConfiguration = 12
         NumPanes = 1
         Configuration = "(H (1) )"
      End
      Begin PaneConfiguration = 13
         NumPanes = 1
         Configuration = "(V (4))"
      End
      Begin PaneConfiguration = 14
         NumPanes = 1
         Configuration = "(V (2))"
      End
      ActivePaneConfig = 0
   End
   Begin DiagramPane = 
      Begin Origin = 
         Top = 0
         Left = 0
      End
      Begin Tables = 
         Begin Table = "ATB"
            Begin Extent = 
               Top = 6
               Left = 38
               Bottom = 136
               Right = 210
            End
            DisplayFlags = 280
            TopColumn = 0
         End
      End
   End
   Begin SQLPane = 
   End
   Begin DataPane = 
      Begin ParameterDefaults = ""
      End
      Begin ColumnWidths = 15
         Width = 284
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
      End
   End
   Begin CriteriaPane = 
      Begin ColumnWidths = 11
         Column = 1440
         Alias = 900
         Table = 1170
         Output = 720
         Append = 1400
         NewValue = 1170
         SortType = 1350
         SortOrder = 1410
         GroupBy = 1350
         Filter = 1350
         Or = 1350
         Or = 1350
         Or = 1350
      End
   End
End
', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'VW_ATT_ATTEND';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'최종 갱신 관리자코드', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_WbRule', @level2type = N'COLUMN', @level2name = N'dt_WbRuleMake';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'0:유효, 1:무효', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_head_customers', @level2type = N'COLUMN', @level2name = N'valid_status';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'강의 메모', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_RootLecture', @level2type = N'COLUMN', @level2name = N'st_RootLectureMemo';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'야간수당', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_BusinessIncomeItems', @level2type = N'COLUMN', @level2name = N'night_pay';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'관계된테이블의 idx', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_AttachFile', @level2type = N'COLUMN', @level2name = N'it_AttachFileFromIdx';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'원장 수강가능여부', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_Lecture', @level2type = N'COLUMN', @level2name = N'target_director_yn';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'등록확정일자(최초결제일자)', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_branch_customers', @level2type = N'COLUMN', @level2name = N'first_payment_date';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'지점용앱 로그인 가능한 구성원 테이블', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_QnaAccessUser';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'집계일', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'TFacilityDailyCount', @level2type = N'COLUMN', @level2name = N'CDay';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'개별지도 주임튜터 금액', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_BusinessIncomeItems', @level2type = N'COLUMN', @level2name = N'tutoring_pay_lv3';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'수정일', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_Lecture_class', @level2type = N'COLUMN', @level2name = N'mod_date';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'차인지급액', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_BusinessIncomeItems', @level2type = N'COLUMN', @level2name = N'real_amount';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'지점시작일', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'TFacilityDailyCount', @level2type = N'COLUMN', @level2name = N'CDepartStartDate';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'최종확정날짜', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_BusinessIncome', @level2type = N'COLUMN', @level2name = N'fixed_date';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'상담관리종료일', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'TFacilityDailyCount', @level2type = N'COLUMN', @level2name = N'CEndDate';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'유입경로', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_customer_mkt_raw', @level2type = N'COLUMN', @level2name = N'url';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'학년', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'TFacilityDailyCount', @level2type = N'COLUMN', @level2name = N'CGrade';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'받는사람이름', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'DL_MsgLog_All', @level2type = N'COLUMN', @level2name = N'receiver_name';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'삼당관리매출', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'TFacilityDailyCount', @level2type = N'COLUMN', @level2name = N'CCounselSale';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'마케팅결과 피벗테이블 뷰 저장용 테이블', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_MktResultFreeSet';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'A: ANDROID, I: iOS', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_QnaUserInfo', @level2type = N'COLUMN', @level2name = N'st_DeviceOs';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'미등록사유 tbl_CommonCode>UnregReason', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_branch_customers', @level2type = N'COLUMN', @level2name = N'unreg_reason';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'코칭주당횟수', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_hrm_student', @level2type = N'COLUMN', @level2name = N'c_month6';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'출결시간', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'TB_ATT_TEMP', @level2type = N'COLUMN', @level2name = N'ATT_DATE';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'공부공식/공부레벨', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_customer_mkt_raw', @level2type = N'COLUMN', @level2name = N'formular_level';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'강의시작일', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_Lecture', @level2type = N'COLUMN', @level2name = N'lecture_startdate';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'유지기간', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_hrm_student', @level2type = N'COLUMN', @level2name = N'maintain_period';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'교양동호회:오프라인라이브', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_Accrued_credit', @level2type = N'COLUMN', @level2name = N'club_off';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'급여계산종료일', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_BusinessIncome', @level2type = N'COLUMN', @level2name = N'end_date';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = '1:오프라인 강의, 2:온라인 라이브 강의 3:온라인 동영상 강의', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_Lecture', @level2type = N'COLUMN', @level2name = N'lecture_type';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'평가대상자', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_RootFeedback', @level2type = N'COLUMN', @level2name = N'st_StaffCode';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'본문', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_App_notice', @level2type = N'COLUMN', @level2name = N'contents';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'json type', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_hrm_subjective', @level2type = N'COLUMN', @level2name = N'q6_page';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'소속부서', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'TStaff', @level2type = N'COLUMN', @level2name = N'it_DepartmentIdx';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = '튜터링 콤마합계', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_hrm_student', @level2type = N'COLUMN', @level2name = N'result_tutoring_total';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'학년', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_customer_mkt_raw', @level2type = N'COLUMN', @level2name = N'grade';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_customer_mkt_raw', @level2type = N'COLUMN', @level2name = N'channel';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'kakao, sms, lms', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'DL_MsgLog_All', @level2type = N'COLUMN', @level2name = N'msg_type';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'전환일시', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_customer_mkt_raw', @level2type = N'COLUMN', @level2name = N'leave_datetime';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'지점별 사업소득대장기록', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_BusinessIncome';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'내방상담(검사등록일)', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_head_customers', @level2type = N'COLUMN', @level2name = N'vlt_date';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'DC 튜터 금액', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_BusinessIncomeItems', @level2type = N'COLUMN', @level2name = N'dc_pay_lv2';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'교실코드', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'TB_ATT_UNIQUE', @level2type = N'COLUMN', @level2name = N'CLASS_CODE';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Y: 임시저장, N: 공개', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_Lecture', @level2type = N'COLUMN', @level2name = N'temp_save_yn';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'분류 이름', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_QnaCat', @level2type = N'COLUMN', @level2name = N'st_QnaCatName';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'생성일자(sys)', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'TStudentTutoring', @level2type = N'COLUMN', @level2name = N'CInsDate';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'수업설명메모', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_Lecture_class', @level2type = N'COLUMN', @level2name = N'memo';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'학교코드', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_branch_customers', @level2type = N'COLUMN', @level2name = N'school_code';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'지점 일정 테이블', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_appointment';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'PR, CM, TM (원장, 매니저, 교실장 루트코스)', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_RootCourse', @level2type = N'COLUMN', @level2name = N'st_RootCourseMember';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'json type 관리횟수별매출상수', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_hrm_instants', @level2type = N'COLUMN', @level2name = N'manage_inst';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'강의명', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_Lecture', @level2type = N'COLUMN', @level2name = N'title';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'staff id', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_Accrued_credit', @level2type = N'COLUMN', @level2name = N'staff_id';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'작성자', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_RootLecture', @level2type = N'COLUMN', @level2name = N'st_StaffCode';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'총지급액', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_BusinessIncomeItems', @level2type = N'COLUMN', @level2name = N'total_amount';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'정렬순서', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_RootTest', @level2type = N'COLUMN', @level2name = N'it_RootTestSort';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'FC광고_노출수', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_MktResult', @level2type = N'COLUMN', @level2name = N'it_MktResultImpressionCountFcArea';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'유저구분(P:원생,T:직원)', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'TB_ATT_UNIQUE', @level2type = N'COLUMN', @level2name = N'USER_GUBN';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'json type (원장멘트)', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_hrm_subjective', @level2type = N'COLUMN', @level2name = N'q7_page';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'주임매니저 이수필요학점', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_Category', @level2type = N'COLUMN', @level2name = N'cm_2';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'정렬순서', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_Mager', @level2type = N'COLUMN', @level2name = N'sort';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Y:승인, N:미승인', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_Lecture_attend_student', @level2type = N'COLUMN', @level2name = N'confirm_yn';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'누적콤마수', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'TTutorInfo', @level2type = N'COLUMN', @level2name = N'CCommaRest';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'교실장(선임매니저) 이수필요학점', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_Category', @level2type = N'COLUMN', @level2name = N'tm_3';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'부모분류 idx', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_QnaCat', @level2type = N'COLUMN', @level2name = N'it_ParentQnaCatIdx';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'JSON (다중기기 지원)', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_QnaUserInfo', @level2type = N'COLUMN', @level2name = N'st_GcmKey';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'생성일자', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_RootHomework', @level2type = N'COLUMN', @level2name = N'dt_RootHomeworkMake';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'FC광고_클릭수', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_MktResult', @level2type = N'COLUMN', @level2name = N'it_MktResultClickCountFcArea';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'당월진행DC횟수', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_BusinessIncomeItems', @level2type = N'COLUMN', @level2name = N'dc_this_month';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'현재상태 1:진행 2:종료', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_hrm_student', @level2type = N'COLUMN', @level2name = N'cur_status';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'유저SEQ', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'TB_ATT_UNIQUE', @level2type = N'COLUMN', @level2name = N'USER_SEQ';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'주민번호', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'TTutorInfo', @level2type = N'COLUMN', @level2name = N'CSocialSecurityNumber';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'매체이름', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_Media', @level2type = N'COLUMN', @level2name = N'st_MediaName';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'수정일', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_App_notice', @level2type = N'COLUMN', @level2name = N'mod_date';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'매체분류', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_Media', @level2type = N'COLUMN', @level2name = N'st_MediaCategory';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_Media', @level2type = N'COLUMN', @level2name = N'it_MediaOrder';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'(0)미사용 (1)사용', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_Media', @level2type = N'COLUMN', @level2name = N'it_MediaActive';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'근속기간(일수)', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_hrm_staff', @level2type = N'COLUMN', @level2name = N'job_period';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'과제제출 (0)필요x (1)필요함', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_RootLecture', @level2type = N'COLUMN', @level2name = N'it_HomeworkSubmit';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'방문일시', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_customer_mkt_raw', @level2type = N'COLUMN', @level2name = N'visit_datetime';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'평균평점', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_Lecture', @level2type = N'COLUMN', @level2name = N'star_evg';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'교실장 수강가능여부', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_Lecture', @level2type = N'COLUMN', @level2name = N'target_tmanager_yn';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'관리자 메모', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_RootHomework', @level2type = N'COLUMN', @level2name = N'st_RootHomeworkMemo';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Y: 강의종료, N: 미종료', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_Lecture', @level2type = N'COLUMN', @level2name = N'lecture_closed_yn';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'본사에서 지점에 마지막으로 DB를 추가하거나 연결한 날짜', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_branch_customers', @level2type = N'COLUMN', @level2name = N'last_db_date';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'처리자', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_QnaManageLog', @level2type = N'COLUMN', @level2name = N'st_CStaffIdMake';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'프로필 수정일', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_Member_profile', @level2type = N'COLUMN', @level2name = N'mod_date';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'년도', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_DiFcDivide', @level2type = N'COLUMN', @level2name = N'it_DiFcDivideYear';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'동일연락처로 최초 유입된 db의 날짜', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_MktRegStudent', @level2type = N'COLUMN', @level2name = N'first_db_date';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'1월', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_DiFcDivide', @level2type = N'COLUMN', @level2name = N'it_DiFcDivideM1';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'워크벤치 메뉴권한그룹 설정 테이블', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_WbRule';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = '담당강사 profile_idx', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_Lecture_class', @level2type = N'COLUMN', @level2name = N'profile_id';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'에듀플렉스에 등록한 전체 학생 리스트 및 최초등록정보', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_MktRegStudent';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'매체 테이블', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_Media';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'전월까지 누적DC횟수', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_BusinessIncomeItems', @level2type = N'COLUMN', @level2name = N'dc_accrued';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'대상지점코드', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_Qna', @level2type = N'COLUMN', @level2name = N'st_CFacilityCode';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'부원장 이수필요학점', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_Category', @level2type = N'COLUMN', @level2name = N'cm_4';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'체결여부(예. B등록1건당)', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_head_customers', @level2type = N'COLUMN', @level2name = N'connected';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'(트리거)결과코드', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'DL_MsgLog_All', @level2type = N'COLUMN', @level2name = N'return_code';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'메모', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_Accrued_credit', @level2type = N'COLUMN', @level2name = N'memo';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'문제은행에서 복사된 루트코스에 포함된 테스트 테이블', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_RootTest';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'강의대상 CO,CM,TM,PR (공통,매니저,교실장,원장)', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_RootLecture', @level2type = N'COLUMN', @level2name = N'st_RootLectureMember';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'''F'': 상반기, ''S'': 하반기', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_hrm_instants', @level2type = N'COLUMN', @level2name = N'half_year';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'json type', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_hrm_subjective', @level2type = N'COLUMN', @level2name = N'q3_page';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'평가기간이전에 본인이 직접 관리한 기간', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_hrm_student', @level2type = N'COLUMN', @level2name = N'pre_period';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'DC 선임튜터 금액', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_BusinessIncomeItems', @level2type = N'COLUMN', @level2name = N'dc_pay_lv4';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'코칭주당횟수', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_hrm_student', @level2type = N'COLUMN', @level2name = N'c_month5';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'튜터코드', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_BusinessIncomeItems', @level2type = N'COLUMN', @level2name = N'tutor_code';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'강의장소 주소', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_Lecture', @level2type = N'COLUMN', @level2name = N'place_address';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'교실장(수석부원장) 이수필요학점', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_Category', @level2type = N'COLUMN', @level2name = N'tm_5';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'본경력사항', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_Member_profile', @level2type = N'COLUMN', @level2name = N'history';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'숙제정렬', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_RootClass', @level2type = N'COLUMN', @level2name = N'it_RootHomeworkSort';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'등록여부/ 0:상담전 1:등록 2:미등록', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_branch_customers', @level2type = N'COLUMN', @level2name = N'register_status';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'변경후 담당자', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_QnaManageLog', @level2type = N'COLUMN', @level2name = N'st_CStaffIdAfter';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'작성자', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_Qna', @level2type = N'COLUMN', @level2name = N'st_CStaffId';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'메모', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_hrm_student', @level2type = N'COLUMN', @level2name = N'memo';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'수상내역', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_Member_profile', @level2type = N'COLUMN', @level2name = N'prize';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'내용', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'DL_MsgLog_All', @level2type = N'COLUMN', @level2name = N'contents';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'취득학점', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_Lecture_attend_student', @level2type = N'COLUMN', @level2name = N'gain_credit';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'lecture_idx', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_Lecture_file', @level2type = N'COLUMN', @level2name = N'lecture_id';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'학부모연락처', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_branch_customers', @level2type = N'COLUMN', @level2name = N'parent_tel';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'입과자', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_RootCourseMember', @level2type = N'COLUMN', @level2name = N'st_StaffCode';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'수강생평점', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_Lecture_attend_student', @level2type = N'COLUMN', @level2name = N'star';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'배정된 총학점', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_Lecture', @level2type = N'COLUMN', @level2name = N'total_credit';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'(0):응시불가능 (1): 응시가능', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_RootTest', @level2type = N'COLUMN', @level2name = N'it_RootTestOpen';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'과제 (0)제출안함 (1)제출함', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_RootClassRecord', @level2type = N'COLUMN', @level2name = N'it_HomeworkSubmitted';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'입과처리자', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_RootCourseMember', @level2type = N'COLUMN', @level2name = N'st_StaffCodeMake';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'작성자', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_RootHomework', @level2type = N'COLUMN', @level2name = N'st_StaffCode';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'전역광고_광고비', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_MktResult', @level2type = N'COLUMN', @level2name = N'it_MktResultAdAmountAllArea';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'원본파일명', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_AttachFile', @level2type = N'COLUMN', @level2name = N'st_AttachFileName';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'튜터링콤마수', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_hrm_student', @level2type = N'COLUMN', @level2name = N't_month4';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'강의 대표이미지', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_Lecture', @level2type = N'COLUMN', @level2name = N'lecture_image';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'강의제목', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_RootLecture', @level2type = N'COLUMN', @level2name = N'st_RootLectureTitle';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'급여계산시작일', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_BusinessIncome', @level2type = N'COLUMN', @level2name = N'start_date';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'전역광고_클릭수', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_MktResult', @level2type = N'COLUMN', @level2name = N'it_MktResultClickCountAllArea';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'테이블명 혹은 구분자', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_AttachFile', @level2type = N'COLUMN', @level2name = N'st_AttachFileFromType';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'개별지도횟수', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_branch_customers', @level2type = N'COLUMN', @level2name = N'teaching_count';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'선임매니저 이수필요학점', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_Category', @level2type = N'COLUMN', @level2name = N'cm_3';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'학생연락처', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_branch_customers', @level2type = N'COLUMN', @level2name = N'student_tel';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'평가기간이전담당자', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_hrm_student', @level2type = N'COLUMN', @level2name = N'pre_staff_id';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Y:외부멤버이름', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_Member_profile', @level2type = N'COLUMN', @level2name = N'outside_member_name';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'받는번호', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'DL_MsgLog_All', @level2type = N'COLUMN', @level2name = N'receiver_phone';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'매체날짜', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_MktResult', @level2type = N'COLUMN', @level2name = N'dt_MktResult';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'저장되는 파일명', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_AttachFile', @level2type = N'COLUMN', @level2name = N'st_AttachFileNameOnDisk';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'강의장소 이름', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_Lecture', @level2type = N'COLUMN', @level2name = N'place_name';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'처리일시', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_QnaManageLog', @level2type = N'COLUMN', @level2name = N'dt_QnaManageLogMake';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = '', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_etongBranchPref', @level2type = N'COLUMN', @level2name = N'isNotTutor';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'모든 문의자 DB 유입 이력 테이블', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_customer_mkt_raw';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'상담관리:오프라인,라이브', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_Accrued_credit', @level2type = N'COLUMN', @level2name = N'manage_off';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Y:삭제, N:미삭제', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_Lecture_class', @level2type = N'COLUMN', @level2name = N'del_yn';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Y:삭제, N:미삭제', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_branch_customers', @level2type = N'COLUMN', @level2name = N'del_yn';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'New, InProgress, Done', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_Qna', @level2type = N'COLUMN', @level2name = N'st_QnaStatus';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'staff_id', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'DL_MsgLog_All', @level2type = N'COLUMN', @level2name = N'sender_staff_id';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'인사평가 주관적지표 테이블', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_hrm_subjective';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'json type 유지기간별점수', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_hrm_instants', @level2type = N'COLUMN', @level2name = N'maintain_inst';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'교실장(부원장) 이수필요학점', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_Category', @level2type = N'COLUMN', @level2name = N'tm_4';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'DIRECT, BRANCH', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_MktRegStudent', @level2type = N'COLUMN', @level2name = N'branchType';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'코칭주당횟수', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_hrm_student', @level2type = N'COLUMN', @level2name = N'c_month3';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'실결제액 합계', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_head_customers', @level2type = N'COLUMN', @level2name = N'total_paied_amount';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Byte', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_AttachFile', @level2type = N'COLUMN', @level2name = N'de_AttachFileSize';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'제목', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_appointment', @level2type = N'COLUMN', @level2name = N'title';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'프로필 등록일', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_Member_profile', @level2type = N'COLUMN', @level2name = N'reg_date';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'유입DB 체크 유무', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_MktRegStudent', @level2type = N'COLUMN', @level2name = N'InfoChecked';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'0:유효, 1:무효', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_customer_mkt_raw', @level2type = N'COLUMN', @level2name = N'valid_status';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'S3상의 경로', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_AttachFile', @level2type = N'COLUMN', @level2name = N'st_AttachFileDiskPath';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'매체 (사이트도메인)', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_customer_mkt_raw', @level2type = N'COLUMN', @level2name = N'site';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'인사평가 객관적지표 테이블', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_hrm_student';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'입시:온라인', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_Accrued_credit', @level2type = N'COLUMN', @level2name = N'entrance_on';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'추정된 유입DB의 유입날짜', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_MktRegStudent', @level2type = N'COLUMN', @level2name = N'db_date';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'배느실', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_Lecture_attend_student', @level2type = N'COLUMN', @level2name = N'review';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'DI,FC', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_DiFcDivide', @level2type = N'COLUMN', @level2name = N'st_DiFcDivideCategory';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'인지경로1 tbl_CommonCode>BranchRoute', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_branch_customers', @level2type = N'COLUMN', @level2name = N'route1';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'(0)공유정보아님 (1)공유정보', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_Qna', @level2type = N'COLUMN', @level2name = N'it_QnaShare';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'json type 튜터링매니저 평가비중표', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_hrm_instants', @level2type = N'COLUMN', @level2name = N'tutoring_inst';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'동일연락처로 유입된 DB중 등록에 관여한 추정DB의 idx', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_MktRegStudent', @level2type = N'COLUMN', @level2name = N'customer_mkt_raw_idx';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'DC 수습튜터 금액', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_BusinessIncomeItems', @level2type = N'COLUMN', @level2name = N'dc_pay_lv1';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'추정된 유입DB의 매체', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_MktRegStudent', @level2type = N'COLUMN', @level2name = N'mediaName';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'입과당시의 소속지점', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_RootCourseMember', @level2type = N'COLUMN', @level2name = N'st_BranchCodeMake';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'영상재생시간', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_AttachFile', @level2type = N'COLUMN', @level2name = N'do_AttachFilePlayTime';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'VLT검사/성적대', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_customer_mkt_raw', @level2type = N'COLUMN', @level2name = N'grade_level';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'0:유효, 1:무효, 2:판단보류', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_branch_customers', @level2type = N'COLUMN', @level2name = N'valid_status';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'랜딩페이지', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_customer_mkt_raw', @level2type = N'COLUMN', @level2name = N'landing_page';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'일정취소여부 N:정상 Y:취소', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_appointment', @level2type = N'COLUMN', @level2name = N'appointment_cancel_yn';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'계좌정보', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_BusinessIncomeItems', @level2type = N'COLUMN', @level2name = N'bank_account';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'체류시간/초', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_customer_mkt_raw', @level2type = N'COLUMN', @level2name = N'staying_time';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'사용유무', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_Category', @level2type = N'COLUMN', @level2name = N'use_yn';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'직영/FC DB 분계기준 테이블', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_DiFcDivide';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'추정된 유입DB의 광고영역', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_MktRegStudent', @level2type = N'COLUMN', @level2name = N'allDiFc';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'튜터링콤마수', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_hrm_student', @level2type = N'COLUMN', @level2name = N't_month6';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'json type', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_hrm_subjective', @level2type = N'COLUMN', @level2name = N'q1_page';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'코렐노트 (0)제출안함 (1)제출함', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_RootClassRecord', @level2type = N'COLUMN', @level2name = N'it_CornellSubmitted';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'주소', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_BusinessIncomeItems', @level2type = N'COLUMN', @level2name = N'address';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'구글 광고 GCL ID', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_customer_mkt_raw', @level2type = N'COLUMN', @level2name = N'gcl_id';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'지점소통 문의글 테이블', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_Qna';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'전공,관심분야', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_Member_profile', @level2type = N'COLUMN', @level2name = N'major';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'원본파일명', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_Lecture_file', @level2type = N'COLUMN', @level2name = N'filename_o';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'은행계좌번호', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'TTutorInfo', @level2type = N'COLUMN', @level2name = N'CBankAccount';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N' 지점 신규DB등록시 SMS 전송 번호 리스트', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_new_mkt_db_notice';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'(트리거)결과이름', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'DL_MsgLog_All', @level2type = N'COLUMN', @level2name = N'return_name';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'고유번호', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_RootHomework', @level2type = N'COLUMN', @level2name = N'st_RootHomeworkCode';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'개별지도 책임튜터 금액', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_BusinessIncomeItems', @level2type = N'COLUMN', @level2name = N'tutoring_pay_lv5';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'유입분류/ 상담DB, VLT검사DB, 공부공식DB', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_customer_mkt_raw', @level2type = N'COLUMN', @level2name = N'db_source';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'teacher_idx', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_Lecture_attend_teacher', @level2type = N'COLUMN', @level2name = N'teacher_id';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'정렬순서', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_RootClass', @level2type = N'COLUMN', @level2name = N'it_RootClassSort';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = '이탈자료', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_hrm_student', @level2type = N'COLUMN', @level2name = N'result_leave';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'수료기준', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_Lecture', @level2type = N'COLUMN', @level2name = N'passCondition';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_customer_mkt_raw', @level2type = N'COLUMN', @level2name = N'ins_date';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'등록확정-개별지도 혹은 상담관리의 시작일 중 가장 빠른 날짜', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_head_customers', @level2type = N'COLUMN', @level2name = N'reg_start_date';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'시간표 시작날짜', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_TutoringSC_xlsx', @level2type = N'COLUMN', @level2name = N'start_date';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'유입키워드', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_customer_mkt_raw', @level2type = N'COLUMN', @level2name = N'keywoard';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'당월진행콤마수', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_BusinessIncomeItems', @level2type = N'COLUMN', @level2name = N'comma_this_month';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'json type 콤마상수', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_hrm_instants', @level2type = N'COLUMN', @level2name = N'comma_inst';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'정렬순서', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_Category', @level2type = N'COLUMN', @level2name = N'sort';


GO

EXECUTE sp_addextendedproperty @name = N'MS_DiagramPaneCount', @value = 1, @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'VSMSUseage';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'저장파일명', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_Lecture_file', @level2type = N'COLUMN', @level2name = N'filename_s';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'유보이력 ''Y''있음, ''N''없음', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_hrm_student', @level2type = N'COLUMN', @level2name = N'is_deffered_yn';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'참관자를 추가한 사람', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_QnaCatWatchStaff', @level2type = N'COLUMN', @level2name = N'st_CStaffIdMake';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'VLT검사/타입', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_customer_mkt_raw', @level2type = N'COLUMN', @level2name = N'vlt_type';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'상담메모', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_branch_customers', @level2type = N'COLUMN', @level2name = N'meeting_memo';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'시작시간', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_appointment', @level2type = N'COLUMN', @level2name = N'start_date';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'영상길이(초)', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_RootLecture', @level2type = N'COLUMN', @level2name = N'it_RootLectureSec';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'전공구분 mager_idx', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_Lecture', @level2type = N'COLUMN', @level2name = N'lecture_mager_id';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'중복유무/ 과거 30일이내 중복DB가 있으면 ''Y'' 아니면 ''N''', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_customer_mkt_raw', @level2type = N'COLUMN', @level2name = N'is_duplicated';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'지점별 사업소득대장 개별항목', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_BusinessIncomeItems';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'튜터링콤마수', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_hrm_student', @level2type = N'COLUMN', @level2name = N't_month3';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'수정된 날짜', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_TutoringSC_xlsx', @level2type = N'COLUMN', @level2name = N'upd_date';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'적용 시작일', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_MktSales', @level2type = N'COLUMN', @level2name = N'dt_MktSalesStart';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'pc 또는 mo', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_customer_mkt_raw', @level2type = N'COLUMN', @level2name = N'pcmobile';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'강의 고유번호', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_RootLecture', @level2type = N'COLUMN', @level2name = N'st_RootLectureCode';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'M:남자 F:여자', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_branch_customers', @level2type = N'COLUMN', @level2name = N'gender';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'학력', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_Member_profile', @level2type = N'COLUMN', @level2name = N'graduation';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'구성원고유번호', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_Lecture_attend_student', @level2type = N'COLUMN', @level2name = N'staff_id';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'등록1개당 매출총이익', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_MktSales', @level2type = N'COLUMN', @level2name = N'it_MktSalesMarginDi';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'개별지도:오프라인,라이브', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_Accrued_credit', @level2type = N'COLUMN', @level2name = N'teaching_off';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'지점별상세에서 사용하기위한 6개월이탈율(복회미반영)', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'TEightIndicator', @level2type = N'COLUMN', @level2name = N'CDetail_Leave_Rate';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'교실코드', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'TB_ATT_TEMP', @level2type = N'COLUMN', @level2name = N'CLASS_CODE';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'개설일 기준 0: 2022.10 이전, 1: 2020.10 이후', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_RootCourse', @level2type = N'COLUMN', @level2name = N'it_RootCourseVersion';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'제출일', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_RootTestRecord', @level2type = N'COLUMN', @level2name = N'dt_RootTestRecordSubmit';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'최초등록프로그램/ P:프리미엄,C:상담관리, T:개별지도', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_branch_customers', @level2type = N'COLUMN', @level2name = N'first_reg_program';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'지점코드', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'TFacilityDailyCount', @level2type = N'COLUMN', @level2name = N'CDepartCode';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'코칭주당횟수', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_hrm_student', @level2type = N'COLUMN', @level2name = N'c_month2';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'보낸시간', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'DL_MsgLog_All', @level2type = N'COLUMN', @level2name = N'sendtime';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'json type 코칭매니저 평가비중표', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_hrm_instants', @level2type = N'COLUMN', @level2name = N'coaching_inst';


GO

EXECUTE sp_addextendedproperty @name = N'MS_DiagramPaneCount', @value = 1, @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'VW_ATT_ATTEND';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'상담관리시작일', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'TFacilityDailyCount', @level2type = N'COLUMN', @level2name = N'CStartDate';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Y:유료, N:무료', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_Lecture', @level2type = N'COLUMN', @level2name = N'charge_yn';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'과제 제목', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_RootHomework', @level2type = N'COLUMN', @level2name = N'st_RootHomeworkTitle';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'콤마수', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'TFacilityDailyCount', @level2type = N'COLUMN', @level2name = N'CComer';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'마지막으로 연결한 지점코드', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_head_customers', @level2type = N'COLUMN', @level2name = N'last_linked_branch_code';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'json type', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_hrm_subjective', @level2type = N'COLUMN', @level2name = N'q5_page';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'1: 출석시간당 1학점, 2: 출석일수당 1학점', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_Category', @level2type = N'COLUMN', @level2name = N'credit_Type';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'총매출', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'TFacilityDailyCount', @level2type = N'COLUMN', @level2name = N'CTotalSale';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'커리큘럼', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_Lecture', @level2type = N'COLUMN', @level2name = N'curriculum';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'수정날짜', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_BusinessIncome', @level2type = N'COLUMN', @level2name = N'upd_date';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'상담관리:온라인', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_Accrued_credit', @level2type = N'COLUMN', @level2name = N'manage_on';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'상담관리횟수/ 0:상담 1:주1회~ 5:주5회', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_branch_customers', @level2type = N'COLUMN', @level2name = N'counsel_count';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'종료시간', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_appointment', @level2type = N'COLUMN', @level2name = N'end_date';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Y:삭제, N:미삭제', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_Lecture', @level2type = N'COLUMN', @level2name = N'del_yn';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'개별지도매출', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'TFacilityDailyCount', @level2type = N'COLUMN', @level2name = N'CTutoringSale';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'급여일', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_BusinessIncome', @level2type = N'COLUMN', @level2name = N'pay_date';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'주민세', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_BusinessIncomeItems', @level2type = N'COLUMN', @level2name = N'jumin_tax';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'json type 관리종료사유별 감산율', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_hrm_instants', @level2type = N'COLUMN', @level2name = N'end_reason_inst';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'준비수당', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_BusinessIncomeItems', @level2type = N'COLUMN', @level2name = N'tutoring_prepare_pay';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'관리종료사유 -1:미선택 1:전출 2:전환 3:내부- 4:환불 5:종료', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_hrm_student', @level2type = N'COLUMN', @level2name = N'end_reason';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'파일확장자', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_Lecture_file', @level2type = N'COLUMN', @level2name = N'file_ext';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'자격증,전문분야', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_Member_profile', @level2type = N'COLUMN', @level2name = N'certificate';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'변경전 담당자', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_QnaManageLog', @level2type = N'COLUMN', @level2name = N'st_CStaffIdBefore';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'개별지도 튜터 금액', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_BusinessIncomeItems', @level2type = N'COLUMN', @level2name = N'tutoring_pay_lv2';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'NEMS내 등록 학생코드', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_branch_customers', @level2type = N'COLUMN', @level2name = N'student_code';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'생성일자(sys)', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'TStudentCounsel', @level2type = N'COLUMN', @level2name = N'CInsDate';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'코렐노트제출 (0)필요x (1)필요함', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_RootLecture', @level2type = N'COLUMN', @level2name = N'it_CornellSubmit';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'매니저 수강가능여부', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_Lecture', @level2type = N'COLUMN', @level2name = N'target_cmanager_yn';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'보내는사람이름', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'DL_MsgLog_All', @level2type = N'COLUMN', @level2name = N'sender_name';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'숙제 기한', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_RootClass', @level2type = N'COLUMN', @level2name = N'dt_HomeworkLimitDate';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'(1):일반 (2):올홈', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_branch_customers', @level2type = N'COLUMN', @level2name = N'category';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'본문', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_Qna', @level2type = N'COLUMN', @level2name = N'st_QnaContent';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'총평균점수', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_hrm_subjective', @level2type = N'COLUMN', @level2name = N'q6_total_everage';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'평가방식 1: 실평가대상자, 2: 가평가대상자', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_hrm_staff', @level2type = N'COLUMN', @level2name = N'valuation_type';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'생성일', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_RootTestRecord', @level2type = N'COLUMN', @level2name = N'dt_RootTestRecordMake';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = '고유번호', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'TTutorInfo', @level2type = N'COLUMN', @level2name = N'CTutorSeq';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Y:삭제, N:삭제아님', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_App_notice', @level2type = N'COLUMN', @level2name = N'del_yn';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'강의종류 LIVE, VIDEO', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_RootLecture', @level2type = N'COLUMN', @level2name = N'st_RootLectureKind';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Y:삭제, N:미삭제', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_appointment', @level2type = N'COLUMN', @level2name = N'del_yn';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'M:남자 F:여자', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_head_customers', @level2type = N'COLUMN', @level2name = N'gender';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'직급코드', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_hrm_staff', @level2type = N'COLUMN', @level2name = N'level_code';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'수신거부', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_head_customers', @level2type = N'COLUMN', @level2name = N'donot_call_yn';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'모집제한인원수', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_Lecture', @level2type = N'COLUMN', @level2name = N'limit_student';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'학습법:오프라인,라이브', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_Accrued_credit', @level2type = N'COLUMN', @level2name = N'learning_off';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = '병행 콤마합계', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_hrm_student', @level2type = N'COLUMN', @level2name = N'result_side_total';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'튜터링콤마수 -1:없음', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_hrm_student', @level2type = N'COLUMN', @level2name = N't_month1';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'마지막 수정자', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_RootNotice', @level2type = N'COLUMN', @level2name = N'st_StaffCodeLast';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'lecture_idx', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_Lecture_attend_teacher', @level2type = N'COLUMN', @level2name = N'lecture_id';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'지점에 DB가 최초로 등록된 날짜', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_branch_customers', @level2type = N'COLUMN', @level2name = N'db_date';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'지점코드', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'DL_MsgLog_All', @level2type = N'COLUMN', @level2name = N'branch_id';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'루트코스 입과생 명단', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_RootCourseMember';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'기타', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_BusinessIncomeItems', @level2type = N'COLUMN', @level2name = N'etc_pay';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'등록구분 C:코칭, T:튜터링', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_hrm_student', @level2type = N'COLUMN', @level2name = N'reg_type';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'누적DC갯수', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'TTutorInfo', @level2type = N'COLUMN', @level2name = N'CDCRest';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'강의 테이블', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_Lecture';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'wb: 워크벤치, qa: 큐브어낼리틱스', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_App_notice', @level2type = N'COLUMN', @level2name = N'category';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'lecture_idx', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_Lecture_attend_student', @level2type = N'COLUMN', @level2name = N'lecture_id';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'주관적지표 최종등급 S, A, B+, B-, C, F', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_hrm_subjective', @level2type = N'COLUMN', @level2name = N'grade';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'학년', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tbl_branch_customers', @level2type = N'COLUMN', @level2name = N'grade';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'타이틀', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_Qna', @level2type = N'COLUMN', @level2name = N'st_QnaTitle';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'수석부원장 이수필요학점', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_Category', @level2type = N'COLUMN', @level2name = N'cm_5';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'문의/분류 담당자 변경 기록', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tb_QnaManageLog';


GO

EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'교육이수내역', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'otbl_Member_profile', @level2type = N'COLUMN', @level2name = N'education';


GO

